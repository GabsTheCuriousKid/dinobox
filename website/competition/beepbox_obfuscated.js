(function(a, b) {
    const jC = a0b
      , c = a();
    while (!![]) {
        try {
            const d = -parseInt(jC(0x453)) / 0x1 + parseInt(jC(0x3dd)) / 0x2 * (parseInt(jC(0x32f)) / 0x3) + -parseInt(jC(0x676)) / 0x4 * (-parseInt(jC(0x475)) / 0x5) + -parseInt(jC(0x304)) / 0x6 + -parseInt(jC(0x1f6)) / 0x7 + parseInt(jC(0x663)) / 0x8 + -parseInt(jC(0x7e9)) / 0x9;
            if (d === b)
                break;
            else
                c['push'](c['shift']());
        } catch (e) {
            c['push'](c['shift']());
        }
    }
}(a0a, 0x5fb0a));
function a0a() {
    const uX = ['fromJsonObject', 'trackSelectBox', 'harmonica', 'test', 'getSamplesPerTick', 'toFixed', 'continuesLastPattern', 'px;\x20height:\x2020px;\x20flex-shrink:\x200;', '--text-color-dim', 'echoShelfB1', '\u3000Choose\x20Layout...', 'pianoAtC', 'reverbRange', 'var(--text-selection)', 'tonesAddedInThisTick', 'ctrlKey', 'px;\x20margin:\x202px;', 'touchmove', 'sustainFilterPrevOutput2', 'midimessage', 'order', 'specialIntervalExpressionMult', 'preferLowerLatency', 'ChangePreset', 'You\x20can\x20also\x20enable\x20a\x20\x22Note\x20Filter\x22\x20as\x20an\x20effect.\x20EQ\x20and\x20note\x20filters\x20are\x20mostly\x20the\x20same,\x20but\x20have\x20different\x20purposes.\x20EQ\x20filters\x20are\x20for\x20overall\x20adjustments,\x20whereas\x20note\x20filters\x20are\x20for\x20dynamic\x20control\x20and\x20can\x20be\x20moved\x20with\x20envelopes.\x20Note\x20filters\x20also\x20change\x20how\x20the\x20distortion\x20effect\x20sounds.', 'getFadeInSeconds', 'blur', 'supersaw\x20lead', 'Random\x20Preset\x20(R)', 'pianoTransposingC', 'keyCode', 'primaryChannel', 'createObjectURL', 'catch', 'mouse', 'scale', '3⟲\u20034⟲', 'keys', 'width:\x20250px;', 'twang\x203', 'vibrato', 'channels', 'carrierCount', 'imag', 'echoSustain', 'This\x20setting\x20limits\x20the\x20available\x20pitches\x20for\x20adding\x20notes.\x20You\x20may\x20think\x20that\x20there\x27s\x20no\x20point\x20in\x20limiting\x20your\x20choices,\x20but\x20the\x20set\x20of\x20pitches\x20you\x20use\x20has\x20a\x20strong\x20influence\x20on\x20the\x20mood\x20and\x20feel\x20of\x20your\x20song,\x20and\x20these\x20scales\x20serve\x20as\x20guides\x20to\x20help\x20you\x20choose\x20appropriate\x20pitches.\x20Don\x27t\x20worry,\x20you\x20can\x20change\x20the\x20scale\x20at\x20any\x20time,\x20so\x20you\x27re\x20not\x20locked\x20into\x20it.\x20Try\x20making\x20little\x20melodies\x20using\x20all\x20the\x20available\x20pitches\x20of\x20a\x20scale\x20to\x20get\x20a\x20sense\x20for\x20how\x20it\x20sounds.', 'tuba', 'clearEnvelopes', 'manual', 'PWM', 'false', 'display:\x20none;', 'This\x20setting\x20controls\x20how\x20long\x20it\x20takes\x20for\x20notes\x20to\x20reach\x20full\x20volume\x20at\x20the\x20beginning\x20or\x20decay\x20to\x20silence\x20at\x20the\x20end.', ';\x0a}\x0a\x0a.beepboxEditor\x20.layout-option\x20input\x20{\x0a\x09display:\x20none;\x0a}\x0a\x0a.beepboxEditor\x20.layout-option\x20input:checked\x20~\x20*\x20{\x0a\x09color:\x20', 'removeItem', 'currentPatternIsDirty', 'width:\x202em;', 'eqFilter', 'sessionStorage', 'noteFilterAllFreqs', 'volume', 'tagName', 'pickMainInterval', '1⟲\x202⟲\x203⟲\x204⟲', 'rounded', 'nextDigit', 'playButton', 'reverbShelfA1', 'bowed', '1←3\u20032←4', 'writePitchInterval', 'var(--pitch9-primary-note)', 'reverbShelfSample0', 'pitchesAreTemporary', 'pitch7', 'type', 'encodeBase64', 'distortionFractionalInput2', 'atan2', 'echoDelayRange', 'prevSlideRatioEnd', 'square\x20lead', 'metronomeSamplesRemaining', 'concat', '1\u20032←(3\u20024)', 'KeyV', 'sineWave', 'This\x20supersaw\x20instrument\x20includes\x20an\x20option\x20to\x20change\x20the\x20shape\x20of\x20the\x20waves\x20from\x20sawtooth\x20waves\x20to\x20pulse\x20waves.\x20Use\x20this\x20setting\x20to\x20morph\x20between\x20the\x20two\x20shapes.', 'echoDelayOffsetRatio', 'Simultaneous\x20instruments', ';\x0a}\x0a.beepboxEditor\x20input[type=range]::-moz-range-thumb\x20{\x0a\x09height:\x20var(--button-size);\x0a\x09width:\x206px;\x0a\x09border-radius:\x203px;\x0a\x09border:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09cursor:\x20pointer;\x0a}\x0a.beepboxEditor\x20input[type=range]::-ms-track\x20{\x0a\x09width:\x20100%;\x0a\x09height:\x206px;\x0a\x09cursor:\x20pointer;\x0a\x09background:\x20', 'instrumentTypeHasSpecialInterval', 'notifier', 'ticksToFadeOutSetting', 'getInstrumentSynthFunction', '1053765LOkldP', 'decay\x202', 'Change.doForwards():\x20Override\x20me.', 'prevNotePitchIndex', 'prefs', 'forceContinueAtEnd', 'themes', '\x0a\x09\x09\x09\x09const\x20data\x20=\x20synth.tempMonoInstrumentSampleBuffer;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20pickedString#\x20=\x20tone.pickedStrings[#];\x0a\x09\x09\x09\x09let\x20allPassSample#\x20=\x20+pickedString#.allPassSample;\x0a\x09\x09\x09\x09let\x20allPassPrevInput#\x20=\x20+pickedString#.allPassPrevInput;\x0a\x09\x09\x09\x09let\x20sustainFilterSample#\x20=\x20+pickedString#.sustainFilterSample;\x0a\x09\x09\x09\x09let\x20sustainFilterPrevOutput2#\x20=\x20+pickedString#.sustainFilterPrevOutput2;\x0a\x09\x09\x09\x09let\x20sustainFilterPrevInput1#\x20=\x20+pickedString#.sustainFilterPrevInput1;\x0a\x09\x09\x09\x09let\x20sustainFilterPrevInput2#\x20=\x20+pickedString#.sustainFilterPrevInput2;\x0a\x09\x09\x09\x09let\x20fractionalDelaySample#\x20=\x20+pickedString#.fractionalDelaySample;\x0a\x09\x09\x09\x09const\x20delayLine#\x20=\x20pickedString#.delayLine;\x0a\x09\x09\x09\x09const\x20delayBufferMask#\x20=\x20(delayLine#.length\x20-\x201)\x20>>\x200;\x0a\x09\x09\x09\x09let\x20delayIndex#\x20=\x20pickedString#.delayIndex|0;\x0a\x09\x09\x09\x09delayIndex#\x20=\x20(delayIndex#\x20&\x20delayBufferMask#)\x20+\x20delayLine#.length;\x0a\x09\x09\x09\x09let\x20delayLength#\x20=\x20+pickedString#.prevDelayLength;\x0a\x09\x09\x09\x09const\x20delayLengthDelta#\x20=\x20+pickedString#.delayLengthDelta;\x0a\x09\x09\x09\x09let\x20allPassG#\x20=\x20+pickedString#.allPassG;\x0a\x09\x09\x09\x09let\x20sustainFilterA1#\x20=\x20+pickedString#.sustainFilterA1;\x0a\x09\x09\x09\x09let\x20sustainFilterA2#\x20=\x20+pickedString#.sustainFilterA2;\x0a\x09\x09\x09\x09let\x20sustainFilterB0#\x20=\x20+pickedString#.sustainFilterB0;\x0a\x09\x09\x09\x09let\x20sustainFilterB1#\x20=\x20+pickedString#.sustainFilterB1;\x0a\x09\x09\x09\x09let\x20sustainFilterB2#\x20=\x20+pickedString#.sustainFilterB2;\x0a\x09\x09\x09\x09const\x20allPassGDelta#\x20=\x20+pickedString#.allPassGDelta;\x0a\x09\x09\x09\x09const\x20sustainFilterA1Delta#\x20=\x20+pickedString#.sustainFilterA1Delta;\x0a\x09\x09\x09\x09const\x20sustainFilterA2Delta#\x20=\x20+pickedString#.sustainFilterA2Delta;\x0a\x09\x09\x09\x09const\x20sustainFilterB0Delta#\x20=\x20+pickedString#.sustainFilterB0Delta;\x0a\x09\x09\x09\x09const\x20sustainFilterB1Delta#\x20=\x20+pickedString#.sustainFilterB1Delta;\x0a\x09\x09\x09\x09const\x20sustainFilterB2Delta#\x20=\x20+pickedString#.sustainFilterB2Delta;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20expression\x20=\x20+tone.expression;\x0a\x09\x09\x09\x09const\x20expressionDelta\x20=\x20+tone.expressionDelta;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20unisonSign\x20=\x20tone.specialIntervalExpressionMult\x20*\x20instrumentState.unison.sign;\x0a\x09\x09\x09\x09const\x20delayResetOffset#\x20=\x20pickedString#.delayResetOffset|0;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20filters\x20=\x20tone.noteFilters;\x0a\x09\x09\x09\x09const\x20filterCount\x20=\x20tone.noteFilterCount|0;\x0a\x09\x09\x09\x09let\x20initialFilterInput1\x20=\x20+tone.initialNoteFilterInput1;\x0a\x09\x09\x09\x09let\x20initialFilterInput2\x20=\x20+tone.initialNoteFilterInput2;\x0a\x09\x09\x09\x09const\x20applyFilters\x20=\x20Synth.applyFilters;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20stopIndex\x20=\x20bufferIndex\x20+\x20runLength;\x0a\x09\x09\x09\x09for\x20(let\x20sampleIndex\x20=\x20bufferIndex;\x20sampleIndex\x20<\x20stopIndex;\x20sampleIndex++)\x20{\x0a\x09\x09\x09\x09\x09const\x20targetSampleTime#\x20=\x20delayIndex#\x20-\x20delayLength#;\x0a\x09\x09\x09\x09\x09const\x20lowerIndex#\x20=\x20(targetSampleTime#\x20+\x200.125)\x20|\x200;\x20//\x20Offset\x20to\x20improve\x20stability\x20of\x20all-pass\x20filter.\x0a\x09\x09\x09\x09\x09const\x20upperIndex#\x20=\x20lowerIndex#\x20+\x201;\x0a\x09\x09\x09\x09\x09const\x20fractionalDelay#\x20=\x20upperIndex#\x20-\x20targetSampleTime#;\x0a\x09\x09\x09\x09\x09const\x20fractionalDelayG#\x20=\x20(1.0\x20-\x20fractionalDelay#)\x20/\x20(1.0\x20+\x20fractionalDelay#);\x20//\x20Inlined\x20version\x20of\x20FilterCoefficients.prototype.allPass1stOrderFractionalDelay\x0a\x09\x09\x09\x09\x09const\x20prevInput#\x20=\x20delayLine#[lowerIndex#\x20&\x20delayBufferMask#];\x0a\x09\x09\x09\x09\x09const\x20input#\x20=\x20delayLine#[upperIndex#\x20&\x20delayBufferMask#];\x0a\x09\x09\x09\x09\x09fractionalDelaySample#\x20=\x20fractionalDelayG#\x20*\x20input#\x20+\x20prevInput#\x20-\x20fractionalDelayG#\x20*\x20fractionalDelaySample#;\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09allPassSample#\x20=\x20fractionalDelaySample#\x20*\x20allPassG#\x20+\x20allPassPrevInput#\x20-\x20allPassG#\x20*\x20allPassSample#;\x0a\x09\x09\x09\x09\x09allPassPrevInput#\x20=\x20fractionalDelaySample#;\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09const\x20sustainFilterPrevOutput1#\x20=\x20sustainFilterSample#;\x0a\x09\x09\x09\x09\x09sustainFilterSample#\x20=\x20sustainFilterB0#\x20*\x20allPassSample#\x20+\x20sustainFilterB1#\x20*\x20sustainFilterPrevInput1#\x20+\x20sustainFilterB2#\x20*\x20sustainFilterPrevInput2#\x20-\x20sustainFilterA1#\x20*\x20sustainFilterSample#\x20-\x20sustainFilterA2#\x20*\x20sustainFilterPrevOutput2#;\x0a\x09\x09\x09\x09\x09sustainFilterPrevOutput2#\x20=\x20sustainFilterPrevOutput1#;\x0a\x09\x09\x09\x09\x09sustainFilterPrevInput2#\x20=\x20sustainFilterPrevInput1#;\x0a\x09\x09\x09\x09\x09sustainFilterPrevInput1#\x20=\x20allPassSample#;\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09delayLine#[delayIndex#\x20&\x20delayBufferMask#]\x20+=\x20sustainFilterSample#;\x0a\x09\x09\x09\x09\x09delayLine#[(delayIndex#\x20+\x20delayResetOffset#)\x20&\x20delayBufferMask#]\x20=\x200.0;\x0a\x09\x09\x09\x09\x09delayIndex#++;\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09const\x20inputSample\x20=\x20(', 'autofocus', 'custom\x20interval', 'margin:\x202px\x200;\x20margin-left:\x202em;\x20display:\x20flex;\x20align-items:\x20center;', 'output1', 'importNode', 'getVisibleOctaveCount', 'Midi\x20control\x20event\x20value\x20out\x20of\x20range:\x20', 'magnitude', 'panningOffsetDeltaL', 'children', 'Unrecognized\x20drum\x20index:\x20', 'prevSlideEnd', 'sawtooth', 'sustainFilterB0', 'Unknown\x20instrument\x20type\x20in\x20computeTone.', 'pitchShiftCenter', '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09const\x20echoTapStartIndex\x20=\x20(echoDelayPos\x20+\x20echoDelayOffsetStart)\x20&\x20echoMask;\x0a\x09\x09\x09\x09\x09const\x20echoTapEndIndex\x20\x20\x20=\x20(echoDelayPos\x20+\x20echoDelayOffsetEnd\x20\x20)\x20&\x20echoMask;\x0a\x09\x09\x09\x09\x09const\x20echoTapStartL\x20=\x20echoDelayLineL[echoTapStartIndex];\x0a\x09\x09\x09\x09\x09const\x20echoTapEndL\x20\x20\x20=\x20echoDelayLineL[echoTapEndIndex];\x0a\x09\x09\x09\x09\x09const\x20echoTapStartR\x20=\x20echoDelayLineR[echoTapStartIndex];\x0a\x09\x09\x09\x09\x09const\x20echoTapEndR\x20\x20\x20=\x20echoDelayLineR[echoTapEndIndex];\x0a\x09\x09\x09\x09\x09const\x20echoTapL\x20=\x20(echoTapStartL\x20+\x20(echoTapEndL\x20-\x20echoTapStartL)\x20*\x20echoDelayOffsetRatio)\x20*\x20echoMult;\x0a\x09\x09\x09\x09\x09const\x20echoTapR\x20=\x20(echoTapStartR\x20+\x20(echoTapEndR\x20-\x20echoTapStartR)\x20*\x20echoDelayOffsetRatio)\x20*\x20echoMult;\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09echoShelfSampleL\x20=\x20echoShelfB0\x20*\x20echoTapL\x20+\x20echoShelfB1\x20*\x20echoShelfPrevInputL\x20-\x20echoShelfA1\x20*\x20echoShelfSampleL;\x0a\x09\x09\x09\x09\x09echoShelfSampleR\x20=\x20echoShelfB0\x20*\x20echoTapR\x20+\x20echoShelfB1\x20*\x20echoShelfPrevInputR\x20-\x20echoShelfA1\x20*\x20echoShelfSampleR;\x0a\x09\x09\x09\x09\x09echoShelfPrevInputL\x20=\x20echoTapL;\x0a\x09\x09\x09\x09\x09echoShelfPrevInputR\x20=\x20echoTapR;\x0a\x09\x09\x09\x09\x09sampleL\x20+=\x20echoShelfSampleL;\x0a\x09\x09\x09\x09\x09sampleR\x20+=\x20echoShelfSampleR;\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09echoDelayLineL[echoDelayPos]\x20=\x20sampleL\x20*\x20delayInputMult;\x0a\x09\x09\x09\x09\x09echoDelayLineR[echoDelayPos]\x20=\x20sampleR\x20*\x20delayInputMult;\x0a\x09\x09\x09\x09\x09echoDelayPos\x20=\x20(echoDelayPos\x20+\x201)\x20&\x20echoMask;\x0a\x09\x09\x09\x09\x09echoDelayOffsetRatio\x20+=\x20echoDelayOffsetRatioDelta;\x0a\x09\x09\x09\x09\x09echoMult\x20+=\x20echoMultDelta;', 'newStart', 'algorithm', 'detuneMax', 'addedEnvelope', 'replaceChild', 'eqFilterVolume', 'shimmer', 'freshlyAllocated', 'chords', 'nextSlideStart', 'spectrumWave', 'white', 'compatibleInstruments', 'barCountMax', 'editor-controls', 'settings-area\x20noSelection', 'Guitar\x20Presets', 'bitcrusherFoldLevelScale', 'pinCount', 'scroll', 'alwaysShowSettings', ';\x0a\x09}\x0a\x09.beepboxEditor\x20.trackAndMuteContainer\x20{\x0a\x09\x09width:\x20512px;\x0a\x09}\x0a\x09.beepboxEditor\x20.play-pause-area\x20{\x0a\x09\x09display:\x20flex;\x0a\x09\x09flex-direction:\x20column;\x0a\x09}\x0a\x09.beepboxEditor\x20.playback-bar-controls\x20{\x0a\x09\x09margin:\x202px\x200;\x0a\x09}\x0a\x09.beepboxEditor\x20.playback-volume-controls\x20{\x0a\x09\x09display:\x20flex;\x0a\x09\x09flex-direction:\x20row;\x0a\x09\x09margin:\x202px\x200;\x0a\x09\x09align-items:\x20center;\x0a\x09}\x0a\x09.beepboxEditor\x20.settings-area\x20{\x0a\x09\x09width:\x20var(--settings-area-width);\x0a\x09}\x0a}\x0a\x0a/*\x20narrow\x20screen\x20*/\x0a@media\x20(max-width:\x20710px)\x20{\x0a\x09.beepboxEditor\x20{\x0a\x09\x09grid-template-columns:\x20minmax(0,\x201fr);\x0a\x09\x09grid-template-rows:\x20min-content\x206px\x20min-content\x20min-content;\x0a\x09\x09grid-template-areas:\x20\x22pattern-area\x22\x20\x22.\x22\x20\x22track-area\x22\x20\x22settings-area\x22;\x0a\x09\x09grid-row-gap:\x200;\x0a\x09}\x0a\x09.beepboxEditor\x20.settings-area\x20{\x0a\x09\x09grid-template-columns:\x20minmax(0,\x201fr)\x20minmax(0,\x201fr);\x0a\x09\x09grid-template-rows:\x20min-content\x20min-content\x201fr\x20min-content;\x0a\x09\x09grid-template-areas:\x0a\x09\x09\x09\x22play-pause-area\x20play-pause-area\x22\x0a\x09\x09\x09\x22menu-area\x20instrument-settings-area\x22\x0a\x09\x09\x09\x22song-settings-area\x20instrument-settings-area\x22\x0a\x09\x09\x09\x22version-area\x20version-area\x22;\x0a\x09\x09grid-column-gap:\x208px;\x0a\x09\x09margin:\x200\x204px;\x0a\x09}\x0a\x09.beepboxEditor:focus-within\x20{\x0a\x09\x09outline:\x20none;\x0a\x09}\x0a\x09.beepboxEditor\x20.pattern-area\x20{\x0a\x09\x09max-height:\x2075vh;\x0a\x09}\x0a\x09.beepboxEditor\x20.trackAndMuteContainer\x20{\x0a\x09\x09overflow-x:\x20auto;\x0a\x09}\x0a\x09.beepboxEditor\x20.barScrollBar\x20{\x0a\x09\x09display:\x20none;\x0a\x09}\x0a\x09.beepboxEditor\x20.play-pause-area\x20{\x0a\x09\x09display:\x20grid;\x0a\x09\x09grid-template-columns:\x20minmax(0,\x201fr)\x20minmax(0,\x201fr);\x0a\x09\x09grid-column-gap:\x208px;\x0a\x09\x09margin:\x202px\x200;\x0a\x09}\x0a\x09.beepboxEditor\x20.playback-bar-controls\x20{\x0a\x09\x09flex-grow:\x201;\x0a\x09}\x0a\x09.beepboxEditor\x20.playback-volume-controls\x20{\x0a\x09\x09display:\x20flex;\x0a\x09\x09flex-direction:\x20row;\x0a\x09\x09align-items:\x20center;\x0a\x09\x09flex-grow:\x201;\x0a\x09}\x0a}\x0a\x0a', '\x200\x20L\x20', 'Digit7', 'bars', 'brightness', 'replace', 'text-align:\x20left;', 'margin:\x200;\x20width:\x204em;\x20flex-grow:\x201;\x20vertical-align:\x20middle;', 'size', 'prompt\x20noSelection\x20recordingSetupPrompt', 'style', 'userSpaceOnUse', 'noteFilter', '.html', 'setUint16', 'operatorAmplitudeMax', 'Zoom\x20In', 'cos', 'chorusDelayBufferSize', '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09bitcrusherPhase\x20+=\x20bitcrusherPhaseDelta;\x0a\x09\x09\x09\x09\x09if\x20(bitcrusherPhase\x20<\x201.0)\x20{\x0a\x09\x09\x09\x09\x09\x09bitcrusherPrevInput\x20=\x20sample;\x0a\x09\x09\x09\x09\x09\x09sample\x20=\x20bitcrusherCurrentOutput;\x0a\x09\x09\x09\x09\x09}\x20else\x20{\x0a\x09\x09\x09\x09\x09\x09bitcrusherPhase\x20=\x20bitcrusherPhase\x20%\x201.0;\x0a\x09\x09\x09\x09\x09\x09const\x20ratio\x20=\x20bitcrusherPhase\x20/\x20bitcrusherPhaseDelta;\x0a\x09\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09\x09const\x20lerpedInput\x20=\x20sample\x20+\x20(bitcrusherPrevInput\x20-\x20sample)\x20*\x20ratio;\x0a\x09\x09\x09\x09\x09\x09bitcrusherPrevInput\x20=\x20sample;\x0a\x09\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09\x09const\x20bitcrusherWrapLevel\x20=\x20bitcrusherFoldLevel\x20*\x204.0;\x0a\x09\x09\x09\x09\x09\x09const\x20wrappedSample\x20=\x20(((lerpedInput\x20+\x20bitcrusherFoldLevel)\x20%\x20bitcrusherWrapLevel)\x20+\x20bitcrusherWrapLevel)\x20%\x20bitcrusherWrapLevel;\x0a\x09\x09\x09\x09\x09\x09const\x20foldedSample\x20=\x20bitcrusherFoldLevel\x20-\x20Math.abs(bitcrusherFoldLevel\x20*\x202.0\x20-\x20wrappedSample);\x0a\x09\x09\x09\x09\x09\x09const\x20scaledSample\x20=\x20foldedSample\x20/\x20bitcrusherScale;\x0a\x09\x09\x09\x09\x09\x09const\x20oldValue\x20=\x20bitcrusherCurrentOutput;\x0a\x09\x09\x09\x09\x09\x09const\x20newValue\x20=\x20(((scaledSample\x20>\x200\x20?\x20scaledSample\x20+\x201\x20:\x20scaledSample)|0)-.5)\x20*\x20bitcrusherScale;\x0a\x09\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09\x09sample\x20=\x20oldValue\x20+\x20(newValue\x20-\x20oldValue)\x20*\x20ratio;\x0a\x09\x09\x09\x09\x09\x09bitcrusherCurrentOutput\x20=\x20newValue;\x0a\x09\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x09bitcrusherPhaseDelta\x20*=\x20bitcrusherPhaseDeltaScale;\x0a\x09\x09\x09\x09\x09bitcrusherScale\x20*=\x20bitcrusherScaleScale;\x0a\x09\x09\x09\x09\x09bitcrusherFoldLevel\x20*=\x20bitcrusherFoldLevelScale;', 'removePerformedPitch', 'mouseout', 'simultaneous', 'pickedStringDispersionFreqScale', 'phaseDeltaScales', 'deactivateAfterThisTick', 'lastInterval', 'rect', 'note', 'Unhandled\x20instrument\x20type\x20in\x20getDrumsetWave', 'forceRhythm', '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09if\x20(Math.abs(bitcrusherPrevInput)\x20<\x20epsilon)\x20bitcrusherPrevInput\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(Math.abs(bitcrusherCurrentOutput)\x20<\x20epsilon)\x20bitcrusherCurrentOutput\x20=\x200.0;\x0a\x09\x09\x09\x09instrumentState.bitcrusherPrevInput\x20=\x20bitcrusherPrevInput;\x0a\x09\x09\x09\x09instrumentState.bitcrusherCurrentOutput\x20=\x20bitcrusherCurrentOutput;\x0a\x09\x09\x09\x09instrumentState.bitcrusherPhase\x20=\x20bitcrusherPhase;\x0a\x09\x09\x09\x09instrumentState.bitcrusherPhaseDelta\x20=\x20bitcrusherPhaseDelta;\x0a\x09\x09\x09\x09instrumentState.bitcrusherScale\x20=\x20bitcrusherScale;\x0a\x09\x09\x09\x09instrumentState.bitcrusherFoldLevel\x20=\x20bitcrusherFoldLevel;', 'Paste\x20Instrument\x20(⇧V)', 'writeMidiVariableLength', 'indices', 'display:\x20flex;', 'History\x20state\x20is\x20null.', 'byteOffset', 'sampleRate', 'export', 'transition', 'instrumentTypeNames', 'selectContainer', 'midiSubharmonicOctaves', 'Allow\x20Adding\x20Notes\x20Not\x20in\x20Scale', 'filterEditor', 'ColorConfig', 'chorusDelayLineR', 'initialSize', 'solo\x20tenor', 'valueToPreset', 'reverbShelfSample3', 'fadeOut', 'instruments', 'detune', '1←2←(3\u20024)', 'amplitudeSign', 'KeyJ', 'var(--pitch3-secondary-note)', 'easy\x20:)', 'volumeRange', '//\x20CARRIER\x20OUTPUTS', 'allPass1stOrderInvertPhaseAbove', 'vibrato\x20range', 'songRecovery', 'boxSelectionActive', 'eqFilterCount', ';\x0a}\x0a.obtrusive-scrollbars::-webkit-scrollbar-thumb,\x20.obtrusive-scrollbars\x20*::-webkit-scrollbar-thumb\x20{\x0a\x09background-color:\x20', 'var(--noise1-primary-note)', ';\x0a\x09color:\x20var(--text-color-dim);\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20.deactivated.selected-instrument\x20{\x0a\x09background:\x20var(--background-color-dim);\x0a\x09color:\x20', 'BUTTON', 'b1Delta', 'easy\x20:(', 'Supersaw\x20Shape', 'strum', 'KeyX', 'envelopeCount', 'Pad\x20Presets', 'double\x20saw', 'Paste', '\x20A\x20', 'var(--pitch1-primary-note)', '\x0a\x0a/*\x20Note:\x20\x22#\x22\x20symbols\x20need\x20to\x20be\x20encoded\x20as\x20\x22%23\x22\x20in\x20SVG\x20data\x20urls,\x20otherwise\x20they\x20are\x20interpreted\x20as\x20fragment\x20identifiers!\x20*/\x0a:root\x20{\x0a\x09--button-size:\x2026px;\x0a\x09--settings-area-width:\x20192px;\x0a\x09--play-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><path\x20d=\x22M\x20-5\x20-8\x20L\x20-5\x208\x20L\x208\x200\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--pause-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><rect\x20x=\x22-5\x22\x20y=\x22-7\x22\x20width=\x224\x22\x20height=\x2214\x22\x20fill=\x22gray\x22/><rect\x20x=\x223\x22\x20y=\x22-7\x22\x20width=\x224\x22\x20height=\x2214\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--record-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><circle\x20cx=\x220\x22\x20cy=\x220\x22\x20r=\x226\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--stop-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><rect\x20x=\x22-6\x22\x20y=\x22-6\x22\x20width=\x2212\x22\x20height=\x2212\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--prev-bar-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><rect\x20x=\x22-6\x22\x20y=\x22-6\x22\x20width=\x222\x22\x20height=\x2212\x22\x20fill=\x22gray\x22/><path\x20d=\x22M\x206\x20-6\x20L\x206\x206\x20L\x20-3\x200\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--next-bar-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><rect\x20x=\x224\x22\x20y=\x22-6\x22\x20width=\x222\x22\x20height=\x2212\x22\x20fill=\x22gray\x22/><path\x20d=\x22M\x20-6\x20-6\x20L\x20-6\x206\x20L\x203\x200\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--volume-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x220\x200\x2026\x2026\x22><path\x20d=\x22M\x204\x2016\x20L\x204\x2010\x20L\x208\x2010\x20L\x2013\x205\x20L\x2013\x2021\x20L\x208\x2016\x20z\x20M\x2015\x2011\x20L\x2016\x2010\x20A\x207.2\x207.2\x200\x200\x201\x2016\x2016\x20L\x2015\x2015\x20A\x205.8\x205.8\x200\x200\x200\x2015\x2012\x20z\x20M\x2018\x208\x20L\x2019\x207\x20A\x2011.5\x2011.5\x200\x200\x201\x2019\x2019\x20L\x2018\x2018\x20A\x2010.1\x2010.1\x200\x200\x200\x2018\x208\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--unmuted-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2220\x22\x20height=\x2220\x22\x20viewBox=\x223\x203\x2020\x2020\x22><path\x20d=\x22M\x204\x2016\x20L\x204\x2010\x20L\x208\x2010\x20L\x2013\x205\x20L\x2013\x2021\x20L\x208\x2016\x20z\x20M\x2015\x2011\x20L\x2016\x2010\x20A\x207.2\x207.2\x200\x200\x201\x2016\x2016\x20L\x2015\x2015\x20A\x205.8\x205.8\x200\x200\x200\x2015\x2012\x20z\x20M\x2018\x208\x20L\x2019\x207\x20A\x2011.5\x2011.5\x200\x200\x201\x2019\x2019\x20L\x2018\x2018\x20A\x2010.1\x2010.1\x200\x200\x200\x2018\x208\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--muted-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2220\x22\x20height=\x2220\x22\x20viewBox=\x223\x203\x2020\x2020\x22><path\x20d=\x22M\x204\x2016\x20L\x204\x2010\x20L\x208\x2010\x20L\x2013\x205\x20L\x2013\x2021\x20L\x208\x2016\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--menu-down-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><path\x20d=\x22M\x20-4\x20-2\x20L\x204\x20-2\x20L\x200\x203\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--select-arrows-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><path\x20d=\x22M\x20-4\x20-3\x20L\x204\x20-3\x20L\x200\x20-8\x20z\x20M\x20-4\x203\x20L\x204\x203\x20L\x200\x208\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--file-page-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-5\x20-21\x2026\x2026\x22><path\x20d=\x22M\x202\x200\x20L\x202\x20-16\x20L\x2010\x20-16\x20L\x2014\x20-12\x20L\x2014\x200\x20z\x20M\x203\x20-1\x20L\x2013\x20-1\x20L\x2013\x20-11\x20L\x209\x20-11\x20L\x209\x20-15\x20L\x203\x20-15\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--edit-pencil-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-5\x20-21\x2026\x2026\x22><path\x20d=\x22M\x200\x200\x20L\x201\x20-4\x20L\x204\x20-1\x20z\x20M\x202\x20-5\x20L\x2010\x20-13\x20L\x2013\x20-10\x20L\x205\x20-2\x20zM\x2011\x20-14\x20L\x2013\x20-16\x20L\x2014\x20-16\x20L\x2016\x20-14\x20L\x2016\x20-13\x20L\x2014\x20-11\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--preferences-gear-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><path\x20d=\x22M\x205.78\x20-1.6\x20L\x207.93\x20-0.94\x20L\x207.93\x200.94\x20L\x205.78\x201.6\x20L\x204.85\x203.53\x20L\x205.68\x205.61\x20L\x204.21\x206.78\x20L\x202.36\x205.52\x20L\x200.27\x205.99\x20L\x20-0.85\x207.94\x20L\x20-2.68\x207.52\x20L\x20-2.84\x205.28\x20L\x20-4.52\x203.95\x20L\x20-6.73\x204.28\x20L\x20-7.55\x202.59\x20L\x20-5.9\x201.07\x20L\x20-5.9\x20-1.07\x20L\x20-7.55\x20-2.59\x20L\x20-6.73\x20-4.28\x20L\x20-4.52\x20-3.95\x20L\x20-2.84\x20-5.28\x20L\x20-2.68\x20-7.52\x20L\x20-0.85\x20-7.94\x20L\x200.27\x20-5.99\x20L\x202.36\x20-5.52\x20L\x204.21\x20-6.78\x20L\x205.68\x20-5.61\x20L\x204.85\x20-3.53\x20M\x202.92\x200.67\x20L\x202.92\x20-0.67\x20L\x202.35\x20-1.87\x20L\x201.3\x20-2.7\x20L\x200\x20-3\x20L\x20-1.3\x20-2.7\x20L\x20-2.35\x20-1.87\x20L\x20-2.92\x20-0.67\x20L\x20-2.92\x200.67\x20L\x20-2.35\x201.87\x20L\x20-1.3\x202.7\x20L\x20-0\x203\x20L\x201.3\x202.7\x20L\x202.35\x201.87\x20z\x22\x20fill=\x22gray\x22/></svg>\x27);\x0a\x09--customize-dial-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22>\x20\x09\x09\x09<g\x20transform=\x22translate(0,1)\x22\x20fill=\x22gray\x22>\x20\x09\x09\x09\x09<circle\x20cx=\x220\x22\x20cy=\x220\x22\x20r=\x226.5\x22\x20stroke=\x22gray\x22\x20stroke-width=\x221\x22\x20fill=\x22none\x22/>\x20\x09\x09\x09\x09<rect\x20x=\x22-1\x22\x20y=\x22-5\x22\x20width=\x222\x22\x20height=\x224\x22\x20transform=\x22rotate(30)\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x22-7.79\x22\x20cy=\x224.5\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x22-9\x22\x20cy=\x220\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x22-7.79\x22\x20cy=\x22-4.5\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x22-4.5\x22\x20cy=\x22-7.79\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x220\x22\x20cy=\x22-9\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x224.5\x22\x20cy=\x22-7.79\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x227.79\x22\x20cy=\x22-4.5\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x229\x22\x20cy=\x220\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09\x09<circle\x20cx=\x227.79\x22\x20cy=\x224.5\x22\x20r=\x220.75\x22/>\x20\x09\x09\x09</g>\x20\x09\x09</svg>\x27);\x0a\x09--instrument-copy-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-5\x20-21\x2026\x2026\x22><path\x20d=\x22M\x200\x20-15\x20L\x201\x20-15\x20L\x201\x200\x20L\x2013\x200\x20L\x2013\x201\x20L\x200\x201\x20L\x200\x20-15\x20z\x20M\x202\x20-1\x20L\x202\x20-17\x20L\x2010\x20-17\x20L\x2014\x20-13\x20L\x2014\x20-1\x20z\x20M\x203\x20-2\x20L\x2013\x20-2\x20L\x2013\x20-12\x20L\x209\x20-12\x20L\x209\x20-16\x20L\x203\x20-16\x20z\x22\x20fill=\x22currentColor\x22></path></svg>\x27);\x0a\x09--instrument-paste-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x220\x200\x2026\x2026\x22><path\x20d=\x22M\x208\x2018\x20L\x206\x2018\x20L\x206\x205\x20L\x2017\x205\x20L\x2017\x207\x20M\x209\x208\x20L\x2016\x208\x20L\x2020\x2012\x20L\x2020\x2022\x20L\x209\x2022\x20z\x22\x20stroke=\x22currentColor\x22\x20fill=\x22none\x22></path><path\x20d=\x22M\x209\x203\x20L\x2014\x203\x20L\x2014\x206\x20L\x209\x206\x20L\x209\x203\x20z\x20M\x2016\x208\x20L\x2020\x2012\x20L\x2016\x2012\x20L\x2016\x208\x20z\x22\x20fill=\x22currentColor\x22></path></svg>\x27);\x0a\x09--export-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><path\x20fill=\x22gray\x22\x20d=\x22M\x20-8\x203\x20L\x20-8\x208\x20L\x208\x208\x20L\x208\x203\x20L\x206\x203\x20L\x206\x206\x20L\x20-6\x206\x20L\x20-6\x203\x20z\x20M\x200\x202\x20L\x20-4\x20-2\x20L\x20-1\x20-2\x20L\x20-1\x20-8\x20L\x201\x20-8\x20L\x201\x20-2\x20L\x204\x20-2\x20z\x22/></svg>\x27);\x0a\x09--close-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><path\x20fill=\x22gray\x22\x20d=\x22M\x20-7.07\x20-5.66\x20L\x20-5.66\x20-7.07\x20L\x200\x20-1.4\x20L\x205.66\x20-7.07\x20L\x207.07\x20-5.66\x20L\x201.4\x200\x20L\x207.07\x205.66\x20L\x205.66\x207.07\x20L\x200\x201.4\x20L\x20-5.66\x207.07\x20L\x20-7.07\x205.66\x20L\x20-1.4\x200\x20z\x22/></svg>\x27);\x0a\x09--add-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><path\x20fill=\x22gray\x22\x20d=\x22M\x20-8\x20-1\x20L\x20-1\x20-1\x20L\x20-1\x20-8\x20\x20L\x201\x20-8\x20L\x201\x20-1\x20L\x208\x20-1\x20L\x208\x201\x20L\x201\x201\x20L\x201\x208\x20L\x20-1\x208\x20L\x20-1\x201\x20L\x20-8\x201\x20z\x22/></svg>\x27);\x0a\x09--zoom-in-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2220\x22\x20height=\x2220\x22\x20viewBox=\x22-10\x20-10\x2020\x2020\x22><circle\x20cx=\x22-1\x22\x20cy=\x22-1\x22\x20r=\x226\x22\x20stroke-width=\x222\x22\x20stroke=\x22gray\x22\x20fill=\x22none\x22></circle><path\x20stroke=\x22gray\x22\x20stroke-width=\x222\x22\x20d=\x22M\x203\x203\x20L\x207\x207\x20M\x20-1\x20-4\x20L\x20-1\x202\x20M\x20-4\x20-1\x20L\x202\x20-1\x22\x20fill=\x22none\x22></path></svg>\x27);\x0a\x09--zoom-out-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2220\x22\x20height=\x2220\x22\x20viewBox=\x22-10\x20-10\x2020\x2020\x22><circle\x20cx=\x22-1\x22\x20cy=\x22-1\x22\x20r=\x226\x22\x20stroke-width=\x222\x22\x20stroke=\x22gray\x22\x20fill=\x22none\x22></circle><path\x20stroke=\x22gray\x22\x20stroke-width=\x222\x22\x20d=\x22M\x203\x203\x20L\x207\x207\x20M\x20-4\x20-1\x20L\x202\x20-1\x22\x20fill=\x22none\x22></path></svg>\x27);\x0a\x09--checkmark-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2226\x22\x20height=\x2226\x22\x20viewBox=\x22-13\x20-13\x2026\x2026\x22><path\x20fill=\x22gray\x22\x20d=\x22M\x20-9\x20-2\x20L\x20-8\x20-3\x20L\x20-3\x202\x20L\x209\x20-8\x20L\x2010\x20-7\x20L\x20-3\x208\x20z\x22/></svg>\x27);\x0a\x09--drum-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2232\x22\x20height=\x2240\x22\x20viewBox=\x220\x200\x2032\x2040\x22>\x20\x09\x09\x09<defs>\x20\x09\x09\x09\x09<linearGradient\x20id=\x22gold1\x22\x20x1=\x220%\x22\x20y1=\x220%\x22\x20x2=\x22100%\x22\x20y2=\x220%\x22>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x220%\x22\x20stop-color=\x22%237e3302\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x2240%\x22\x20stop-color=\x22%23ffec6b\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x22100%\x22\x20stop-color=\x22%237e3302\x22/>\x20\x09\x09\x09\x09</linearGradient>\x20\x09\x09\x09\x09<linearGradient\x20id=\x22gold2\x22\x20x1=\x220%\x22\x20y1=\x220%\x22\x20x2=\x22100%\x22\x20y2=\x220%\x22>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x220%\x22\x20stop-color=\x22%23faaf7d\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x2215%\x22\x20stop-color=\x22%23fffba9\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x2240%\x22\x20stop-color=\x22%23ffffe3\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x2265%\x22\x20stop-color=\x22%23fffba9\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x22100%\x22\x20stop-color=\x22%23faaf7d\x22/>\x20\x09\x09\x09\x09</linearGradient>\x20\x09\x09\x09\x09<radialGradient\x20id=\x22gold3\x22\x20cx=\x220%\x22\x20cy=\x220%\x22\x20r=\x22100%\x22>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x220%\x22\x20stop-color=\x22%23ffffe3\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x2250%\x22\x20stop-color=\x22%23ffec6b\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x22100%\x22\x20stop-color=\x22%237e3302\x22/>\x20\x09\x09\x09\x09</radialGradient>\x20\x09\x09\x09\x09<linearGradient\x20id=\x22red\x22\x20x1=\x220%\x22\x20y1=\x220%\x22\x20x2=\x22100%\x22\x20y2=\x220%\x22>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x220%\x22\x20stop-color=\x22%23641919\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x2240%\x22\x20stop-color=\x22%23cd2c2c\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x22100%\x22\x20stop-color=\x22%23641919\x22/>\x20\x09\x09\x09\x09</linearGradient>\x20\x09\x09\x09\x09<radialGradient\x20id=\x22membrane\x22>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x2210%\x22\x20stop-color=\x22%23cccccc\x22\x20/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x2290%\x22\x20stop-color=\x22%23f6f6f7\x22\x20/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x22100%\x22\x20stop-color=\x22%23999\x22\x20/>\x20\x09\x09\x09\x09</radialGradient>\x20\x09\x09\x09</defs>\x20\x09\x09\x09<ellipse\x20cx=\x2216\x22\x20cy=\x2226\x22\x20rx=\x2216\x22\x20ry=\x2214\x22\x20fill=\x22rgba(0,0,0,0.5)\x22/>\x20\x09\x09\x09<ellipse\x20cx=\x2216\x22\x20cy=\x2225\x22\x20rx=\x2216\x22\x20ry=\x2214\x22\x20fill=\x22url(%23gold1)\x22/>\x20\x09\x09\x09<rect\x20x=\x220\x22\x20y=\x2223\x22\x20width=\x2232\x22\x20height=\x222\x22\x20fill=\x22url(%23gold1)\x22/>\x20\x09\x09\x09<ellipse\x20cx=\x2216\x22\x20cy=\x2223\x22\x20rx=\x2216\x22\x20ry=\x2214\x22\x20fill=\x22url(%23gold2)\x22/>\x20\x09\x09\x09<ellipse\x20cx=\x2216\x22\x20cy=\x2223\x22\x20rx=\x2215\x22\x20ry=\x2213\x22\x20fill=\x22url(%23red)\x22/>\x20\x09\x09\x09<rect\x20x=\x221\x22\x20y=\x2217\x22\x20width=\x2230\x22\x20height=\x226\x22\x20fill=\x22url(%23red)\x22/>\x20\x09\x09\x09<rect\x20x=\x225\x22\x20y=\x2227\x22\x20width=\x221\x22\x20height=\x225\x22\x20rx=\x220.5\x22\x20fill=\x22rgba(0,0,0,0.5)\x22/>\x20\x09\x09\x09<rect\x20x=\x2215\x22\x20y=\x2231\x22\x20width=\x222\x22\x20height=\x225\x22\x20rx=\x221\x22\x20fill=\x22rgba(0,0,0,0.5)\x22/>\x20\x09\x09\x09<rect\x20x=\x2226\x22\x20y=\x2227\x22\x20width=\x221\x22\x20height=\x225\x22\x20rx=\x220.5\x22\x20fill=\x22rgba(0,0,0,0.5)\x22/>\x20\x09\x09\x09<rect\x20x=\x225\x22\x20y=\x2226\x22\x20width=\x221\x22\x20height=\x225\x22\x20rx=\x220.5\x22\x20fill=\x22url(%23gold3)\x22/>\x20\x09\x09\x09<rect\x20x=\x2215\x22\x20y=\x2230\x22\x20width=\x222\x22\x20height=\x225\x22\x20rx=\x221\x22\x20fill=\x22url(%23gold3)\x22/>\x20\x09\x09\x09<rect\x20x=\x2226\x22\x20y=\x2226\x22\x20width=\x221\x22\x20height=\x225\x22\x20rx=\x220.5\x22\x20fill=\x22url(%23gold3)\x22/>\x20\x09\x09\x09<ellipse\x20cx=\x2216\x22\x20cy=\x2218\x22\x20rx=\x2215\x22\x20ry=\x2213\x22\x20fill=\x22rgba(0,0,0,0.5)\x22/>\x20\x09\x09\x09<ellipse\x20cx=\x2216\x22\x20cy=\x2216\x22\x20rx=\x2216\x22\x20ry=\x2214\x22\x20fill=\x22url(%23gold1)\x22/>\x20\x09\x09\x09<rect\x20x=\x220\x22\x20y=\x2214\x22\x20width=\x2232\x22\x20height=\x222\x22\x20fill=\x22url(%23gold1)\x22/>\x20\x09\x09\x09<ellipse\x20cx=\x2216\x22\x20cy=\x2214\x22\x20rx=\x2216\x22\x20ry=\x2214\x22\x20fill=\x22url(%23gold2)\x22/>\x20\x09\x09\x09<ellipse\x20cx=\x2216\x22\x20cy=\x2214\x22\x20rx=\x2215\x22\x20ry=\x2213\x22\x20fill=\x22url(%23membrane)\x22/>\x20\x09\x09</svg>\x27);\x0a\x09--piano-key-symbol:\x20url(\x27data:image/svg+xml,<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22\x20width=\x2232\x22\x20height=\x2215\x22\x20preserveAspectRatio=\x22none\x22\x20viewBox=\x220\x20-1\x2032\x2015\x22>\x20\x09\x09\x09<defs>\x20\x09\x09\x09\x09<linearGradient\x20id=\x22shadow\x22\x20x1=\x220%\x22\x20y1=\x220%\x22\x20x2=\x22100%\x22\x20y2=\x220%\x22>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x220%\x22\x20stop-color=\x22rgba(0,0,0,0.5)\x22/>\x20\x09\x09\x09\x09\x09<stop\x20offset=\x22100%\x22\x20stop-color=\x22transparent\x22/>\x20\x09\x09\x09\x09</linearGradient>\x20\x09\x09\x09</defs>\x20\x09\x09\x09<rect\x20x=\x22-1\x22\x20y=\x221\x22\x20width=\x2231\x22\x20height=\x221\x22\x20rx=\x220.6\x22\x20fill=\x22rgba(255,255,255,0.4)\x22/>\x20\x09\x09\x09<path\x20d=\x22M\x20-1\x2011\x20L\x2030\x2011\x20L\x2030\x202\x20L\x2033\x20-1\x20L\x2033\x2014\x20L\x20-1\x2014\x20z\x22\x20fill=\x22rgba(0,0,0,0.7)\x22/>\x20\x09\x09\x09<rect\x20x=\x22-1\x22\x20y=\x22-1\x22\x20width=\x2219\x22\x20height=\x2215\x22\x20fill=\x22url(%23shadow)\x22/>\x20\x09\x09</svg>\x27);\x0a}\x0a\x0a\x0a.obtrusive-scrollbars,\x20.obtrusive-scrollbars\x20*\x20{\x0a\x09scrollbar-width:\x20thin;\x0a\x09scrollbar-color:\x20', 'File', 'bitcrusherQuantizationRange', 'slide\x20in\x20pattern', 'deactivateAudio', 'BeepBox\x20Competition', 'setProspectiveChange', '/*operator#Scaled*/', 'attentuationProgress', 'onload', 'shiftKey', 'round', 'KeyQ', '1→2', 'FM\x20(expert)', '\x20a\x20', 'KeyD', 'toJsonObject', 'transitions', 'play-pause-area', 'Move\x20Notes\x20Sideways', 'per\x20channel:', 'blues\x20:)', 'getHzFromSettingValue', 'rain\x20drop', '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09let\x20sampleL\x20=\x20sample;\x0a\x09\x09\x09\x09\x09let\x20sampleR\x20=\x20sample;', 'tremolo5', 'pushFront', 'reverbDelayPos', 'audio/midi', 'fifthNote', 'brass\x20section', ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer::-webkit-scrollbar\x20{\x0a\x09\x09\x09\x09\x09width:\x2020px;\x0a\x09\x09\x09\x09\x09height:\x2020px;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer::-webkit-scrollbar-track\x20{\x0a\x09\x09\x09\x09\x09background:\x20', 'fill', 'supersawDelayLine', 'square', 'seventh', 'swapChannels', ';\x0a}\x0a\x0a.beepboxEditor\x20.selectRow,\x20.beepboxEditor\x20.instrumentCopyPasteRow\x20{\x0a\x09margin:\x202px\x200;\x0a\x09height:\x20var(--button-size);\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20row;\x0a\x09align-items:\x20center;\x0a\x09justify-content:\x20space-between;\x0a}\x0a\x0a.beepboxEditor\x20.selectRow\x20>\x20:last-child\x20{\x0a\x09width:\x2062.5%;\x0a\x09flex-shrink:\x200;\x0a}\x0a\x0a.beepboxEditor\x20.menu-area\x20{\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20column;\x0a}\x0a.beepboxEditor\x20.menu-area\x20>\x20*\x20{\x0a\x09margin:\x202px\x200;\x0a}\x0a.beepboxEditor\x20.menu-area\x20>\x20button\x20{\x0a\x09padding:\x200\x20var(--button-size);\x0a\x09white-space:\x20nowrap;\x0a}\x0a\x0a.beepboxEditor\x20.song-settings-area\x20{\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20column;\x0a}\x0a\x0a.beepboxEditor\x20.editor-controls\x20{\x0a\x09flex-shrink:\x200;\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20column;\x0a}\x0a\x0a.beepboxEditor\x20.instrument-settings-area\x20{\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20column;\x0a}\x0a\x0a.beepboxEditor\x20.editor-right-side-top\x20>\x20*,\x20.beepboxEditor\x20.editor-right-side-bottom\x20>\x20*\x20{\x0a\x09flex-shrink:\x200;\x0a}\x0a\x0a.beepboxEditor\x20.pitchShiftMarkerContainer\x20{\x0a\x09box-sizing:\x20border-box;\x0a\x09display:\x20flex;\x0a\x09height:\x20100%;\x0a\x09left:\x203px;\x0a\x09right:\x203px;\x0a\x09position:\x20absolute;\x0a\x09align-items:\x20center;\x0a\x09pointer-events:\x20none;\x0a}\x0a\x0a.beepboxEditor\x20.pitchShiftMarker\x20{\x0a\x09width:\x200;\x0a\x09height:\x200;\x0a\x09position:\x20absolute;\x0a}\x0a\x0a.beepboxEditor\x20.pitchShiftMarker::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09width:\x202px;\x0a\x09height:\x2020px;\x0a\x09transform:\x20translate(-50%,\x20-50%);\x0a\x09position:\x20absolute;\x0a\x09background:\x20currentColor;\x0a\x09border-radius:\x203px;\x0a}\x0a\x0a.beepboxEditor\x20input[type=text],\x20.beepboxEditor\x20input[type=number]\x20{\x0a\x09font-size:\x20inherit;\x0a\x09font-weight:\x20inherit;\x0a\x09font-family:\x20inherit;\x0a\x09background:\x20transparent;\x0a\x09border:\x201px\x20solid\x20', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20reverbMask\x20=\x20Config.reverbDelayBufferMask\x20>>>\x200;\x20//TODO:\x20Dynamic\x20reverb\x20buffer\x20size.\x0a\x09\x09\x09\x09const\x20reverbDelayLine\x20=\x20instrumentState.reverbDelayLine;\x0a\x09\x09\x09\x09instrumentState.reverbDelayLineDirty\x20=\x20true;\x0a\x09\x09\x09\x09let\x20reverbDelayPos\x20=\x20instrumentState.reverbDelayPos\x20&\x20reverbMask;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20reverb\x20=\x20+instrumentState.reverbMult;\x0a\x09\x09\x09\x09const\x20reverbDelta\x20=\x20+instrumentState.reverbMultDelta;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20reverbShelfA1\x20=\x20+instrumentState.reverbShelfA1;\x0a\x09\x09\x09\x09const\x20reverbShelfB0\x20=\x20+instrumentState.reverbShelfB0;\x0a\x09\x09\x09\x09const\x20reverbShelfB1\x20=\x20+instrumentState.reverbShelfB1;\x0a\x09\x09\x09\x09let\x20reverbShelfSample0\x20=\x20+instrumentState.reverbShelfSample0;\x0a\x09\x09\x09\x09let\x20reverbShelfSample1\x20=\x20+instrumentState.reverbShelfSample1;\x0a\x09\x09\x09\x09let\x20reverbShelfSample2\x20=\x20+instrumentState.reverbShelfSample2;\x0a\x09\x09\x09\x09let\x20reverbShelfSample3\x20=\x20+instrumentState.reverbShelfSample3;\x0a\x09\x09\x09\x09let\x20reverbShelfPrevInput0\x20=\x20+instrumentState.reverbShelfPrevInput0;\x0a\x09\x09\x09\x09let\x20reverbShelfPrevInput1\x20=\x20+instrumentState.reverbShelfPrevInput1;\x0a\x09\x09\x09\x09let\x20reverbShelfPrevInput2\x20=\x20+instrumentState.reverbShelfPrevInput2;\x0a\x09\x09\x09\x09let\x20reverbShelfPrevInput3\x20=\x20+instrumentState.reverbShelfPrevInput3;', 'display:\x20table;\x20width:\x20100%;', 'Play', 'https://caniuse.com/midi', 'distortionNextOutput', 'sitar', 'Apply\x20change\x20at\x20beginning\x20of\x20song.', 'hash', 'pop', 'setTheme', '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09outputDataL[sampleIndex]\x20+=\x20sampleL\x20*\x20mixVolume;\x0a\x09\x09\x09\x09\x09outputDataR[sampleIndex]\x20+=\x20sampleR\x20*\x20mixVolume;\x0a\x09\x09\x09\x09\x09mixVolume\x20+=\x20mixVolumeDelta;', 'Bellows\x20Presets', '/service_worker.js', 'setSong', 'distortionDriveDelta', 'option', 'pickedStringSynth', 'scrollToEndOfSelection', 'tremolo2', 'popBack', 'supersawDynamismDelta', 'Enable\x20MIDI\x20performance:', 'per\x20pattern:', 'voices', 'analyze', 'unshift', 'initialNoteFilterInput1', 'standard\x20drumset', 'toBase64String', 'spectrumMax', 'Apply\x20change\x20at\x20end\x20of\x20song.', 'maxPitch', 'gumdrop', 'getCustomWave', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20distortionBaseVolume\x20=\x20+Config.distortionBaseVolume;\x0a\x09\x09\x09\x09let\x20distortion\x20=\x20instrumentState.distortion;\x0a\x09\x09\x09\x09const\x20distortionDelta\x20=\x20instrumentState.distortionDelta;\x0a\x09\x09\x09\x09let\x20distortionDrive\x20=\x20instrumentState.distortionDrive;\x0a\x09\x09\x09\x09const\x20distortionDriveDelta\x20=\x20instrumentState.distortionDriveDelta;\x0a\x09\x09\x09\x09const\x20distortionFractionalResolution\x20=\x204.0;\x0a\x09\x09\x09\x09const\x20distortionOversampleCompensation\x20=\x20distortionBaseVolume\x20/\x20distortionFractionalResolution;\x0a\x09\x09\x09\x09const\x20distortionFractionalDelay1\x20=\x201.0\x20/\x20distortionFractionalResolution;\x0a\x09\x09\x09\x09const\x20distortionFractionalDelay2\x20=\x202.0\x20/\x20distortionFractionalResolution;\x0a\x09\x09\x09\x09const\x20distortionFractionalDelay3\x20=\x203.0\x20/\x20distortionFractionalResolution;\x0a\x09\x09\x09\x09const\x20distortionFractionalDelayG1\x20=\x20(1.0\x20-\x20distortionFractionalDelay1)\x20/\x20(1.0\x20+\x20distortionFractionalDelay1);\x20//\x20Inlined\x20version\x20of\x20FilterCoefficients.prototype.allPass1stOrderFractionalDelay\x0a\x09\x09\x09\x09const\x20distortionFractionalDelayG2\x20=\x20(1.0\x20-\x20distortionFractionalDelay2)\x20/\x20(1.0\x20+\x20distortionFractionalDelay2);\x20//\x20Inlined\x20version\x20of\x20FilterCoefficients.prototype.allPass1stOrderFractionalDelay\x0a\x09\x09\x09\x09const\x20distortionFractionalDelayG3\x20=\x20(1.0\x20-\x20distortionFractionalDelay3)\x20/\x20(1.0\x20+\x20distortionFractionalDelay3);\x20//\x20Inlined\x20version\x20of\x20FilterCoefficients.prototype.allPass1stOrderFractionalDelay\x0a\x09\x09\x09\x09const\x20distortionNextOutputWeight1\x20=\x20Math.cos(Math.PI\x20*\x20distortionFractionalDelay1)\x20*\x200.5\x20+\x200.5;\x0a\x09\x09\x09\x09const\x20distortionNextOutputWeight2\x20=\x20Math.cos(Math.PI\x20*\x20distortionFractionalDelay2)\x20*\x200.5\x20+\x200.5;\x0a\x09\x09\x09\x09const\x20distortionNextOutputWeight3\x20=\x20Math.cos(Math.PI\x20*\x20distortionFractionalDelay3)\x20*\x200.5\x20+\x200.5;\x0a\x09\x09\x09\x09const\x20distortionPrevOutputWeight1\x20=\x201.0\x20-\x20distortionNextOutputWeight1;\x0a\x09\x09\x09\x09const\x20distortionPrevOutputWeight2\x20=\x201.0\x20-\x20distortionNextOutputWeight2;\x0a\x09\x09\x09\x09const\x20distortionPrevOutputWeight3\x20=\x201.0\x20-\x20distortionNextOutputWeight3;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20distortionFractionalInput1\x20=\x20+instrumentState.distortionFractionalInput1;\x0a\x09\x09\x09\x09let\x20distortionFractionalInput2\x20=\x20+instrumentState.distortionFractionalInput2;\x0a\x09\x09\x09\x09let\x20distortionFractionalInput3\x20=\x20+instrumentState.distortionFractionalInput3;\x0a\x09\x09\x09\x09let\x20distortionPrevInput\x20=\x20+instrumentState.distortionPrevInput;\x0a\x09\x09\x09\x09let\x20distortionNextOutput\x20=\x20+instrumentState.distortionNextOutput;', 'filterResonance', 'var(--noise2-primary-note)', 'editorBackground', 'width:\x20512px;\x20height:\x2020px;\x20overflow:\x20hidden;\x20position:\x20relative;', 'boxSelectionY1', 'viola', 'selected\x20song\x20scale', 'width:\x203em;\x20margin-left:\x200.4em;\x20vertical-align:\x20middle;', 'open', '\x2020\x20L\x20', 'getRoundedSettingValueFromLinearGain', 'readPartDuration', 'tempMonoInstrumentSampleBuffer', ';\x0a\x09text-decoration:\x20none;\x0a}\x0a\x0a.beepboxEditor\x20.tip:hover\x20{\x0a\x09color:\x20', 'fadeInOut', 'voice\x20ooh', 'https://imitone.com/', 'setIndex', 'work', 'echoShelfA1', 'contextmenu', 'flushingDelayLines', 'ticksSinceReleased', 'pan', 'breathing', 'writeMidiAscii', 'lowPass2ndOrderButterworth', 'width:\x202em;\x20margin-left:\x201em;', 'startBar', 'selectContainer\x20menu\x20preferences', 'getItem', 'bass\x20synth\x202', 'uid', 'echoShelfPrevInputL', 'pulseWidth', '(1\u20022\u20023)←4', 'mouseup', 'var(--noise3-primary-channel)', 'setInt16', 'choir\x20tenor', 'display:\x20flex;\x20flex-direction:\x20row-reverse;\x20justify-content:\x20space-between;', 'KeyK', 'filterMaxPoints', 'getChord', 'passedEndOfNote', 'var(--pitch3-secondary-channel)', 'defaultVisibleOctaves', 'var(--fifth-note)', 'spiky', 'clone', 'start', 'var(--pitch5-primary-note)', 'singleTone', 'notifyWatchers', 'pitch8', ';\x0a}\x0a.beepboxEditor\x20input[type=range]:focus::-moz-range-track\x20{\x0a\x09background:\x20', 'Export\x20Options', 'mosquito', 'player/#song=', 'documentElement', 'newTone', 'instrumentCopyPaste', 'currentColor', 'pitchChannelCount', 'getBarWidth', 'atan', '100%', 'triangle', 'selection', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(panningDelayLine,\x20panningDelayPos,\x20panningMask);\x0a\x09\x09\x09\x09instrumentState.panningDelayPos\x20=\x20panningDelayPos;\x0a\x09\x09\x09\x09instrumentState.panningVolumeL\x20=\x20panningVolumeL;\x0a\x09\x09\x09\x09instrumentState.panningVolumeR\x20=\x20panningVolumeR;\x0a\x09\x09\x09\x09instrumentState.panningOffsetL\x20=\x20panningOffsetL;\x0a\x09\x09\x09\x09instrumentState.panningOffsetR\x20=\x20panningOffsetR;', 'nextBar', 'var(--page-margin)', 'chipNoiseLength', 'distortion', 'envelope', 'keyboardLayout', 'Reverb', 'text', 'useMultiplicativeInputCoefficients', 'substring', 'setDefaultScale', 'moveTonesIntoOrderedTempMatchedList', 'playTone', 'setAttribute', 'Backslash', 'bitcrusherPhaseDelta', '//\x20INSERT\x20OPERATOR\x20COMPUTATION\x20HERE', 'music\x20box\x201', '(Be\x20patient,\x20exporting\x20may\x20take\x20some\x20time...)', 'setChannelBar', 'keydown', 'envelopeComputer', 'Show\x20Octave\x20Scroll\x20Bar', 'pitch10', 'loadCoefficientsWithGradient', 'preventDefault', 'boxSelectionY0', 'secondaryText', 'n.\x20filter\x20#\x20vol', 'This\x20setting\x20can\x20shift\x20the\x20frequency\x20of\x20every\x20note\x20in\x20your\x20entire\x20song\x20up\x20or\x20down,\x20keeping\x20the\x20\x22tonic\x22\x20pitches\x20(the\x20brown\x20rows\x20in\x20the\x20pattern\x20editor)\x20aligned\x20with\x20the\x20selected\x20\x22key\x22\x20pitch.', 'zoomOutButton', 'flexShrink', 'whitePianoKey', 'Minus', 'maintainLiveInput', '\x209\x20L\x20', 'warmUpSynthesizer', 'then', 'selectRow', 'instrumentIndex', 'mouseover', 'getChannelColor', 'insertBars', '1130647SsaiIM', 'deleteBars', 'operatorAmplitude', 'var(--pitch2-secondary-note)', 'var(--noise1-secondary-note)', 'metronomeAmplitude', 'atNoteStart', 'minFreq', 'error', 'browserAutomaticallyClearsAudioBuffer', 'operatorCarrierInterval', 'This\x20setting\x20allows\x20you\x20to\x20draw\x20your\x20own\x20noise\x20spectrum!\x20This\x20is\x20good\x20for\x20making\x20drumsets.\x20Each\x20row\x20in\x20the\x20pattern\x20editor\x20gets\x20its\x20own\x20spectrum.', 'dark\x20strike', 'light', 'volumeMultToInstrumentVolume', 'violin', 'Pattern', 'noteSizeEnd', 'getNextBar', 'chorusDelayOffsets', 'setSelectionRange', 'echoDelayLineL', 'applyFilters', 'pasteInstrument', 'requestAnimationFrame', 'title', 'cancelButton', 'muteChannels', 'spread', 'String\x20Sustain', 'oldLength', 'chorus', 'abs', '\x20semitone(s)', 'interrupt', 'allPassGDelta', 'When\x20not\x20recording,\x20you\x20can\x20use\x20the\x20computer\x20keyboard\x20either\x20for\x20shortcuts\x20(like\x20C\x20and\x20V\x20for\x20copy\x20and\x20paste)\x20or\x20for\x20performing\x20notes,\x20depending\x20on\x20this\x20mode:', 'reverbDelayBufferSize', 'prevNoteTicksStart', 'cleanUp', 'dynamism', 'background-color:\x20', 'Vibrato:', 'sixth', 'mousemove', '[value=layout]', 'This\x20setting\x20controls\x20the\x20volume\x20of\x20the\x20selected\x20instrument\x20without\x20affecting\x20the\x20volume\x20of\x20the\x20other\x20instruments.\x20This\x20allows\x20you\x20to\x20balance\x20the\x20loudness\x20of\x20each\x20instrument\x20relative\x20to\x20each\x20other.', 'releasedTones', 'Brass\x20Presets', 'getHz', 'Move\x20Notes\x20Up\x20(+\x20or\x20⇧+)', 'var(--pitch9-secondary-note)', 'Transition:', 'throw', 'shareUrl', 'abortRecording', 'filterFreqMinHz', 'call', 'tremolo6', 'barCountMin', 'clearInvalidEnvelopeTargets', 'filterGainStep', 'harmonicsControlPoints', 'record', 'url(#patternEditorNoteBackground', 'rhythm', 'Volume:', 'prevSlideStart', 'enableMidi', 'now', 'noteFilterFreq', 'paste-instrument', 'fromCharCode', 'honky\x20tonk', 'stringSustainRange', 'getFadeOutTicks', 'toLocaleString', 'Config', 'triangle\x20wave', 'sustainFilterA1', 'saw↔pulse', 'render', 'fmSourceTemplate', 'flex', 'script', 'interval', 'layout', 'peak2ndOrder', 'centsToDetune', 'sineWaveLength', ';\x0a\x09\x09tone.phaseDeltas[#]\x20=\x20operator#PhaseDelta\x20/\x20', 'continue', 'includeAdjacentPatterns', 'log2', 'setProperty', 'IntlRo', 'chorusDelayPos', 'Frequency', 'addEventListener', 'Custom\x20Instruments', 'chipWaves', '1⟲\u20032⟲\u20033⟲', 'sustainFilterB2Delta', 'isNoise', '.mp3', 'lastChangeWas', '.json\x20(for\x20any\x20BeepBox\x20version)', 'playback', 'boolean', 'piano\x20transposing\x20C\x20:)\x20to\x20song\x20key', 'bottom', 'stringDecayRate', 'stretch', 'EQ\x20Filter:', 'exactPart', 'pitchFilterMult', 'getBoundingClientRect', 'deactivate', 'algorithms', 'userAgent', 'panningVolumeDeltaL', 'steel\x20guitar', 'display:\x20table-cell;', 'vox\x20synth\x20lead', ';\x0a}\x0a\x0a.beepboxEditor\x20input[type=checkbox]\x20{\x0a\x20\x20transform:\x20scale(1.5);\x0a}\x0a\x0a.beepboxEditor\x20input[type=range]\x20{\x0a\x09-webkit-appearance:\x20none;\x0a\x09color:\x20inherit;\x0a\x09width:\x20100%;\x0a\x09height:\x20var(--button-size);\x0a\x09font-size:\x20inherit;\x0a\x09margin:\x200;\x0a\x09cursor:\x20pointer;\x0a\x09background:\x20none;\x0a\x09touch-action:\x20pan-y;\x0a}\x0a.beepboxEditor\x20input[type=range]:focus\x20{\x0a\x09outline:\x20none;\x0a}\x0a.beepboxEditor\x20input[type=range]::-webkit-slider-runnable-track\x20{\x0a\x09width:\x20100%;\x0a\x09height:\x206px;\x0a\x09cursor:\x20pointer;\x0a\x09background:\x20', 'Object\x20is\x20not\x20iterable.', 'select', 'modulatedBy', 'soft\x20fade', 'supersawBaseExpression', 'loopLength', 'prevNoteSecondsEnd', 'selectInstrument', 'trombone', 'width:\x20100%;\x20height:\x2060px;\x20border:\x20none;\x20display:\x20block;', 'midiProgram', ';\x20touch-action:\x20none;\x20cursor:\x20crosshair;', ';\x0a}\x0a.obtrusive-scrollbars::-webkit-scrollbar,\x20.obtrusive-scrollbars\x20*::-webkit-scrollbar\x20{\x0a\x09width:\x2012px;\x0a}\x0a.obtrusive-scrollbars::-webkit-scrollbar-track,\x20.obtrusive-scrollbars\x20*::-webkit-scrollbar-track\x20{\x0a\x09background:\x20', 'BeepBox\x20comes\x20with\x20several\x20basic\x20noise\x20sounds.\x20These\x20do\x20not\x20have\x20any\x20distinct\x20musical\x20pitch,\x20and\x20can\x20be\x20used\x20like\x20drums\x20to\x20create\x20beats\x20and\x20emphasize\x20your\x20song\x27s\x20rhythm.', 'Picked\x20String', 'allPassG', 'heavy', 'freeTone', 'unisons', 'pianoAtA', 'swell\x203', 'resize', 'constructor', 'drumsetPitch', 'liveInputDuration', 'pageX', 'metronomeCountIn', 'beginning', 'background', 'echoShelfB0', 'nextNote', 'Effects', 'chorusCombinedMultDelta', 'solo\x20soprano', 'enableMetronome', 'clz32', 'decay\x20medium', 'maxFreq', 'instrument', 'computeIndex', 'releaseTone', 'scrollTop', 'uiWidgetBackground', 'FFT\x20array\x20length\x20must\x20not\x20be\x20greater\x20than\x202^16.', 'addPerformedPitch', 'hard\x20fade', 'Beats\x20to\x20move:', '\x200\x201\x20', 'getWriteIndex', 'Filters\x20are\x20a\x20way\x20of\x20emphasizing\x20or\x20diminishing\x20different\x20parts\x20of\x20a\x20sound.\x20Musical\x20notes\x20have\x20a\x20fundamental\x20(base)\x20frequency,\x20but\x20the\x20sound\x20of\x20a\x20musical\x20note\x20also\x20has\x20parts\x20at\x20higher\x20frequencies\x20and\x20filters\x20can\x20adjust\x20the\x20volume\x20of\x20each\x20of\x20these\x20parts\x20based\x20on\x20their\x20frequency.', 'exportFormat', 'pins', '0\x200\x20', 'pwmBaseExpression', 'width:\x20300px;', 'oboe', 'prevDelayLength', 'clientWidth', 'pointer-events', 'fromJSON', 'pitchChannelCountMax', 'effects-menu', 'normal\x20:(', '[value=\x27shareUrl\x27]', 'prevSlideRatioStart', 'whenUpdated', 'enableChannelMuting', 'spectrumBasePitch', 'loopAccent', 'appendChild', 'FM\x20flute', 'square\x20wave', 'Picked\x20String\x20Presets', 'removeAttribute', 'getAllRecoveredSongs', 'fadeInSeconds', 'left', 'bright', 'Previous\x20Bar\x20(left\x20bracket)', 'Feedback\x20Type', 'displayBrowserUrl', 'Display\x20Song\x20Data\x20in\x20URL', 'index', 'reverbShelfSample2', 'tempFrequencyResponse', ';\x0a\x09background:\x20', 'chipBaseExpression', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20stopIndex\x20=\x20bufferIndex\x20+\x20runLength;\x0a\x09\x09\x09\x09for\x20(let\x20sampleIndex\x20=\x20bufferIndex;\x20sampleIndex\x20<\x20stopIndex;\x20sampleIndex++)\x20{\x0a\x09\x09\x09\x09\x09let\x20sample\x20=\x20tempMonoInstrumentSampleBuffer[sampleIndex];\x0a\x09\x09\x09\x09\x09tempMonoInstrumentSampleBuffer[sampleIndex]\x20=\x200.0;', 'height:\x20100%;\x20position:\x20relative;', 'slap\x20bass\x201', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(chorusDelayLineL,\x20chorusDelayPos,\x20chorusMask);\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(chorusDelayLineR,\x20chorusDelayPos,\x20chorusMask);\x0a\x09\x09\x09\x09instrumentState.chorusPhase\x20=\x20chorusPhase;\x0a\x09\x09\x09\x09instrumentState.chorusDelayPos\x20=\x20chorusDelayPos;\x0a\x09\x09\x09\x09instrumentState.chorusVoiceMult\x20=\x20chorusVoiceMult;\x0a\x09\x09\x09\x09instrumentState.chorusCombinedMult\x20=\x20chorusCombinedMult;', 'bitcrusherFoldLevel', 'steady', 'koto', 'hasRedoHistory', 'mainLayer', 'noisePitchFilterMult', 'noteFilterCount', 'Beats\x20Per\x20Bar', 'setItem', 'bandoneon', 'basePitch', 'metronomeFilter', 'function', 'vibratoDepth', 'awake', 'Select\x20All\x20(A)', 'Change\x20Beats\x20Per\x20Bar...', 'tiny\x20robot', 'resetAllEffects', 'noiseSample', 'setTemporaryPitches', 'time', 'Preferences', 'showChannels', 'tempoMax', 'color', 'sustainFilterA2', 'writeMidi7Bits', 'prevPitchExpressions', 'reverbDelayBufferMask', '\x200\x200\x201\x20', 'Unrecognized\x20instrument\x20type:\x20', 'oldStart', 'Tall', 'readLongTail', 'Random\x20Generated\x20(⇧R)', 'samples', 'chorusDelayLineDirty', 'pulseWidthDelta', 'selectionUpdated', 'max', '2→4', 'beepboxEditorContainer', 'width:45%;', 'supersawDelayLengthDelta', 'indexOf', 'boxSelectionX0', 'distortionRange', 'panningDelayLine', 'supersawSpreadMax', 'boxSelectionWidth', 'Digit0', 'bitcrusher', 'harpsichord', '1968468eLIeih', 'primaryText', '\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09instrumentState.mixVolume\x20=\x20mixVolume;\x0a\x09\x09\x09\x09instrumentState.eqFilterVolume\x20=\x20eqFilterVolume;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09//\x20Avoid\x20persistent\x20denormal\x20or\x20NaN\x20values\x20in\x20the\x20delay\x20buffers\x20and\x20filter\x20history.\x0a\x09\x09\x09\x09const\x20epsilon\x20=\x20(1.0e-24);', 'rhythms', 'shaky', 'Envelopes', 'FM\x20twang', 'position:\x20absolute;\x20top:\x200;', 'gunshot', 'lengthBase64', 'Select\x20Channel\x20(⇧A)', 'readPitchInterval', 'Song\x20Key', 'play', 'There\x20are\x20also\x20options\x20for\x20copying\x20and\x20pasting\x20instrument\x20settings\x20and\x20for\x20generating\x20random\x20instruments\x20at\x20the\x20top\x20of\x20the\x20instrument\x20type\x20menu.', 'value', 'head', 'loopRepeatCount', 'linearGain', 'display:\x20table-cell;\x20vertical-align:\x20middle;', 'Fdback\x20Vol:', 'key', 'competitionSongVersion:\x20', 'Reverb\x20is\x20like\x20a\x20continuous\x20echo\x20effect.\x20A\x20little\x20bit\x20helps\x20instruments\x20sound\x20more\x20natural.\x20Adding\x20a\x20lot\x20of\x20reverb\x20can\x20add\x20sense\x20of\x20depth\x20or\x20mystery,\x20but\x20too\x20much\x20reverb\x20can\x20kinda\x20\x22smear\x22\x20sounds\x20so\x20that\x20it\x27s\x20harder\x20to\x20distinguish\x20notes\x20or\x20instruments,\x20especially\x20for\x20lower\x20\x22bass\x22\x20notes.', 'KeyZ', 'Use\x20Current\x20Scale\x20as\x20Default', 'chorusRange', 'feedbackAmplitude', 'slides', 'operatorEnvelopes', 'flare\x202', 'remove-instrument', 'disabled', 'filter', 'applause', 'changed', 'amplitude', 'Volume', 'activeTones', 'mode', 'distortionFractionalInput1', 'filterFreqMaxHz', 'Add\x20●\x20record\x20button\x20next\x20to\x20▶\x20play\x20button:', '9fTZWZj', 'tip', 'resetOutput', 'Sustain\x20(', 'blues\x20:(', 'echoDelayBeats', 'Echo\x20Delay', 'playhead', 'requestMIDIAccess', 'scrollToSelectedPattern', 'barScrollPos', 'audioCtx', 'trackVisibleBars', 'chorusDelayLineL', 'b2Delta', 'height', 'sequenceNumber', 'name', 'boxSelectionBar', 'swell\x201', 'allPassSample', 'a1Delta', 'var(--pitch8-primary-note)', 'fmSynthFunctionCache', 'drumsetSynth', 'b0Delta', 'disconnect', 'No\x20elements\x20left\x20to\x20pop.', 'var(--pitch1-primary-channel)', 'getCurrentPart', 'pitch6', 'echoShelfPrevInputR', 'FM\x20Algorithm', 'operators', 'dubstep\x20yoi\x20yoi', 'steel\x20pan', 'frequency', 'speed', 'back', 'dark\x20classic', 'volumeLogScale', 'strumParts', 'Scaled', 'nearPinIndex', 'Duplicate\x20Reused\x20Patterns\x20(D)', 'erasePatternInBar', 'disconnected', 'liveInputPitches', 'echoDelayLineR', 'getCurrentPattern', 'clientY', 'var(--white-piano-key)', 'Unhandled\x20noise\x20instrument\x20type\x20in\x20random\x20generator.', 'The\x20distance\x20between\x20two\x20frequencies\x20is\x20called\x20an\x20\x22interval\x22,\x20and\x20this\x20setting\x20controls\x20how\x20large\x20it\x20is.\x20If\x20the\x20interval\x20is\x20too\x20wide,\x20then\x20the\x20waves\x20may\x20sound\x20out-of-tune\x20and\x20\x22dissonant\x22.\x20However,\x20if\x20the\x20interval\x20is\x20even\x20larger,\x20then\x20the\x20two\x20frequencies\x20can\x20even\x20be\x20distinct\x20pitches.', 'Comma', 'offsetParent', 'The\x20bitcrusher\x20effect\x20comes\x20with\x20an\x20additional\x20frequency\x20quantization\x20effect!\x20This\x20is\x20a\x20fun\x20one\x20to\x20play\x20with,\x20especially\x20when\x20combined\x20with\x20the\x20note\x20filter\x20effect.', 'panMax', 'feedbackDelta', 'var(--noise4-primary-channel)', 'spectrumNoiseLength', 'toUpperCase', 'pitchesPerOctave', 'background:\x20', 'supersawShapeMax', 'Auto\x20Play\x20on\x20Load', 'curIndex', 'FM\x20distortion', 'pianoTransposingA', 'panCenter', 'wrong\x20pin\x20start\x20interval', 'BeepBox\x20comes\x20with\x20some\x20sound\x20waves\x20based\x20on\x20classic\x20electronic\x20sound\x20chips,\x20as\x20well\x20as\x20several\x20unique\x20waves.\x20This\x20is\x20the\x20basic\x20source\x20of\x20the\x20sound\x20of\x20the\x20instrument,\x20which\x20is\x20modified\x20by\x20the\x20other\x20instrument\x20settings.', 'opacity:\x200.5;', 'secondaryNote', 'scales', 'isOnLastTick', '1→3\u20032→4', 'decay\x201', 'valid', 'union', '_blank', 'setTypeAndReset', 'var(--noise1-secondary-channel)', 'slide', 'snapToStart', 'File\x20name:', 'writeLongTail', 'clearTempMatchedPitchTones', 'width', 'path', 'Filter\x20Envelope', 'harmony', '1\u20032\u20033\u20034', 'inherit', 'set', 'font-weight:\x20bold;\x20-webkit-text-stroke-width:\x200;\x20font-size:\x2011px;\x20font-family:\x20sans-serif;\x20position:\x20absolute;\x20padding-left:\x2015px;', 'supportsEnvelopeTarget', 'panningDelayPos', 'envelopeStarts', 'contains', 'pickedStringDispersionFreqMult', 'layeredInstruments', 'freq', 'width:\x20200px;', 'prevNote', 'Keyboard\x20layout:', 'peak', 'KeyI', 'channelCountMode', 'shape', 'At\x20the\x20low\x20end\x20of\x20the\x20spread\x20slider,\x20all\x20of\x20the\x20voices\x20have\x20the\x20same\x20frequency\x20but\x20random\x20phase,\x20resulting\x20in\x20a\x20different\x20sound\x20every\x20time\x20a\x20note\x20starts.\x20In\x20the\x20middle,\x20the\x20waves\x20all\x20have\x20slightly\x20different\x20frequencies\x20that\x20shift\x20in\x20and\x20out\x20of\x20phase\x20over\x20time\x20similar\x20to\x20the\x20\x22unison\x22\x20and\x20\x22chorus\x22\x20settings,\x20creating\x20a\x20classic\x20supersaw\x20sound.\x20At\x20the\x20extreme\x20end,\x20the\x20frequencies\x20are\x20so\x20far\x20apart\x20they\x20sound\x20dissonant.', 'echoMult', 'input', 'showLetters', 'snapRecordedNotesToRhythm', 'cloneNotes', 'viewedInstrument', 'saveVersion', 'byteLength', 'readLegacyPartDuration', 'chip', 'getTransition', 'none', 'harmonicsWave', 'bitcrusherOctaveStep', '1←(2\u20023)←4', 'Not\x20enough\x20bits\x20to\x20represent\x20sustain\x20value\x20and\x20type\x20in\x20same\x20base64\x20character.', 'sustainFilterA2Delta', 'setWidth', 'copyUrl', 'distortionDelta', 'nextBarButton', 'position:\x20absolute;\x20width:\x20100%;\x20height:\x20100%;\x20pointer-events:\x20none;', 'marimba', 'pitch\x20shift', 'pow', 'scriptNode', 'SongEditor', 'ctrlSymbol', 'harmonicsWavelength', 'filterEnvelope', '\x20channel', 'svg', 'Copy\x20Instrument\x20(⇧C)', 'var(--pitch9-primary-channel)', 'selected-instrument', 'song', 'Play\x20(Space)', 'forceScale', 'filterCutoff', 'drumset', 'scrollHeight', '\x202\x20L\x20', 'This\x20setting\x20controls\x20the\x20amount\x20of\x20feedback\x20distortion\x20based\x20on\x20the\x20feedback\x20type\x20setting.', 'Instrument\x20Settings', 'adjacentPatternHasCompatibleInstrumentTransition', 'patterns', 'nextSlideRatioEnd', 'BracketLeft', 'clipboard', 'patternSelectionActive', 'getSettingValueFromHz', 'Dubler', 'root', 'secondaryChannel', 'setTrackSelection', 'compute', 'touchend', 'beatsPerBarMin', 'width:\x203em;\x20margin-left:\x201em;', 'lastChild', 'pitch3', 'feedbackType', '3,\x202', '371914kYUTTc', 'BeepBox\x20has\x20many\x20different\x20kinds\x20of\x20special\x20effects\x20you\x20can\x20add\x20to\x20instruments.\x20You\x20can\x20turn\x20on\x20multiple\x20effects\x20at\x20once,\x20and\x20they\x20can\x20be\x20configured\x20individually.\x20Try\x20them\x20all\x20out!', 'tickSampleCountdown', 'childElementCount', 'text-align:\x20right;', 'synthesize', 'chord', 'value\x20out\x20of\x20bounds', '\x20*\x20unisonSign', 'lowPass1stOrderSimplified', 'shift', 'presetCategories', 'height:\x20100%;', 'noiseChannelCount', 'synth', 'instrumentCountMin', '\x20Frequency', 'remove', 'muted', 'This\x20setting\x20controls\x20the\x20shape\x20and\x20sound\x20of\x20a\x20pulse\x20wave.\x20At\x20the\x20minimum\x20width,\x20it\x20sounds\x20light\x20and\x20buzzy.\x20At\x20the\x20maximum\x20width,\x20it\x20is\x20shaped\x20like\x20a\x20classic\x20square\x20wave.', 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;', 'getLinearGain', '<!DOCTYPE\x20html><meta\x20charset=\x22utf-8\x22>\x0a\x0aYou\x20should\x20be\x20redirected\x20to\x20the\x20song\x20at:<br\x20/><br\x20/>\x0a\x0a<a\x20id=\x22destination\x22\x20href=\x22', 'prompt', '1/8\x20pulse', 'fadeOutSettingToTicks', 'addEnvelope', 'isArray', 'fadeOutTicks', 'getVolumeCompensationMult', 'width:\x2032px;\x20height:\x20100%;\x20overflow:\x20hidden;\x20position:\x20relative;\x20flex-shrink:\x200;\x20touch-action:\x20none;', 'delayLine', 'Detune:', 'getCurrentInstrument', 'playback-bar-controls', 'medium\x20fade', 'Echo\x20Delay:', '\x09\x09\x09/*\x20tall\x20layout\x20*/\x0a\x09\x09\x09@media\x20(min-width:\x20711px)\x20{\x0a\x09\x09\x09\x09#beepboxEditorContainer\x20{\x0a\x09\x09\x09\x09\x09max-width:\x20initial;\x0a\x09\x09\x09\x09\x09height:\x20100vh;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20{\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09\x09height:\x20100vh;\x0a\x09\x09\x09\x09\x09grid-template-columns:\x20minmax(0,\x201fr)\x20minmax(0,\x201fr)\x20192px;\x0a\x09\x09\x09\x09\x09grid-template-rows:\x201fr;\x0a\x09\x09\x09\x09\x09grid-template-areas:\x20\x22track-area\x20pattern-area\x20settings-area\x22;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.pattern-area\x20{\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09\x09height:\x20100%;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.track-area\x20{\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09\x09height:\x20100%;\x0a\x09\x09\x09\x09\x09display:\x20flex;\x0a\x09\x09\x09\x09\x09flex-direction:\x20column;\x0a\x09\x09\x09\x09\x09justify-content:\x20center;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer\x20{\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09\x09min-height:\x200;\x0a\x09\x09\x09\x09\x09flex:\x200;\x0a\x09\x09\x09\x09\x09overflow:\x20auto;\x0a\x09\x09\x09\x09\x09flex-basis:\x20initial;\x0a\x09\x09\x09\x09\x09flex-grow:\x200;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.instrument-settings-area\x20>\x20.editor-controls\x20{\x0a\x09\x09\x09\x09\x09position:\x20absolute;\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09.beepboxEditor\x20.settings-area\x20{\x0a\x09\x09\x09\x09\x09width:\x20192px;\x0a\x09\x09\x09\x09\x09position:\x20relative;\x0a\x09\x09\x09\x09\x09overflow-y:\x20auto;\x0a\x09\x09\x09\x09\x09grid-template-columns:\x20minmax(0,\x201fr);\x0a\x09\x09\x09\x09\x09grid-template-rows:\x20auto\x20auto\x20auto\x20auto\x20minmax(0,\x201fr);\x0a\x09\x09\x09\x09\x09grid-template-areas:\x0a\x09\x09\x09\x09\x09\x09\x22version-area\x22\x0a\x09\x09\x09\x09\x09\x09\x22play-pause-area\x22\x0a\x09\x09\x09\x09\x09\x09\x22menu-area\x22\x0a\x09\x09\x09\x09\x09\x09\x22song-settings-area\x22\x0a\x09\x09\x09\x09\x09\x09\x22instrument-settings-area\x22;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.version-area\x20{\x0a\x09\x09\x09\x09\x09position:\x20sticky;\x0a\x09\x09\x09\x09\x09top:\x200;\x0a\x09\x09\x09\x09\x09z-index:\x201;\x0a\x09\x09\x09\x09\x09background:\x20', 'pitch', 'hard', 'supersawUnisonDetunes', 'syncSongState', 'pitchIndex', 'beat', 'soft', 'textContent', 'Unlike\x20most\x20of\x20BeepBox\x27s\x20instrument\x20synthesizer\x20features,\x20a\x20picked\x20string\x20cannot\x20change\x20frequency\x20suddenly\x20while\x20maintaining\x20its\x20decay.\x20If\x20a\x20tone\x27s\x20pitch\x20changes\x20suddenly\x20(e.g.\x20if\x20the\x20chord\x20type\x20is\x20set\x20to\x20\x22arpeggio\x22\x20or\x20the\x20transition\x20type\x20is\x20set\x20to\x20\x22continues\x22)\x20then\x20the\x20string\x20will\x20be\x20re-picked\x20and\x20start\x20decaying\x20from\x20the\x20beginning\x20again,\x20even\x20if\x20the\x20envelopes\x20don\x27t\x20otherwise\x20restart.', 'enableAcousticSustain', 'Rhythm:', 'Digit5', 'KeyC', 'trim', 'transposeDown', 'Digit2', 'reverbShelfPrevInput3', 'sustainTypeNames', 'keyPosToPitch', 'Fade\x20In/Out', 'Overflow\x20notes\x20across\x20bars.', 'okayButton', 'drawbar\x20organ\x202', 'tonic', 'goToPrevBar', 'cross\x20fade', 'audio/mp3', 'bitcrusherQuantization', 'tremolo4', 'justIntonationSemitones', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(reverbDelayLine,\x20reverbDelayPos\x20\x20\x20\x20\x20\x20\x20\x20,\x20reverbMask);\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(reverbDelayLine,\x20reverbDelayPos\x20+\x20\x203041,\x20reverbMask);\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(reverbDelayLine,\x20reverbDelayPos\x20+\x20\x206426,\x20reverbMask);\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(reverbDelayLine,\x20reverbDelayPos\x20+\x2010907,\x20reverbMask);\x0a\x09\x09\x09\x09instrumentState.reverbDelayPos\x20=\x20reverbDelayPos;\x0a\x09\x09\x09\x09instrumentState.reverbMult\x20=\x20reverb;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(reverbShelfSample0)\x20||\x20Math.abs(reverbShelfSample0)\x20<\x20epsilon)\x20reverbShelfSample0\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(reverbShelfSample1)\x20||\x20Math.abs(reverbShelfSample1)\x20<\x20epsilon)\x20reverbShelfSample1\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(reverbShelfSample2)\x20||\x20Math.abs(reverbShelfSample2)\x20<\x20epsilon)\x20reverbShelfSample2\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(reverbShelfSample3)\x20||\x20Math.abs(reverbShelfSample3)\x20<\x20epsilon)\x20reverbShelfSample3\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(reverbShelfPrevInput0)\x20||\x20Math.abs(reverbShelfPrevInput0)\x20<\x20epsilon)\x20reverbShelfPrevInput0\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(reverbShelfPrevInput1)\x20||\x20Math.abs(reverbShelfPrevInput1)\x20<\x20epsilon)\x20reverbShelfPrevInput1\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(reverbShelfPrevInput2)\x20||\x20Math.abs(reverbShelfPrevInput2)\x20<\x20epsilon)\x20reverbShelfPrevInput2\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(reverbShelfPrevInput3)\x20||\x20Math.abs(reverbShelfPrevInput3)\x20<\x20epsilon)\x20reverbShelfPrevInput3\x20=\x200.0;\x0a\x09\x09\x09\x09instrumentState.reverbShelfSample0\x20=\x20reverbShelfSample0;\x0a\x09\x09\x09\x09instrumentState.reverbShelfSample1\x20=\x20reverbShelfSample1;\x0a\x09\x09\x09\x09instrumentState.reverbShelfSample2\x20=\x20reverbShelfSample2;\x0a\x09\x09\x09\x09instrumentState.reverbShelfSample3\x20=\x20reverbShelfSample3;\x0a\x09\x09\x09\x09instrumentState.reverbShelfPrevInput0\x20=\x20reverbShelfPrevInput0;\x0a\x09\x09\x09\x09instrumentState.reverbShelfPrevInput1\x20=\x20reverbShelfPrevInput1;\x0a\x09\x09\x09\x09instrumentState.reverbShelfPrevInput2\x20=\x20reverbShelfPrevInput2;\x0a\x09\x09\x09\x09instrumentState.reverbShelfPrevInput3\x20=\x20reverbShelfPrevInput3;', 'map', 'stringify', 'boxSelectionFill', 'prevStringDecay', 'supersawSpread', 'panningDelayBufferSize', 'string', 'customInterval', 'feedbackEnvelope', 'reverbShelfGain', 'displayName', 'reverbDelayLineDirty', 'This\x20setting\x20controls\x20the\x20volume\x20of\x20\x22carrier\x22\x20waves,\x20or\x20the\x20amount\x20of\x20distortion\x20that\x20\x22modulator\x22\x20waves\x20apply\x20to\x20other\x20waves.', '\x0a\x09\x09\x09\x09const\x20tempMonoInstrumentSampleBuffer\x20=\x20synth.tempMonoInstrumentSampleBuffer;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20mixVolume\x20=\x20+instrumentState.mixVolume;\x0a\x09\x09\x09\x09const\x20mixVolumeDelta\x20=\x20+instrumentState.mixVolumeDelta;', 'clientX', 'real', 'supersawPrevPhaseDelta', 'pitchChannelCountMin', 'recording', 'getChannelData', 'The\x20intervals\x20created\x20by\x20this\x20setting\x20are\x20in\x20\x22just\x20intonation\x22\x20which\x20means\x20they\x20stay\x20in\x20phase\x20with\x20the\x20original\x20pitch\x20instead\x20of\x20shifting\x20in\x20and\x20out\x20of\x20phase\x20over\x20time.\x20If\x20you\x20want\x20the\x20shifting,\x20add\x20the\x20detune\x20effect!', 'toCompactArrayBuffer', 'buzz', 'detuneCenter', 'setVolume', 'metaKey', 'freeReleasedTone', 'forgetLastChange', 'selectContainer\x20menu\x20edit', 'fadeIn', 'swell\x202', 'json', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20filters\x20=\x20instrumentState.eqFilters;\x0a\x09\x09\x09\x09const\x20filterCount\x20=\x20instrumentState.eqFilterCount|0;\x0a\x09\x09\x09\x09let\x20initialFilterInput1\x20=\x20+instrumentState.initialEqFilterInput1;\x0a\x09\x09\x09\x09let\x20initialFilterInput2\x20=\x20+instrumentState.initialEqFilterInput2;\x0a\x09\x09\x09\x09const\x20applyFilters\x20=\x20Synth.applyFilters;', 'flushedSamples', 'pitchBackground', 'Delete\x20Selected\x20Bars\x20(⌫)', 'visibleOctaves', 'true', 'bitcrusherFreqRange', 'Redo\x20(Y)', 'port', 'versionDisplayName', 'Wrap\x20notes\x20around\x20within\x20bars.', 'goToNextBar', 'toCoefficients', '(1\u20022)←(3\u20024)', 'tremolo3', 'ocarina', 'autoPlay', '539017eCqAbs', 'Insert\x20Bar\x20(⏎)', 'midi', 'effectsFunctionCache', 'initialNoteFilterInput2', 'Chorus', 'This\x20setting\x20causes\x20the\x20frequency\x20of\x20a\x20note\x20to\x20wobble\x20slightly.\x20Singers\x20and\x20violinists\x20often\x20use\x20vibrato.', 'balanced', 'writeUint8', 'offset', 'noiseChannelCountMin', 'copy-instrument', 'instrumentAutomationTargets', 'songScale', 'var(--tonic)', '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09synth.sanitizeFilters(filters);\x0a\x09\x09\x09\x09//\x20The\x20filter\x20input\x20here\x20is\x20downstream\x20from\x20another\x20filter\x20so\x20we\x0a\x09\x09\x09\x09//\x20better\x20make\x20sure\x20it\x27s\x20safe\x20too.\x0a\x09\x09\x09\x09if\x20(!(initialFilterInput1\x20<\x20100)\x20||\x20!(initialFilterInput2\x20<\x20100))\x20{\x0a\x09\x09\x09\x09\x09initialFilterInput1\x20=\x200.0;\x0a\x09\x09\x09\x09\x09initialFilterInput2\x20=\x200.0;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09if\x20(Math.abs(initialFilterInput1)\x20<\x20epsilon)\x20initialFilterInput1\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(Math.abs(initialFilterInput2)\x20<\x20epsilon)\x20initialFilterInput2\x20=\x200.0;\x0a\x09\x09\x09\x09instrumentState.initialEqFilterInput1\x20=\x20initialFilterInput1;\x0a\x09\x09\x09\x09instrumentState.initialEqFilterInput2\x20=\x20initialFilterInput2;', 'background:\x20none;\x20border:\x20none;\x20appearance:\x20none;\x20border-radius:\x20initial;\x20box-shadow:\x20none;\x20color:\x20transparent;\x20position:\x20absolute;\x20touch-action:\x20none;', 'margin:\x200;', 'pulseEnvelope', 'reverbShelfB1', 'Count-in\x201\x20bar\x20of\x20metronome\x20before\x20recording:', 'patternsPerChannel', 'prevNoteSecondsStart', 'target', 'part', 'overdrive\x20guitar', 'goBackToStart', 'selectChannel', 'download', 'done', 'delayed', 'supersaw\x20pad', 'track-area', 'fadeInSettingToSeconds', '23365wBxGTc', 'snapToBar', 'mixVolume', 'curNote', 'agogo', 'controlPoints', 'hidden', 'channelScrollPos', 'effect', '\x20for\x20shortcuts', 'Show\x20And\x20Play\x20The\x20Same\x20Bar', 'Edit', 'mp3', 'Intro:', 'noteSizeMax', 'selectAll', 'setPattern', 'acoustic\x20bass', 'singleSeamlessInstrument', 'var(--pitch10-secondary-channel)', 'electric\x20grand', 'keypress', 'A\x20supersaw\x20is\x20a\x20combination\x20of\x20many\x20sawtooth\x20waves,\x20and\x20this\x20setting\x20controls\x20the\x20contribution\x20of\x20extra\x20sawtooth\x20waves.', 'patternHeight', 'freehand', 'reverbShelfPrevInput2', 'Wave:', 'handleKeyEvent', 'pentatonic\x20major', 'next', 'tick', '4px', 'text/css', 'boxSelectionHeight', 'PWM\x20distortion', 'close', 'stringSustain', 'Show\x20Notes\x20From\x20All\x20Channels', 'Loop\x20Start', 'Different\x20instruments', 'colorTheme', 'mousedown', 'sustainFilterB1', 'notesOutsideScale', 'chorusMaxDelay', 'transposeUp', 'querySelector', 'liveInputSamplesHeld', 'isSeamless', 'reduce', '1⟲\u20032⟲', 'twang\x202', 'KeyE', 'convertLegacySettings', 'Freq\x20Crush:', 'channelSettings', 'handleKey', 'version', 'metal\x20pipe', 'eqFilterVolumeDelta', 'touchcancel', 'playing', 'writeUint32', 'sustainFilterPrevInput2', 'overflow', 'patternSelectionStart', 'stepsPerBeat', 'visible', 'margin-right:\x20.1em;\x20color:\x20', 'denom', '\x09\x09\x09\x09\x09<svg\x20viewBox=\x22-1\x20-1\x2028\x2022\x22>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x220\x22\x20y=\x220\x22\x20width=\x2226\x22\x20height=\x2220\x22\x20fill=\x22none\x22\x20stroke=\x22currentColor\x22\x20stroke-width=\x221\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x222\x22\x20y=\x222\x22\x20width=\x2212\x22\x20height=\x2210\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x2215\x22\x20y=\x222\x22\x20width=\x224\x22\x20height=\x2210\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x2220\x22\x20y=\x222\x22\x20width=\x224\x22\x20height=\x2210\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x222\x22\x20y=\x2213\x22\x20width=\x2222\x22\x20height=\x225\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09</svg>\x0a\x09\x09\x09\x09', 'supersawDynamismMax', 'harmonics', 'drumsetEnvelopes', 'soloChannels', '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09const\x20distortionReverse\x20=\x201.0\x20-\x20distortion;\x0a\x09\x09\x09\x09\x09const\x20distortionNextInput\x20=\x20sample\x20*\x20distortionDrive;\x0a\x09\x09\x09\x09\x09sample\x20=\x20distortionNextOutput;\x0a\x09\x09\x09\x09\x09distortionNextOutput\x20=\x20distortionNextInput\x20/\x20(distortionReverse\x20*\x20Math.abs(distortionNextInput)\x20+\x20distortion);\x0a\x09\x09\x09\x09\x09distortionFractionalInput1\x20=\x20distortionFractionalDelayG1\x20*\x20distortionNextInput\x20+\x20distortionPrevInput\x20-\x20distortionFractionalDelayG1\x20*\x20distortionFractionalInput1;\x0a\x09\x09\x09\x09\x09distortionFractionalInput2\x20=\x20distortionFractionalDelayG2\x20*\x20distortionNextInput\x20+\x20distortionPrevInput\x20-\x20distortionFractionalDelayG2\x20*\x20distortionFractionalInput2;\x0a\x09\x09\x09\x09\x09distortionFractionalInput3\x20=\x20distortionFractionalDelayG3\x20*\x20distortionNextInput\x20+\x20distortionPrevInput\x20-\x20distortionFractionalDelayG3\x20*\x20distortionFractionalInput3;\x0a\x09\x09\x09\x09\x09const\x20distortionOutput1\x20=\x20distortionFractionalInput1\x20/\x20(distortionReverse\x20*\x20Math.abs(distortionFractionalInput1)\x20+\x20distortion);\x0a\x09\x09\x09\x09\x09const\x20distortionOutput2\x20=\x20distortionFractionalInput2\x20/\x20(distortionReverse\x20*\x20Math.abs(distortionFractionalInput2)\x20+\x20distortion);\x0a\x09\x09\x09\x09\x09const\x20distortionOutput3\x20=\x20distortionFractionalInput3\x20/\x20(distortionReverse\x20*\x20Math.abs(distortionFractionalInput3)\x20+\x20distortion);\x0a\x09\x09\x09\x09\x09distortionNextOutput\x20+=\x20distortionOutput1\x20*\x20distortionNextOutputWeight1\x20+\x20distortionOutput2\x20*\x20distortionNextOutputWeight2\x20+\x20distortionOutput3\x20*\x20distortionNextOutputWeight3;\x0a\x09\x09\x09\x09\x09sample\x20+=\x20distortionOutput1\x20*\x20distortionPrevOutputWeight1\x20+\x20distortionOutput2\x20*\x20distortionPrevOutputWeight2\x20+\x20distortionOutput3\x20*\x20distortionPrevOutputWeight3;\x0a\x09\x09\x09\x09\x09sample\x20*=\x20distortionOversampleCompensation;\x0a\x09\x09\x09\x09\x09distortionPrevInput\x20=\x20distortionNextInput;\x0a\x09\x09\x09\x09\x09distortion\x20+=\x20distortionDelta;\x0a\x09\x09\x09\x09\x09distortionDrive\x20+=\x20distortionDriveDelta;', 'display:\x20table-row;', 'width:\x20100%;', '1→4', 'allPassPrevInput', 'min', 'moveNotesSidewaysStrategy', 'touchstart', 'gain', 'meta[name=\x27theme-color\x27]', 'chorusCombinedMult', 'addPoint', 'distortion\x20guitar', 'adjacentNotesHaveMatchingPitches', 'lowpassCutoffDecayVolumeCompensation', 'rewriteUint32', 'defineProperty', 'punch', 'opacity', 'noiseBaseExpression', 'pitchShiftSemitones', 'getPattern', 'createTextNode', 'invertedText', 'pressed', 'operatorExpressionDeltas', '\x0a\x09\x09\x09:root\x20{\x0a\x09\x09\x09\x09-webkit-text-stroke-width:\x200.5px;\x0a\x09\x09\x09\x09--page-margin:\x20#966778;\x0a\x09\x09\x09\x09--editor-background:\x20white;\x0a\x09\x09\x09\x09--hover-preview:\x20black;\x0a\x09\x09\x09\x09--playhead:\x20rgba(0,0,0,0.5);\x0a\x09\x09\x09\x09--primary-text:\x20black;\x0a\x09\x09\x09\x09--secondary-text:\x20#777;\x0a\x09\x09\x09\x09--inverted-text:\x20white;\x0a\x09\x09\x09\x09--text-selection:\x20rgba(250,\x20170,\x20255,\x200.99);\x0a\x09\x09\x09\x09--box-selection-fill:\x20rgba(0,0,0,0.1);\x0a\x09\x09\x09\x09--loop-accent:\x20#ed88ff;\x0a\x09\x09\x09\x09--link-accent:\x20#d144ff;\x0a\x09\x09\x09\x09--ui-widget-background:\x20#ececec;\x0a\x09\x09\x09\x09--ui-widget-focus:\x20#eee;\x0a\x09\x09\x09\x09--pitch-background:\x20#ececec;\x0a\x09\x09\x09\x09--tonic:\x20#f0d6b6;\x0a\x09\x09\x09\x09--fifth-note:\x20#bbddf0;\x0a\x09\x09\x09\x09--white-piano-key:\x20#eee;\x0a\x09\x09\x09\x09--black-piano-key:\x20#666;\x0a\x09\x09\x09\x09--pitch1-secondary-channel:\x20#6CD9ED;\x0a\x09\x09\x09\x09--pitch1-primary-channel:\x20\x20\x20#00A0BD;\x0a\x09\x09\x09\x09--pitch1-secondary-note:\x20\x20\x20\x20#34C2DC;\x0a\x09\x09\x09\x09--pitch1-primary-note:\x20\x20\x20\x20\x20\x20#00758A;\x0a\x09\x09\x09\x09--pitch2-secondary-channel:\x20#E3C941;\x0a\x09\x09\x09\x09--pitch2-primary-channel:\x20\x20\x20#B49700;\x0a\x09\x09\x09\x09--pitch2-secondary-note:\x20\x20\x20\x20#D1B628;\x0a\x09\x09\x09\x09--pitch2-primary-note:\x20\x20\x20\x20\x20\x20#836E00;\x0a\x09\x09\x09\x09--pitch3-secondary-channel:\x20#FF9D61;\x0a\x09\x09\x09\x09--pitch3-primary-channel:\x20\x20\x20#E14E00;\x0a\x09\x09\x09\x09--pitch3-secondary-note:\x20\x20\x20\x20#F67D3C;\x0a\x09\x09\x09\x09--pitch3-primary-note:\x20\x20\x20\x20\x20\x20#B64000;\x0a\x09\x09\x09\x09--pitch4-secondary-channel:\x20#4BE24B;\x0a\x09\x09\x09\x09--pitch4-primary-channel:\x20\x20\x20#00A800;\x0a\x09\x09\x09\x09--pitch4-secondary-note:\x20\x20\x20\x20#2DC82D;\x0a\x09\x09\x09\x09--pitch4-primary-note:\x20\x20\x20\x20\x20\x20#008000;\x0a\x09\x09\x09\x09--pitch5-secondary-channel:\x20#FF90FF;\x0a\x09\x09\x09\x09--pitch5-primary-channel:\x20\x20\x20#E12EDF;\x0a\x09\x09\x09\x09--pitch5-secondary-note:\x20\x20\x20\x20#EC6EEC;\x0a\x09\x09\x09\x09--pitch5-primary-note:\x20\x20\x20\x20\x20\x20#A600A5;\x0a\x09\x09\x09\x09--pitch6-secondary-channel:\x20#B5B5FE;\x0a\x09\x09\x09\x09--pitch6-primary-channel:\x20\x20\x20#6969FD;\x0a\x09\x09\x09\x09--pitch6-secondary-note:\x20\x20\x20\x20#9393FE;\x0a\x09\x09\x09\x09--pitch6-primary-note:\x20\x20\x20\x20\x20\x20#4A4AD7;\x0a\x09\x09\x09\x09--pitch7-secondary-channel:\x20#C2D848;\x0a\x09\x09\x09\x09--pitch7-primary-channel:\x20\x20\x20#8EA800;\x0a\x09\x09\x09\x09--pitch7-secondary-note:\x20\x20\x20\x20#B0C82D;\x0a\x09\x09\x09\x09--pitch7-primary-note:\x20\x20\x20\x20\x20\x20#6C8000;\x0a\x09\x09\x09\x09--pitch8-secondary-channel:\x20#FF90A4;\x0a\x09\x09\x09\x09--pitch8-primary-channel:\x20\x20\x20#E12E4D;\x0a\x09\x09\x09\x09--pitch8-secondary-note:\x20\x20\x20\x20#EC6E85;\x0a\x09\x09\x09\x09--pitch8-primary-note:\x20\x20\x20\x20\x20\x20#A6001D;\x0a\x09\x09\x09\x09--pitch9-secondary-channel:\x20#41E3B5;\x0a\x09\x09\x09\x09--pitch9-primary-channel:\x20\x20\x20#00B481;\x0a\x09\x09\x09\x09--pitch9-secondary-note:\x20\x20\x20\x20#28D1A1;\x0a\x09\x09\x09\x09--pitch9-primary-note:\x20\x20\x20\x20\x20\x20#00835E;\x0a\x09\x09\x09\x09--pitch10-secondary-channel:#CA77FF;\x0a\x09\x09\x09\x09--pitch10-primary-channel:\x20\x20#9609FF;\x0a\x09\x09\x09\x09--pitch10-secondary-note:\x20\x20\x20#B54FFF;\x0a\x09\x09\x09\x09--pitch10-primary-note:\x20\x20\x20\x20\x20#8400E3;\x0a\x09\x09\x09\x09--noise1-secondary-channel:\x20#C1C1C1;\x0a\x09\x09\x09\x09--noise1-primary-channel:\x20\x20\x20#898989;\x0a\x09\x09\x09\x09--noise1-secondary-note:\x20\x20\x20\x20#ADADAD;\x0a\x09\x09\x09\x09--noise1-primary-note:\x20\x20\x20\x20\x20\x20#6C6C6C;\x0a\x09\x09\x09\x09--noise2-secondary-channel:\x20#E8BB8C;\x0a\x09\x09\x09\x09--noise2-primary-channel:\x20\x20\x20#BD7D3A;\x0a\x09\x09\x09\x09--noise2-secondary-note:\x20\x20\x20\x20#D1A374;\x0a\x09\x09\x09\x09--noise2-primary-note:\x20\x20\x20\x20\x20\x20#836342;\x0a\x09\x09\x09\x09--noise3-secondary-channel:\x20#9BC4EB;\x0a\x09\x09\x09\x09--noise3-primary-channel:\x20\x20\x20#4481BE;\x0a\x09\x09\x09\x09--noise3-secondary-note:\x20\x20\x20\x20#7CA7D3;\x0a\x09\x09\x09\x09--noise3-primary-note:\x20\x20\x20\x20\x20\x20#476685;\x0a\x09\x09\x09\x09--noise4-secondary-channel:\x20#C5A5E0;\x0a\x09\x09\x09\x09--noise4-primary-channel:\x20\x20\x20#8553AE;\x0a\x09\x09\x09\x09--noise4-secondary-note:\x20\x20\x20\x20#B290CC;\x0a\x09\x09\x09\x09--noise4-primary-note:\x20\x20\x20\x20\x20\x20#684F7D;\x0a\x09\x09\x09\x09--noise5-secondary-channel:\x20#B8CE93;\x0a\x09\x09\x09\x09--noise5-primary-channel:\x20\x20\x20#87A74F;\x0a\x09\x09\x09\x09--noise5-secondary-note:\x20\x20\x20\x20#ABC183;\x0a\x09\x09\x09\x09--noise5-primary-note:\x20\x20\x20\x20\x20\x20#68784C;\x0a\x09\x09\x09}\x0a\x09\x09\x09\x0a\x09\x09\x09.beepboxEditor\x20button,\x20.beepboxEditor\x20select\x20{\x0a\x09\x09\x09\x09box-shadow:\x20inset\x200\x200\x200\x201px\x20var(--secondary-text);\x0a\x09\x09\x09}\x0a\x09\x09', 'panningVolumeDeltaR', 'detectKey', 'decay\x20bright', 'supersawShape', 'pasteNotes', 'custom', 'patternSelectionEnd', 'whistle', 'panningDelayBufferMask', 'save', 'classList', 'execCommand', 'seamless', 'var(--black-piano-key)', 'availWidth', '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09//\x20Reverb,\x20implemented\x20using\x20a\x20feedback\x20delay\x20network\x20with\x20a\x20Hadamard\x20matrix\x20and\x20lowpass\x20filters.\x0a\x09\x09\x09\x09\x09//\x20good\x20ratios:\x20\x20\x20\x200.555235\x20+\x200.618033\x20+\x200.818\x20+\x20\x20\x201.0\x20=\x202.991268\x0a\x09\x09\x09\x09\x09//\x20Delay\x20lengths:\x20\x203041\x20\x20\x20\x20\x20+\x203385\x20\x20\x20\x20\x20+\x204481\x20\x20+\x20\x205477\x20=\x2016384\x20=\x202^14\x0a\x09\x09\x09\x09\x09//\x20Buffer\x20offsets:\x203041\x20\x20\x20\x20->\x206426\x20\x20\x20->\x2010907\x20->\x2016384\x0a\x09\x09\x09\x09\x09const\x20reverbDelayPos1\x20=\x20(reverbDelayPos\x20+\x20\x203041)\x20&\x20reverbMask;\x0a\x09\x09\x09\x09\x09const\x20reverbDelayPos2\x20=\x20(reverbDelayPos\x20+\x20\x206426)\x20&\x20reverbMask;\x0a\x09\x09\x09\x09\x09const\x20reverbDelayPos3\x20=\x20(reverbDelayPos\x20+\x2010907)\x20&\x20reverbMask;\x0a\x09\x09\x09\x09\x09const\x20reverbSample0\x20=\x20(reverbDelayLine[reverbDelayPos]);\x0a\x09\x09\x09\x09\x09const\x20reverbSample1\x20=\x20reverbDelayLine[reverbDelayPos1];\x0a\x09\x09\x09\x09\x09const\x20reverbSample2\x20=\x20reverbDelayLine[reverbDelayPos2];\x0a\x09\x09\x09\x09\x09const\x20reverbSample3\x20=\x20reverbDelayLine[reverbDelayPos3];\x0a\x09\x09\x09\x09\x09const\x20reverbTemp0\x20=\x20-(reverbSample0\x20+\x20sampleL)\x20+\x20reverbSample1;\x0a\x09\x09\x09\x09\x09const\x20reverbTemp1\x20=\x20-(reverbSample0\x20+\x20sampleR)\x20-\x20reverbSample1;\x0a\x09\x09\x09\x09\x09const\x20reverbTemp2\x20=\x20-reverbSample2\x20+\x20reverbSample3;\x0a\x09\x09\x09\x09\x09const\x20reverbTemp3\x20=\x20-reverbSample2\x20-\x20reverbSample3;\x0a\x09\x09\x09\x09\x09const\x20reverbShelfInput0\x20=\x20(reverbTemp0\x20+\x20reverbTemp2)\x20*\x20reverb;\x0a\x09\x09\x09\x09\x09const\x20reverbShelfInput1\x20=\x20(reverbTemp1\x20+\x20reverbTemp3)\x20*\x20reverb;\x0a\x09\x09\x09\x09\x09const\x20reverbShelfInput2\x20=\x20(reverbTemp0\x20-\x20reverbTemp2)\x20*\x20reverb;\x0a\x09\x09\x09\x09\x09const\x20reverbShelfInput3\x20=\x20(reverbTemp1\x20-\x20reverbTemp3)\x20*\x20reverb;\x0a\x09\x09\x09\x09\x09reverbShelfSample0\x20=\x20reverbShelfB0\x20*\x20reverbShelfInput0\x20+\x20reverbShelfB1\x20*\x20reverbShelfPrevInput0\x20-\x20reverbShelfA1\x20*\x20reverbShelfSample0;\x0a\x09\x09\x09\x09\x09reverbShelfSample1\x20=\x20reverbShelfB0\x20*\x20reverbShelfInput1\x20+\x20reverbShelfB1\x20*\x20reverbShelfPrevInput1\x20-\x20reverbShelfA1\x20*\x20reverbShelfSample1;\x0a\x09\x09\x09\x09\x09reverbShelfSample2\x20=\x20reverbShelfB0\x20*\x20reverbShelfInput2\x20+\x20reverbShelfB1\x20*\x20reverbShelfPrevInput2\x20-\x20reverbShelfA1\x20*\x20reverbShelfSample2;\x0a\x09\x09\x09\x09\x09reverbShelfSample3\x20=\x20reverbShelfB0\x20*\x20reverbShelfInput3\x20+\x20reverbShelfB1\x20*\x20reverbShelfPrevInput3\x20-\x20reverbShelfA1\x20*\x20reverbShelfSample3;\x0a\x09\x09\x09\x09\x09reverbShelfPrevInput0\x20=\x20reverbShelfInput0;\x0a\x09\x09\x09\x09\x09reverbShelfPrevInput1\x20=\x20reverbShelfInput1;\x0a\x09\x09\x09\x09\x09reverbShelfPrevInput2\x20=\x20reverbShelfInput2;\x0a\x09\x09\x09\x09\x09reverbShelfPrevInput3\x20=\x20reverbShelfInput3;\x0a\x09\x09\x09\x09\x09reverbDelayLine[reverbDelayPos1]\x20=\x20reverbShelfSample0\x20*\x20delayInputMult;\x0a\x09\x09\x09\x09\x09reverbDelayLine[reverbDelayPos2]\x20=\x20reverbShelfSample1\x20*\x20delayInputMult;\x0a\x09\x09\x09\x09\x09reverbDelayLine[reverbDelayPos3]\x20=\x20reverbShelfSample2\x20*\x20delayInputMult;\x0a\x09\x09\x09\x09\x09reverbDelayLine[reverbDelayPos\x20]\x20=\x20reverbShelfSample3\x20*\x20delayInputMult;\x0a\x09\x09\x09\x09\x09reverbDelayPos\x20=\x20(reverbDelayPos\x20+\x201)\x20&\x20reverbMask;\x0a\x09\x09\x09\x09\x09sampleL\x20+=\x20reverbSample1\x20+\x20reverbSample2\x20+\x20reverbSample3;\x0a\x09\x09\x09\x09\x09sampleR\x20+=\x20reverbSample0\x20+\x20reverbSample2\x20-\x20reverbSample3;\x0a\x09\x09\x09\x09\x09reverb\x20+=\x20reverbDelta;', 'clearAllPitches', 'sustainFilterA1Delta', 'watch', 'countInMetronome', 'showRecordButton', 'getMobileLayout', 'supersawDelayLength', 'distortionBaseVolume', 'Unrecognized\x20beats-per-bar\x20conversion\x20strategy.', 'arpeggio', 'last-button', 'contentWindow', 'hashchange', 'bitcrusherScaleScale', 'getNeededBits', 'commit', 'floor', 'flute', 'noteFilters', 'isOnMac', 'patternEditorDrumBackground', 'delayIndex', 'getMaxInstrumentsPerPatternForChannel', 'island\x20:(', 'number', 'div', 'blues\x20major', 'encodeBuffer', 'image/svg+xml', 'dissonant', 'computeTone', 'random', 'oldValue', 'join', 'prevNoteSize', 'click', 'filterCutoffHz', 'synthesizer', 'getSamplesPerBar', 'centerHz', 'autoFollow', 'maxPitchOrOperatorCount', '(Multiples\x20of\x204\x20are\x20recommended)', 'Choose\x20Layout...', 'maxEnvelopeCount', 'getRoundedSettingValueFromHz', 'Okay', 'KeyY', 'sin', 'echoShelfSampleR', 'touch-action:\x20pan-y;\x20position:\x20absolute;', 'randomPreset', 'harmonicsMax', '2→3', 'harmonicsControlPointBits', 'wave', 'writeUint16', 'high-pass', 'fullScreen', 'drumsetSpectrumWaves', 'releaseNotesURL', 'viewPlayer', 'recordingSetup', 'Key:', 'slice', 'undefined', 'noteSecondsEnd', 'computeChordExpression', 'tempFilterStartCoefficients', 'pitchOctaves', 'pushBack', 'every', 'pulseWidthSynth', 'echoMultDelta', 'echoDelayLineDirty', 'hum', 'sustainFilterPrevInput1', 'http://www.w3.org/2000/svg', 'isFinite', 'class', 'noteSizeStart', 'small', 'insertChannel', 'You\x20can\x20combine\x20this\x20with\x20envelopes\x20to\x20bend\x20pitch\x20over\x20time,\x20or\x20play\x20multiple\x20simultaneous\x20instruments\x20with\x20different\x20pitch\x20shifts\x20for\x20interesting\x20layered\x20sounds.', 'var(--secondary-text)', 'chordSize', 'low-pass', 'Try\x20different\x20combinations\x20of\x20a\x20\x22carrier\x22\x20wave\x20and\x20a\x20\x22modulator\x22\x20wave\x20with\x20different\x20frequencies\x20to\x20get\x20a\x20feel\x20for\x20how\x20they\x20sound\x20together.', 'location', 'lowPass1stOrderButterworth', 'flare\x203', ';\x0a}\x0a\x0a.beepboxEditor\x20.settings-area\x20{\x0a\x09grid-area:\x20settings-area;\x0a\x09display:\x20grid;\x0a\x20\x20\x20\x20grid-template-columns:\x20auto;\x0a\x20\x20\x20\x20grid-template-rows:\x20min-content\x20min-content\x20min-content\x20min-content\x20min-content;\x0a\x20\x20\x20\x20grid-template-areas:\x20\x22version-area\x22\x20\x22play-pause-area\x22\x20\x22menu-area\x22\x20\x22song-settings-area\x22\x20\x22instrument-settings-area\x22;\x0a\x09grid-column-gap:\x206px;\x0a}\x0a\x0a.beepboxEditor\x20.version-area{\x20grid-area:\x20version-area;\x20}\x0a.beepboxEditor\x20.play-pause-area{\x20grid-area:\x20play-pause-area;\x20}\x0a.beepboxEditor\x20.menu-area{\x20grid-area:\x20menu-area;\x20}\x0a.beepboxEditor\x20.song-settings-area{\x20grid-area:\x20song-settings-area;\x20}\x0a.beepboxEditor\x20.instrument-settings-area{\x20grid-area:\x20instrument-settings-area;\x20}\x0a\x0a.beepboxEditor\x20.tip\x20{\x0a\x09cursor:\x20help;\x0a\x09color:\x20', 'metronomePrevAmplitude', 'transition\x20type', '⤳\x20Share\x20Song\x20URL', 'setLayout', 'write', 'envelopeEditor', 'add', 'Instrument\x20Volume', 'synth\x20kick', 'tempoMin', 'bassoon', ';\x0a\x09\x09tone.operatorExpressions[#]\x20=\x20operator#OutputMult;\x0a\x09\x09tone.feedbackOutputs[#]\x20=\x20operator#Output;\x0a\x09\x09tone.feedbackMult\x20=\x20feedbackMult;\x0a\x09\x09tone.expression\x20=\x20expression;\x0a\x09\x09\x0a\x09\x09synth.sanitizeFilters(filters);\x0a\x09\x09tone.initialNoteFilterInput1\x20=\x20initialFilterInput1;\x0a\x09\x09tone.initialNoteFilterInput2\x20=\x20initialFilterInput2;\x0a\x09', 'resetEffects', 'feedbackVolume', 'supersawDynamism', 'chipWave', 'push', 'trackVisibleChannels', 'controlPointCount', 'command', 'Modulator\x20', 'read', '1→2→3→4', 'font-size:\x20smaller;\x20color:\x20', 'chiffer', 'var(--pitch10-secondary-note)', 'flare\x201', 'octaveScrollBarContainer', 'If\x20you\x27re\x20listening\x20through\x20headphones\x20or\x20some\x20other\x20stereo\x20sound\x20system,\x20this\x20controls\x20the\x20position\x20of\x20the\x20instrument\x20and\x20where\x20the\x20sound\x20is\x20coming\x20from,\x20ranging\x20from\x20left\x20to\x20right.', 'filterFreqRange', 'keyup', 'Miscalculated\x20number\x20of\x20bars.', 'operatorFrequency', 'Stretch\x20notes\x20to\x20fit\x20in\x20bars.', '~2×', 'trackContainer', 'slap\x20bass\x202', 'Instrument\x20Number', 'supersawDelayIndex', 'drumsetSpectrum', 'filterFreqStep', 'twang\x201', 'focus', 'getElementById', 'AudioContext', 'frequencyFromPitch', 'removeEventListener', 'right', 'prevBarButton', 'Envelopes\x20are\x20a\x20way\x20to\x20dynamically\x20adjust\x20various\x20other\x20settings\x20over\x20time,\x20usually\x20based\x20on\x20how\x20long\x20the\x20note\x20lasts.\x20Press\x20the\x20+\x20button\x20to\x20add\x20an\x20envelope,\x20then\x20use\x20the\x20menus\x20below\x20to\x20select\x20which\x20setting\x20to\x20control\x20and\x20the\x20curve\x20of\x20the\x20envelope.\x20Try\x20different\x20combinations\x20to\x20see\x20how\x20they\x20sound!', 'position:\x20relative;\x20overflow:\x20hidden;', 'hzOffset', 'Ignore\x20notes\x20not\x20in\x20the\x20song\x27s\x20scale:', 'length', 'chorusPeriodSeconds', 'moveNotesSideways', ';\x20touch-action:\x20pan-y;\x20position:\x20absolute;', 'alert', 'display:\x20flex;\x20gap:\x2010px;', 'content', 'note\x20size', 'state', 'Envelope\x20curves\x20move\x20in\x20the\x20range\x20from\x200\x20to\x201\x20(or\x20vice\x20versa),\x20where\x200\x20means\x20as\x20quiet\x20as\x20possible\x20and\x201\x20is\x20the\x20same\x20as\x20the\x20corresponding\x20position\x20selected\x20in\x20the\x20instrument\x20settings\x20above.\x20If\x20multiple\x20envelopes\x20are\x20targetting\x20the\x20same\x20setting,\x20they\x20are\x20multiplied\x20before\x20applying\x20to\x20the\x20setting.', 'pickedStringFunctionCache', 'operatorFrequencies', 'highPass1stOrderButterworth', 'ignorePerformedNotesNotInScale', 'piano', 'flags', 'notes', 'partsPerBeat', 'An\x20instant\x20fade-in\x20sounds\x20like\x20instruments\x20that\x20are\x20played\x20by\x20hitting\x20or\x20plucking,\x20whereas\x20slower\x20fade-ins\x20sound\x20like\x20instruments\x20that\x20are\x20played\x20by\x20blowing\x20air.', 'pickedStringDispersionCenterFreq', '5,\x203', 'primaryNote', 'melodic\x20drum', 'container', 'operatorSourceTemplate', 'Harmonics', 'pickedStrings', 'boxSelectionChannel', 'pathname', 'Highlight\x20\x22Fifth\x22\x20of\x20Song\x20Key', 'instrumentType', 'prevVibrato', 'pickedStringBaseExpression', 'highShelf1stOrder', '\x20L\x2020\x20', 'secondsToFadeInSetting', 'log', 'exportButton', 'var(--ui-widget-focus)', 'Noise', 'fifth', 'reverbShelfB0', 'toString', 'writeInt8', 'getMaxInstrumentsPerPattern', 'effects', 'filterFreqReferenceHz', 'width:\x2020px;\x20height:\x2020px;\x20margin:\x200\x202px;\x20box-sizing:\x20border-box;\x20flex-shrink:\x200;\x20display:\x20flex;\x20justify-content:\x20center;\x20align-items:\x20center;', 'maximumTonesPerChannel', 'findIndex', 'noteTicksEnd', 'flutter\x20pad', 'strange', 'instrumentVolume', 'operatorCount', 'piano-label', 'newestUndoIndex', 'pipe\x20organ', 'top', 'This\x20FM\x20synthesizer\x20uses\x20up\x20to\x20four\x20waves,\x20numbered\x201,\x202,\x203,\x20and\x204.\x20Each\x20wave\x20may\x20have\x20its\x20own\x20frequency\x20and\x20volume.', 'chord\x20type', 'KeyS', 'nextSlideRatioStart', 'fadeInRange', 'echoDelayOffsetStart', 'beatsPerBarMax', 'KeyA', 'var(--pitch4-primary-note)', 'clear', 'drumsetEnvelope', 'noiseChannels', 'get', 'jazz\x20guitar', 'operatorAmplitudeCurve', 'fromBase64String', 'Wicki-Hayden', 'charCodeAt', 'getMaxInstrumentsPerChannel', 'deactivated', 'pressControlForShortcuts', '\u3000Set\x20Up\x20Note\x20Recording...', 'noteVolume', 'layout-option', 'pitchShiftMarker', 'findRandomZeroCrossing', '0.01', 'unison', ';\x0a\x09-webkit-mask-image:\x20var(--muted-symbol);\x0a\x09mask-image:\x20var(--muted-symbol);\x0a}\x0a\x0a.beepboxEditor\x20.promptContainer\x20{\x0a\x09position:\x20absolute;\x0a\x09top:\x200;\x0a\x09left:\x200;\x0a\x09width:\x20100%;\x0a\x09height:\x20100%;\x0a\x09display:\x20flex;\x0a\x09justify-content:\x20center;\x0a\x09align-items:\x20center;\x0a\x09z-index:\x20100;\x0a}\x0a\x0a.beepboxEditor\x20.promptContainer::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09top:\x200;\x0a\x09left:\x200;\x0a\x09width:\x20100%;\x0a\x09height:\x20100%;\x0a\x09background:\x20', 'maxChordSize', 'tempDrumSetControlPoint', 'detuneToCents', 'shamisen', 'width:\x20100%;\x20height:\x20100%;\x20display:\x20flex;\x20flex-direction:\x20column-reverse;\x20align-items:\x20stretch;', 'createElement', 'This\x20setting\x20controls\x20the\x20frequency\x20of\x20an\x20individual\x20FM\x20wave,\x20relative\x20to\x20the\x20fundamental\x20frequency\x20of\x20the\x20note.\x20The\x20multiplier\x201×\x20is\x20the\x20same\x20as\x20the\x20fundamental\x20frequency,\x20whereas\x202x\x20would\x20be\x20an\x20octave\x20(12\x20semitones)\x20above\x20it.\x20The\x20frequencies\x20with\x20a\x20\x22~\x22\x20are\x20slightly\x20detuned\x20and\x20shift\x20in\x20and\x20out\x20of\x20phase\x20over\x20time\x20compared\x20to\x20the\x20other\x20frequencies.', 'Midi\x20event\x20time\x20cannot\x20go\x20backwards.', 'sustainFilterB2', 'updateValue', 'msSaveOrOpenBlob', '11×', '(1\u20022)←3←4', 'Usually,\x20when\x20one\x20note\x20ends\x20at\x20the\x20same\x20time\x20another\x20begins,\x20the\x20old\x20note\x20will\x20fade\x20out\x20and\x20the\x20new\x20note\x20will\x20fade\x20in\x20based\x20on\x20the\x20fade\x20in/out\x20settings,\x20but\x20this\x20setting\x20can\x20override\x20that,\x20connecting\x20the\x20end\x20of\x20one\x20note\x20to\x20the\x20beginning\x20of\x20the\x20next.', 'blackKeyNameParents', 'randomGenerated', 'copyInstrument', 'presets', 'toJSON', 'tempMatchedPitchTones', 'arpeggiates', 'noSelection', 'tonePool', 'brass\x20synth\x201', 'resume', 'grand\x20piano', 'spectrum', 'writePartDuration', 'chipNoises', 'Customize\x20Instrument', 'button', 'filterTypeNames', 'count', 'tenor\x20sax', 'chorus\x20&\x20reverb', 'nextSlideEnd', 'setUint32', 'Harmonics:', 'tan', '[value=autoPlay]', 'Vibrato', 'sweep\x20pad', 'operator', 'strings', 'ceil', 'freeAllTones', 'chromatic', 'panDelaySecondsMax', 'margin:\x201px;\x20height:\x20', 'weight', 'versions', 'Instrument:', 'noteEndPart', 'baritone\x20sax', 'noteSecondsStart', 'detuneCents', 'octave', 'output2', 'Flute\x20Presets', 'var(--hover-preview)', 'change', 'noise4', 'data', '1←2←3←4', 'getLowpassCutoffDecayVolumeCompensation', 'nextNoteSize', 'This\x20is\x20a\x20TEMPORARY\x20list\x20of\x20songs\x20you\x20have\x20recently\x20modified.\x20Please\x20keep\x20your\x20own\x20backups\x20of\x20songs\x20you\x20care\x20about!', 'sign', 'expression', 'decay\x20soft', 'effectsSynth', 'liveInputChannel', 'getEndPinIndex', 'spectrumSynth', '0.5', 'bitcrusherBaseVolume', 'computeEnvelope', 'text-align:\x20center;\x20margin:\x203px\x200;\x20color:\x20', 'prevNoteTicksEnd', '\x20z\x20', 'getPitchName', 'touches', 'fmBaseExpression', 'elements', 'liveInputEndTime', 'prevBar', 'ryukyu', 'effectOrder', 'noteSizeToVolumeMult', 'removeChild', 'href', ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer::-webkit-scrollbar-thumb\x20{\x0a\x09\x09\x09\x09\x09background-color:\x20', 'MAX_VALUE', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09instrumentState.distortion\x20=\x20distortion;\x0a\x09\x09\x09\x09instrumentState.distortionDrive\x20=\x20distortionDrive;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(distortionFractionalInput1)\x20||\x20Math.abs(distortionFractionalInput1)\x20<\x20epsilon)\x20distortionFractionalInput1\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(distortionFractionalInput2)\x20||\x20Math.abs(distortionFractionalInput2)\x20<\x20epsilon)\x20distortionFractionalInput2\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(distortionFractionalInput3)\x20||\x20Math.abs(distortionFractionalInput3)\x20<\x20epsilon)\x20distortionFractionalInput3\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(distortionPrevInput)\x20||\x20Math.abs(distortionPrevInput)\x20<\x20epsilon)\x20distortionPrevInput\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(distortionNextOutput)\x20||\x20Math.abs(distortionNextOutput)\x20<\x20epsilon)\x20distortionNextOutput\x20=\x200.0;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09instrumentState.distortionFractionalInput1\x20=\x20distortionFractionalInput1;\x0a\x09\x09\x09\x09instrumentState.distortionFractionalInput2\x20=\x20distortionFractionalInput2;\x0a\x09\x09\x09\x09instrumentState.distortionFractionalInput3\x20=\x20distortionFractionalInput3;\x0a\x09\x09\x09\x09instrumentState.distortionPrevInput\x20=\x20distortionPrevInput;\x0a\x09\x09\x09\x09instrumentState.distortionNextOutput\x20=\x20distortionNextOutput;', 'parse', ';\x0a\x09\x09\x09\x09\x09border:\x203px\x20solid\x20', 'checked', 'createScriptProcessor', 'destination', 'loopEditor', 'sustain', 'vibratos', 'echoShelfSampleL', 'Song\x20Settings', '\x22></iframe>', 'var(--pitch3-primary-note)', 'end', 'application/json', 'connected', 'checkbox', 'Distortion:', 'range', 'pickedStringShelfHz', 'fadeOutNeutral', 'firstChild', 'barCount', 'Channel\x20Settings...\x20(Q)', 'Distortion', 'dictionary', 'maxCount', 'Novelty\x20Presets', 'var(--noise5-secondary-channel)', 'isSoft', 'defaultScale', 'transpose', 'getDrumsetEnvelope', 'enableNotePreview', 'updatePlayButton', 'textSelection', 'expert', 'useCapsLockForNotes', 'bitcrusherOctave', 'This\x20setting\x20allows\x20you\x20to\x20design\x20your\x20own\x20sound\x20wave!\x20Most\x20musical\x20waves\x20are\x20actually\x20a\x20combination\x20of\x20sine\x20waves\x20at\x20certain\x20frequencies,\x20and\x20this\x20lets\x20you\x20control\x20the\x20volume\x20of\x20each\x20sine\x20wave\x20individually.', 'drums', '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20delayInputMult\x20=\x20+instrumentState.delayInputMult;\x0a\x09\x09\x09\x09const\x20delayInputMultDelta\x20=\x20+instrumentState.delayInputMultDelta;', 'metronomeWhileRecording', 'zoomInButton', 'expressionDelta', 'append', 'beatCountStrategy', 'writePinCount', 'var(--pitch7-primary-note)', 'highShelf2ndOrder', '3202592vzgZtS', 'var(--noise5-primary-note)', 'pointerEvents', 'return\x20(synth,\x20bufferIndex,\x20runLength,\x20tone,\x20instrumentState)\x20=>\x20{', 'whole\x20tone', 'var(--pitch7-secondary-channel)', 'echoDelayPos', 'pitchShift', 'noteFilterGain', 'beepboxEditor', 'phases', 'envelopeEnds', 'piano-button', 'peakFront', ')\x20*\x20expression;\x0a\x09\x09\x09\x09\x09const\x20sample\x20=\x20applyFilters(inputSample,\x20initialFilterInput1,\x20initialFilterInput2,\x20filterCount,\x20filters);\x0a\x09\x09\x09\x09\x09initialFilterInput2\x20=\x20initialFilterInput1;\x0a\x09\x09\x09\x09\x09initialFilterInput1\x20=\x20inputSample;\x0a\x09\x09\x09\x09\x09data[sampleIndex]\x20+=\x20sample;\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09expression\x20+=\x20expressionDelta;\x0a\x09\x09\x09\x09\x09delayLength#\x20+=\x20delayLengthDelta#;\x0a\x09\x09\x09\x09\x09allPassG#\x20+=\x20allPassGDelta#;\x0a\x09\x09\x09\x09\x09sustainFilterA1#\x20+=\x20sustainFilterA1Delta#;\x0a\x09\x09\x09\x09\x09sustainFilterA2#\x20+=\x20sustainFilterA2Delta#;\x0a\x09\x09\x09\x09\x09sustainFilterB0#\x20+=\x20sustainFilterB0Delta#;\x0a\x09\x09\x09\x09\x09sustainFilterB1#\x20+=\x20sustainFilterB1Delta#;\x0a\x09\x09\x09\x09\x09sustainFilterB2#\x20+=\x20sustainFilterB2Delta#;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09//\x20Avoid\x20persistent\x20denormal\x20or\x20NaN\x20values\x20in\x20the\x20delay\x20buffers\x20and\x20filter\x20history.\x0a\x09\x09\x09\x09const\x20epsilon\x20=\x20(1.0e-24);\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(allPassSample#)\x20||\x20Math.abs(allPassSample#)\x20<\x20epsilon)\x20allPassSample#\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(allPassPrevInput#)\x20||\x20Math.abs(allPassPrevInput#)\x20<\x20epsilon)\x20allPassPrevInput#\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(sustainFilterSample#)\x20||\x20Math.abs(sustainFilterSample#)\x20<\x20epsilon)\x20sustainFilterSample#\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(sustainFilterPrevOutput2#)\x20||\x20Math.abs(sustainFilterPrevOutput2#)\x20<\x20epsilon)\x20sustainFilterPrevOutput2#\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(sustainFilterPrevInput1#)\x20||\x20Math.abs(sustainFilterPrevInput1#)\x20<\x20epsilon)\x20sustainFilterPrevInput1#\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(sustainFilterPrevInput2#)\x20||\x20Math.abs(sustainFilterPrevInput2#)\x20<\x20epsilon)\x20sustainFilterPrevInput2#\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(fractionalDelaySample#)\x20||\x20Math.abs(fractionalDelaySample#)\x20<\x20epsilon)\x20fractionalDelaySample#\x20=\x200.0;\x0a\x09\x09\x09\x09pickedString#.allPassSample\x20=\x20allPassSample#;\x0a\x09\x09\x09\x09pickedString#.allPassPrevInput\x20=\x20allPassPrevInput#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterSample\x20=\x20sustainFilterSample#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterPrevOutput2\x20=\x20sustainFilterPrevOutput2#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterPrevInput1\x20=\x20sustainFilterPrevInput1#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterPrevInput2\x20=\x20sustainFilterPrevInput2#;\x0a\x09\x09\x09\x09pickedString#.fractionalDelaySample\x20=\x20fractionalDelaySample#;\x0a\x09\x09\x09\x09pickedString#.delayIndex\x20=\x20delayIndex#;\x0a\x09\x09\x09\x09pickedString#.prevDelayLength\x20=\x20delayLength#;\x0a\x09\x09\x09\x09pickedString#.allPassG\x20=\x20allPassG#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterA1\x20=\x20sustainFilterA1#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterA2\x20=\x20sustainFilterA2#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterB0\x20=\x20sustainFilterB0#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterB1\x20=\x20sustainFilterB1#;\x0a\x09\x09\x09\x09pickedString#.sustainFilterB2\x20=\x20sustainFilterB2#;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09tone.expression\x20=\x20expression;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09synth.sanitizeFilters(filters);\x0a\x09\x09\x09\x09tone.initialNoteFilterInput1\x20=\x20initialFilterInput1;\x0a\x09\x09\x09\x09tone.initialNoteFilterInput2\x20=\x20initialFilterInput2;\x0a\x09\x09\x09}', 'noteStartPart', 'feedbackOutputs', 'Note\x20Filter', 'chance', '496JebIOO', 'delayLengthDelta', 'pitchChannels', 'isRecording', 'getChannelIsNoise', 'a2Delta', 'IntlBackslash', 'eqFilters', 'n.\x20filter\x20#\x20freq', 'pause', 'new', 'settings', 'pulse\x20width', 'BeepBox\x20comes\x20with\x20many\x20instrument\x20presets,\x20try\x20them\x20out!\x20You\x20can\x20also\x20create\x20your\x20own\x20custom\x20instruments!', 'copy', 'bitcrusherPrevInput', 'recentPatternInstruments', 'prototype', 'digits', 'pulseWidthRange', 'tempo', 'feedbackMult', 'bitcrusherScale', 'pitches', 'var(--pitch4-secondary-channel)', 'lamejs', 'selectedIndex', 'Move\x20Notes\x20Down\x20(-\x20or\x20⇧-)', 'guitar\x20fret\x20noise', ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.menu-area\x20{\x0a\x09\x09\x09\x09\x09position:\x20sticky;\x0a\x09\x09\x09\x09\x09top:\x2082px;\x0a\x09\x09\x09\x09\x09z-index:\x201;\x0a\x09\x09\x09\x09\x09background:\x20', 'sax\x20synth', '13×', 'ticksPerPart', 'currentUndoIndex', 'acoustic', 'loopStart', 'deleteChannel', 'return', 'createElementNS', 'blackPianoKey', 'noise1', 'customType', 'var(--primary-text)', 'M\x200\x20', '\x204\x20L\x20', 'supersawShapeDelta', 'audioProcessCallback', 'samplesPerSecond', 'panning', 'Unhandled\x20pitched\x20instrument\x20type\x20in\x20random\x20generator.', 'reverse\x20cymbal', 'echoShelfGain', 'generalMidi', 'jumpIntoLoop', 'envelopes', 'nextNotePitchIndex', 'Instrument\x20', 'bitcrusherCurrentOutput', 'First,\x20you\x20could\x20enable\x20multiple\x20simultaneous\x20instruments\x20per\x20channel.\x20All\x20of\x20the\x20channel\x27s\x20instruments\x20will\x20play\x20all\x20of\x20the\x20notes\x20in\x20the\x20channel\x20at\x20the\x20same\x20time,\x20and\x20you\x20can\x20click\x20an\x20instrument\x20number\x20to\x20view\x20and\x20edit\x20its\x20settings.', 'A\x20supersaw\x20is\x20a\x20combination\x20of\x20many\x20sawtooth\x20waves,\x20and\x20this\x20setting\x20controls\x20the\x20distance\x20between\x20their\x20frequencies.\x20The\x20dynamism\x20setting\x20must\x20be\x20used\x20for\x20the\x20extra\x20waves\x20to\x20have\x20any\x20effect.', 'supersawVoiceCount', 'undo', 'code', 'getBeatsPerMinute', 'phaseDeltas', 'double\x20harmonic\x20:)', 'harmonicsRendered', 'liveInputTones', 'spectrumBaseExpression', 'feedbacks', 'compatible\x20browser', 'Note', 'chip\x20noise', 'delayInputMult', 'Paste\x20Pattern\x20Notes\x20(V)', 'file', 'iterator', 'BracketRight', 'piano\x20starting\x20at\x20C\x20:)', 'operatorExpressions', '1←(2\u20023\u20024)', 'selectionStart', 'drumsetFadeOutTicks', 'beatsPerBar', 'FFT\x20array\x20length\x20must\x20be\x20at\x20least\x204.', 'performance', 'distortionDrive', 'goToBar', 'Invalid\x20', 'blown\x20bottle', 'showFifth', 'chorusVoiceMult', 'showScrollBar', 'reset', 'barCountPosition', 'sanitizeFilters', 'Drumset\x20Spectrum', '20×', 'n.\x20filter\x20freqs', 'supersaw', 'music\x20box\x202', 'startedMetronome', 'instrumentVolumeToVolumeMult', '÷4\x20(standard)', 'sustainFilterB0Delta', 'prompt\x20noSelection', 'tempFilterEndCoefficients', 'fifth\x20swell', 'bar', 'initToDefault', 'playheadInternal', 'body', 'echoDelay', 'spectrumControlPoints', 'spectrumControlPointBits', 'parseFromString', 'forceContinueAtStart', 'fretless\x20bass', 'Copy', 'Unhandled\x20instrument\x20type\x20for\x20spectrum\x20song\x20tag\x20code.', '1←(2\u20023←4)', 'harmonicsSynth', 'noteTicksStart', 'startRecording', 'uiWidgetFocus', 'filterFreqReferenceSetting', '24px', 'isAtStartOfTick', 'echoDelayStepTicks', 'var(--loop-accent)', 'drumsetIndexReferenceDelta', 'layeredInstrumentCountMax', 'registerMidiAccessHandler', 'Unison', 'Unhandled\x20TipPrompt\x20type:\x20', 'fm\x20feedback', 'Mute\x20(M),\x20Mute\x20All\x20(⇧M),\x20Solo\x20(S),\x20Exclude\x20(⇧S)', 'which', 'Bars\x20per\x20song:', 'getFullScreen', 'instrument-bar', 'getTotalBars', 'midiHandlerId', 'echoDelayOffsetEnd', 'delayResetOffset', 'Sustain:', 'pitch5', 'hoverPreview', 'setUint8', 'panningOffsetL', 'Instrument\x20Copy/Paste\x20Buttons', 'panningVolumeR', 'Drum\x20Presets', 'isNoop', 'pageY', '16×', 'splice', 'history', 'display', 'clientHeight', 'panningOffsetDeltaR', 'Most\x20envelope\x20curves\x20restart\x20from\x20the\x20beginning\x20every\x20time\x20a\x20new\x20note\x20plays.\x20The\x20\x22note\x20size\x22\x20option\x20is\x20based\x20on\x20the\x20note\x20width\x20as\x20drawn\x20in\x20the\x20pattern\x20editor.', 'display:\x20flex;\x20flex-direction:\x20column;', 'wrapAround', 'activeElement', 'hasAttribute', 'sort', 'stringSustainType', 'drumCount', 'isWhiteKey', 'add-envelope', 'angle', 'chorusVoiceMultDelta', 'filterGainRange', 'delayInputMultDelta', '\x200\x20z', 'english\x20horn', 'fittingPowerOfTwo', 'If\x20you\x27ve\x20already\x20placed\x20some\x20notes\x20but\x20they\x20don\x27t\x20emphasize\x20\x22tonic\x22\x20pitches\x20then\x20the\x20selected\x20key\x20isn\x27t\x20very\x20meaningful.\x20You\x20can\x20select\x20the\x20\x22Detect\x20Key\x22\x20option\x20in\x20the\x20key\x20menu\x20to\x20automatically\x20align\x20the\x20most\x20emphasized\x20notes\x20with\x20\x22tonic\x22\x20pitches.', 'pitchBend', 'inputs', 'normal', 'Available\x20patterns\x20per\x20channel:', 'dark\x20choir', 'visibility', '\x200\x20a\x20', 'resetBoxSelection', 'Splice\x20beats\x20at\x20end\x20of\x20bars.', 'hollow', 'channel', 'redo', 'noiseChannelCountMax', 'MAX_SAFE_INTEGER', 'revokeObjectURL', 'Unrecognized\x20operator\x20envelope\x20type.', 'addedEffect', 'continues', '\x20M\x20', 'Feedback\x20Distortion', 'EQ\x20Filter', 'apply', 'Digit9', 'pasteNumbers', 'double\x20pulse', 'accordion', 'radio', 'chipNoise', 'Spectrum', 'pitchCount', 'note\x20filter', 'boxSelectionX1', 'filterGainCenter', 'cutoffHz', 'computed', 'newLength', 'Rhythm', 'harmonicsRenderedForPickedString', 'sqrt', 'instrumentDigits', 'Insert\x20Channel\x20(', ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09', 'isPlayingSong', 'Digit4', 'anticipatePoorPerformance', '--background-color-dim', 'getBaseVisibleOctave', 'subarray', 'pitchShiftRange', 'Enable\x20Channel\x20Muting', 'nameToPresetValue', 'localStorage', 'margin:\x203px\x200;\x20text-align:\x20center;\x20color:\x20', 'split', 'src', 'preset', 'Pitch\x20channels:', 'points', '<iframe\x20width=\x22384\x22\x20height=\x2260\x22\x20style=\x22border:\x20none;\x22\x20src=\x22', 'There\x20are\x20two\x20kinds\x20of\x20waves:\x20\x22carrier\x22\x20waves\x20play\x20a\x20tone\x20out\x20loud,\x20but\x20\x22modulator\x22\x20waves\x20distort\x20other\x20waves\x20instead.\x20Wave\x201\x20is\x20always\x20a\x20carrier\x20and\x20plays\x20a\x20tone,\x20but\x20other\x20waves\x20may\x20distort\x20it.\x20The\x20\x22Algorithm\x22\x20setting\x20determines\x20which\x20waves\x20are\x20modulators,\x20and\x20which\x20other\x20waves\x20those\x20modulators\x20distort.\x20For\x20example,\x20\x221←2\x22\x20means\x20that\x20wave\x202\x20modulates\x20wave\x201,\x20and\x20wave\x201\x20plays\x20out\x20loud.', 'tremolo1', 'getLFOAmplitude', 'Finally,\x20I\x20recommend\x20adjusting\x20the\x20fade-out\x20setting\x20to\x20allow\x20the\x20end\x20of\x20each\x20note\x20to\x20overlap\x20a\x20little\x20bit\x20with\x20the\x20beginning\x20of\x20the\x20next,\x20but\x20not\x20too\x20much!', 'oldestUndoIndex', 'echoSustainRange', 'var(--pitch-background)', 'reverb', 'linkAccent', '\x20L\x20', 'Backquote', 'reverbDelayLine', 'bitcrusherFreq', 'noise2', 'Period', 'mixVolumeDelta', ';\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20.deactivated\x20{\x0a\x09background:\x20', 'ukulele', 'patternInstruments', 'getChannelCount', 'panningVolumeL', 'Synth', 'bass\x20synth\x201', 'width:\x200;\x20flex:\x200.7;', '\x09\x09\x09/*\x20long\x20layout\x20*/\x0a\x09\x09\x09@media\x20(min-width:\x20711px)\x20{\x0a\x09\x09\x09\x09#beepboxEditorContainer\x20{\x0a\x09\x09\x09\x09\x09max-width:\x20initial;\x0a\x09\x09\x09\x09\x09height:\x20100vh;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20{\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09\x09height:\x20100vh;\x0a\x09\x09\x09\x09\x09grid-template-columns:\x20minmax(0,\x201fr)\x20390px;\x20/*\x20minmax(0,\x201fr)\x20min-content;\x20Chrome\x2080\x20grid\x20layout\x20regression.\x20https://bugs.chromium.org/p/chromium/issues/detail?id=1050307\x20*/\x0a\x09\x09\x09\x09\x09grid-template-rows:\x20minmax(481px,\x201fr)\x20minmax(0,\x20min-content);\x0a\x09\x09\x09\x09\x09grid-template-areas:\x20\x22pattern-area\x20settings-area\x22\x20\x22track-area\x20track-area\x22;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.pattern-area\x20{\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09\x09height:\x20100%;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.track-area\x20{\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09\x09display:\x20flex;\x0a\x09\x09\x09\x09\x09flex-direction:\x20column;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer\x20{\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09\x09min-height:\x200;\x0a\x09\x09\x09\x09\x09flex:\x201;\x0a\x09\x09\x09\x09\x09overflow:\x20auto;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.instrument-settings-area\x20{\x0a\x09\x09\x09\x09\x09overflow-y:\x20auto;\x0a\x09\x09\x09\x09\x09position:\x20relative;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.instrument-settings-area\x20>\x20.editor-controls\x20{\x0a\x09\x09\x09\x09\x09position:\x20absolute;\x0a\x09\x09\x09\x09\x09width:\x20100%;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.song-settings-area\x20{\x0a\x09\x09\x09\x09\x09overflow-y:\x20auto;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09.beepboxEditor\x20.settings-area\x20{\x0a\x09\x09\x09\x09\x09width:\x20390px;\x0a\x09\x09\x09\x09\x09grid-template-columns:\x20minmax(0,\x201fr)\x20minmax(0,\x201fr);\x0a\x09\x09\x09\x09\x09grid-template-rows:\x20auto\x20auto\x20auto\x20minmax(0,\x201fr);\x0a\x09\x09\x09\x09\x09grid-template-areas:\x0a\x09\x09\x09\x09\x09\x09\x22instrument-settings-area\x20version-area\x22\x0a\x09\x09\x09\x09\x09\x09\x22instrument-settings-area\x20play-pause-area\x22\x0a\x09\x09\x09\x09\x09\x09\x22instrument-settings-area\x20menu-area\x22\x0a\x09\x09\x09\x09\x09\x09\x22instrument-settings-area\x20song-settings-area\x22;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09.beepboxEditor\x20.barScrollBar\x20{\x0a\x09\x09\x09\x09\x09display:\x20none;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackContainer\x20{\x0a\x09\x09\x09\x09\x09overflow:\x20visible;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer\x20{\x0a\x09\x09\x09\x09\x09scrollbar-width:\x20auto;\x0a\x09\x09\x09\x09\x09scrollbar-color:\x20', 'Ctrl+', 'markCustomWaveDirty', '\x20at\x20index\x20', 'channelBoxLabel', 'decay\x203', ';\x0a\x09display:\x20inline-block;\x0a\x09-webkit-mask-image:\x20var(--unmuted-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09-webkit-mask-size:\x20contain;\x0a\x09mask-image:\x20var(--unmuted-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09mask-size:\x20contain;\x0a}\x0a\x0a.beepboxEditor\x20.mute-button.muted::before\x20{\x0a\x09background:\x20', 'basic\x20noise', '~1×', 'Modulators\x20distort\x20in\x20one\x20direction\x20(like\x201←2),\x20but\x20you\x20can\x20also\x20use\x20the\x20feedback\x20setting\x20to\x20make\x20any\x20wave\x20distort\x20in\x20the\x20opposite\x20direction\x20(1→2),\x20or\x20even\x20itself\x20(1⟲).', 'realName', 'height:\x20100%;\x20overflow:hidden;\x20position:\x20relative;\x20flex-grow:\x201;', '.mid', 'patternInstrumentCountMax'];
    a0a = function() {
        return uX;
    }
    ;
    return a0a();
}
function a0b(a, b) {
    const c = a0a();
    return a0b = function(d, e) {
        d = d - 0x166;
        let f = c[d];
        return f;
    }
    ,
    a0b(a, b);
}
var beepbox = function(a0) {
    'use strict';
    const jI = a0b;
    class a1 {
    }
    function a2(fC) {
        const jD = a0b;
        let fD = 0x0;
        for (let fF = 0x0; fF < fC[jD(0x57c)]; fF++)
            fD += fC[fF];
        const fE = fD / fC['length'];
        for (let fG = 0x0; fG < fC[jD(0x57c)]; fG++)
            fC[fG] -= fE;
        return a3(fC),
        fC['push'](0x0),
        new Float32Array(fC);
    }
    function a3(fC) {
        let fD = 0x0;
        for (let fE = 0x0; fE < fC['length']; fE++) {
            const fF = fC[fE];
            fC[fE] = fD,
            fD += fF;
        }
    }
    function a4(fC) {
        const jE = a0b;
        return 0.5 * Math[jE(0x3b6)](0.5, (a1[jE(0x689)] - 0x1 - fC) * a1['pulseWidthStepPower']);
    }
    function a5(fC, fD, fE) {
        const jF = a0b;
        let fF = a1['chipNoises'][fC][jF(0x2f2)];
        if (null == fF) {
            if (fF = new Float32Array(a1[jF(0x1cd)] + 0x1),
            a1['chipNoises'][fC]['samples'] = fF,
            0x0 == fC) {
                let fG = 0x1;
                for (let fH = 0x0; fH < a1['chipNoiseLength']; fH++) {
                    fF[fH] = 0x2 * (0x1 & fG) - 0x1;
                    let fI = fG >> 0x1;
                    0x1 == (fG + fI & 0x1) && (fI += 0x4000),
                    fG = fI;
                }
            } else {
                if (0x1 == fC) {
                    for (let fJ = 0x0; fJ < a1['chipNoiseLength']; fJ++)
                        fF[fJ] = 0x2 * Math[jF(0x50a)]() - 0x1;
                } else {
                    if (0x2 == fC) {
                        let fK = 0x1;
                        for (let fL = 0x0; fL < a1[jF(0x1cd)]; fL++) {
                            fF[fL] = 0x2 * (0x1 & fK) - 0x1;
                            let fM = fK >> 0x1;
                            0x1 == (fK + fM & 0x1) && (fM += 0x8000),
                            fK = fM;
                        }
                    } else {
                        if (0x3 == fC) {
                            let fN = 0x1;
                            for (let fO = 0x0; fO < a1[jF(0x1cd)]; fO++) {
                                fF[fO] = 0x2 * (0x1 & fN) - 0x1;
                                let fP = fN >> 0x1;
                                0x1 == (fN + fP & 0x1) && (fP += 0x28),
                                fN = fP;
                            }
                        } else {
                            if (0x4 != fC)
                                throw new Error(jF(0x7fb) + fC);
                            a6(fF, a1['chipNoiseLength'], 0xa, 0xb, 0x1, 0x1, 0x0),
                            a6(fF, a1[jF(0x1cd)], 0xb, 0xe, 0.6578, 0.6578, 0x0),
                            fD(fF, a1['chipNoiseLength']),
                            fE(fF, 0x1 / Math['sqrt'](a1[jF(0x1cd)]));
                        }
                    }
                }
            }
            fF[a1['chipNoiseLength']] = fF[0x0];
        }
        return fF;
    }
    function a6(fC, fD, fE, fF, fG, fH, fI) {
        const jG = a0b
          , fJ = 0x0 | Math['pow'](0x2, fE)
          , fK = Math['min'](fD >> 0x1, 0x0 | Math[jG(0x3b6)](0x2, fF))
          , fL = a5(0x0, null, null);
        let fM = 0x0;
        for (let fN = fJ; fN < fK; fN++) {
            let fO = fG + (fH - fG) * (Math['log2'](fN) - fE) / (fF - fE)
              , fP = Math[jG(0x3b6)](0x2, 0x7 * (fO - 0x1) + 0x1) * fO;
            fP *= Math[jG(0x3b6)](fN / 0x800, fI),
            fM += fP,
            fP *= fL[fN];
            const fQ = 0.61803398875 * fN * fN * Math['PI'] * 0x2;
            fC[fN] = Math[jG(0x828)](fQ) * fP,
            fC[fD - fN] = Math[jG(0x51b)](fQ) * fP;
        }
        return fM;
    }
    function a7(fC, fD, fE) {
        const fF = a1['rhythms'][fD]['arpeggioPatterns'][fC - 0x1];
        return null != fF ? fF[fE % fF['length']] : fE % fC;
    }
    function a8(fC) {
        const jH = a0b
          , fD = {};
        for (let fF = 0x0; fF < fC[jH(0x57c)]; fF++) {
            const fG = fC[fF];
            fG[jH(0x2c5)] = fF,
            fD[fG['name']] = fG;
        }
        const fE = fC;
        return fE['dictionary'] = fD,
        fE;
    }
    function a9(fC) {
        return 0x0 != (0x400 & fC);
    }
    function aa(fC) {
        return 0x0 != (0x800 & fC);
    }
    function ab(fC) {
        return 0x0 != (0x80 & fC);
    }
    function ac(fC) {
        return 0x0 != (0x100 & fC);
    }
    function ad(fC) {
        return 0x0 != (0x200 & fC);
    }
    function af(fC) {
        return 0x0 != (0x20 & fC);
    }
    function ag(fC) {
        return 0x0 != (0x8 & fC);
    }
    function ah(fC) {
        return 0x0 != (0x10 & fC);
    }
    function aj(fC) {
        return 0x0 != (0x4 & fC);
    }
    function ak(fC) {
        return 0x0 != (0x2 & fC);
    }
    function al(fC) {
        return 0x0 != (0x40 & fC);
    }
    function am(fC) {
        return 0x0 != (0x1 & fC);
    }
    a1['scales'] = a8([{
        'name': jI(0x852),
        'realName': jI(0x491),
        'flags': [!0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x1, !0x0, !0x1, !0x0, !0x1, !0x1]
    }, {
        'name': jI(0x85f),
        'realName': 'pentatonic\x20minor',
        'flags': [!0x0, !0x1, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x1, !0x0, !0x1]
    }, {
        'name': 'island\x20:)',
        'realName': jI(0x62a),
        'flags': [!0x0, !0x1, !0x1, !0x1, !0x0, !0x0, !0x1, !0x0, !0x1, !0x1, !0x1, !0x0]
    }, {
        'name': jI(0x502),
        'realName': 'pelog\x20selisir',
        'flags': [!0x0, !0x0, !0x1, !0x0, !0x1, !0x1, !0x1, !0x0, !0x0, !0x1, !0x1, !0x1]
    }, {
        'name': jI(0x87f),
        'realName': jI(0x505),
        'flags': [!0x0, !0x1, !0x0, !0x0, !0x0, !0x1, !0x1, !0x0, !0x1, !0x0, !0x1, !0x1]
    }, {
        'name': jI(0x333),
        'realName': 'blues',
        'flags': [!0x0, !0x1, !0x1, !0x0, !0x1, !0x0, !0x0, !0x0, !0x1, !0x1, !0x0, !0x1]
    }, {
        'name': 'normal\x20:)',
        'realName': 'ionian',
        'flags': [!0x0, !0x1, !0x0, !0x1, !0x0, !0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0]
    }, {
        'name': jI(0x2b1),
        'realName': 'aeolian',
        'flags': [!0x0, !0x1, !0x0, !0x0, !0x1, !0x0, !0x1, !0x0, !0x0, !0x1, !0x0, !0x1]
    }, {
        'name': jI(0x6b7),
        'realName': 'double\x20harmonic\x20major',
        'flags': [!0x0, !0x0, !0x1, !0x1, !0x0, !0x0, !0x1, !0x0, !0x0, !0x1, !0x1, !0x0]
    }, {
        'name': 'double\x20harmonic\x20:(',
        'realName': 'double\x20harmonic\x20minor',
        'flags': [!0x0, !0x1, !0x0, !0x0, !0x1, !0x1, !0x0, !0x0, !0x0, !0x1, !0x1, !0x0]
    }, {
        'name': jI(0x5b0),
        'realName': jI(0x667),
        'flags': [!0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0, !0x1]
    }, {
        'name': 'what',
        'realName': 'what',
        'flags': [!0x0, !0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0]
    }, {
        'name': 'bright\x20:)',
        'realName': 'c\x20lydian',
        'flags': [!0x0, !0x1, !0x0, !0x1, !0x0, !0x1, !0x0, !0x0, !0x1, !0x0, !0x1, !0x0]
    }, {
        'name': 'bright\x20:(',
        'realName': 'g\x20mixolydian',
        'flags': [!0x0, !0x1, !0x0, !0x1, !0x0, !0x0, !0x0, !0x0, !0x1, !0x0, !0x1, !0x0]
    }, {
        'name': 'tense\x20:(',
        'realName': 'tritone',
        'flags': [!0x0, !0x1, !0x1, !0x1, !0x1, !0x1, !0x0, !0x1, !0x1, !0x1, !0x1, !0x1]
    }, {
        'name': jI(0x655),
        'realName': jI(0x602),
        'flags': [!0x0, !0x0, !0x0, !0x0, !0x0, !0x0, !0x0, !0x0, !0x0, !0x0, !0x0, !0x0]
    }]),
    a1['keys'] = a8([{
        'name': 'C',
        'isWhiteKey': !0x0,
        'basePitch': 0xc
    }, {
        'name': 'C♯',
        'isWhiteKey': !0x1,
        'basePitch': 0xd
    }, {
        'name': 'D',
        'isWhiteKey': !0x0,
        'basePitch': 0xe
    }, {
        'name': 'D♯',
        'isWhiteKey': !0x1,
        'basePitch': 0xf
    }, {
        'name': 'E',
        'isWhiteKey': !0x0,
        'basePitch': 0x10
    }, {
        'name': 'F',
        'isWhiteKey': !0x0,
        'basePitch': 0x11
    }, {
        'name': 'F♯',
        'isWhiteKey': !0x1,
        'basePitch': 0x12
    }, {
        'name': 'G',
        'isWhiteKey': !0x0,
        'basePitch': 0x13
    }, {
        'name': 'G♯',
        'isWhiteKey': !0x1,
        'basePitch': 0x14
    }, {
        'name': 'A',
        'isWhiteKey': !0x0,
        'basePitch': 0x15
    }, {
        'name': 'A♯',
        'isWhiteKey': !0x1,
        'basePitch': 0x16
    }, {
        'name': 'B',
        'isWhiteKey': !0x0,
        'basePitch': 0x17
    }]),
    a1['blackKeyNameParents'] = [-0x1, 0x1, -0x1, 0x1, -0x1, 0x1, -0x1, -0x1, 0x1, -0x1, 0x1, -0x1],
    a1[jI(0x550)] = 0x1e,
    a1[jI(0x2e6)] = 0x12c,
    a1[jI(0x7d9)] = 0x18,
    a1['echoDelayStepTicks'] = 0x4,
    a1[jI(0x769)] = 0x8,
    a1['echoShelfHz'] = 0xfa0,
    a1[jI(0x6a9)] = Math[jI(0x3b6)](0x2, -0.5),
    a1['reverbShelfHz'] = 0x1f40,
    a1[jI(0x42b)] = Math[jI(0x3b6)](0x2, -1.5),
    a1[jI(0x796)] = 0x4,
    a1['reverbDelayBufferSize'] = 0x4000,
    a1[jI(0x2eb)] = a1['reverbDelayBufferSize'] - 0x1,
    a1['beatsPerBarMin'] = 0x3,
    a1['beatsPerBarMax'] = 0x10,
    a1['barCountMin'] = 0x1,
    a1[jI(0x80f)] = 0x80,
    a1['instrumentCountMin'] = 0x1,
    a1['layeredInstrumentCountMax'] = 0x4,
    a1['patternInstrumentCountMax'] = 0xa,
    a1['partsPerBeat'] = 0x30,
    a1['ticksPerPart'] = 0x2,
    a1[jI(0x307)] = a8([{
        'name': '÷3\x20(triplets)',
        'stepsPerBeat': 0x3,
        'ticksPerArpeggio': 0x4,
        'arpeggioPatterns': [[0x0], [0x0, 0x0, 0x1, 0x1], [0x0, 0x1, 0x2, 0x1]],
        'roundUpThresholds': [0x5, 0xc, 0x12]
    }, {
        'name': jI(0x6dd),
        'stepsPerBeat': 0x4,
        'ticksPerArpeggio': 0x3,
        'arpeggioPatterns': [[0x0], [0x0, 0x0, 0x1, 0x1], [0x0, 0x1, 0x2, 0x1]],
        'roundUpThresholds': [0x3, 0x9, 0x11, 0x15]
    }, {
        'name': '÷6',
        'stepsPerBeat': 0x6,
        'ticksPerArpeggio': 0x4,
        'arpeggioPatterns': [[0x0], [0x0, 0x1], [0x0, 0x1, 0x2, 0x1]],
        'roundUpThresholds': null
    }, {
        'name': '÷8',
        'stepsPerBeat': 0x8,
        'ticksPerArpeggio': 0x3,
        'arpeggioPatterns': [[0x0], [0x0, 0x1], [0x0, 0x1, 0x2, 0x1]],
        'roundUpThresholds': null
    }, {
        'name': '÷12',
        'stepsPerBeat': 0xC,
        'ticksPerArpeggio': 0x3,
        'arpeggioPatterns': [[0x0], [0x0, 0x1], [0x0, 0x1, 0x2, 0x1]],
        'roundUpThresholds': null
    }, {
        'name': '÷16',
        'stepsPerBeat': 0x10,
        'ticksPerArpeggio': 0x3,
        'arpeggioPatterns': [[0x0], [0x0, 0x1], [0x0, 0x1, 0x2, 0x1]],
        'roundUpThresholds': null
    }, {
        'name': jI(0x48d),
        'stepsPerBeat': 0x18,
        'ticksPerArpeggio': 0x3,
        'arpeggioPatterns': [[0x0], [0x0, 0x1], [0x0, 0x1, 0x2, 0x1]],
        'roundUpThresholds': null
    }]),
    a1['instrumentTypeNames'] = [jI(0x3a7), 'FM', 'noise', 'spectrum', 'drumset', 'harmonics', 'PWM', 'Picked\x20String', jI(0x6d9)],
    a1['instrumentTypeHasSpecialInterval'] = [!0x0, !0x0, !0x1, !0x1, !0x1, !0x0, !0x1, !0x1, !0x1],
    a1[jI(0x2c9)] = 0.03375,
    a1[jI(0x626)] = 0.03,
    a1[jI(0x4d3)] = 0.19,
    a1[jI(0x6ba)] = 0.3,
    a1['drumsetBaseExpression'] = 0.45,
    a1['harmonicsBaseExpression'] = 0.025,
    a1[jI(0x2a8)] = 0.04725,
    a1[jI(0x277)] = 0.061425,
    a1['pickedStringBaseExpression'] = 0.025,
    a1[jI(0x4f2)] = 0.011,
    a1[jI(0x61f)] = 0.01,
    a1[jI(0x25a)] = a8([{
        'name': jI(0x7ca),
        'expression': 0.94,
        'samples': a2([0x0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0x0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2])
    }, {
        'name': 'triangle',
        'expression': 0x1,
        'samples': a2([0x1 / 0xf, 0.2, 0x5 / 0xf, 0x7 / 0xf, 0.6, 0xb / 0xf, 0xd / 0xf, 0x1, 0x1, 0xd / 0xf, 0xb / 0xf, 0.6, 0x7 / 0xf, 0x5 / 0xf, 0.2, 0x1 / 0xf, -0x1 / 0xf, -0.2, -0x5 / 0xf, -0x7 / 0xf, -0.6, -0xb / 0xf, -0xd / 0xf, -0x1, -0x1, -0xd / 0xf, -0xb / 0xf, -0.6, -0x7 / 0xf, -0x5 / 0xf, -0.2, -0x1 / 0xf])
    }, {
        'name': jI(0x88c),
        'expression': 0.5,
        'samples': a2([0x1, -0x1])
    }, {
        'name': '1/4\x20pulse',
        'expression': 0.5,
        'samples': a2([0x1, -0x1, -0x1, -0x1])
    }, {
        'name': '1/8\x20pulse',
        'expression': 0.5,
        'samples': a2([0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1])
    }, {
        'name': 'sawtooth',
        'expression': 0.65,
        'samples': a2([0x1 / 0x1f, 0x3 / 0x1f, 0x5 / 0x1f, 0x7 / 0x1f, 0x9 / 0x1f, 0xb / 0x1f, 0xd / 0x1f, 0xf / 0x1f, 0x11 / 0x1f, 0x13 / 0x1f, 0x15 / 0x1f, 0x17 / 0x1f, 0x19 / 0x1f, 0x1b / 0x1f, 0x1d / 0x1f, 0x1, -0x1, -0x1d / 0x1f, -0x1b / 0x1f, -0x19 / 0x1f, -0x17 / 0x1f, -0x15 / 0x1f, -0x13 / 0x1f, -0x11 / 0x1f, -0xf / 0x1f, -0xd / 0x1f, -0xb / 0x1f, -0x9 / 0x1f, -0x7 / 0x1f, -0x5 / 0x1f, -0x3 / 0x1f, -0x1 / 0x1f])
    }, {
        'name': 'double\x20saw',
        'expression': 0.5,
        'samples': a2([0x0, -0.2, -0.4, -0.6, -0.8, -0x1, 0x1, -0.8, -0.6, -0.4, -0.2, 0x1, 0.8, 0.6, 0.4, 0.2])
    }, {
        'name': jI(0x741),
        'expression': 0.4,
        'samples': a2([0x1, 0x1, 0x1, 0x1, 0x1, -0x1, -0x1, -0x1, 0x1, 0x1, 0x1, 0x1, -0x1, -0x1, -0x1, -0x1])
    }, {
        'name': jI(0x1b5),
        'expression': 0.4,
        'samples': a2([0x1, -0x1, 0x1, -0x1, 0x1, 0x0])
    }]),
    a1[jI(0x5f0)] = a8([{
        'name': 'retro',
        'expression': 0.25,
        'basePitch': 0x45,
        'pitchFilterMult': 0x400,
        'isSoft': !0x1,
        'samples': null
    }, {
        'name': 'white',
        'expression': 0x1,
        'basePitch': 0x45,
        'pitchFilterMult': 0x8,
        'isSoft': !0x0,
        'samples': null
    }, {
        'name': 'clang',
        'expression': 0.4,
        'basePitch': 0x45,
        'pitchFilterMult': 0x400,
        'isSoft': !0x1,
        'samples': null
    }, {
        'name': jI(0x438),
        'expression': 0.3,
        'basePitch': 0x45,
        'pitchFilterMult': 0x400,
        'isSoft': !0x1,
        'samples': null
    }, {
        'name': jI(0x732),
        'expression': 1.5,
        'basePitch': 0x60,
        'pitchFilterMult': 0x1,
        'isSoft': !0x0,
        'samples': null
    }]),
    a1[jI(0x56f)] = 0x1 / 0x4,
    a1[jI(0x564)] = 0x22,
    a1[jI(0x6f3)] = 0x1c,
    a1['filterFreqReferenceHz'] = 0x1f40,
    a1[jI(0x32d)] = a1['filterFreqReferenceHz'] * Math['pow'](0x2, a1['filterFreqStep'] * (a1[jI(0x564)] - 0x1 - a1['filterFreqReferenceSetting'])),
    a1['filterFreqMinHz'] = 0x8,
    a1[jI(0x723)] = 0xf,
    a1['filterGainCenter'] = 0x7,
    a1[jI(0x233)] = 0.5,
    a1[jI(0x1af)] = 0x8,
    a1['filterTypeNames'] = ['low-pass', jI(0x524), 'peak'],
    a1['fadeInRange'] = 0xa,
    a1['fadeOutTicks'] = [-0x18, -0xc, -0x6, -0x3, -0x1, 0x6, 0xc, 0x18, 0x30, 0x48, 0x60],
    a1[jI(0x645)] = 0x4,
    a1[jI(0x6c8)] = 0x30,
    a1['transitions'] = a8([{
        'name': jI(0x72b),
        'isSeamless': !0x1,
        'continues': !0x1,
        'slides': !0x1,
        'slideTicks': 0x3,
        'includeAdjacentPatterns': !0x1
    }, {
        'name': jI(0x218),
        'isSeamless': !0x0,
        'continues': !0x1,
        'slides': !0x1,
        'slideTicks': 0x3,
        'includeAdjacentPatterns': !0x0
    }, {
        'name': jI(0x251),
        'isSeamless': !0x0,
        'continues': !0x0,
        'slides': !0x1,
        'slideTicks': 0x3,
        'includeAdjacentPatterns': !0x0
    }, {
        'name': 'slide',
        'isSeamless': !0x0,
        'continues': !0x1,
        'slides': !0x0,
        'slideTicks': 0x3,
        'includeAdjacentPatterns': !0x0
    }, {
        'name': jI(0x86c),
        'isSeamless': !0x0,
        'continues': !0x1,
        'slides': !0x0,
        'slideTicks': 0x3,
        'includeAdjacentPatterns': !0x1
    }]),
    a1[jI(0x639)] = a8([{
        'name': jI(0x3a9),
        'amplitude': 0x0,
        'periodsSeconds': [0.14],
        'delayTicks': 0x0
    }, {
        'name': 'light',
        'amplitude': 0.15,
        'periodsSeconds': [0.14],
        'delayTicks': 0x0
    }, {
        'name': jI(0x471),
        'amplitude': 0.3,
        'periodsSeconds': [0.14],
        'delayTicks': 0x25
    }, {
        'name': jI(0x283),
        'amplitude': 0.45,
        'periodsSeconds': [0.14],
        'delayTicks': 0x0
    }, {
        'name': jI(0x308),
        'amplitude': 0.1,
        'periodsSeconds': [0.11, 0.17798, 0.33],
        'delayTicks': 0x0
    }]),
    a1[jI(0x285)] = a8([{
        'name': jI(0x3a9),
        'voices': 0x1,
        'spread': 0x0,
        'offset': 0x0,
        'expression': 1.4,
        'sign': 0x1
    }, {
        'name': 'shimmer',
        'voices': 0x2,
        'spread': 0.018,
        'offset': 0x0,
        'expression': 0.8,
        'sign': 0x1
    }, {
        'name': jI(0x536),
        'voices': 0x2,
        'spread': 0.045,
        'offset': 0x0,
        'expression': 0x1,
        'sign': 0x1
    }, {
        'name': jI(0x23f),
        'voices': 0x2,
        'spread': 0.09,
        'offset': 0x0,
        'expression': 0x1,
        'sign': 0x1
    }, {
        'name': jI(0x508),
        'voices': 0x2,
        'spread': 0.25,
        'offset': 0x0,
        'expression': 0.9,
        'sign': 0x1
    }, {
        'name': jI(0x5a4),
        'voices': 0x2,
        'spread': 3.5,
        'offset': 3.5,
        'expression': 0.9,
        'sign': 0x1
    }, {
        'name': 'octave',
        'voices': 0x2,
        'spread': 0x6,
        'offset': 0x6,
        'expression': 0.8,
        'sign': 0x1
    }, {
        'name': jI(0x7ce),
        'voices': 0x2,
        'spread': 0.02,
        'offset': 0x0,
        'expression': 0x1,
        'sign': -0x1
    }, {
        'name': jI(0x58a),
        'voices': 0x2,
        'spread': 0.01,
        'offset': 0x0,
        'expression': 0x1,
        'sign': 0.7
    }]),
    a1['effectNames'] = ['reverb', 'chorus', jI(0x6a6), jI(0x1ce), 'bitcrusher', 'note\x20filter', 'echo', 'pitch\x20shift', 'detune', 'vibrato', jI(0x548), 'chord\x20type'],
    a1['effectOrder'] = [0xa, 0xb, 0x7, 0x8, 0x9, 0x5, 0x3, 0x4, 0x2, 0x1, 0x6, 0x0],
    a1['noteSizeMax'] = 0x3,
    a1['volumeRange'] = 0x8,
    a1['volumeLogScale'] = -0.5,
    a1[jI(0x374)] = 0x4,
    a1[jI(0x368)] = 0x2 * a1['panCenter'],
    a1['panDelaySecondsMax'] = 0.0005,
    a1[jI(0x31e)] = 0x4,
    a1[jI(0x57d)] = 0x2,
    a1['chorusDelayRange'] = 0.0034,
    a1[jI(0x209)] = [[1.51, 2.1, 3.35], [1.47, 2.15, 3.25]],
    a1['chorusPhaseOffsets'] = [[0x0, 2.1, 4.2], [3.2, 5.3, 0x1]],
    a1['chorusMaxDelay'] = a1['chorusDelayRange'] * (0x1 + a1['chorusDelayOffsets'][0x0]['concat'](a1[jI(0x209)][0x1])[jI(0x4a6)]( (fC, fD) => Math['max'](fC, fD))),
    a1[jI(0x80a)] = a8([{
        'name': 'simultaneous',
        'customInterval': !0x1,
        'arpeggiates': !0x1,
        'strumParts': 0x0,
        'singleTone': !0x1
    }, {
        'name': jI(0x861),
        'customInterval': !0x1,
        'arpeggiates': !0x1,
        'strumParts': 0x1,
        'singleTone': !0x1
    }, {
        'name': jI(0x4f4),
        'customInterval': !0x1,
        'arpeggiates': !0x0,
        'strumParts': 0x0,
        'singleTone': !0x0
    }, {
        'name': 'custom\x20interval',
        'customInterval': !0x0,
        'arpeggiates': !0x1,
        'strumParts': 0x0,
        'singleTone': !0x0
    }]),
    a1[jI(0x5d4)] = 0x4,
    a1[jI(0x5b2)] = 0x4,
    a1[jI(0x514)] = Math['max'](a1['maxChordSize'], a1['operatorCount']),
    a1['algorithms'] = a8([{
        'name': jI(0x6c6),
        'carrierCount': 0x1,
        'associatedCarrier': [0x1, 0x1, 0x1, 0x1],
        'modulatedBy': [[0x2, 0x3, 0x4], [], [], []]
    }, {
        'name': jI(0x6ee),
        'carrierCount': 0x1,
        'associatedCarrier': [0x1, 0x1, 0x1, 0x1],
        'modulatedBy': [[0x2, 0x3], [], [0x4], []]
    }, {
        'name': jI(0x84e),
        'carrierCount': 0x1,
        'associatedCarrier': [0x1, 0x1, 0x1, 0x1],
        'modulatedBy': [[0x2], [0x3, 0x4], [], []]
    }, {
        'name': jI(0x3ac),
        'carrierCount': 0x1,
        'associatedCarrier': [0x1, 0x1, 0x1, 0x1],
        'modulatedBy': [[0x2, 0x3], [0x4], [0x4], []]
    }, {
        'name': jI(0x613),
        'carrierCount': 0x1,
        'associatedCarrier': [0x1, 0x1, 0x1, 0x1],
        'modulatedBy': [[0x2], [0x3], [0x4], []]
    }, {
        'name': jI(0x7cf),
        'carrierCount': 0x2,
        'associatedCarrier': [0x1, 0x2, 0x1, 0x2],
        'modulatedBy': [[0x3], [0x4], [], []]
    }, {
        'name': jI(0x7de),
        'carrierCount': 0x2,
        'associatedCarrier': [0x1, 0x2, 0x2, 0x2],
        'modulatedBy': [[], [0x3, 0x4], [], []]
    }, {
        'name': '1\u20032←3←4',
        'carrierCount': 0x2,
        'associatedCarrier': [0x1, 0x2, 0x2, 0x2],
        'modulatedBy': [[], [0x3], [0x4], []]
    }, {
        'name': '(1\u20022)←3←4',
        'carrierCount': 0x2,
        'associatedCarrier': [0x1, 0x2, 0x2, 0x2],
        'modulatedBy': [[0x3], [0x3], [0x4], []]
    }, {
        'name': jI(0x44f),
        'carrierCount': 0x2,
        'associatedCarrier': [0x1, 0x2, 0x2, 0x2],
        'modulatedBy': [[0x3, 0x4], [0x3, 0x4], [], []]
    }, {
        'name': '1\u20032\u20033←4',
        'carrierCount': 0x3,
        'associatedCarrier': [0x1, 0x2, 0x3, 0x3],
        'modulatedBy': [[], [], [0x4], []]
    }, {
        'name': jI(0x1a8),
        'carrierCount': 0x3,
        'associatedCarrier': [0x1, 0x2, 0x3, 0x3],
        'modulatedBy': [[0x4], [0x4], [0x4], []]
    }, {
        'name': '1\u20032\u20033\u20034',
        'carrierCount': 0x4,
        'associatedCarrier': [0x1, 0x2, 0x3, 0x4],
        'modulatedBy': [[], [], [], []]
    }]),
    a1[jI(0x200)] = [0x0, 0.04, -0.073, 0.091],
    a1['operatorAmplitudeMax'] = 0xf,
    a1['operatorFrequencies'] = a8([{
        'name': '1×',
        'mult': 0x1,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '~1×',
        'mult': 0x1,
        'hzOffset': 1.5,
        'amplitudeSign': -0x1
    }, {
        'name': '2×',
        'mult': 0x2,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': jI(0x569),
        'mult': 0x2,
        'hzOffset': -1.3,
        'amplitudeSign': -0x1
    }, {
        'name': '3×',
        'mult': 0x3,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '4×',
        'mult': 0x4,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '5×',
        'mult': 0x5,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '6×',
        'mult': 0x6,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '7×',
        'mult': 0x7,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '8×',
        'mult': 0x8,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '9×',
        'mult': 0x9,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': jI(0x5df),
        'mult': 0xb,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': jI(0x695),
        'mult': 0xd,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '16×',
        'mult': 0x10,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }, {
        'name': '20×',
        'mult': 0x14,
        'hzOffset': 0x0,
        'amplitudeSign': 0x1
    }]),
    a1[jI(0x6ac)] = a8([{
        'name': 'none',
        'type': 0x1,
        'speed': 0x0
    }, {
        'name': jI(0x583),
        'type': 0x0,
        'speed': 0x0
    }, {
        'name': 'punch',
        'type': 0x2,
        'speed': 0x0
    }, {
        'name': jI(0x561),
        'type': 0x3,
        'speed': 0x20
    }, {
        'name': 'flare\x202',
        'type': 0x3,
        'speed': 0x8
    }, {
        'name': jI(0x545),
        'type': 0x3,
        'speed': 0x2
    }, {
        'name': jI(0x570),
        'type': 0x4,
        'speed': 0x20
    }, {
        'name': 'twang\x202',
        'type': 0x4,
        'speed': 0x8
    }, {
        'name': jI(0x7b1),
        'type': 0x4,
        'speed': 0x2
    }, {
        'name': 'swell\x201',
        'type': 0x5,
        'speed': 0x20
    }, {
        'name': 'swell\x202',
        'type': 0x5,
        'speed': 0x8
    }, {
        'name': 'swell\x203',
        'type': 0x5,
        'speed': 0x2
    }, {
        'name': jI(0x765),
        'type': 0x6,
        'speed': 0x4
    }, {
        'name': jI(0x174),
        'type': 0x6,
        'speed': 0x2
    }, {
        'name': 'tremolo3',
        'type': 0x6,
        'speed': 0x1
    }, {
        'name': 'tremolo4',
        'type': 0x7,
        'speed': 0x4
    }, {
        'name': 'tremolo5',
        'type': 0x7,
        'speed': 0x2
    }, {
        'name': 'tremolo6',
        'type': 0x7,
        'speed': 0x1
    }, {
        'name': jI(0x37c),
        'type': 0x8,
        'speed': 0xa
    }, {
        'name': jI(0x7ea),
        'type': 0x8,
        'speed': 0x7
    }, {
        'name': jI(0x781),
        'type': 0x8,
        'speed': 0x4
    }]),
    a1['feedbacks'] = a8([{
        'name': '1⟲',
        'indices': [[0x1], [], [], []]
    }, {
        'name': '2⟲',
        'indices': [[], [0x2], [], []]
    }, {
        'name': '3⟲',
        'indices': [[], [], [0x3], []]
    }, {
        'name': '4⟲',
        'indices': [[], [], [], [0x4]]
    }, {
        'name': '1⟲\u20032⟲',
        'indices': [[0x1], [0x2], [], []]
    }, {
        'name': jI(0x7ae),
        'indices': [[], [], [0x3], [0x4]]
    }, {
        'name': jI(0x25b),
        'indices': [[0x1], [0x2], [0x3], []]
    }, {
        'name': '2⟲\u20033⟲\u20034⟲',
        'indices': [[], [0x2], [0x3], [0x4]]
    }, {
        'name': jI(0x7c9),
        'indices': [[0x1], [0x2], [0x3], [0x4]]
    }, {
        'name': jI(0x876),
        'indices': [[], [0x1], [], []]
    }, {
        'name': '1→3',
        'indices': [[], [], [0x1], []]
    }, {
        'name': jI(0x4c3),
        'indices': [[], [], [], [0x1]]
    }, {
        'name': jI(0x520),
        'indices': [[], [], [0x2], []]
    }, {
        'name': jI(0x2f7),
        'indices': [[], [], [], [0x2]]
    }, {
        'name': '3→4',
        'indices': [[], [], [], [0x3]]
    }, {
        'name': '1→3\u20032→4',
        'indices': [[], [], [0x1], [0x2]]
    }, {
        'name': '1→4\u20032→3',
        'indices': [[], [], [0x2], [0x1]]
    }, {
        'name': '1→2→3→4',
        'indices': [[], [0x1], [0x2], [0x3]]
    }]),
    a1['chipNoiseLength'] = 0x8000,
    a1['spectrumNoiseLength'] = 0x8000,
    a1['spectrumBasePitch'] = 0x18,
    a1[jI(0x6e7)] = 0x1e,
    a1['spectrumControlPointsPerOctave'] = 0x7,
    a1['spectrumControlPointBits'] = 0x3,
    a1[jI(0x17f)] = (0x1 << a1['spectrumControlPointBits']) - 0x1,
    a1['harmonicsControlPoints'] = 0x1c,
    a1['harmonicsRendered'] = 0x40,
    a1['harmonicsRenderedForPickedString'] = 0x100,
    a1['harmonicsControlPointBits'] = 0x3,
    a1[jI(0x51f)] = (0x1 << a1['harmonicsControlPointBits']) - 0x1,
    a1[jI(0x3ba)] = 0x800,
    a1[jI(0x689)] = 0x8,
    a1['pulseWidthStepPower'] = 0.5,
    a1['supersawVoiceCount'] = 0x7,
    a1[jI(0x4bc)] = 0x6,
    a1[jI(0x2ff)] = 0xc,
    a1[jI(0x36f)] = 0x6,
    a1['pitchChannelCountMin'] = 0x1,
    a1['pitchChannelCountMax'] = 0xa,
    a1['noiseChannelCountMin'] = 0x0,
    a1[jI(0x735)] = 0x5,
    a1['noiseInterval'] = 0x6,
    a1[jI(0x36d)] = 0xc,
    a1['drumCount'] = 0xc,
    a1['pitchOctaves'] = 0x7,
    a1['maxPitch'] = a1['pitchOctaves'] * a1[jI(0x36d)],
    a1['maximumTonesPerChannel'] = 0x2 * a1['maxChordSize'],
    a1['justIntonationSemitones'] = [0.5, 0x8 / 0xf, 0x9 / 0x10, 0.6, 0x5 / 0x8, 0x2 / 0x3, 0x20 / 0x2d, 0x3 / 0x4, 0.8, 0x5 / 0x6, 0x8 / 0x9, 0xf / 0x10, 0x1, 0x10 / 0xf, 0x9 / 0x8, 1.2, 0x5 / 0x4, 0x4 / 0x3, 0x2d / 0x20, 1.5, 1.6, 0x5 / 0x3, 0x10 / 0x9, 0xf / 0x8, 0x2][jI(0x422)](fC => Math[jI(0x253)](fC) * a1[jI(0x36d)]),
    a1['pitchShiftRange'] = a1[jI(0x420)][jI(0x57c)],
    a1['pitchShiftCenter'] = a1[jI(0x759)] >> 0x1,
    a1['detuneCenter'] = 0x9,
    a1[jI(0x804)] = 0x2 * a1['detuneCenter'],
    a1[jI(0x24f)] = 0x100,
    a1['sineWaveMask'] = a1['sineWaveLength'] - 0x1,
    a1[jI(0x7e0)] = (function() {
        const jJ = jI
          , fC = new Float32Array(a1['sineWaveLength'] + 0x1);
        for (let fD = 0x0; fD < a1[jJ(0x24f)] + 0x1; fD++)
            fC[fD] = Math['sin'](fD * Math['PI'] * 0x2 / a1['sineWaveLength']);
        return fC;
    }()),
    a1[jI(0x58f)] = 0x1770,
    a1[jI(0x82e)] = 0.3,
    a1['pickedStringDispersionFreqMult'] = 0x4,
    a1[jI(0x644)] = 0xfa0,
    a1[jI(0x240)] = 0xf,
    a1[jI(0x265)] = 0.12,
    a1['enableAcousticSustain'] = !0x1,
    a1['sustainTypeNames'] = ['bright', jI(0x698)],
    a1[jI(0x2fd)] = 0x8,
    a1[jI(0x448)] = 0xe,
    a1[jI(0x3ab)] = 0.5,
    a1['bitcrusherQuantizationRange'] = 0x8,
    a1[jI(0x517)] = 0xc,
    a1['defaultAutomationRange'] = 0xd,
    a1['instrumentAutomationTargets'] = a8([{
        'name': jI(0x3a9),
        'computeIndex': null,
        'displayName': 'none',
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': null
    }, {
        'name': 'noteVolume',
        'computeIndex': 0x0,
        'displayName': 'note\x20volume',
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': null
    }, {
        'name': jI(0x1a7),
        'computeIndex': 0x2,
        'displayName': jI(0x682),
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': [0x6, 0x8]
    }, {
        'name': 'stringSustain',
        'computeIndex': 0x3,
        'displayName': jI(0x638),
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': [0x7]
    }, {
        'name': jI(0x5d2),
        'computeIndex': 0x4,
        'displayName': 'unison',
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': [0x0, 0x5, 0x7]
    }, {
        'name': jI(0x567),
        'computeIndex': 0x5,
        'displayName': 'fm#\x20freq',
        'interleave': !0x0,
        'isFilter': !0x1,
        'maxCount': a1[jI(0x5b2)],
        'effect': null,
        'compatibleInstruments': [0x1]
    }, {
        'name': 'operatorAmplitude',
        'computeIndex': 0x9,
        'displayName': 'fm#\x20volume',
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': a1['operatorCount'],
        'effect': null,
        'compatibleInstruments': [0x1]
    }, {
        'name': jI(0x31f),
        'computeIndex': 0xd,
        'displayName': jI(0x6fd),
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': [0x1]
    }, {
        'name': jI(0x66a),
        'computeIndex': 0xe,
        'displayName': 'pitch\x20shift',
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': 0x7,
        'compatibleInstruments': null
    }, {
        'name': jI(0x84d),
        'computeIndex': 0xf,
        'displayName': jI(0x84d),
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': 0x8,
        'compatibleInstruments': null
    }, {
        'name': jI(0x2db),
        'computeIndex': 0x10,
        'displayName': jI(0x856),
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': 0x9,
        'compatibleInstruments': null
    }, {
        'name': 'noteFilterAllFreqs',
        'computeIndex': 0x1,
        'displayName': jI(0x6d8),
        'interleave': !0x1,
        'isFilter': !0x0,
        'maxCount': 0x1,
        'effect': 0x5,
        'compatibleInstruments': null
    }, {
        'name': jI(0x23c),
        'computeIndex': 0x11,
        'displayName': jI(0x67e),
        'interleave': !0x1,
        'isFilter': !0x0,
        'maxCount': a1['filterMaxPoints'],
        'effect': 0x5,
        'compatibleInstruments': null
    }, {
        'name': jI(0x66b),
        'computeIndex': null,
        'displayName': jI(0x1e7),
        'interleave': !0x1,
        'isFilter': !0x0,
        'maxCount': a1['filterMaxPoints'],
        'effect': 0x5,
        'compatibleInstruments': null
    }, {
        'name': jI(0x555),
        'computeIndex': 0x21,
        'displayName': jI(0x21e),
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': [0x8]
    }, {
        'name': 'supersawSpread',
        'computeIndex': 0x22,
        'displayName': jI(0x212),
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': [0x8]
    }, {
        'name': 'supersawShape',
        'computeIndex': 0x23,
        'displayName': jI(0x246),
        'interleave': !0x1,
        'isFilter': !0x1,
        'maxCount': 0x1,
        'effect': null,
        'compatibleInstruments': [0x8]
    }]);
    const ao = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i[jI(0x78d)](navigator['userAgent']);
    function ap(fC) {
        const jK = jI;
        return fC[jK(0x78f)](0x2)[jK(0x81c)](/\.?0*$/, '');
    }
    class aq {
        static['valueToPreset'](fC) {
            const jL = jI
              , fD = fC >> 0x6
              , fE = 0x3f & fC;
            return aq['presetCategories'][fD][jL(0x5e5)][fE];
        }
        static['midiProgramToPresetValue'](fC) {
            const jM = jI;
            for (let fD = 0x0; fD < aq[jM(0x3e8)]['length']; fD++) {
                const fE = aq[jM(0x3e8)][fD];
                for (let fF = 0x0; fF < fE['presets']['length']; fF++) {
                    const fG = fE['presets'][fF];
                    if (fG[jM(0x6aa)] && fG[jM(0x27d)] == fC)
                        return (fD << 0x6) + fF;
                }
            }
            return null;
        }
        static[jI(0x75b)](fC) {
            const jN = jI;
            for (let fD = 0x0; fD < aq['presetCategories'][jN(0x57c)]; fD++) {
                const fE = aq['presetCategories'][fD];
                for (let fF = 0x0; fF < fE['presets'][jN(0x57c)]; fF++) {
                    if (fE['presets'][fF][jN(0x340)] == fC)
                        return (fD << 0x6) + fF;
                }
            }
            return null;
        }
    }
    aq[jI(0x4ae)] = '1.0.1',
    aq[jI(0x44b)] = jI(0x86e),
    aq['releaseNotesURL'] = 'https://github.com/johnnesky/beepbox/releases/tag/v' + aq[jI(0x4ae)],
    aq['isOnMac'] = /^Mac/i[jI(0x78d)](navigator['platform']) || /Mac OS X/i[jI(0x78d)](navigator['userAgent']) || /^(iPhone|iPad|iPod)/i[jI(0x78d)](navigator['platform']) || /(iPhone|iPad|iPod)/i[jI(0x78d)](navigator[jI(0x26d)]),
    aq[jI(0x3b9)] = aq[jI(0x4fe)] ? '⌘' : jI(0x77d),
    aq['ctrlName'] = aq[jI(0x4fe)] ? jI(0x55a) : 'control',
    aq[jI(0x3e8)] = a8([{
        'name': jI(0x259),
        'presets': a8([{
            'name': 'chip\x20wave',
            'customType': 0x0
        }, {
            'name': jI(0x877),
            'customType': 0x1
        }, {
            'name': jI(0x783),
            'customType': 0x2
        }, {
            'name': jI(0x5ee),
            'customType': 0x3
        }, {
            'name': 'drumset',
            'customType': 0x4
        }, {
            'name': jI(0x4bd),
            'customType': 0x5
        }, {
            'name': jI(0x682),
            'customType': 0x6
        }, {
            'name': 'picked\x20string',
            'customType': 0x7
        }, {
            'name': jI(0x6d9),
            'customType': 0x8
        }])
    }, {
        'name': 'Retro\x20Presets',
        'presets': a8([{
            'name': jI(0x2ba),
            'midiProgram': 0x50,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [],
                'effects': [],
                'transition': jI(0x218),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x1,
                'chord': 'arpeggio',
                'wave': jI(0x88c),
                'unison': 'none',
                'envelopes': []
            }
        }, {
            'name': jI(0x244),
            'midiProgram': 0x47,
            'settings': {
                'type': 'chip',
                'eqFilter': [],
                'effects': [],
                'transition': 'interrupt',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x1,
                'chord': jI(0x4f4),
                'wave': jI(0x1c8),
                'unison': jI(0x3a9),
                'envelopes': []
            }
        }, {
            'name': jI(0x7db),
            'midiProgram': 0x50,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 0x1f40,
                    'linearGain': 0.3536
                }],
                'effects': [],
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': jI(0x82d),
                'wave': 'square',
                'unison': jI(0x536),
                'envelopes': []
            }
        }, {
            'name': 'sawtooth\x20lead\x201',
            'midiProgram': 0x51,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0xfa0,
                    'linearGain': 0.5
                }],
                'effects': [],
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': 'simultaneous',
                'wave': jI(0x7fd),
                'unison': 'shimmer',
                'envelopes': []
            }
        }, {
            'name': 'sawtooth\x20lead\x202',
            'midiProgram': 0x51,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 6727.17,
                    'linearGain': 0x1
                }],
                'effects': [jI(0x7b2)],
                'vibrato': jI(0x203),
                'transition': 'normal',
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': 0x48,
                'chord': jI(0x82d),
                'wave': 'sawtooth',
                'unison': 'hum',
                'envelopes': []
            }
        }, {
            'name': jI(0x6be),
            'midiProgram': 0x74,
            'isNoise': !0x0,
            'settings': {
                'type': 'noise',
                'transition': jI(0x404),
                'effects': 'none',
                'chord': 'arpeggio',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x0,
                'filterEnvelope': 'steady',
                'wave': 'retro'
            }
        }, {
            'name': jI(0x30a),
            'midiProgram': 0x20,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [],
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': jI(0x82d),
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x4a8),
                    'index': 0x1
                }]
            }
        }, {
            'name': 'FM\x20bass',
            'midiProgram': 0x24,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [],
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': 'custom\x20interval',
                'algorithm': jI(0x6ee),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xb
                }, {
                    'frequency': '1×',
                    'amplitude': 0x7
                }, {
                    'frequency': '1×',
                    'amplitude': 0x9
                }, {
                    'frequency': '20×',
                    'amplitude': 0x3
                }],
                'envelopes': [{
                    'target': jI(0x1f8),
                    'envelope': 'twang\x202',
                    'index': 0x1
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x7b1),
                    'index': 0x2
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'twang\x202',
                    'index': 0x3
                }]
            }
        }, {
            'name': jI(0x2b9),
            'midiProgram': 0x49,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [],
                'transition': 'normal',
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x3,
                'chord': jI(0x82d),
                'algorithm': jI(0x6c6),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x4a8),
                    'index': 0x1
                }]
            }
        }, {
            'name': 'FM\x20organ',
            'midiProgram': 0x10,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [jI(0x7b2)],
                'vibrato': jI(0x471),
                'transition': 'normal',
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x3,
                'chord': 'custom\x20interval',
                'algorithm': '1←3\u20032←4',
                'feedbackType': '1⟲\u20032⟲',
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe
                }, {
                    'frequency': '2×',
                    'amplitude': 0xe
                }, {
                    'frequency': '1×',
                    'amplitude': 0xb
                }, {
                    'frequency': '2×',
                    'amplitude': 0xb
                }],
                'envelopes': []
            }
        }, {
            'name': jI(0x7a5),
            'midiProgram': 0x51,
            'settings': {
                'type': 'supersaw',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 6727.17,
                    'linearGain': 0x2
                }],
                'effects': ['reverb'],
                'reverb': 0x43,
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x6,
                'pulseWidth': 0x32,
                'dynamism': 0x64,
                'spread': 0x3a,
                'shape': 0x0,
                'envelopes': []
            }
        }])
    }, {
        'name': 'Keyboard\x20Presets',
        'presets': a8([{
            'name': jI(0x5ed),
            'midiProgram': 0x0,
            'generalMidi': !0x0,
            'settings': {
                'type': 'Picked\x20String',
                'eqFilter': [{
                    'type': 'high-pass',
                    'cutoffHz': 148.65,
                    'linearGain': 0.7071
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 1681.79,
                    'linearGain': 0x4
                }, {
                    'type': 'low-pass',
                    'cutoffHz': 0x1f40,
                    'linearGain': 0.1768
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 3363.59,
                    'linearGain': 0x4
                }, {
                    'type': 'peak',
                    'cutoffHz': 2378.41,
                    'linearGain': 0.25
                }],
                'effects': [jI(0x747), 'reverb'],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 4756.83,
                    'linearGain': 0.3536
                }, {
                    'type': jI(0x524),
                    'cutoffHz': 0x7d,
                    'linearGain': 0.0884
                }],
                'reverb': 0x43,
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'harmonics': [0x64, 0x64, 0x56, 0x56, 0x56, 0x47, 0x47, 0x47, 0x0, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39, 0x47, 0x39, 0xe, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x1d, 0x39],
                'unison': 'piano',
                'stringSustain': 0x56,
                'stringSustainType': jI(0x698),
                'envelopes': [{
                    'target': jI(0x23c),
                    'envelope': 'note\x20size',
                    'index': 0x0
                }, {
                    'target': 'noteFilterFreq',
                    'envelope': 'twang\x201',
                    'index': 0x1
                }, {
                    'target': jI(0x23c),
                    'envelope': jI(0x570),
                    'index': 0x1
                }]
            }
        }, {
            'name': 'bright\x20piano',
            'midiProgram': 0x1,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x281),
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 1681.79,
                    'linearGain': 0.7071
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 148.65,
                    'linearGain': 0.5
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 3363.59,
                    'linearGain': 1.4142
                }],
                'effects': [jI(0x76b)],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x18,
                'chord': 'simultaneous',
                'harmonics': [0x64, 0x64, 0x56, 0x56, 0x47, 0x47, 0x0, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0xe, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x1d, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39],
                'unison': jI(0x58a),
                'stringSustain': 0x56,
                'envelopes': []
            }
        }, {
            'name': jI(0x489),
            'midiProgram': 0x2,
            'generalMidi': !0x0,
            'settings': {
                'type': 'chip',
                'eqFilter': [],
                'effects': ['note\x20filter'],
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 2378.41,
                    'linearGain': 0.5
                }],
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x82d),
                'wave': jI(0x3f5),
                'unison': jI(0x808),
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x7b1)
                }]
            }
        }, {
            'name': 'honky-tonk\x20piano',
            'midiProgram': 0x3,
            'generalMidi': !0x0,
            'settings': {
                'type': 'Picked\x20String',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 5656.85,
                    'linearGain': 0.3536
                }],
                'effects': ['reverb'],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x82d),
                'harmonics': [0x64, 0x64, 0x56, 0x47, 0x56, 0x47, 0x2b, 0x47, 0x2b, 0x2b, 0x39, 0x39, 0x39, 0x1d, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x2b, 0x39, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x2b],
                'unison': jI(0x23f),
                'stringSustain': 0x47,
                'envelopes': []
            }
        }, {
            'name': 'electric\x20piano\x201',
            'midiProgram': 0x4,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'eqFilter': [],
                'effects': ['note\x20filter'],
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 3363.59,
                    'linearGain': 0.5
                }],
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': jI(0x82d),
                'harmonics': [0x56, 0x64, 0x64, 0x47, 0x47, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
                'unison': 'none',
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': 'twang\x202'
                }]
            }
        }, {
            'name': 'electric\x20piano\x202',
            'midiProgram': 0x5,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [jI(0x747)],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 13454.34,
                    'linearGain': 0.25
                }],
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x82d),
                'algorithm': jI(0x7cf),
                'feedbackType': '1⟲\u20032⟲',
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xc
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6
                }, {
                    'frequency': '1×',
                    'amplitude': 0x9
                }, {
                    'frequency': jI(0x711),
                    'amplitude': 0x6
                }],
                'envelopes': [{
                    'target': jI(0x7c5),
                    'envelope': 'twang\x203'
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'twang\x203',
                    'index': 0x3
                }]
            }
        }, {
            'name': jI(0x303),
            'midiProgram': 0x6,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x281),
                'eqFilter': [{
                    'type': 'high-pass',
                    'cutoffHz': 0xfa,
                    'linearGain': 0.3536
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 11313.71,
                    'linearGain': 2.8284
                }],
                'effects': [jI(0x76b)],
                'reverb': 0x21,
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x18,
                'chord': 'simultaneous',
                'harmonics': [0x64, 0x64, 0x64, 0x56, 0x39, 0x56, 0x56, 0x56, 0x56, 0x39, 0x39, 0x47, 0x47, 0x56, 0x56, 0x47, 0x47, 0x56, 0x56, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47],
                'unison': 'none',
                'stringSustain': 0x4f,
                'envelopes': []
            }
        }, {
            'name': 'clavinet',
            'midiProgram': 0x7,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [jI(0x747)],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 19027.31,
                    'linearGain': 0.3536
                }],
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': 'simultaneous',
                'algorithm': jI(0x6c6),
                'feedbackType': '3⟲',
                'feedbackAmplitude': 0x6,
                'operators': [{
                    'frequency': '3×',
                    'amplitude': 0xf
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x6
                }, {
                    'frequency': '8×',
                    'amplitude': 0x4
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': 'twang\x202'
                }, {
                    'target': jI(0x31f),
                    'envelope': 'twang\x202'
                }]
            }
        }, {
            'name': 'dulcimer',
            'midiProgram': 0xf,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x281),
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 0x1f40,
                    'linearGain': 0.3536
                }],
                'effects': [jI(0x76b)],
                'reverb': 0x21,
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': 'strum',
                'harmonics': [0x64, 0x64, 0x64, 0x56, 0x64, 0x56, 0x39, 0x64, 0x64, 0x56, 0x64, 0x56, 0x64, 0x56, 0x64, 0x47, 0x39, 0x47, 0x47, 0x64, 0x56, 0x47, 0x56, 0x56, 0x64, 0x56, 0x56, 0x56],
                'unison': jI(0x58a),
                'stringSustain': 0x4f,
                'envelopes': []
            }
        }])
    }, {
        'name': 'Idiophone\x20Presets',
        'presets': a8([{
            'name': 'celesta',
            'midiProgram': 0x8,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x2a0),
                'chord': jI(0x861),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x202',
                'vibrato': jI(0x3a9),
                'algorithm': '(1\u20022)←(3\u20024)',
                'feedbackType': '1⟲\u20032⟲',
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '~1×',
                    'amplitude': 0xb,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '8×',
                    'amplitude': 0x6,
                    'envelope': 'custom'
                }, {
                    'frequency': jI(0x6d7),
                    'amplitude': 0x3,
                    'envelope': jI(0x570)
                }, {
                    'frequency': '3×',
                    'amplitude': 0x1,
                    'envelope': 'twang\x202'
                }]
            }
        }, {
            'name': 'glockenspiel',
            'midiProgram': 0x9,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x2a0),
                'chord': jI(0x861),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x4a8),
                'vibrato': jI(0x3a9),
                'algorithm': '(1\u20022\u20023)←4',
                'feedbackType': jI(0x25b),
                'feedbackAmplitude': 0x2,
                'feedbackEnvelope': 'decay\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x7,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '5×',
                    'amplitude': 0xb,
                    'envelope': 'custom'
                }, {
                    'frequency': '8×',
                    'amplitude': 0x7,
                    'envelope': 'custom'
                }, {
                    'frequency': jI(0x6d7),
                    'amplitude': 0x2,
                    'envelope': 'twang\x201'
                }]
            }
        }, {
            'name': jI(0x1dc),
            'midiProgram': 0xa,
            'generalMidi': !0x0,
            'settings': {
                'type': 'Picked\x20String',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 4756.83,
                    'linearGain': 0.5
                }],
                'effects': [jI(0x76b)],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': 'strum',
                'harmonics': [0x64, 0x0, 0x0, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x47, 0x0],
                'unison': jI(0x3a9),
                'stringSustain': 0x40,
                'envelopes': []
            }
        }, {
            'name': jI(0x6da),
            'midiProgram': 0xa,
            'settings': {
                'type': 'Picked\x20String',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 2828.43,
                    'linearGain': 0.7071
                }],
                'effects': [jI(0x76b)],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x861),
                'harmonics': [0x64, 0x39, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
                'unison': 'none',
                'stringSustain': 0x1d,
                'envelopes': []
            }
        }, {
            'name': 'vibraphone',
            'midiProgram': 0xb,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x2a0),
                'chord': jI(0x38a),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x4a8),
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x38b),
                'feedbackType': jI(0x55d),
                'feedbackAmplitude': 0x3,
                'feedbackEnvelope': 'twang\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x9,
                    'envelope': 'custom'
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0x9,
                    'envelope': 'custom'
                }, {
                    'frequency': '9×',
                    'amplitude': 0x3,
                    'envelope': 'custom'
                }, {
                    'frequency': '4×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }]
            }
        }, {
            'name': jI(0x3b4),
            'midiProgram': 0xc,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': 'strum',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x37c),
                'vibrato': jI(0x3a9),
                'algorithm': '1\u20032←(3\u20024)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': 'custom'
                }, {
                    'frequency': '4×',
                    'amplitude': 0x6,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '13×',
                    'amplitude': 0x6,
                    'envelope': jI(0x570)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': 'kalimba',
            'midiProgram': 0x6c,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x2a0),
                'chord': jI(0x861),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': 'decay\x201',
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xb,
                    'envelope': 'custom'
                }, {
                    'frequency': '5×',
                    'amplitude': 0x3,
                    'envelope': 'twang\x202'
                }, {
                    'frequency': jI(0x6d7),
                    'amplitude': 0x3,
                    'envelope': 'twang\x201'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': 'xylophone',
            'midiProgram': 0xd,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'hard',
                'chord': 'strum',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x201',
                'vibrato': jI(0x3a9),
                'algorithm': '(1\u20022\u20023)←4',
                'feedbackType': jI(0x25b),
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x9,
                    'envelope': 'custom'
                }, {
                    'frequency': '6×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '11×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '20×',
                    'amplitude': 0x6,
                    'envelope': jI(0x570)
                }]
            }
        }, {
            'name': 'tubular\x20bell',
            'midiProgram': 0xe,
            'generalMidi': !0x0,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': jI(0x281),
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 0xfa0,
                    'linearGain': 0.5
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 105.11,
                    'linearGain': 0.3536
                }],
                'effects': ['reverb'],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x60,
                'chord': 'strum',
                'harmonics': [0x2b, 0x47, 0x0, 0x64, 0x0, 0x64, 0x0, 0x56, 0x0, 0x0, 0x56, 0x0, 0xe, 0x47, 0xe, 0xe, 0x39, 0xe, 0xe, 0x2b, 0xe, 0xe, 0x2b, 0xe, 0xe, 0x2b, 0xe, 0xe],
                'unison': jI(0x808),
                'stringSustain': 0x56,
                'envelopes': []
            }
        }, {
            'name': 'bell\x20synth',
            'midiProgram': 0xe,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': 'strum',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x1d,
                'filterEnvelope': 'twang\x203',
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '~2×',
                    'amplitude': 0xa,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '7×',
                    'amplitude': 0x6,
                    'envelope': 'twang\x203'
                }, {
                    'frequency': '20×',
                    'amplitude': 0x1,
                    'envelope': jI(0x570)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': jI(0x881),
            'midiProgram': 0x60,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': 'strum',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x570),
                'vibrato': 'none',
                'algorithm': '(1\u20022)←(3\u20024)',
                'feedbackType': jI(0x4a7),
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xc,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '6×',
                    'amplitude': 0x4,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '20×',
                    'amplitude': 0x3,
                    'envelope': 'twang\x201'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6,
                    'envelope': 'tremolo1'
                }]
            }
        }, {
            'name': 'crystal',
            'midiProgram': 0x62,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x2a0),
                'chord': jI(0x38a),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x202',
                'vibrato': 'delayed',
                'algorithm': jI(0x38b),
                'feedbackType': '1⟲\x202⟲\x203⟲\x204⟲',
                'feedbackAmplitude': 0x4,
                'feedbackEnvelope': 'twang\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': 'custom'
                }, {
                    'frequency': '3×',
                    'amplitude': 0x7,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '6×',
                    'amplitude': 0x4,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': jI(0x695),
                    'amplitude': 0x4,
                    'envelope': jI(0x4e0)
                }]
            }
        }, {
            'name': 'tinkle\x20bell',
            'midiProgram': 0x70,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x404),
                'chord': jI(0x861),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x4a8),
                'vibrato': 'none',
                'algorithm': '1\u20032\u20033\u20034',
                'feedbackType': '1→2→3→4',
                'feedbackAmplitude': 0x5,
                'feedbackEnvelope': jI(0x7b1),
                'operators': [{
                    'frequency': jI(0x569),
                    'amplitude': 0x7,
                    'envelope': 'custom'
                }, {
                    'frequency': '5×',
                    'amplitude': 0x7,
                    'envelope': 'custom'
                }, {
                    'frequency': '7×',
                    'amplitude': 0x7,
                    'envelope': 'custom'
                }, {
                    'frequency': jI(0x711),
                    'amplitude': 0x7,
                    'envelope': 'custom'
                }]
            }
        }, {
            'name': jI(0x479),
            'midiProgram': 0x71,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': 'hard\x20fade',
                'chord': 'strum',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0xe,
                'filterEnvelope': 'decay\x201',
                'vibrato': 'none',
                'algorithm': jI(0x38b),
                'feedbackType': jI(0x4c3),
                'feedbackAmplitude': 0xf,
                'feedbackEnvelope': 'decay\x201',
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '5×',
                    'amplitude': 0x6,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '8×',
                    'amplitude': 0x9,
                    'envelope': 'custom'
                }, {
                    'frequency': '13×',
                    'amplitude': 0xb,
                    'envelope': 'custom'
                }]
            }
        }])
    }, {
        'name': jI(0x812),
        'presets': a8([{
            'name': 'nylon\x20guitar',
            'midiProgram': 0x18,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': jI(0x861),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x201',
                'vibrato': 'none',
                'algorithm': '1←2←3←4',
                'feedbackType': '3⟲',
                'feedbackAmplitude': 0x6,
                'feedbackEnvelope': 'twang\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '5×',
                    'amplitude': 0x2,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '7×',
                    'amplitude': 0x4,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x26f),
            'midiProgram': 0x19,
            'generalMidi': !0x0,
            'settings': {
                'type': 'Picked\x20String',
                'eqFilter': [],
                'effects': ['reverb'],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': 'strum',
                'harmonics': [0x64, 0x64, 0x56, 0x47, 0x47, 0x47, 0x56, 0x56, 0x47, 0x39, 0x2b, 0x2b, 0x2b, 0x39, 0x39, 0x39, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b],
                'unison': jI(0x3a9),
                'stringSustain': 0x47,
                'envelopes': []
            }
        }, {
            'name': jI(0x5c4),
            'midiProgram': 0x1a,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'effects': jI(0x76b),
                'transition': jI(0x404),
                'chord': jI(0x861),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x4a8),
                'interval': 'union',
                'vibrato': jI(0x3a9),
                'harmonics': [0x64, 0x64, 0x56, 0x47, 0x39, 0x47, 0x47, 0x2b, 0x39, 0x47, 0x39, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0]
            }
        }, {
            'name': 'clean\x20guitar',
            'midiProgram': 0x1b,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'effects': jI(0x76b),
                'transition': 'hard',
                'chord': 'strum',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x202',
                'interval': 'union',
                'vibrato': 'none',
                'harmonics': [0x56, 0x64, 0x64, 0x64, 0x56, 0x39, 0x56, 0x64, 0x64, 0x64, 0x47, 0x39, 0x2b, 0x47, 0x56, 0x47, 0x39, 0x39, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x39, 0x2b]
            }
        }, {
            'name': 'muted\x20guitar',
            'midiProgram': 0x1c,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x404),
                'chord': 'strum',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x201',
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x7,
                'feedbackEnvelope': jI(0x4a8),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xd,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x4,
                    'envelope': jI(0x7b1)
                }, {
                    'frequency': '4×',
                    'amplitude': 0x4,
                    'envelope': jI(0x4a8)
                }, {
                    'frequency': '16×',
                    'amplitude': 0x4,
                    'envelope': 'twang\x201'
                }]
            }
        }])
    }, {
        'name': 'Picked\x20Bass\x20Presets',
        'presets': a8([{
            'name': jI(0x486),
            'midiProgram': 0x20,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'effects': 'reverb',
                'transition': 'hard\x20fade',
                'chord': jI(0x861),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x570),
                'interval': jI(0x37e),
                'vibrato': jI(0x3a9),
                'harmonics': [0x64, 0x56, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe]
            }
        }, {
            'name': 'fingered\x20bass',
            'midiProgram': 0x21,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'effects': 'reverb',
                'transition': 'hard\x20fade',
                'chord': 'strum',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x201',
                'interval': 'union',
                'vibrato': 'none',
                'harmonics': [0x64, 0x56, 0x47, 0x39, 0x47, 0x2b, 0x39, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0]
            }
        }, {
            'name': 'picked\x20bass',
            'midiProgram': 0x22,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': 'strum',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x0,
                'filterEnvelope': jI(0x570),
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '3⟲',
                'feedbackAmplitude': 0x4,
                'feedbackEnvelope': jI(0x570),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x5,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '11×',
                    'amplitude': 0x1,
                    'envelope': 'twang\x203'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x9,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': jI(0x6eb),
            'midiProgram': 0x23,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'effects': 'reverb',
                'transition': jI(0x404),
                'chord': jI(0x861),
                'filterCutoffHz': 0x3e8,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x322),
                'interval': 'union',
                'vibrato': jI(0x3a9),
                'harmonics': [0x64, 0x64, 0x56, 0x47, 0x47, 0x39, 0x39, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0xe]
            }
        }, {
            'name': jI(0x2cc),
            'midiProgram': 0x24,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x4bd),
                'effects': 'reverb',
                'transition': jI(0x404),
                'chord': 'strum',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x0,
                'filterEnvelope': jI(0x570),
                'interval': 'union',
                'vibrato': 'none',
                'harmonics': [0x64, 0x64, 0x64, 0x64, 0x56, 0x47, 0x39, 0x1d, 0x1d, 0x2b, 0x2b, 0x39, 0x47, 0x39, 0x1d, 0x1d, 0x2b, 0x39, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x39, 0x47, 0x47, 0x47, 0x47]
            }
        }, {
            'name': jI(0x56b),
            'midiProgram': 0x25,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x404),
                'chord': jI(0x861),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0x0,
                'filterEnvelope': 'twang\x201',
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x613),
                'feedbackType': '3⟲',
                'feedbackAmplitude': 0x4,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '3×',
                    'amplitude': 0xd,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x7,
                    'envelope': 'steady'
                }, {
                    'frequency': jI(0x695),
                    'amplitude': 0x3,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xb,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': jI(0x77a),
            'midiProgram': 0x26,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'hard',
                'chord': jI(0x861),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x2b,
                'filterEnvelope': 'twang\x202',
                'vibrato': 'none',
                'algorithm': jI(0x7cf),
                'feedbackType': '3⟲\u20034⟲',
                'feedbackAmplitude': 0x9,
                'feedbackEnvelope': jI(0x4a8),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': 'twang\x201'
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0xd,
                    'envelope': 'twang\x202'
                }]
            }
        }, {
            'name': jI(0x1a4),
            'midiProgram': 0x27,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': 'strum',
                'filterCutoffHz': 0x3e8,
                'filterResonance': 0x39,
                'filterEnvelope': 'punch',
                'vibrato': 'none',
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '1→2',
                'feedbackAmplitude': 0x4,
                'feedbackEnvelope': 'twang\x203',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x9,
                    'envelope': 'steady'
                }, {
                    'frequency': '3×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': 'bass\x20&\x20lead',
            'midiProgram': 0x57,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x3a7),
                'transition': 'hard',
                'effects': jI(0x76b),
                'chord': 'harmony',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x56,
                'filterEnvelope': jI(0x4a8),
                'wave': jI(0x7fd),
                'interval': jI(0x808),
                'vibrato': jI(0x3a9)
            }
        }, {
            'name': jI(0x351),
            'midiProgram': 0x57,
            'settings': {
                'type': 'chip',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 6727.17,
                    'linearGain': 0.7071
                }],
                'effects': ['note\x20filter', jI(0x302)],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 594.6,
                    'linearGain': 11.3137
                }],
                'bitcrusherOctave': 1.5,
                'bitcrusherQuantization': 0x0,
                'transition': jI(0x382),
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x3,
                'chord': jI(0x4f4),
                'wave': jI(0x7fd),
                'unison': jI(0x3a9),
                'envelopes': [{
                    'target': jI(0x23c),
                    'envelope': 'flare\x202',
                    'index': 0x0
                }]
            }
        }])
    }, {
        'name': jI(0x2bb),
        'presets': a8([{
            'name': 'pizzicato\x20strings',
            'midiProgram': 0x2d,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x400),
                'chord': 'harmony',
                'filterCutoffHz': 0x3e8,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x570),
                'vibrato': 'none',
                'algorithm': jI(0x1a8),
                'feedbackType': '1⟲\x202⟲\x203⟲\x204⟲',
                'feedbackAmplitude': 0x7,
                'feedbackEnvelope': 'twang\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '3×',
                    'amplitude': 0xb,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '6×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '~1×',
                    'amplitude': 0xa,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': 'harp',
            'midiProgram': 0x2e,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'transition': 'hard\x20fade',
                'effects': jI(0x76b),
                'chord': 'strum',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x0,
                'filterEnvelope': 'twang\x201',
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x7cf),
                'feedbackType': '3⟲',
                'feedbackAmplitude': 0x6,
                'feedbackEnvelope': jI(0x4a8),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '4×',
                    'amplitude': 0x6,
                    'envelope': 'custom'
                }, {
                    'frequency': jI(0x569),
                    'amplitude': 0x3,
                    'envelope': 'steady'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x167),
            'midiProgram': 0x68,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'transition': 'hard\x20fade',
                'effects': 'reverb',
                'chord': jI(0x861),
                'filterCutoffHz': 0x1f40,
                'filterResonance': 0x39,
                'filterEnvelope': jI(0x4a8),
                'vibrato': 'none',
                'algorithm': jI(0x6c6),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': jI(0x7b1)
                }, {
                    'frequency': '9×',
                    'amplitude': 0x3,
                    'envelope': 'twang\x203'
                }, {
                    'frequency': jI(0x711),
                    'amplitude': 0x9,
                    'envelope': 'swell\x203'
                }]
            }
        }, {
            'name': 'banjo',
            'midiProgram': 0x69,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': 'hard\x20fade',
                'chord': jI(0x861),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x202',
                'vibrato': 'none',
                'algorithm': jI(0x6ee),
                'feedbackType': '2⟲',
                'feedbackAmplitude': 0x4,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '4×',
                    'amplitude': 0xe,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': jI(0x5df),
                    'amplitude': 0x3,
                    'envelope': 'twang\x203'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xb,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x775),
            'midiProgram': 0x69,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': 'hard\x20fade',
                'chord': 'strum',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x0,
                'filterEnvelope': jI(0x570),
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '3⟲',
                'feedbackAmplitude': 0x5,
                'feedbackEnvelope': jI(0x570),
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6,
                    'envelope': 'steady'
                }, {
                    'frequency': '9×',
                    'amplitude': 0x4,
                    'envelope': jI(0x4a8)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xb,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x5d7),
            'midiProgram': 0x6a,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'hard\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x1f40,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x570),
                'vibrato': 'none',
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '3⟲',
                'feedbackAmplitude': 0x9,
                'feedbackEnvelope': 'twang\x203',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xc,
                    'envelope': 'steady'
                }, {
                    'frequency': '16×',
                    'amplitude': 0x4,
                    'envelope': 'twang\x203'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x7,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': jI(0x2d0),
            'midiProgram': 0x6b,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': 'hard\x20fade',
                'chord': jI(0x38a),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0xe,
                'filterEnvelope': 'twang\x202',
                'vibrato': 'none',
                'algorithm': '1←3\u20032←4',
                'feedbackType': jI(0x4a7),
                'feedbackAmplitude': 0x5,
                'feedbackEnvelope': jI(0x4a8),
                'operators': [{
                    'frequency': '~1×',
                    'amplitude': 0xc,
                    'envelope': 'custom'
                }, {
                    'frequency': '6×',
                    'amplitude': 0xa,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '4×',
                    'amplitude': 0x8,
                    'envelope': jI(0x7b1)
                }, {
                    'frequency': '~2×',
                    'amplitude': 0x8,
                    'envelope': jI(0x7b1)
                }]
            }
        }])
    }, {
        'name': 'Distortion\x20Presets',
        'presets': a8([{
            'name': jI(0x46c),
            'midiProgram': 0x1d,
            'generalMidi': !0x0,
            'settings': {
                'type': 'Picked\x20String',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 4756.83,
                    'linearGain': 0.7071
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 210.22,
                    'linearGain': 0x1
                }, {
                    'type': 'low-pass',
                    'cutoffHz': 5656.85,
                    'linearGain': 0x1
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 840.9,
                    'linearGain': 0.5
                }],
                'effects': [jI(0x747), jI(0x1ce)],
                'noteFilter': [{
                    'type': jI(0x524),
                    'cutoffHz': 297.3,
                    'linearGain': 0x2
                }, {
                    'type': jI(0x541),
                    'cutoffHz': 2378.41,
                    'linearGain': 0.7071
                }],
                'distortion': 0x47,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0xc,
                'chord': jI(0x861),
                'harmonics': [0x56, 0x64, 0x64, 0x56, 0x56, 0x56, 0x56, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39],
                'unison': 'none',
                'stringSustain': 0x47,
                'envelopes': [{
                    'target': jI(0x23c),
                    'envelope': jI(0x583),
                    'index': 0x1
                }]
            }
        }, {
            'name': jI(0x4cc),
            'midiProgram': 0x1e,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x281),
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 4756.83,
                    'linearGain': 0.7071
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 210.22,
                    'linearGain': 0x1
                }, {
                    'type': 'low-pass',
                    'cutoffHz': 5656.85,
                    'linearGain': 0x1
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 594.6,
                    'linearGain': 0.3536
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 0x3e8,
                    'linearGain': 0.25
                }],
                'effects': [jI(0x747), jI(0x1ce), jI(0x76b)],
                'noteFilter': [{
                    'type': jI(0x524),
                    'cutoffHz': 353.55,
                    'linearGain': 0x2
                }, {
                    'type': jI(0x541),
                    'cutoffHz': 0x7d0,
                    'linearGain': 0x1
                }],
                'distortion': 0x56,
                'reverb': 0x43,
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0xc,
                'chord': jI(0x861),
                'harmonics': [0x56, 0x64, 0x64, 0x56, 0x56, 0x56, 0x56, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39],
                'unison': jI(0x3a9),
                'stringSustain': 0x47,
                'envelopes': [{
                    'target': jI(0x23c),
                    'envelope': jI(0x583),
                    'index': 0x1
                }]
            }
        }, {
            'name': 'charango\x20synth',
            'midiProgram': 0x54,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 11313.71,
                    'linearGain': 0x1
                }],
                'effects': [],
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': 'strum',
                'algorithm': jI(0x6ee),
                'feedbackType': '1→2→3→4',
                'feedbackAmplitude': 0x8,
                'operators': [{
                    'frequency': '3×',
                    'amplitude': 0xd
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x5
                }, {
                    'frequency': '4×',
                    'amplitude': 0x6
                }, {
                    'frequency': '3×',
                    'amplitude': 0x7
                }],
                'envelopes': [{
                    'target': jI(0x31f),
                    'envelope': 'twang\x203'
                }]
            }
        }, {
            'name': 'guitar\x20harmonics',
            'midiProgram': 0x1f,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 0xfa0,
                    'linearGain': 0x2
                }],
                'effects': ['reverb'],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': jI(0x861),
                'algorithm': '1←(2\u20023)←4',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x2,
                'operators': [{
                    'frequency': '4×',
                    'amplitude': 0xc
                }, {
                    'frequency': '16×',
                    'amplitude': 0x5
                }, {
                    'frequency': '1×',
                    'amplitude': 0x2
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0xc
                }],
                'envelopes': [{
                    'target': jI(0x1f8),
                    'envelope': 'swell\x201',
                    'index': 0x1
                }, {
                    'target': jI(0x1f8),
                    'envelope': jI(0x4d1),
                    'index': 0x2
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'twang\x201',
                    'index': 0x3
                }]
            }
        }, {
            'name': 'PWM\x20overdrive',
            'midiProgram': 0x1d,
            'settings': {
                'type': 'PWM',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 5656.85,
                    'linearGain': 1.4142
                }],
                'effects': [],
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': jI(0x861),
                'pulseWidth': 17.67767,
                'envelopes': [{
                    'target': jI(0x1a7),
                    'envelope': 'punch'
                }]
            }
        }, {
            'name': jI(0x497),
            'midiProgram': 0x1e,
            'settings': {
                'type': 'PWM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 3363.59,
                    'linearGain': 0x2
                }],
                'effects': ['vibrato'],
                'vibrato': jI(0x471),
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': 'strum',
                'pulseWidth': 0x32,
                'envelopes': [{
                    'target': jI(0x1a7),
                    'envelope': jI(0x342)
                }]
            }
        }, {
            'name': 'FM\x20overdrive',
            'midiProgram': 0x1d,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 4756.83,
                    'linearGain': 0x1
                }],
                'effects': ['reverb'],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': 'strum',
                'algorithm': jI(0x6ee),
                'feedbackType': '1→2',
                'feedbackAmplitude': 0x2,
                'operators': [{
                    'frequency': '~1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0xc
                }, {
                    'frequency': '~2×',
                    'amplitude': 0x6
                }, {
                    'frequency': '1×',
                    'amplitude': 0xc
                }],
                'envelopes': [{
                    'target': 'operatorAmplitude',
                    'envelope': 'twang\x201',
                    'index': 0x2
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x287),
                    'index': 0x3
                }, {
                    'target': jI(0x31f),
                    'envelope': jI(0x4d1)
                }]
            }
        }, {
            'name': jI(0x372),
            'midiProgram': 0x1e,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0xfa0,
                    'linearGain': 0x2
                }],
                'effects': [jI(0x76b)],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': 'strum',
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '1→2',
                'feedbackAmplitude': 0x4,
                'operators': [{
                    'frequency': jI(0x784),
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0xb
                }, {
                    'frequency': '1×',
                    'amplitude': 0x9
                }, {
                    'frequency': '~2×',
                    'amplitude': 0x4
                }],
                'envelopes': [{
                    'target': jI(0x1f8),
                    'envelope': 'swell\x201',
                    'index': 0x2
                }, {
                    'target': jI(0x1f8),
                    'envelope': 'swell\x203',
                    'index': 0x3
                }]
            }
        }])
    }, {
        'name': jI(0x16d),
        'presets': a8([{
            'name': 'drawbar\x20organ\x201',
            'midiProgram': 0x10,
            'generalMidi': !0x0,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': jI(0x4bd),
                'effects': jI(0x76b),
                'transition': jI(0x404),
                'chord': jI(0x38a),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x2cf),
                'interval': 'union',
                'vibrato': jI(0x3a9),
                'harmonics': [0x56, 0x56, 0x0, 0x56, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
            }
        }, {
            'name': jI(0x419),
            'midiProgram': 0x10,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': jI(0x4bd),
                'effects': 'reverb',
                'transition': 'hard',
                'chord': 'harmony',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x2cf),
                'interval': jI(0x37e),
                'vibrato': 'none',
                'harmonics': [0x56, 0x1d, 0x47, 0x56, 0x47, 0xe, 0x0, 0x64, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0x0, 0x39, 0x0, 0x0, 0x0, 0x1d, 0x0, 0x0, 0x0, 0x0]
            }
        }, {
            'name': 'percussive\x20organ',
            'midiProgram': 0x11,
            'generalMidi': !0x0,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': 'FM',
                'transition': jI(0x404),
                'effects': 'reverb',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x4d1),
                'vibrato': 'light',
                'algorithm': jI(0x38b),
                'feedbackType': jI(0x37b),
                'feedbackAmplitude': 0x7,
                'feedbackEnvelope': jI(0x37c),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x7,
                    'envelope': 'custom'
                }, {
                    'frequency': '2×',
                    'amplitude': 0x7,
                    'envelope': 'custom'
                }, {
                    'frequency': '3×',
                    'amplitude': 0x8,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '4×',
                    'amplitude': 0x8,
                    'envelope': jI(0x4e0)
                }]
            }
        }, {
            'name': 'rock\x20organ',
            'midiProgram': 0x12,
            'generalMidi': !0x0,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': 'FM',
                'effects': 'chorus\x20&\x20reverb',
                'transition': jI(0x404),
                'chord': jI(0x38a),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0xe,
                'filterEnvelope': 'punch',
                'vibrato': jI(0x471),
                'algorithm': jI(0x1a8),
                'feedbackType': jI(0x25b),
                'feedbackAmplitude': 0x2,
                'feedbackEnvelope': 'flare\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '4×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '6×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '2×',
                    'amplitude': 0x5,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x5b5),
            'midiProgram': 0x13,
            'generalMidi': !0x0,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': 'FM',
                'transition': 'cross\x20fade',
                'effects': 'reverb',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0x2b,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'none',
                'algorithm': '1\u20032\u20033\u20034',
                'feedbackType': '1⟲\x202⟲\x203⟲\x204⟲',
                'feedbackAmplitude': 0x5,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x8,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '2×',
                    'amplitude': 0x9,
                    'envelope': 'custom'
                }, {
                    'frequency': '4×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '8×',
                    'amplitude': 0x8,
                    'envelope': 'custom'
                }]
            }
        }, {
            'name': 'reed\x20organ',
            'midiProgram': 0x14,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x4bd),
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': 'harmony',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x2cf),
                'interval': 'union',
                'vibrato': jI(0x3a9),
                'harmonics': [0x47, 0x56, 0x64, 0x56, 0x47, 0x64, 0x39, 0x47, 0x47, 0x47, 0x2b, 0x2b, 0x2b, 0x47, 0x2b, 0x47, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x1d, 0x2b, 0x1d, 0x1d, 0xe]
            }
        }, {
            'name': jI(0x742),
            'midiProgram': 0x15,
            'generalMidi': !0x0,
            'settings': {
                'type': 'chip',
                'effects': 'reverb',
                'transition': 'cross\x20fade',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0x0,
                'filterEnvelope': jI(0x342),
                'wave': jI(0x865),
                'interval': jI(0x23f),
                'vibrato': 'none'
            }
        }, {
            'name': jI(0x2d7),
            'midiProgram': 0x17,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x4bd),
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': 'harmony',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x1d,
                'filterEnvelope': 'swell\x201',
                'interval': 'hum',
                'vibrato': 'none',
                'harmonics': [0x56, 0x56, 0x56, 0x39, 0x47, 0x56, 0x39, 0x47, 0x47, 0x47, 0x39, 0x2b, 0x39, 0x2b, 0x47, 0x2b, 0x47, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d]
            }
        }, {
            'name': 'bagpipe',
            'midiProgram': 0x6d,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'effects': jI(0x76b),
                'transition': 'cross\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x1619,
                'filterResonance': 0x2b,
                'filterEnvelope': 'punch',
                'interval': jI(0x536),
                'vibrato': 'none',
                'harmonics': [0x47, 0x56, 0x56, 0x64, 0x64, 0x56, 0x39, 0x64, 0x56, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x47, 0x39, 0x47, 0x39, 0x47, 0x2b, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b]
            }
        }])
    }, {
        'name': 'String\x20Presets',
        'presets': a8([{
            'name': jI(0x205),
            'midiProgram': 0x28,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0xfa0,
                    'linearGain': 1.4142
                }, {
                    'type': jI(0x524),
                    'cutoffHz': 105.11,
                    'linearGain': 0.3536
                }],
                'effects': ['vibrato', 'reverb'],
                'vibrato': 'delayed',
                'reverb': 0x43,
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0413,
                'fadeOutTicks': 0x6,
                'chord': 'simultaneous',
                'algorithm': jI(0x44f),
                'feedbackType': jI(0x876),
                'feedbackAmplitude': 0x5,
                'operators': [{
                    'frequency': '4×',
                    'amplitude': 0x9
                }, {
                    'frequency': '3×',
                    'amplitude': 0x9
                }, {
                    'frequency': '2×',
                    'amplitude': 0x7
                }, {
                    'frequency': '7×',
                    'amplitude': 0x5
                }],
                'envelopes': [{
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x342),
                    'index': 0x3
                }, {
                    'target': 'feedbackAmplitude',
                    'envelope': 'twang\x203'
                }]
            }
        }, {
            'name': jI(0x18a),
            'midiProgram': 0x29,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x41c),
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x2cf),
                'vibrato': jI(0x471),
                'algorithm': '(1\u20022\u20023)←4',
                'feedbackType': jI(0x25b),
                'feedbackAmplitude': 0x8,
                'feedbackEnvelope': jI(0x342),
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xb,
                    'envelope': 'custom'
                }, {
                    'frequency': '7×',
                    'amplitude': 0x7,
                    'envelope': 'custom'
                }, {
                    'frequency': jI(0x695),
                    'amplitude': 0x4,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x5,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': 'cello',
            'midiProgram': 0x2a,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0xfa0,
                    'linearGain': 0.1768
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 297.3,
                    'linearGain': 0.7071
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 4756.83,
                    'linearGain': 5.6569
                }],
                'effects': [jI(0x747), jI(0x76b)],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 0x3e80,
                    'linearGain': 0.0884
                }],
                'reverb': 0x43,
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': 0xc,
                'chord': jI(0x82d),
                'algorithm': jI(0x5e0),
                'feedbackType': '1⟲\u20032⟲',
                'feedbackAmplitude': 0x3,
                'operators': [{
                    'frequency': jI(0x711),
                    'amplitude': 0x5
                }, {
                    'frequency': '~1×',
                    'amplitude': 0xa
                }, {
                    'frequency': '1×',
                    'amplitude': 0x9
                }, {
                    'frequency': '6×',
                    'amplitude': 0x3
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x342)
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'swell\x201',
                    'index': 0x3
                }]
            }
        }, {
            'name': 'contrabass',
            'midiProgram': 0x2b,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'cross\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x2cf),
                'vibrato': jI(0x471),
                'algorithm': jI(0x5e0),
                'feedbackType': '1⟲\u20032⟲',
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '16×',
                    'amplitude': 0x5,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '6×',
                    'amplitude': 0x3,
                    'envelope': jI(0x342)
                }]
            }
        }, {
            'name': 'fiddle',
            'midiProgram': 0x6e,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'delayed',
                'algorithm': jI(0x44f),
                'feedbackType': jI(0x7ae),
                'feedbackAmplitude': 0x5,
                'feedbackEnvelope': 'twang\x201',
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xa,
                    'envelope': 'custom'
                }, {
                    'frequency': '8×',
                    'amplitude': 0x8,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x8,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '16×',
                    'amplitude': 0x3,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': 'tremolo\x20strings',
            'midiProgram': 0x2c,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'chorus\x20&\x20reverb',
                'transition': 'medium\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x0,
                'filterEnvelope': 'tremolo4',
                'vibrato': jI(0x3a9),
                'algorithm': '1\u20032\u20033\u20034',
                'feedbackType': '1→2→3→4',
                'feedbackAmplitude': 0xc,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x8,
                    'envelope': 'custom'
                }, {
                    'frequency': '~2×',
                    'amplitude': 0x8,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '4×',
                    'amplitude': 0x8,
                    'envelope': 'custom'
                }, {
                    'frequency': '7×',
                    'amplitude': 0x8,
                    'envelope': 'custom'
                }]
            }
        }, {
            'name': jI(0x5ff),
            'midiProgram': 0x30,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'chorus\x20&\x20reverb',
                'transition': jI(0x41c),
                'chord': 'harmony',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x2b,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'none',
                'algorithm': '(1\u20022)←(3\u20024)',
                'feedbackType': '4⟲',
                'feedbackAmplitude': 0x5,
                'feedbackEnvelope': jI(0x7b1),
                'operators': [{
                    'frequency': '4×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '3×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '2×',
                    'amplitude': 0x7,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '7×',
                    'amplitude': 0x3,
                    'envelope': jI(0x342)
                }]
            }
        }, {
            'name': 'slow\x20strings',
            'midiProgram': 0x31,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'chorus\x20&\x20reverb',
                'transition': 'soft\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x586,
                'filterResonance': 0x0,
                'filterEnvelope': 'swell\x202',
                'vibrato': 'none',
                'algorithm': '(1\u20022)←(3\u20024)',
                'feedbackType': '4⟲',
                'feedbackAmplitude': 0x6,
                'feedbackEnvelope': 'flare\x203',
                'operators': [{
                    'frequency': '4×',
                    'amplitude': 0xa,
                    'envelope': 'custom'
                }, {
                    'frequency': '3×',
                    'amplitude': 0xa,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '2×',
                    'amplitude': 0x7,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '7×',
                    'amplitude': 0x4,
                    'envelope': 'swell\x201'
                }]
            }
        }, {
            'name': 'strings\x20synth\x201',
            'midiProgram': 0x32,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x3a7),
                'transition': jI(0x276),
                'effects': 'chorus\x20&\x20reverb',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x586,
                'filterResonance': 0x2b,
                'filterEnvelope': 'steady',
                'wave': jI(0x7fd),
                'interval': jI(0x536),
                'vibrato': jI(0x471)
            }
        }, {
            'name': 'strings\x20synth\x202',
            'midiProgram': 0x33,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'chorus\x20&\x20reverb',
                'transition': jI(0x276),
                'chord': 'harmony',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x2b,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'none',
                'algorithm': jI(0x38b),
                'feedbackType': '1⟲\x202⟲\x203⟲\x204⟲',
                'feedbackAmplitude': 0xc,
                'feedbackEnvelope': 'swell\x201',
                'operators': [{
                    'frequency': '3×',
                    'amplitude': 0x6,
                    'envelope': 'custom'
                }, {
                    'frequency': '2×',
                    'amplitude': 0x7,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x8,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x9,
                    'envelope': jI(0x4e0)
                }]
            }
        }, {
            'name': 'orchestra\x20hit\x201',
            'midiProgram': 0x37,
            'generalMidi': !0x0,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': 'FM',
                'effects': jI(0x5f6),
                'transition': jI(0x2a0),
                'chord': jI(0x38a),
                'filterCutoffHz': 0x1f40,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x4e0),
                'vibrato': 'none',
                'algorithm': '1\u20032\u20033\u20034',
                'feedbackType': '1⟲\x202⟲\x203⟲\x204⟲',
                'feedbackAmplitude': 0xe,
                'feedbackEnvelope': jI(0x7b1),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': jI(0x7b1)
                }, {
                    'frequency': '2×',
                    'amplitude': 0xf,
                    'envelope': 'flare\x203'
                }, {
                    'frequency': '4×',
                    'amplitude': 0xf,
                    'envelope': jI(0x322)
                }, {
                    'frequency': '8×',
                    'amplitude': 0xf,
                    'envelope': jI(0x561)
                }]
            }
        }, {
            'name': 'orchestra\x20hit\x202',
            'midiProgram': 0x37,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': 'FM',
                'effects': jI(0x5f6),
                'transition': 'medium\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x1f40,
                'filterResonance': 0x0,
                'filterEnvelope': 'decay\x201',
                'vibrato': 'delayed',
                'algorithm': '1\u20032\u20033\u20034',
                'feedbackType': '1⟲\x202⟲\x203⟲\x204⟲',
                'feedbackAmplitude': 0xe,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xc,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '2×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '3×',
                    'amplitude': 0xc,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '4×',
                    'amplitude': 0xe,
                    'envelope': 'custom'
                }]
            }
        }, {
            'name': 'supersaw\x20string',
            'midiProgram': 0x29,
            'settings': {
                'type': jI(0x6d9),
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 2828.43,
                    'linearGain': 1.4142
                }, {
                    'type': 'low-pass',
                    'cutoffHz': 3363.59,
                    'linearGain': 0.1768
                }],
                'effects': ['note\x20filter', jI(0x76b)],
                'noteFilter': [{
                    'type': jI(0x524),
                    'cutoffHz': 0x1f4,
                    'linearGain': 0.1768
                }],
                'reverb': 0x21,
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': 0x6,
                'pulseWidth': 35.35534,
                'dynamism': 0x53,
                'spread': 0x8,
                'shape': 0x32,
                'envelopes': [{
                    'target': 'noteFilterFreq',
                    'envelope': jI(0x570),
                    'index': 0x0
                }]
            }
        }])
    }, {
        'name': 'Vocal\x20Presets',
        'presets': a8([{
            'name': 'choir\x20soprano',
            'midiProgram': 0x5e,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 2828.43,
                    'linearGain': 0x2
                }, {
                    'type': 'peak',
                    'cutoffHz': 1189.21,
                    'linearGain': 5.6569
                }, {
                    'type': jI(0x524),
                    'cutoffHz': 707.11,
                    'linearGain': 2.8284
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 0x7d0,
                    'linearGain': 0.0884
                }, {
                    'type': 'peak',
                    'cutoffHz': 840.9,
                    'linearGain': 0.25
                }, {
                    'type': jI(0x541),
                    'cutoffHz': 6727.17,
                    'linearGain': 11.3137
                }],
                'effects': ['vibrato', 'chorus', jI(0x76b)],
                'vibrato': 'shaky',
                'chorus': 0x64,
                'reverb': 0x21,
                'fadeInSeconds': 0.0413,
                'fadeOutTicks': 0x18,
                'harmonics': [0x64, 0x64, 0x56, 0x39, 0x1d, 0x1d, 0x39, 0x47, 0x39, 0x1d, 0xe, 0xe, 0xe, 0x1d, 0x2b, 0x39, 0x2b, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0],
                'unison': 'none',
                'envelopes': []
            }
        }, {
            'name': jI(0x1ac),
            'midiProgram': 0x34,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'eqFilter': [{
                    'type': jI(0x399),
                    'cutoffHz': 0x3e8,
                    'linearGain': 11.3137
                }, {
                    'type': 'peak',
                    'cutoffHz': 707.11,
                    'linearGain': 5.6569
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 840.9,
                    'linearGain': 0.0884
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 1681.79,
                    'linearGain': 0.0884
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 297.3,
                    'linearGain': 0.7071
                }, {
                    'type': 'low-pass',
                    'cutoffHz': 2828.43,
                    'linearGain': 11.3137
                }],
                'effects': ['vibrato', 'chorus', 'reverb'],
                'vibrato': 'shaky',
                'chorus': 0x64,
                'reverb': 0x43,
                'transition': 'normal',
                'fadeInSeconds': 0.0413,
                'fadeOutTicks': 0x30,
                'chord': jI(0x82d),
                'harmonics': [0x56, 0x64, 0x64, 0x56, 0x47, 0x39, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe],
                'unison': jI(0x3a9),
                'envelopes': []
            }
        }, {
            'name': 'choir\x20bass',
            'midiProgram': 0x34,
            'settings': {
                'type': 'harmonics',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 2378.41,
                    'linearGain': 11.3137
                }, {
                    'type': 'peak',
                    'cutoffHz': 594.6,
                    'linearGain': 5.6569
                }, {
                    'type': 'peak',
                    'cutoffHz': 1681.79,
                    'linearGain': 0.0884
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 707.11,
                    'linearGain': 0.0884
                }, {
                    'type': 'peak',
                    'cutoffHz': 840.9,
                    'linearGain': 11.3137
                }],
                'effects': [jI(0x7b2), 'chorus', jI(0x76b)],
                'vibrato': jI(0x308),
                'chorus': 0x64,
                'reverb': 0x43,
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0413,
                'fadeOutTicks': 0x30,
                'chord': 'simultaneous',
                'harmonics': [0x47, 0x56, 0x64, 0x64, 0x56, 0x56, 0x39, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe],
                'unison': jI(0x3a9),
                'envelopes': []
            }
        }, {
            'name': jI(0x294),
            'midiProgram': 0x55,
            'settings': {
                'type': 'harmonics',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 2828.43,
                    'linearGain': 0x2
                }, {
                    'type': 'peak',
                    'cutoffHz': 1189.21,
                    'linearGain': 5.6569
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 707.11,
                    'linearGain': 2.8284
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 0x7d0,
                    'linearGain': 0.0884
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 840.9,
                    'linearGain': 0.25
                }],
                'effects': [jI(0x7b2), jI(0x76b)],
                'vibrato': 'shaky',
                'reverb': 0x21,
                'fadeInSeconds': 0.0413,
                'fadeOutTicks': 0xc,
                'harmonics': [0x56, 0x64, 0x56, 0x2b, 0xe, 0xe, 0x39, 0x47, 0x39, 0xe, 0xe, 0xe, 0xe, 0xe, 0x2b, 0x39, 0x2b, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0],
                'unison': 'none',
                'envelopes': []
            }
        }, {
            'name': jI(0x848),
            'midiProgram': 0x55,
            'settings': {
                'type': jI(0x4bd),
                'eqFilter': [{
                    'type': jI(0x399),
                    'cutoffHz': 0x3e8,
                    'linearGain': 11.3137
                }, {
                    'type': 'peak',
                    'cutoffHz': 707.11,
                    'linearGain': 5.6569
                }, {
                    'type': 'peak',
                    'cutoffHz': 840.9,
                    'linearGain': 0.0884
                }, {
                    'type': 'peak',
                    'cutoffHz': 1681.79,
                    'linearGain': 0.0884
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 297.3,
                    'linearGain': 0.7071
                }, {
                    'type': jI(0x541),
                    'cutoffHz': 2828.43,
                    'linearGain': 11.3137
                }],
                'effects': ['vibrato', jI(0x76b)],
                'vibrato': 'shaky',
                'reverb': 0x21,
                'fadeInSeconds': 0.0413,
                'fadeOutTicks': 0xc,
                'harmonics': [0x56, 0x64, 0x64, 0x56, 0x47, 0x39, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe],
                'unison': 'none',
                'envelopes': []
            }
        }, {
            'name': 'solo\x20bass',
            'midiProgram': 0x55,
            'settings': {
                'type': 'harmonics',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 2378.41,
                    'linearGain': 5.6569
                }, {
                    'type': 'peak',
                    'cutoffHz': 594.6,
                    'linearGain': 0x8
                }, {
                    'type': 'peak',
                    'cutoffHz': 1681.79,
                    'linearGain': 0.0884
                }, {
                    'type': 'peak',
                    'cutoffHz': 707.11,
                    'linearGain': 0.0884
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 840.9,
                    'linearGain': 0x8
                }, {
                    'type': 'high-pass',
                    'cutoffHz': 210.22,
                    'linearGain': 1.4142
                }],
                'effects': [jI(0x7b2), 'reverb'],
                'vibrato': jI(0x308),
                'reverb': 0x21,
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': 0xc,
                'chord': jI(0x82d),
                'harmonics': [0x47, 0x56, 0x64, 0x64, 0x56, 0x56, 0x39, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe],
                'unison': jI(0x3a9),
                'envelopes': []
            }
        }, {
            'name': jI(0x194),
            'midiProgram': 0x35,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x586,
                'filterResonance': 0x39,
                'filterEnvelope': jI(0x2cf),
                'interval': 'union',
                'vibrato': 'shaky',
                'harmonics': [0x64, 0x39, 0x2b, 0x2b, 0xe, 0xe, 0x0, 0x0, 0x0, 0xe, 0x1d, 0x1d, 0xe, 0x0, 0xe, 0x1d, 0x1d, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
            }
        }, {
            'name': 'voice\x20synth',
            'midiProgram': 0x36,
            'generalMidi': !0x0,
            'settings': {
                'type': 'chip',
                'transition': jI(0x400),
                'effects': 'chorus\x20&\x20reverb',
                'chord': jI(0x38a),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x39,
                'filterEnvelope': 'steady',
                'wave': jI(0x7ca),
                'interval': jI(0x37e),
                'vibrato': 'light'
            }
        }, {
            'name': jI(0x271),
            'midiProgram': 0x55,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'chorus\x20&\x20reverb',
                'transition': 'cross\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'light',
                'algorithm': jI(0x1a8),
                'feedbackType': '1→2→3→4',
                'feedbackAmplitude': 0x2,
                'feedbackEnvelope': 'punch',
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xa,
                    'envelope': 'custom'
                }, {
                    'frequency': '9×',
                    'amplitude': 0x5,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '20×',
                    'amplitude': 0x1,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0x4,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x2df),
            'midiProgram': 0x55,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [jI(0x7b2), jI(0x76b)],
                'vibrato': jI(0x471),
                'reverb': 0x21,
                'transition': jI(0x382),
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x3,
                'chord': jI(0x82d),
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x2,
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0x7
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0x7
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': jI(0x1f8),
                    'envelope': jI(0x4d1),
                    'index': 0x1
                }, {
                    'target': 'feedbackAmplitude',
                    'envelope': jI(0x7b1)
                }]
            }
        }, {
            'name': 'yowie',
            'midiProgram': 0x55,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': 'cross\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x56,
                'filterEnvelope': jI(0x883),
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x84e),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0xc,
                'feedbackEnvelope': 'tremolo3',
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xc,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '16×',
                    'amplitude': 0x5,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x5,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x7ac),
            'midiProgram': 0x55,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': ['vibrato', 'reverb'],
                'vibrato': 'light',
                'reverb': 0x21,
                'transition': jI(0x86c),
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x3,
                'chord': jI(0x82d),
                'algorithm': '1\u20032\u20033\u20034',
                'feedbackType': '1⟲\u20032⟲',
                'feedbackAmplitude': 0x5,
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xd
                }, {
                    'frequency': '5×',
                    'amplitude': 0xc
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': 'noteVolume',
                    'envelope': jI(0x583)
                }, {
                    'target': jI(0x31f),
                    'envelope': 'flare\x202'
                }]
            }
        }, {
            'name': jI(0x182),
            'midiProgram': 0x55,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'hard',
                'chord': 'harmony',
                'filterCutoffHz': 0x1f40,
                'filterResonance': 0x0,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x1a8),
                'feedbackType': jI(0x25b),
                'feedbackAmplitude': 0x0,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xf,
                    'envelope': 'punch'
                }, {
                    'frequency': '4×',
                    'amplitude': 0xf,
                    'envelope': jI(0x4d1)
                }, {
                    'frequency': '7×',
                    'amplitude': 0xf,
                    'envelope': jI(0x4d1)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': 'twang\x201'
                }]
            }
        }, {
            'name': 'echo\x20drop',
            'midiProgram': 0x66,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'chorus\x20&\x20reverb',
                'transition': jI(0x404),
                'chord': 'harmony',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x4d1),
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x2,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': jI(0x569),
                    'amplitude': 0xb,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x5,
                    'envelope': 'steady'
                }, {
                    'frequency': '11×',
                    'amplitude': 0x2,
                    'envelope': 'steady'
                }, {
                    'frequency': jI(0x711),
                    'amplitude': 0x5,
                    'envelope': jI(0x287)
                }]
            }
        }, {
            'name': jI(0x72d),
            'midiProgram': 0x55,
            'settings': {
                'type': jI(0x5ee),
                'effects': jI(0x76b),
                'transition': jI(0x409),
                'chord': 'harmony',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x342),
                'spectrum': [0x2b, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x64, 0xe, 0xe, 0xe, 0x39, 0xe, 0xe, 0x64, 0xe, 0x2b, 0xe, 0x2b, 0xe, 0xe, 0x2b, 0xe, 0x1d, 0xe, 0x1d, 0xe, 0xe, 0x1d, 0x0]
            }
        }])
    }, {
        'name': jI(0x226),
        'presets': a8([{
            'name': 'trumpet',
            'midiProgram': 0x38,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x2b,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'none',
                'algorithm': jI(0x6c6),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x9,
                'feedbackEnvelope': jI(0x342),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x8,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x5,
                    'envelope': jI(0x322)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': jI(0x27b),
            'midiProgram': 0x39,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x409),
                'chord': 'harmony',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x2b,
                'filterEnvelope': jI(0x2cf),
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x6c6),
                'feedbackType': '2⟲',
                'feedbackAmplitude': 0x7,
                'feedbackEnvelope': 'swell\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x8,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': 'steady'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': jI(0x7b8),
            'midiProgram': 0x3a,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x409),
                'chord': 'harmony',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x2b,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '2⟲',
                'feedbackAmplitude': 0x8,
                'feedbackEnvelope': 'swell\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': 'muted\x20trumpet',
            'midiProgram': 0x3b,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0x1f40,
                    'linearGain': 2.8284
                }, {
                    'type': 'peak',
                    'cutoffHz': 0xfa0,
                    'linearGain': 2.8284
                }],
                'effects': [jI(0x747), jI(0x76b)],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 3363.59,
                    'linearGain': 0x1
                }],
                'reverb': 0x21,
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x3,
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x5,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xd
                }, {
                    'frequency': '1×',
                    'amplitude': 0x5
                }, {
                    'frequency': '9×',
                    'amplitude': 0x5
                }, {
                    'frequency': jI(0x695),
                    'amplitude': 0x7
                }],
                'envelopes': [{
                    'target': jI(0x7c5),
                    'envelope': 'swell\x201'
                }, {
                    'target': jI(0x1f8),
                    'envelope': 'swell\x201',
                    'index': 0x3
                }, {
                    'target': jI(0x31f),
                    'envelope': 'flare\x202'
                }]
            }
        }, {
            'name': 'french\x20horn',
            'midiProgram': 0x3c,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0xfa0,
                    'linearGain': 0x1
                }, {
                    'type': 'peak',
                    'cutoffHz': 2378.41,
                    'linearGain': 2.8284
                }],
                'effects': [jI(0x76b)],
                'reverb': 0x21,
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x3,
                'algorithm': jI(0x7cf),
                'feedbackType': jI(0x4a7),
                'feedbackAmplitude': 0x3,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0xc
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0x8
                }],
                'envelopes': [{
                    'target': jI(0x1f8),
                    'envelope': 'swell\x201',
                    'index': 0x2
                }, {
                    'target': jI(0x1f8),
                    'envelope': 'flare\x202',
                    'index': 0x3
                }, {
                    'target': 'feedbackAmplitude',
                    'envelope': jI(0x342)
                }]
            }
        }, {
            'name': jI(0x888),
            'midiProgram': 0x3d,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': 'harmony',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': 'punch',
                'vibrato': jI(0x3a9),
                'algorithm': '1←3\u20032←4',
                'feedbackType': jI(0x4a7),
                'feedbackAmplitude': 0x6,
                'feedbackEnvelope': jI(0x342),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xc,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': jI(0x342)
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0xa,
                    'envelope': jI(0x342)
                }]
            }
        }, {
            'name': jI(0x5eb),
            'midiProgram': 0x3e,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': 'soft',
                'chord': 'harmony',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x1d,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x3a9),
                'algorithm': '1←3\u20032←4',
                'feedbackType': jI(0x4a7),
                'feedbackAmplitude': 0xb,
                'feedbackEnvelope': 'swell\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xc,
                    'envelope': 'flare\x201'
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0x8,
                    'envelope': 'flare\x202'
                }]
            }
        }, {
            'name': 'brass\x20synth\x202',
            'midiProgram': 0x3f,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'transition': jI(0x409),
                'effects': jI(0x76b),
                'chord': jI(0x38a),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x2b,
                'filterEnvelope': 'twang\x203',
                'vibrato': 'none',
                'algorithm': jI(0x7cf),
                'feedbackType': jI(0x4a7),
                'feedbackAmplitude': 0x9,
                'feedbackEnvelope': 'swell\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': jI(0x561)
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x7,
                    'envelope': 'flare\x201'
                }]
            }
        }, {
            'name': 'pulse\x20brass',
            'midiProgram': 0x3e,
            'settings': {
                'type': jI(0x7bb),
                'effects': jI(0x76b),
                'transition': jI(0x409),
                'chord': 'harmony',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x1d,
                'filterEnvelope': 'swell\x201',
                'pulseWidth': 0x32,
                'pulseEnvelope': 'flare\x203',
                'vibrato': 'none'
            }
        }])
    }, {
        'name': 'Reed\x20Presets',
        'presets': a8([{
            'name': 'soprano\x20sax',
            'midiProgram': 0x40,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x2cf),
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x613),
                'feedbackType': '4⟲',
                'feedbackAmplitude': 0x5,
                'feedbackEnvelope': 'swell\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xd,
                    'envelope': 'custom'
                }, {
                    'frequency': '4×',
                    'amplitude': 0x4,
                    'envelope': jI(0x342)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x7,
                    'envelope': 'steady'
                }, {
                    'frequency': '5×',
                    'amplitude': 0x4,
                    'envelope': jI(0x4d1)
                }]
            }
        }, {
            'name': 'alto\x20sax',
            'midiProgram': 0x41,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x2b,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x4,
                'feedbackEnvelope': jI(0x4d1),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xd,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6,
                    'envelope': 'steady'
                }, {
                    'frequency': '4×',
                    'amplitude': 0x6,
                    'envelope': jI(0x342)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xc,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x5f5),
            'midiProgram': 0x42,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x2cf),
                'vibrato': jI(0x3a9),
                'algorithm': '1←2←3←4',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x6,
                'feedbackEnvelope': 'swell\x201',
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xc,
                    'envelope': 'custom'
                }, {
                    'frequency': '3×',
                    'amplitude': 0x7,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x3,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '8×',
                    'amplitude': 0x3,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x609),
            'midiProgram': 0x43,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x0,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'none',
                'algorithm': jI(0x6ee),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x2,
                'feedbackEnvelope': jI(0x440),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xc,
                    'envelope': 'custom'
                }, {
                    'frequency': '8×',
                    'amplitude': 0x4,
                    'envelope': 'steady'
                }, {
                    'frequency': '4×',
                    'amplitude': 0x5,
                    'envelope': 'steady'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x4,
                    'envelope': jI(0x4d1)
                }]
            }
        }, {
            'name': jI(0x694),
            'midiProgram': 0x40,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': jI(0x409),
                'chord': jI(0x38a),
                'filterCutoffHz': 0x1f40,
                'filterResonance': 0x0,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'light',
                'algorithm': jI(0x6c6),
                'feedbackType': jI(0x4a7),
                'feedbackAmplitude': 0x4,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '4×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': 'steady'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': 'steady'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': 'shehnai',
            'midiProgram': 0x6f,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x409),
                'chord': 'harmony',
                'filterCutoffHz': 0x1f40,
                'filterResonance': 0x0,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x203),
                'algorithm': jI(0x6c6),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x3,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '4×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x8,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': 'steady'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x2aa),
            'midiProgram': 0x44,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'cross\x20fade',
                'chord': jI(0x38a),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x342),
                'vibrato': 'none',
                'algorithm': '1\u20032←(3\u20024)',
                'feedbackType': '2⟲',
                'feedbackAmplitude': 0x2,
                'feedbackEnvelope': 'tremolo5',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0x7,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '4×',
                    'amplitude': 0xc,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '6×',
                    'amplitude': 0x2,
                    'envelope': 'steady'
                }]
            }
        }, {
            'name': jI(0x726),
            'midiProgram': 0x45,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x76b),
                'transition': 'cross\x20fade',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x2cf),
                'vibrato': 'none',
                'algorithm': '1\u20032←(3\u20024)',
                'feedbackType': '2⟲',
                'feedbackAmplitude': 0x2,
                'feedbackEnvelope': 'steady',
                'operators': [{
                    'frequency': '4×',
                    'amplitude': 0xc,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '2×',
                    'amplitude': 0xa,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x8,
                    'envelope': 'punch'
                }, {
                    'frequency': '8×',
                    'amplitude': 0x4,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': jI(0x551),
            'midiProgram': 0x46,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': 'soft',
                'chord': 'harmony',
                'filterCutoffHz': 0x2c3,
                'filterResonance': 0x39,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x6ee),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x2,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xb,
                    'envelope': 'custom'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '6×',
                    'amplitude': 0x6,
                    'envelope': jI(0x342)
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': 'clarinet',
            'midiProgram': 0x47,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x4bd),
                'effects': 'reverb',
                'transition': jI(0x409),
                'chord': jI(0x38a),
                'filterCutoffHz': 0x586,
                'filterResonance': 0xe,
                'filterEnvelope': 'steady',
                'interval': jI(0x37e),
                'vibrato': 'none',
                'harmonics': [0x64, 0x2b, 0x56, 0x39, 0x56, 0x47, 0x56, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x2b, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x1d, 0xe, 0x0]
            }
        }, {
            'name': jI(0x78c),
            'midiProgram': 0x16,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0x1d,
                'filterEnvelope': 'swell\x201',
                'vibrato': 'none',
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x9,
                'feedbackEnvelope': jI(0x883),
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xe,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': jI(0x2cf)
                }, {
                    'frequency': '~2×',
                    'amplitude': 0x2,
                    'envelope': 'twang\x203'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0,
                    'envelope': jI(0x2cf)
                }]
            }
        }])
    }, {
        'name': jI(0x60e),
        'presets': a8([{
            'name': jI(0x4fc),
            'midiProgram': 0x49,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x409),
                'chord': jI(0x38a),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0xe,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x3a9),
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '4⟲',
                'feedbackAmplitude': 0x7,
                'feedbackEnvelope': 'decay\x202',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': 'custom'
                }, {
                    'frequency': '2×',
                    'amplitude': 0x4,
                    'envelope': 'steady'
                }, {
                    'frequency': '1×',
                    'amplitude': 0x3,
                    'envelope': 'steady'
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0x1,
                    'envelope': jI(0x4d1)
                }]
            }
        }, {
            'name': 'recorder',
            'midiProgram': 0x4a,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x4bd),
                'effects': 'reverb',
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x440),
                'interval': jI(0x37e),
                'vibrato': 'none',
                'harmonics': [0x64, 0x2b, 0x39, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0]
            }
        }, {
            'name': jI(0x4e2),
            'midiProgram': 0x4e,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'effects': 'chorus\x20&\x20reverb',
                'transition': 'soft',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x2b,
                'filterEnvelope': 'steady',
                'interval': 'union',
                'vibrato': jI(0x471),
                'harmonics': [0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
            }
        }, {
            'name': jI(0x451),
            'midiProgram': 0x4f,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x4bd),
                'effects': jI(0x76b),
                'transition': 'soft',
                'chord': 'harmony',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x2b,
                'filterEnvelope': jI(0x2cf),
                'interval': 'union',
                'vibrato': 'none',
                'harmonics': [0x64, 0xe, 0x39, 0xe, 0x1d, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
            }
        }, {
            'name': 'piccolo',
            'midiProgram': 0x48,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'reverb',
                'transition': jI(0x409),
                'chord': 'harmony',
                'filterCutoffHz': 0x1619,
                'filterResonance': 0x2b,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x3a9),
                'algorithm': jI(0x7cf),
                'feedbackType': '4⟲',
                'feedbackAmplitude': 0xf,
                'feedbackEnvelope': 'twang\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': jI(0x569),
                    'amplitude': 0x3,
                    'envelope': 'punch'
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x5,
                    'envelope': jI(0x4d1)
                }]
            }
        }, {
            'name': 'shakuhachi',
            'midiProgram': 0x4d,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': jI(0x5f6),
                'transition': jI(0x409),
                'chord': 'harmony',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0xe,
                'filterEnvelope': 'steady',
                'vibrato': jI(0x471),
                'algorithm': '1←(2\u20023←4)',
                'feedbackType': '3→4',
                'feedbackAmplitude': 0xf,
                'feedbackEnvelope': jI(0x2cf),
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '2×',
                    'amplitude': 0x3,
                    'envelope': 'punch'
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x4,
                    'envelope': 'twang\x201'
                }, {
                    'frequency': jI(0x6d7),
                    'amplitude': 0xf,
                    'envelope': jI(0x2cf)
                }]
            }
        }, {
            'name': 'pan\x20flute',
            'midiProgram': 0x4b,
            'generalMidi': !0x0,
            'settings': {
                'type': 'spectrum',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 9513.66,
                    'linearGain': 5.6569
                }],
                'effects': [jI(0x747), 'reverb'],
                'noteFilter': [{
                    'type': jI(0x524),
                    'cutoffHz': 4756.83,
                    'linearGain': 0.7071
                }],
                'reverb': 0x21,
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': -0x3,
                'spectrum': [0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0xe, 0x0, 0x39, 0x0, 0x1d, 0xe, 0x1d, 0xe, 0xe, 0x1d, 0xe, 0x1d, 0xe, 0xe, 0x1d, 0xe],
                'envelopes': [{
                    'target': 'noteFilterFreq',
                    'envelope': jI(0x570),
                    'index': 0x0
                }, {
                    'target': jI(0x5cd),
                    'envelope': jI(0x4d1)
                }]
            }
        }, {
            'name': jI(0x6cf),
            'midiProgram': 0x4c,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'effects': 'chorus\x20&\x20reverb',
                'transition': 'cross\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x1619,
                'filterResonance': 0x39,
                'filterEnvelope': 'steady',
                'vibrato': 'none',
                'algorithm': '1\u20032\u20033\u20034',
                'feedbackType': jI(0x7c9),
                'feedbackAmplitude': 0x7,
                'feedbackEnvelope': 'twang\x201',
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '3×',
                    'amplitude': 0x4,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': '6×',
                    'amplitude': 0x2,
                    'envelope': jI(0x4e0)
                }, {
                    'frequency': jI(0x5df),
                    'amplitude': 0x2,
                    'envelope': jI(0x4e0)
                }]
            }
        }, {
            'name': 'calliope',
            'midiProgram': 0x52,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x5ee),
                'transition': 'cross\x20fade',
                'effects': 'reverb',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x1619,
                'filterResonance': 0xe,
                'filterEnvelope': 'steady',
                'spectrum': [0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0x39, 0x0, 0x2b, 0x0, 0x1d, 0xe, 0xe, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe]
            }
        }, {
            'name': jI(0x55f),
            'midiProgram': 0x53,
            'generalMidi': !0x0,
            'settings': {
                'type': 'spectrum',
                'effects': 'reverb',
                'transition': 'hard',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': 'punch',
                'spectrum': [0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0x39, 0x0, 0x39, 0x0, 0x2b, 0xe, 0xe, 0x2b, 0xe, 0x1d, 0xe, 0x1d, 0x1d, 0x1d, 0x1d, 0xe]
            }
        }, {
            'name': 'breath\x20noise',
            'midiProgram': 0x79,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x5ee),
                'eqFilter': [],
                'effects': ['chord\x20type', 'note\x20filter', jI(0x76b)],
                'chord': 'strum',
                'noteFilter': [{
                    'type': 'high-pass',
                    'cutoffHz': 840.9,
                    'linearGain': 0.3536
                }, {
                    'type': 'low-pass',
                    'cutoffHz': 0x3e80,
                    'linearGain': 0.3536
                }],
                'reverb': 0x21,
                'fadeInSeconds': 0.0413,
                'fadeOutTicks': 0xc,
                'spectrum': [0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1d, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0x1d, 0x0, 0x64, 0x1d, 0xe, 0x1d, 0x64, 0x1d, 0x64, 0xe, 0xe, 0x47, 0x0, 0x1d, 0x0, 0x0],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': 'twang\x201'
                }]
            }
        }])
    }, {
        'name': jI(0x864),
        'presets': a8([{
            'name': 'new\x20age\x20pad',
            'midiProgram': 0x58,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': ['chorus'],
                'chorus': 0x64,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x82d),
                'algorithm': jI(0x6ee),
                'feedbackType': '1⟲\u20032⟲',
                'feedbackAmplitude': 0x3,
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xe
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x4
                }, {
                    'frequency': '6×',
                    'amplitude': 0x3
                }, {
                    'frequency': jI(0x695),
                    'amplitude': 0x3
                }],
                'envelopes': [{
                    'target': 'operatorAmplitude',
                    'envelope': 'swell\x202',
                    'index': 0x1
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x7b1),
                    'index': 0x2
                }, {
                    'target': jI(0x31f),
                    'envelope': jI(0x287)
                }]
            }
        }, {
            'name': 'warm\x20pad',
            'midiProgram': 0x59,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': ['note\x20filter', jI(0x215)],
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 3363.59,
                    'linearGain': 0x1
                }],
                'chorus': 0x64,
                'transition': 'normal',
                'fadeInSeconds': 0.0575,
                'fadeOutTicks': 0x60,
                'chord': 'simultaneous',
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x7,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe
                }, {
                    'frequency': '1×',
                    'amplitude': 0x6
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': jI(0x7c5),
                    'envelope': 'swell\x203'
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x342),
                    'index': 0x1
                }]
            }
        }, {
            'name': 'polysynth\x20pad',
            'midiProgram': 0x5a,
            'generalMidi': !0x0,
            'settings': {
                'type': 'chip',
                'eqFilter': [],
                'effects': ['vibrato', 'note\x20filter', jI(0x215)],
                'vibrato': jI(0x471),
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 2828.43,
                    'linearGain': 0x1
                }],
                'chorus': 0x64,
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x82d),
                'wave': 'sawtooth',
                'unison': jI(0x23f),
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x7b1)
                }]
            }
        }, {
            'name': 'space\x20voice\x20pad',
            'midiProgram': 0x5b,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 6727.17,
                    'linearGain': 5.6569
                }, {
                    'type': 'peak',
                    'cutoffHz': 2828.43,
                    'linearGain': 5.6569
                }, {
                    'type': jI(0x399),
                    'cutoffHz': 1414.21,
                    'linearGain': 0.1768
                }],
                'effects': ['chorus'],
                'chorus': 0x64,
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': 0x48,
                'chord': 'simultaneous',
                'algorithm': '(1\u20022\u20023)←4',
                'feedbackType': '1⟲\x202⟲\x203⟲\x204⟲',
                'feedbackAmplitude': 0x5,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xa
                }, {
                    'frequency': '2×',
                    'amplitude': 0x8
                }, {
                    'frequency': '3×',
                    'amplitude': 0x7
                }, {
                    'frequency': jI(0x5df),
                    'amplitude': 0x2
                }],
                'envelopes': [{
                    'target': jI(0x1f8),
                    'envelope': 'punch',
                    'index': 0x3
                }, {
                    'target': jI(0x31f),
                    'envelope': 'swell\x202'
                }]
            }
        }, {
            'name': 'bowed\x20glass\x20pad',
            'midiProgram': 0x5c,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [jI(0x747)],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 4756.83,
                    'linearGain': 0.5
                }],
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0575,
                'fadeOutTicks': 0x60,
                'chord': jI(0x82d),
                'algorithm': jI(0x7cf),
                'feedbackType': jI(0x4a7),
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xa
                }, {
                    'frequency': '2×',
                    'amplitude': 0xc
                }, {
                    'frequency': '3×',
                    'amplitude': 0x7
                }, {
                    'frequency': '7×',
                    'amplitude': 0x4
                }],
                'envelopes': [{
                    'target': jI(0x7c5),
                    'envelope': 'twang\x203'
                }, {
                    'target': jI(0x1f8),
                    'envelope': 'twang\x203',
                    'index': 0x2
                }, {
                    'target': jI(0x1f8),
                    'envelope': jI(0x545),
                    'index': 0x3
                }]
            }
        }, {
            'name': 'metallic\x20pad',
            'midiProgram': 0x5d,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [jI(0x747)],
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 6727.17,
                    'linearGain': 0.5
                }],
                'transition': 'normal',
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': 0x48,
                'chord': 'simultaneous',
                'algorithm': '1←3\u20032←4',
                'feedbackType': '1⟲\u20032⟲',
                'feedbackAmplitude': 0xd,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x9
                }, {
                    'frequency': '1×',
                    'amplitude': 0x7
                }, {
                    'frequency': jI(0x5df),
                    'amplitude': 0x7
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': 'twang\x203'
                }, {
                    'target': jI(0x1f8),
                    'envelope': 'swell\x202',
                    'index': 0x2
                }, {
                    'target': jI(0x31f),
                    'envelope': 'twang\x203'
                }]
            }
        }, {
            'name': jI(0x5fd),
            'midiProgram': 0x5f,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [],
                'effects': [jI(0x747), 'chorus'],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 0xfa0,
                    'linearGain': 0x4
                }],
                'chorus': 0x64,
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0575,
                'fadeOutTicks': 0x60,
                'chord': 'simultaneous',
                'wave': 'sawtooth',
                'unison': 'hum',
                'envelopes': [{
                    'target': jI(0x7c5),
                    'envelope': 'flare\x203'
                }]
            }
        }, {
            'name': 'atmosphere',
            'midiProgram': 0x63,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 4756.83,
                    'linearGain': 0x1
                }],
                'effects': ['chorus', jI(0x76b)],
                'chorus': 0x64,
                'reverb': 0x21,
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x861),
                'algorithm': jI(0x6c6),
                'feedbackType': '3⟲\u20034⟲',
                'feedbackAmplitude': 0x3,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xe
                }, {
                    'frequency': '~1×',
                    'amplitude': 0xa
                }, {
                    'frequency': '3×',
                    'amplitude': 0x7
                }, {
                    'frequency': '1×',
                    'amplitude': 0x7
                }],
                'envelopes': [{
                    'target': 'operatorAmplitude',
                    'envelope': 'swell\x203',
                    'index': 0x1
                }, {
                    'target': jI(0x1f8),
                    'envelope': 'twang\x202',
                    'index': 0x2
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x7b1),
                    'index': 0x3
                }]
            }
        }, {
            'name': jI(0x81b),
            'midiProgram': 0x64,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x281),
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 4756.83,
                    'linearGain': 0x2
                }],
                'effects': ['chorus'],
                'chorus': 0x64,
                'transition': 'normal',
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': 0x48,
                'chord': jI(0x82d),
                'harmonics': [0x64, 0x56, 0x56, 0x56, 0x2b, 0x39, 0x2b, 0x47, 0x2b, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x39, 0x47, 0x39, 0x2b, 0x1d, 0x2b, 0x39, 0x39, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0xe],
                'unison': jI(0x60c),
                'stringSustain': 0x56,
                'envelopes': []
            }
        }, {
            'name': 'goblins',
            'midiProgram': 0x65,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': 'peak',
                    'cutoffHz': 2828.43,
                    'linearGain': 11.3137
                }],
                'effects': ['note\x20filter', 'chorus'],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 1681.79,
                    'linearGain': 0.5
                }],
                'chorus': 0x64,
                'transition': 'normal',
                'fadeInSeconds': 0.0575,
                'fadeOutTicks': 0x60,
                'chord': jI(0x82d),
                'algorithm': jI(0x613),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0xa,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '4×',
                    'amplitude': 0x5
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x440)
                }, {
                    'target': jI(0x1f8),
                    'envelope': jI(0x287),
                    'index': 0x1
                }, {
                    'target': jI(0x1f8),
                    'envelope': jI(0x765),
                    'index': 0x2
                }, {
                    'target': jI(0x31f),
                    'envelope': jI(0x545)
                }]
            }
        }, {
            'name': 'sci-fi',
            'midiProgram': 0x67,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x399),
                    'cutoffHz': 9513.66,
                    'linearGain': 2.8284
                }],
                'effects': [jI(0x747), 'chorus'],
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 6727.17,
                    'linearGain': 0.5
                }],
                'chorus': 0x64,
                'transition': 'normal',
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': 0x30,
                'chord': 'simultaneous',
                'algorithm': jI(0x5e0),
                'feedbackType': '1⟲\x202⟲\x203⟲\x204⟲',
                'feedbackAmplitude': 0x8,
                'operators': [{
                    'frequency': jI(0x784),
                    'amplitude': 0xd
                }, {
                    'frequency': '2×',
                    'amplitude': 0xa
                }, {
                    'frequency': '5×',
                    'amplitude': 0x5
                }, {
                    'frequency': jI(0x5df),
                    'amplitude': 0x8
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': 'twang\x203'
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x7b1),
                    'index': 0x2
                }, {
                    'target': jI(0x1f8),
                    'envelope': jI(0x883),
                    'index': 0x3
                }, {
                    'target': jI(0x31f),
                    'envelope': jI(0x7b1)
                }]
            }
        }, {
            'name': jI(0x5af),
            'midiProgram': 0x5a,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [jI(0x7b2), jI(0x747), 'chorus'],
                'vibrato': jI(0x471),
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0xfa0,
                    'linearGain': 0x4
                }],
                'chorus': 0x64,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': 'simultaneous',
                'algorithm': '(1\u20022)←(3\u20024)',
                'feedbackType': jI(0x25b),
                'feedbackAmplitude': 0x9,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xd
                }, {
                    'frequency': '5×',
                    'amplitude': 0x7
                }, {
                    'frequency': '7×',
                    'amplitude': 0x5
                }, {
                    'frequency': '~1×',
                    'amplitude': 0x6
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': 'twang\x203'
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'tremolo1',
                    'index': 0x2
                }, {
                    'target': jI(0x1f8),
                    'envelope': jI(0x4d1),
                    'index': 0x3
                }]
            }
        }, {
            'name': 'feedback\x20pad',
            'midiProgram': 0x59,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': 'peak',
                    'cutoffHz': 2378.41,
                    'linearGain': 0x8
                }],
                'effects': [],
                'transition': 'normal',
                'fadeInSeconds': 0.0575,
                'fadeOutTicks': 0x60,
                'chord': 'custom\x20interval',
                'algorithm': '1\u20032\u20033\u20034',
                'feedbackType': jI(0x7c9),
                'feedbackAmplitude': 0x8,
                'operators': [{
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0xf
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0xf
                }],
                'envelopes': [{
                    'target': jI(0x31f),
                    'envelope': jI(0x440)
                }]
            }
        }, {
            'name': jI(0x472),
            'midiProgram': 0x5d,
            'settings': {
                'type': jI(0x6d9),
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0x1f40,
                    'linearGain': 0.1768
                }],
                'effects': ['reverb'],
                'reverb': 0x64,
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': 0x18,
                'pulseWidth': 0x32,
                'dynamism': 0x64,
                'spread': 0x3a,
                'shape': 0x0,
                'envelopes': []
            }
        }])
    }, {
        'name': jI(0x70e),
        'presets': a8([{
            'name': 'standard\x20drumset',
            'midiProgram': 0x74,
            'isNoise': !0x0,
            'settings': {
                'type': jI(0x3c5),
                'effects': jI(0x76b),
                'drums': [{
                    'filterEnvelope': 'twang\x201',
                    'spectrum': [0x39, 0x47, 0x47, 0x56, 0x56, 0x56, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d]
                }, {
                    'filterEnvelope': 'twang\x201',
                    'spectrum': [0x0, 0x0, 0x0, 0x64, 0x47, 0x47, 0x39, 0x56, 0x39, 0x39, 0x39, 0x47, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b]
                }, {
                    'filterEnvelope': jI(0x570),
                    'spectrum': [0x0, 0x0, 0x0, 0x0, 0x64, 0x39, 0x2b, 0x2b, 0x1d, 0x39, 0x2b, 0x1d, 0x47, 0x2b, 0x2b, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x2b, 0x2b, 0x2b]
                }, {
                    'filterEnvelope': jI(0x570),
                    'spectrum': [0x0, 0x0, 0x0, 0x0, 0x0, 0x47, 0x39, 0x2b, 0x2b, 0x2b, 0x39, 0x39, 0x2b, 0x1d, 0x39, 0x2b, 0x2b, 0x2b, 0x1d, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x2b, 0x2b]
                }, {
                    'filterEnvelope': 'decay\x202',
                    'spectrum': [0x0, 0xe, 0x1d, 0x2b, 0x56, 0x47, 0x1d, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x47, 0x1d, 0x47, 0x1d, 0x2b, 0x2b, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x39, 0x39, 0x39]
                }, {
                    'filterEnvelope': 'decay\x201',
                    'spectrum': [0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x1d, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x39, 0x39, 0x39, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x2b, 0x2b, 0x2b]
                }, {
                    'filterEnvelope': jI(0x7b1),
                    'spectrum': [0x2b, 0x2b, 0x2b, 0x47, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x1d, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x39, 0xe, 0x39, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x39, 0x39]
                }, {
                    'filterEnvelope': jI(0x781),
                    'spectrum': [0x1d, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x2b, 0x1d, 0x1d, 0x2b, 0x1d, 0xe, 0x1d, 0x2b, 0x1d, 0x2b, 0x1d, 0x39, 0x1d, 0x2b, 0x39, 0x2b, 0x47, 0x2b, 0x47, 0x39, 0x39, 0x47, 0x47]
                }, {
                    'filterEnvelope': jI(0x7b1),
                    'spectrum': [0x2b, 0x1d, 0x1d, 0x2b, 0x1d, 0x1d, 0x1d, 0x39, 0x1d, 0x1d, 0x1d, 0x39, 0x2b, 0x2b, 0x1d, 0x1d, 0x39, 0x2b, 0x2b, 0x2b, 0x47, 0x2b, 0x2b, 0x47, 0x39, 0x47, 0x47, 0x47, 0x47, 0x47]
                }, {
                    'filterEnvelope': 'decay\x203',
                    'spectrum': [0x39, 0x39, 0x39, 0x2b, 0x39, 0x39, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x47, 0x39, 0x2b, 0x39, 0x56, 0x47, 0x39, 0x56, 0x47, 0x39, 0x56, 0x64, 0x47, 0x56, 0x56, 0x56, 0x56, 0x56]
                }, {
                    'filterEnvelope': jI(0x561),
                    'spectrum': [0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0x1d, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x39, 0x39, 0x47, 0x47, 0x56, 0x56, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x56, 0x39, 0x1d, 0x0]
                }, {
                    'filterEnvelope': jI(0x7ea),
                    'spectrum': [0xe, 0xe, 0xe, 0xe, 0x1d, 0xe, 0xe, 0x1d, 0xe, 0x2b, 0xe, 0x2b, 0x39, 0x56, 0x39, 0x39, 0x64, 0x39, 0x2b, 0x2b, 0x39, 0x64, 0x39, 0x2b, 0x1d, 0xe, 0x0, 0x0, 0x0, 0x0]
                }]
            }
        }, {
            'name': jI(0x352),
            'midiProgram': 0x72,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x524),
                    'cutoffHz': 62.5,
                    'linearGain': 0.1768
                }],
                'effects': [jI(0x747), jI(0x215), 'reverb'],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 13454.34,
                    'linearGain': 0.25
                }],
                'chorus': 0x43,
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x18,
                'chord': 'simultaneous',
                'algorithm': jI(0x6ee),
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': jI(0x784),
                    'amplitude': 0xe
                }, {
                    'frequency': '7×',
                    'amplitude': 0x3
                }, {
                    'frequency': '3×',
                    'amplitude': 0x5
                }, {
                    'frequency': '4×',
                    'amplitude': 0x4
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x7ea)
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'flare\x201',
                    'index': 0x1
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'flare\x202',
                    'index': 0x2
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'swell\x202',
                    'index': 0x3
                }]
            }
        }, {
            'name': 'steel\x20pan\x20synth',
            'midiProgram': 0x72,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [jI(0x747)],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 13454.34,
                    'linearGain': 0.25
                }],
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x3,
                'chord': 'simultaneous',
                'algorithm': '1\u20032\u20033←4',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x5,
                'operators': [{
                    'frequency': '~1×',
                    'amplitude': 0xc
                }, {
                    'frequency': '2×',
                    'amplitude': 0xf
                }, {
                    'frequency': '4×',
                    'amplitude': 0xe
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0x3
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x570)
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x583),
                    'index': 0x0
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'note\x20size',
                    'index': 0x1
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': 'flare\x201',
                    'index': 0x2
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x322),
                    'index': 0x3
                }, {
                    'target': 'feedbackAmplitude',
                    'envelope': jI(0x561)
                }]
            }
        }, {
            'name': 'timpani',
            'midiProgram': 0x2f,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x5ee),
                'eqFilter': [{
                    'type': 'peak',
                    'cutoffHz': 6727.17,
                    'linearGain': 5.6569
                }],
                'effects': [jI(0x3b5), jI(0x747), jI(0x76b)],
                'pitchShiftSemitones': 0xf,
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 19027.31,
                    'linearGain': 0.5
                }],
                'reverb': 0x21,
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x82d),
                'spectrum': [0x64, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x47, 0x0, 0xe, 0x2b, 0xe, 0x2b, 0x2b, 0x0, 0x1d, 0x2b, 0x1d, 0x1d, 0x1d, 0x2b, 0x1d, 0x2b, 0x1d, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x570)
                }, {
                    'target': 'pitchShift',
                    'envelope': 'twang\x201'
                }]
            }
        }, {
            'name': jI(0x202),
            'midiProgram': 0x2f,
            'settings': {
                'type': 'spectrum',
                'eqFilter': [],
                'effects': ['note\x20filter', 'reverb'],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 4756.83,
                    'linearGain': 0.7071
                }],
                'reverb': 0x21,
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': 'simultaneous',
                'spectrum': [0x0, 0x0, 0xe, 0xe, 0xe, 0x1d, 0x1d, 0x2b, 0x2b, 0x56, 0x2b, 0x2b, 0x2b, 0x1d, 0x56, 0x1d, 0x1d, 0x1d, 0x56, 0x1d, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x4a8)
                }]
            }
        }, {
            'name': 'woodblock',
            'midiProgram': 0x73,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -2.5,
            'settings': {
                'type': jI(0x5ee),
                'effects': 'reverb',
                'transition': 'hard\x20fade',
                'chord': 'strum',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x570),
                'spectrum': [0x0, 0xe, 0x1d, 0x2b, 0x2b, 0x39, 0x56, 0x56, 0x47, 0x39, 0x39, 0x2b, 0x2b, 0x39, 0x56, 0x56, 0x2b, 0x2b, 0x47, 0x39, 0x39, 0x39, 0x39, 0x39, 0x56, 0x56, 0x47, 0x47, 0x47, 0x47]
            }
        }, {
            'name': 'taiko\x20drum',
            'midiProgram': 0x74,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0.5,
            'settings': {
                'type': jI(0x5ee),
                'effects': 'reverb',
                'transition': 'hard\x20fade',
                'chord': 'strum',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x1d,
                'filterEnvelope': jI(0x570),
                'spectrum': [0x47, 0x64, 0x64, 0x2b, 0x2b, 0x47, 0x47, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x39, 0x1d, 0x39, 0x2b, 0x39, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b]
            }
        }, {
            'name': jI(0x592),
            'midiProgram': 0x75,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -1.5,
            'settings': {
                'type': 'spectrum',
                'effects': jI(0x76b),
                'transition': 'hard\x20fade',
                'chord': jI(0x861),
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x2b,
                'filterEnvelope': 'twang\x201',
                'spectrum': [0x64, 0x47, 0x47, 0x39, 0x39, 0x2b, 0x2b, 0x47, 0x2b, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d]
            }
        }, {
            'name': 'drum\x20synth',
            'midiProgram': 0x76,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0x2,
            'settings': {
                'type': 'spectrum',
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': jI(0x38a),
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0x2b,
                'filterEnvelope': 'decay\x201',
                'spectrum': [0x64, 0x56, 0x47, 0x39, 0x2b, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d]
            }
        }, {
            'name': 'tom-tom',
            'midiProgram': 0x74,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0x1,
            'settings': {
                'type': 'spectrum',
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': jI(0x861),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x570),
                'spectrum': [0x64, 0x1d, 0xe, 0x0, 0x0, 0x56, 0xe, 0x2b, 0x1d, 0x56, 0x1d, 0xe, 0x1d, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x39, 0x2b, 0x2b, 0x2b, 0x1d, 0x39, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b]
            }
        }, {
            'name': jI(0x4af),
            'midiProgram': 0x75,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -1.5,
            'settings': {
                'type': jI(0x5ee),
                'effects': 'reverb',
                'transition': jI(0x2a0),
                'chord': 'strum',
                'filterCutoffHz': 0x1f40,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x4a8),
                'spectrum': [0x1d, 0x2b, 0x56, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x64, 0x1d, 0xe, 0xe, 0x64, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x1d, 0x1d, 0xe, 0x0, 0x0, 0xe, 0x1d, 0x0, 0x0]
            }
        }, {
            'name': jI(0x54f),
            'midiProgram': 0x2f,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': [],
                'transition': jI(0x72b),
                'fadeInSeconds': 0x0,
                'fadeOutTicks': -0x6,
                'chord': 'simultaneous',
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': '8×',
                    'amplitude': 0xf
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': jI(0x567),
                    'envelope': jI(0x570),
                    'index': 0x0
                }, {
                    'target': 'noteVolume',
                    'envelope': jI(0x4a8)
                }]
            }
        }])
    }, {
        'name': jI(0x64c),
        'presets': a8([{
            'name': jI(0x692),
            'midiProgram': 0x78,
            'generalMidi': !0x0,
            'settings': {
                'type': 'spectrum',
                'eqFilter': [{
                    'type': jI(0x524),
                    'cutoffHz': 0x3e8,
                    'linearGain': 0.1768
                }],
                'effects': ['note\x20filter'],
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 6727.17,
                    'linearGain': 5.6569
                }],
                'transition': 'normal',
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': -0x3,
                'chord': jI(0x82d),
                'spectrum': [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x1d, 0xe, 0x0, 0x0, 0x2b, 0x0, 0x2b, 0x0, 0x47, 0x2b, 0x0, 0x39, 0x0],
                'envelopes': [{
                    'target': jI(0x7c5),
                    'envelope': 'flare\x201'
                }, {
                    'target': jI(0x5cd),
                    'envelope': 'twang\x202'
                }]
            }
        }, {
            'name': 'fifth\x20saw\x20lead',
            'midiProgram': 0x56,
            'generalMidi': !0x0,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [],
                'effects': [jI(0x747), jI(0x215)],
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 2828.43,
                    'linearGain': 1.4142
                }],
                'chorus': 0x43,
                'transition': 'normal',
                'fadeInSeconds': 0x0,
                'fadeOutTicks': 0x30,
                'chord': jI(0x82d),
                'wave': jI(0x7fd),
                'unison': jI(0x5a4),
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x7b1)
                }]
            }
        }, {
            'name': jI(0x6e1),
            'midiProgram': 0x56,
            'midiSubharmonicOctaves': 0x1,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [],
                'effects': [jI(0x747), 'chorus'],
                'noteFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0x7d0,
                    'linearGain': 0x2
                }],
                'chorus': 0x64,
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': 0x48,
                'chord': jI(0x82d),
                'wave': 'sawtooth',
                'unison': jI(0x5a4),
                'envelopes': [{
                    'target': jI(0x7c5),
                    'envelope': 'swell\x203'
                }]
            }
        }, {
            'name': 'soundtrack',
            'midiProgram': 0x61,
            'generalMidi': !0x0,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [],
                'effects': [jI(0x747), jI(0x215)],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 2378.41,
                    'linearGain': 0.5
                }],
                'chorus': 0x43,
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0413,
                'fadeOutTicks': 0x48,
                'chord': 'simultaneous',
                'wave': jI(0x7fd),
                'unison': jI(0x5a4),
                'envelopes': [{
                    'target': jI(0x7c5),
                    'envelope': 'flare\x203'
                }]
            }
        }, {
            'name': jI(0x6a8),
            'midiProgram': 0x77,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0x3,
            'settings': {
                'type': jI(0x5ee),
                'effects': jI(0x3a9),
                'transition': 'soft',
                'chord': 'harmony',
                'filterCutoffHz': 0xfa0,
                'filterResonance': 0xe,
                'filterEnvelope': 'swell\x203',
                'spectrum': [0x1d, 0x39, 0x39, 0x1d, 0x39, 0x39, 0x1d, 0x1d, 0x2b, 0x1d, 0x1d, 0x2b, 0x1d, 0x1d, 0x39, 0x39, 0xe, 0x39, 0xe, 0x39, 0x47, 0x47, 0x39, 0x56, 0x39, 0x64, 0x56, 0x56, 0x56, 0x56]
            }
        }, {
            'name': 'seashore',
            'midiProgram': 0x7a,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0x3,
            'settings': {
                'type': jI(0x5ee),
                'transition': 'soft\x20fade',
                'effects': jI(0x76b),
                'chord': 'harmony',
                'filterCutoffHz': 0xb0c,
                'filterResonance': 0x0,
                'filterEnvelope': jI(0x287),
                'spectrum': [0xe, 0xe, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x39]
            }
        }, {
            'name': 'bird\x20tweet',
            'midiProgram': 0x7b,
            'generalMidi': !0x0,
            'settings': {
                'type': 'harmonics',
                'eqFilter': [],
                'effects': [jI(0x5b8), 'vibrato', jI(0x76b)],
                'chord': jI(0x861),
                'vibrato': 'heavy',
                'reverb': 0x43,
                'fadeInSeconds': 0.0575,
                'fadeOutTicks': -0x6,
                'harmonics': [0x0, 0x0, 0x0, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
                'unison': jI(0x536),
                'envelopes': [{
                    'target': jI(0x5cd),
                    'envelope': 'decay\x201'
                }]
            }
        }, {
            'name': 'telephone\x20ring',
            'midiProgram': 0x7c,
            'generalMidi': !0x0,
            'settings': {
                'type': 'FM',
                'eqFilter': [],
                'effects': ['note\x20filter'],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 5656.85,
                    'linearGain': 0x1
                }],
                'transition': 'normal',
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': -0x3,
                'chord': 'arpeggio',
                'algorithm': '1←(2\u20023\u20024)',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x0,
                'operators': [{
                    'frequency': '2×',
                    'amplitude': 0xc
                }, {
                    'frequency': '1×',
                    'amplitude': 0x4
                }, {
                    'frequency': '20×',
                    'amplitude': 0x1
                }, {
                    'frequency': '1×',
                    'amplitude': 0x0
                }],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x41f)
                }, {
                    'target': 'operatorAmplitude',
                    'envelope': jI(0x765),
                    'index': 0x1
                }]
            }
        }, {
            'name': 'helicopter',
            'midiProgram': 0x7d,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0.5,
            'settings': {
                'type': jI(0x5ee),
                'effects': jI(0x76b),
                'transition': jI(0x4e7),
                'chord': jI(0x4f4),
                'filterCutoffHz': 0x586,
                'filterResonance': 0xe,
                'filterEnvelope': 'tremolo4',
                'spectrum': [0xe, 0x2b, 0x2b, 0x39, 0x39, 0x39, 0x47, 0x47, 0x47, 0x47, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39]
            }
        }, {
            'name': jI(0x326),
            'midiProgram': 0x7e,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0x3,
            'settings': {
                'type': jI(0x5ee),
                'effects': 'reverb',
                'transition': 'soft\x20fade',
                'chord': 'harmony',
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': 'swell\x203',
                'spectrum': [0xe, 0xe, 0x1d, 0x1d, 0x1d, 0x2b, 0x2b, 0x39, 0x47, 0x47, 0x56, 0x56, 0x56, 0x47, 0x47, 0x39, 0x39, 0x39, 0x47, 0x56, 0x56, 0x56, 0x56, 0x56, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39]
            }
        }, {
            'name': jI(0x30c),
            'midiProgram': 0x7f,
            'generalMidi': !0x0,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0x2,
            'settings': {
                'type': jI(0x5ee),
                'effects': jI(0x76b),
                'transition': jI(0x2a0),
                'chord': 'strum',
                'filterCutoffHz': 0x586,
                'filterResonance': 0x1d,
                'filterEnvelope': 'twang\x201',
                'spectrum': [0xe, 0x1d, 0x2b, 0x2b, 0x39, 0x39, 0x39, 0x47, 0x47, 0x47, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x47, 0x47, 0x47, 0x47, 0x39, 0x39, 0x39, 0x39, 0x2b]
            }
        }, {
            'name': 'scoot',
            'midiProgram': 0x5c,
            'settings': {
                'type': jI(0x3a7),
                'eqFilter': [],
                'effects': ['note\x20filter'],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 707.11,
                    'linearGain': 0x4
                }],
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': -0x3,
                'chord': 'simultaneous',
                'wave': jI(0x865),
                'unison': jI(0x808),
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': 'flare\x201'
                }]
            }
        }, {
            'name': 'buzz\x20saw',
            'midiProgram': 0x1e,
            'settings': {
                'type': 'FM',
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 9513.66,
                    'linearGain': 0.5
                }],
                'effects': [],
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x3,
                'chord': 'custom\x20interval',
                'algorithm': '1←2←3←4',
                'feedbackType': '1⟲',
                'feedbackAmplitude': 0x4,
                'operators': [{
                    'frequency': '5×',
                    'amplitude': 0xd
                }, {
                    'frequency': '1×',
                    'amplitude': 0xa
                }, {
                    'frequency': jI(0x784),
                    'amplitude': 0x6
                }, {
                    'frequency': '11×',
                    'amplitude': 0xc
                }],
                'envelopes': []
            }
        }, {
            'name': jI(0x1be),
            'midiProgram': 0x5d,
            'settings': {
                'type': 'PWM',
                'eqFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 2828.43,
                    'linearGain': 0x2
                }],
                'effects': [jI(0x7b2)],
                'vibrato': 'shaky',
                'transition': jI(0x72b),
                'fadeInSeconds': 0.0575,
                'fadeOutTicks': -0x6,
                'chord': 'simultaneous',
                'pulseWidth': 4.41942,
                'envelopes': [{
                    'target': jI(0x1a7),
                    'envelope': 'tremolo6'
                }]
            }
        }, {
            'name': jI(0x19d),
            'midiProgram': 0x7e,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0x1,
            'settings': {
                'type': 'spectrum',
                'effects': jI(0x76b),
                'transition': 'hard\x20fade',
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0xe,
                'filterEnvelope': jI(0x440),
                'spectrum': [0xe, 0xe, 0xe, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x2b, 0x1d, 0x1d, 0x2b, 0x2b, 0x2b, 0x1d, 0x1d, 0x47, 0x2b, 0x56, 0x56, 0x39, 0x64, 0x56, 0x56, 0x56, 0x56, 0x47, 0x56, 0x47, 0x39]
            }
        }, {
            'name': 'klaxon\x20synth',
            'midiProgram': 0x7d,
            'isNoise': !0x0,
            'midiSubharmonicOctaves': -0x1,
            'settings': {
                'type': 'noise',
                'effects': jI(0x76b),
                'transition': jI(0x382),
                'chord': jI(0x38a),
                'filterCutoffHz': 0x7d0,
                'filterResonance': 0x56,
                'filterEnvelope': 'steady',
                'wave': 'buzz'
            }
        }, {
            'name': 'theremin',
            'midiProgram': 0x28,
            'settings': {
                'type': jI(0x4bd),
                'eqFilter': [{
                    'type': jI(0x541),
                    'cutoffHz': 0x1f40,
                    'linearGain': 0.7071
                }],
                'effects': ['vibrato', jI(0x76b)],
                'vibrato': 'heavy',
                'reverb': 0x21,
                'transition': 'slide\x20in\x20pattern',
                'fadeInSeconds': 0.0263,
                'fadeOutTicks': -0x6,
                'chord': 'simultaneous',
                'harmonics': [0x64, 0x47, 0x39, 0x2b, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
                'unison': jI(0x3a9),
                'envelopes': []
            }
        }, {
            'name': 'sonar\x20ping',
            'midiProgram': 0x79,
            'settings': {
                'type': jI(0x5ee),
                'eqFilter': [],
                'effects': ['note\x20filter', 'reverb'],
                'noteFilter': [{
                    'type': 'low-pass',
                    'cutoffHz': 1681.79,
                    'linearGain': 0.5
                }],
                'reverb': 0x21,
                'transition': 'normal',
                'fadeInSeconds': 0.0125,
                'fadeOutTicks': 0x48,
                'chord': 'simultaneous',
                'spectrum': [0x64, 0x2b, 0x1d, 0x1d, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
                'envelopes': [{
                    'target': 'noteFilterAllFreqs',
                    'envelope': jI(0x4a8)
                }]
            }
        }])
    }]);
    var ar = a0 && a0['t'] || function(fC) {
        const jO = jI;
        var fD = jO(0x2da) == typeof Symbol && Symbol[jO(0x6c2)]
          , fE = fD && fC[fD]
          , fF = 0x0;
        if (fE)
            return fE[jO(0x22f)](fC);
        if (fC && jO(0x503) == typeof fC[jO(0x57c)])
            return {
                'next': function() {
                    return fC && fF >= fC['length'] && (fC = void 0x0),
                    {
                        'value': fC && fC[fF++],
                        'done': !fC
                    };
                }
            };
        throw new TypeError(fD ? jO(0x273) : 'Symbol.iterator\x20is\x20not\x20defined.');
    }
      , au = a0 && a0['i'] || function(fC, fD) {
        const jP = jI;
        var fE = 'function' == typeof Symbol && fC[Symbol[jP(0x6c2)]];
        if (!fE)
            return fC;
        var fF, fG, fH = fE[jP(0x22f)](fC), fI = [];
        try {
            for (; (void 0x0 === fD || fD-- > 0x0) && !(fF = fH['next']())['done']; )
                fI[jP(0x557)](fF['value']);
        } catch (fJ) {
            fG = {
                'error': fJ
            };
        } finally {
            try {
                fF && !fF[jP(0x470)] && (fE = fH[jP(0x69b)]) && fE['call'](fH);
            } finally {
                if (fG)
                    throw fG['error'];
            }
        }
        return fI;
    }
      , av = a0 && a0['o'] || function() {
        for (var fC = [], fD = 0x0; fD < arguments['length']; fD++)
            fC = fC['concat'](au(arguments[fD]));
        return fC;
    }
    ;
    function aw(fC, fD) {
        const jQ = jI;
        var fE, fF, fG, fH, fI, fJ;
        try {
            for (var fK = ar(fD), fL = fK[jQ(0x492)](); !fL['done']; fL = fK['next']()) {
                var fM = fL[jQ(0x313)];
                if (fM instanceof Node)
                    fC[jQ(0x2b8)](fM);
                else {
                    if (jQ(0x428) == typeof fM)
                        fC['appendChild'](document[jQ(0x4d6)](fM));
                    else {
                        if ('function' == typeof fM)
                            aw(fC, [fM()]);
                        else {
                            if (Array[jQ(0x3f8)](fM))
                                aw(fC, fM);
                            else {
                                if (fM && jQ(0x52c) != typeof Symbol && 'function' == typeof fM[Symbol[jQ(0x6c2)]])
                                    aw(fC, av(fM));
                                else {
                                    if (fM && fM[jQ(0x289)] === Object && fC instanceof Element)
                                        try {
                                            for (var fN = (fG = void 0x0,
                                            ar(Object['keys'](fM))), fO = fN[jQ(0x492)](); !fO['done']; fO = fN['next']()) {
                                                var fP = fO[jQ(0x313)]
                                                  , fQ = fM[fP];
                                                if ('class' === fP)
                                                    jQ(0x428) == typeof fQ ? fC['setAttribute'](jQ(0x53a), fQ) : Array[jQ(0x3f8)](fM) || fQ && jQ(0x52c) != typeof Symbol && jQ(0x2da) == typeof fQ[Symbol['iterator']] ? fC[jQ(0x1d8)]('class', av(fQ)[jQ(0x50c)]('\x20')) : console['warn'](jQ(0x6ce) + fP + '\x20value\x20\x22' + fQ + '\x22\x20on\x20' + fC['tagName'] + '\x20element.');
                                                else {
                                                    if ('style' === fP) {
                                                        if (fQ && fQ[jQ(0x289)] === Object)
                                                            try {
                                                                for (var fR = (fI = void 0x0,
                                                                ar(Object['keys'](fQ))), fS = fR['next'](); !fS[jQ(0x470)]; fS = fR[jQ(0x492)]()) {
                                                                    var fT = fS[jQ(0x313)];
                                                                    fT in fC['style'] ? fC['style'][fT] = fQ[fT] : fC['style'][jQ(0x254)](fT, fQ[fT]);
                                                                }
                                                            } catch (fU) {
                                                                fI = {
                                                                    'error': fU
                                                                };
                                                            } finally {
                                                                try {
                                                                    fS && !fS['done'] && (fJ = fR['return']) && fJ['call'](fR);
                                                                } finally {
                                                                    if (fI)
                                                                        throw fI['error'];
                                                                }
                                                            }
                                                        else
                                                            fC['setAttribute'](fP, fQ);
                                                    } else
                                                        'function' == typeof fQ ? fC[fP] = fQ : jQ(0x262) == typeof fQ ? fQ ? fC['setAttribute'](fP, '') : fC[jQ(0x2bc)](fP) : fC['setAttribute'](fP, fQ);
                                                }
                                            }
                                        } catch (fV) {
                                            fG = {
                                                'error': fV
                                            };
                                        } finally {
                                            try {
                                                fO && !fO['done'] && (fH = fN['return']) && fH['call'](fN);
                                            } finally {
                                                if (fG)
                                                    throw fG[jQ(0x1fe)];
                                            }
                                        }
                                    else
                                        fC['appendChild'](document[jQ(0x4d6)](fM));
                                }
                            }
                        }
                    }
                }
            }
        } catch (fW) {
            fE = {
                'error': fW
            };
        } finally {
            try {
                fL && !fL['done'] && (fF = fK['return']) && fF['call'](fK);
            } finally {
                if (fE)
                    throw fE[jQ(0x1fe)];
            }
        }
        return fC;
    }
    var ax = jI(0x538), ay, az, aA, aB, aC = a0 && a0['t'] || function(fC) {
        const jR = jI;
        var fD = jR(0x2da) == typeof Symbol && Symbol[jR(0x6c2)]
          , fE = fD && fC[fD]
          , fF = 0x0;
        if (fE)
            return fE[jR(0x22f)](fC);
        if (fC && jR(0x503) == typeof fC['length'])
            return {
                'next': function() {
                    return fC && fF >= fC['length'] && (fC = void 0x0),
                    {
                        'value': fC && fC[fF++],
                        'done': !fC
                    };
                }
            };
        throw new TypeError(fD ? jR(0x273) : 'Symbol.iterator\x20is\x20not\x20defined.');
    }
    , aD = function() {
        for (var fC = [], fD = 0x0; fD < arguments['length']; fD++)
            fC[fD] = arguments[fD];
        return document['createRange']()['createContextualFragment'](fC['join']());
    }, aE = function() {
        const jS = jI;
        for (var fC = [], fD = 0x0; fD < arguments[jS(0x57c)]; fD++)
            fC[fD] = arguments[fD];
        for (var fE = document['createDocumentFragment'](), fF = new DOMParser()[jS(0x6e9)]('<svg\x20xmlns=\x22http://www.w3.org/2000/svg\x22>' + fC[jS(0x50c)]() + '</svg>', jS(0x507))[jS(0x1c0)]; null !== fF[jS(0x646)]; )
            document[jS(0x7f5)](fF[jS(0x646)], !0x0),
            fE[jS(0x2b8)](fF[jS(0x646)]);
        return fE;
    }, aF = function(fC) {
        aD[fC] = function() {
            const jT = a0b;
            for (var fD = [], fE = 0x0; fE < arguments[jT(0x57c)]; fE++)
                fD[fE] = arguments[fE];
            return aw(document['createElement'](fC), fD);
        }
        ;
    };
    try {
        for (var aG = aC('a\x20abbr\x20address\x20area\x20article\x20aside\x20audio\x20b\x20base\x20bdi\x20bdo\x20blockquote\x20br\x20button\x20canvas\x20caption\x20cite\x20code\x20col\x20colgroup\x20datalist\x20dd\x20del\x20details\x20dfn\x20dialog\x20div\x20dl\x20dt\x20em\x20embed\x20fieldset\x20figcaption\x20figure\x20footer\x20form\x20h1\x20h2\x20h3\x20h4\x20h5\x20h6\x20header\x20hr\x20i\x20iframe\x20img\x20input\x20ins\x20kbd\x20label\x20legend\x20li\x20link\x20main\x20map\x20mark\x20menu\x20menuitem\x20meta\x20meter\x20nav\x20noscript\x20object\x20ol\x20optgroup\x20option\x20output\x20p\x20param\x20picture\x20pre\x20progress\x20q\x20rp\x20rt\x20ruby\x20s\x20samp\x20script\x20section\x20select\x20small\x20source\x20span\x20strong\x20style\x20sub\x20summary\x20sup\x20table\x20tbody\x20td\x20template\x20textarea\x20tfoot\x20th\x20thead\x20time\x20title\x20tr\x20track\x20u\x20ul\x20var\x20video\x20wbr'[jI(0x75e)]('\x20')), aH = aG['next'](); !aH[jI(0x470)]; aH = aG['next']()) {
            aF(aH[jI(0x313)]);
        }
    } catch (fC) {
        ay = {
            'error': fC
        };
    } finally {
        try {
            aH && !aH[jI(0x470)] && (az = aG[jI(0x69b)]) && az['call'](aG);
        } finally {
            if (ay)
                throw ay[jI(0x1fe)];
        }
    }
    var aI = function(fD) {
        const jU = jI;
        if (aE[fD] = function() {
            for (var fF = [], fG = 0x0; fG < arguments['length']; fG++)
                fF[fG] = arguments[fG];
            return aw(document['createElementNS'](ax, fD), fF);
        }
        ,
        /-/['test'](fD)) {
            var fE = fD[jU(0x81c)](/-/g, '_');
            aE[fE] = function() {
                const jV = jU;
                for (var fF = [], fG = 0x0; fG < arguments[jV(0x57c)]; fG++)
                    fF[fG] = arguments[fG];
                return aw(document[jV(0x69c)](ax, fD), fF);
            }
            ;
        }
    };
    try {
        for (var aJ = aC('a\x20altGlyph\x20altGlyphDef\x20altGlyphItem\x20animate\x20animateMotion\x20animateTransform\x20circle\x20clipPath\x20color-profile\x20cursor\x20defs\x20desc\x20discard\x20ellipse\x20feBlend\x20feColorMatrix\x20feComponentTransfer\x20feComposite\x20feConvolveMatrix\x20feDiffuseLighting\x20feDisplacementMap\x20feDistantLight\x20feDropShadow\x20feFlood\x20feFuncA\x20feFuncB\x20feFuncG\x20feFuncR\x20feGaussianBlur\x20feImage\x20feMerge\x20feMergeNode\x20feMorphology\x20feOffset\x20fePointLight\x20feSpecularLighting\x20feSpotLight\x20feTile\x20feTurbulence\x20filter\x20font\x20font-face\x20font-face-format\x20font-face-name\x20font-face-src\x20font-face-uri\x20foreignObject\x20g\x20glyph\x20glyphRef\x20hkern\x20image\x20line\x20linearGradient\x20marker\x20mask\x20metadata\x20missing-glyph\x20mpath\x20path\x20pattern\x20polygon\x20polyline\x20radialGradient\x20rect\x20script\x20set\x20stop\x20style\x20svg\x20switch\x20symbol\x20text\x20textPath\x20title\x20tref\x20tspan\x20use\x20view\x20vkern'['split']('\x20')), aK = aJ[jI(0x492)](); !aK['done']; aK = aJ['next']()) {
            aI(aK[jI(0x313)]);
        }
    } catch (fD) {
        aA = {
            'error': fD
        };
    } finally {
        try {
            aK && !aK['done'] && (aB = aJ[jI(0x69b)]) && aB['call'](aJ);
        } finally {
            if (aA)
                throw aA[jI(0x1fe)];
        }
    }
    class aL {
        static[jI(0x1f4)](fE, fF) {
            const jW = jI;
            return fF < fE[jW(0x1c4)] ? aL[jW(0x678)][fF % aL[jW(0x678)]['length']] : aL[jW(0x5c2)][(fF - fE['pitchChannelCount']) % aL['noiseChannels']['length']];
        }
        static[jI(0x16b)](fE) {
            const jX = jI;
            let fF = this[jX(0x7ef)][fE];
            null == fF && (fF = this['themes'][jX(0x356)]),
            this['h'][jX(0x40a)] = fF;
            const fG = document[jX(0x4a3)](jX(0x4c9));
            null != fG && fG['setAttribute'](jX(0x582), getComputedStyle(document['documentElement'])['getPropertyValue']('--ui-widget-background'));
        }
    }
    aL[jI(0x7ef)] = {
        'dark\x20classic': '\x0a\x09\x09\x09:root\x20{\x0a\x09\x09\x09\x09--page-margin:\x20black;\x0a\x09\x09\x09\x09--editor-background:\x20black;\x0a\x09\x09\x09\x09--hover-preview:\x20#ddd;\x0a\x09\x09\x09\x09--playhead:\x20#ddd;\x0a\x09\x09\x09\x09--primary-text:\x20#ddd;\x0a\x09\x09\x09\x09--secondary-text:\x20#8e695b;\x0a\x09\x09\x09\x09--inverted-text:\x20black;\x0a\x09\x09\x09\x09--text-selection:\x20rgba(169,0,255,0.99);\x0a\x09\x09\x09\x09--box-selection-fill:\x20rgba(221,221,221,0.2);\x0a\x09\x09\x09\x09--loop-accent:\x20#bf15ba;\x0a\x09\x09\x09\x09--link-accent:\x20#f888ff;\x0a\x09\x09\x09\x09--ui-widget-background:\x20#443a3a;\x0a\x09\x09\x09\x09--ui-widget-focus:\x20#777;\x0a\x09\x09\x09\x09--pitch-background:\x20#353333;\x0a\x09\x09\x09\x09--tonic:\x20#884a44;\x0a\x09\x09\x09\x09--fifth-note:\x20#415498;\x0a\x09\x09\x09\x09--white-piano-key:\x20#bbb;\x0a\x09\x09\x09\x09--black-piano-key:\x20#444;\x0a\x09\x09\x09\x09--pitch1-secondary-channel:\x20#0099A1;\x0a\x09\x09\x09\x09--pitch1-primary-channel:\x20\x20\x20#25F3FF;\x0a\x09\x09\x09\x09--pitch1-secondary-note:\x20\x20\x20\x20#00BDC7;\x0a\x09\x09\x09\x09--pitch1-primary-note:\x20\x20\x20\x20\x20\x20#92F9FF;\x0a\x09\x09\x09\x09--pitch2-secondary-channel:\x20#A1A100;\x0a\x09\x09\x09\x09--pitch2-primary-channel:\x20\x20\x20#FFFF25;\x0a\x09\x09\x09\x09--pitch2-secondary-note:\x20\x20\x20\x20#C7C700;\x0a\x09\x09\x09\x09--pitch2-primary-note:\x20\x20\x20\x20\x20\x20#FFFF92;\x0a\x09\x09\x09\x09--pitch3-secondary-channel:\x20#C75000;\x0a\x09\x09\x09\x09--pitch3-primary-channel:\x20\x20\x20#FF9752;\x0a\x09\x09\x09\x09--pitch3-secondary-note:\x20\x20\x20\x20#FF771C;\x0a\x09\x09\x09\x09--pitch3-primary-note:\x20\x20\x20\x20\x20\x20#FFCDAB;\x0a\x09\x09\x09\x09--pitch4-secondary-channel:\x20#00A100;\x0a\x09\x09\x09\x09--pitch4-primary-channel:\x20\x20\x20#50FF50;\x0a\x09\x09\x09\x09--pitch4-secondary-note:\x20\x20\x20\x20#00C700;\x0a\x09\x09\x09\x09--pitch4-primary-note:\x20\x20\x20\x20\x20\x20#A0FFA0;\x0a\x09\x09\x09\x09--pitch5-secondary-channel:\x20#D020D0;\x0a\x09\x09\x09\x09--pitch5-primary-channel:\x20\x20\x20#FF90FF;\x0a\x09\x09\x09\x09--pitch5-secondary-note:\x20\x20\x20\x20#E040E0;\x0a\x09\x09\x09\x09--pitch5-primary-note:\x20\x20\x20\x20\x20\x20#FFC0FF;\x0a\x09\x09\x09\x09--pitch6-secondary-channel:\x20#7777B0;\x0a\x09\x09\x09\x09--pitch6-primary-channel:\x20\x20\x20#A0A0FF;\x0a\x09\x09\x09\x09--pitch6-secondary-note:\x20\x20\x20\x20#8888D0;\x0a\x09\x09\x09\x09--pitch6-primary-note:\x20\x20\x20\x20\x20\x20#D0D0FF;\x0a\x09\x09\x09\x09--pitch7-secondary-channel:\x20#8AA100;\x0a\x09\x09\x09\x09--pitch7-primary-channel:\x20\x20\x20#DEFF25;\x0a\x09\x09\x09\x09--pitch7-secondary-note:\x20\x20\x20\x20#AAC700;\x0a\x09\x09\x09\x09--pitch7-primary-note:\x20\x20\x20\x20\x20\x20#E6FF92;\x0a\x09\x09\x09\x09--pitch8-secondary-channel:\x20#DF0019;\x0a\x09\x09\x09\x09--pitch8-primary-channel:\x20\x20\x20#FF98A4;\x0a\x09\x09\x09\x09--pitch8-secondary-note:\x20\x20\x20\x20#FF4E63;\x0a\x09\x09\x09\x09--pitch8-primary-note:\x20\x20\x20\x20\x20\x20#FFB2BB;\x0a\x09\x09\x09\x09--pitch9-secondary-channel:\x20#00A170;\x0a\x09\x09\x09\x09--pitch9-primary-channel:\x20\x20\x20#50FFC9;\x0a\x09\x09\x09\x09--pitch9-secondary-note:\x20\x20\x20\x20#00C78A;\x0a\x09\x09\x09\x09--pitch9-primary-note:\x20\x20\x20\x20\x20\x20#83FFD9;\x0a\x09\x09\x09\x09--pitch10-secondary-channel:#A11FFF;\x0a\x09\x09\x09\x09--pitch10-primary-channel:\x20\x20#CE8BFF;\x0a\x09\x09\x09\x09--pitch10-secondary-note:\x20\x20\x20#B757FF;\x0a\x09\x09\x09\x09--pitch10-primary-note:\x20\x20\x20\x20\x20#DFACFF;\x0a\x09\x09\x09\x09--noise1-secondary-channel:\x20#6F6F6F;\x0a\x09\x09\x09\x09--noise1-primary-channel:\x20\x20\x20#AAAAAA;\x0a\x09\x09\x09\x09--noise1-secondary-note:\x20\x20\x20\x20#A7A7A7;\x0a\x09\x09\x09\x09--noise1-primary-note:\x20\x20\x20\x20\x20\x20#E0E0E0;\x0a\x09\x09\x09\x09--noise2-secondary-channel:\x20#996633;\x0a\x09\x09\x09\x09--noise2-primary-channel:\x20\x20\x20#DDAA77;\x0a\x09\x09\x09\x09--noise2-secondary-note:\x20\x20\x20\x20#CC9966;\x0a\x09\x09\x09\x09--noise2-primary-note:\x20\x20\x20\x20\x20\x20#F0D0BB;\x0a\x09\x09\x09\x09--noise3-secondary-channel:\x20#4A6D8F;\x0a\x09\x09\x09\x09--noise3-primary-channel:\x20\x20\x20#77AADD;\x0a\x09\x09\x09\x09--noise3-secondary-note:\x20\x20\x20\x20#6F9FCF;\x0a\x09\x09\x09\x09--noise3-primary-note:\x20\x20\x20\x20\x20\x20#BBD7FF;\x0a\x09\x09\x09\x09--noise4-secondary-channel:\x20#7A4F9A;\x0a\x09\x09\x09\x09--noise4-primary-channel:\x20\x20\x20#AF82D2;\x0a\x09\x09\x09\x09--noise4-secondary-note:\x20\x20\x20\x20#9E71C1;\x0a\x09\x09\x09\x09--noise4-primary-note:\x20\x20\x20\x20\x20\x20#D4C1EA;\x0a\x09\x09\x09\x09--noise5-secondary-channel:\x20#607837;\x0a\x09\x09\x09\x09--noise5-primary-channel:\x20\x20\x20#A2BB77;\x0a\x09\x09\x09\x09--noise5-secondary-note:\x20\x20\x20\x20#91AA66;\x0a\x09\x09\x09\x09--noise5-primary-note:\x20\x20\x20\x20\x20\x20#C5E2B2;\x0a\x09\x09\x09}\x0a\x09\x09',
        'light\x20classic': jI(0x4da)
    },
    aL['pageMargin'] = jI(0x1cc),
    aL['editorBackground'] = 'var(--editor-background)',
    aL[jI(0x709)] = jI(0x60f),
    aL['playhead'] = 'var(--playhead)',
    aL[jI(0x305)] = jI(0x6a0),
    aL['secondaryText'] = jI(0x53f),
    aL['invertedText'] = 'var(--inverted-text)',
    aL['textSelection'] = jI(0x797),
    aL['boxSelectionFill'] = 'var(--box-selection-fill)',
    aL[jI(0x2b7)] = jI(0x6f7),
    aL[jI(0x76c)] = 'var(--link-accent)',
    aL['uiWidgetBackground'] = 'var(--ui-widget-background)',
    aL[jI(0x6f2)] = jI(0x5a2),
    aL['pitchBackground'] = jI(0x76a),
    aL[jI(0x41a)] = jI(0x461),
    aL[jI(0x887)] = jI(0x1b4),
    aL[jI(0x1eb)] = jI(0x362),
    aL[jI(0x69d)] = jI(0x4e8),
    aL[jI(0x678)] = a8([{
        'name': 'pitch1',
        'secondaryChannel': 'var(--pitch1-secondary-channel)',
        'primaryChannel': jI(0x34b),
        'secondaryNote': 'var(--pitch1-secondary-note)',
        'primaryNote': jI(0x868)
    }, {
        'name': 'pitch2',
        'secondaryChannel': 'var(--pitch2-secondary-channel)',
        'primaryChannel': 'var(--pitch2-primary-channel)',
        'secondaryNote': jI(0x1f9),
        'primaryNote': 'var(--pitch2-primary-note)'
    }, {
        'name': jI(0x3da),
        'secondaryChannel': jI(0x1b2),
        'primaryChannel': 'var(--pitch3-primary-channel)',
        'secondaryNote': jI(0x851),
        'primaryNote': jI(0x63d)
    }, {
        'name': 'pitch4',
        'secondaryChannel': jI(0x68e),
        'primaryChannel': 'var(--pitch4-primary-channel)',
        'secondaryNote': 'var(--pitch4-secondary-note)',
        'primaryNote': jI(0x5bf)
    }, {
        'name': jI(0x708),
        'secondaryChannel': 'var(--pitch5-secondary-channel)',
        'primaryChannel': 'var(--pitch5-primary-channel)',
        'secondaryNote': 'var(--pitch5-secondary-note)',
        'primaryNote': jI(0x1b8)
    }, {
        'name': jI(0x34d),
        'secondaryChannel': 'var(--pitch6-secondary-channel)',
        'primaryChannel': 'var(--pitch6-primary-channel)',
        'secondaryNote': 'var(--pitch6-secondary-note)',
        'primaryNote': 'var(--pitch6-primary-note)'
    }, {
        'name': jI(0x7d4),
        'secondaryChannel': jI(0x668),
        'primaryChannel': 'var(--pitch7-primary-channel)',
        'secondaryNote': 'var(--pitch7-secondary-note)',
        'primaryNote': jI(0x661)
    }, {
        'name': jI(0x1bb),
        'secondaryChannel': 'var(--pitch8-secondary-channel)',
        'primaryChannel': 'var(--pitch8-primary-channel)',
        'secondaryNote': 'var(--pitch8-secondary-note)',
        'primaryNote': jI(0x345)
    }, {
        'name': 'pitch9',
        'secondaryChannel': 'var(--pitch9-secondary-channel)',
        'primaryChannel': jI(0x3bf),
        'secondaryNote': jI(0x229),
        'primaryNote': jI(0x7d1)
    }, {
        'name': jI(0x1e2),
        'secondaryChannel': jI(0x488),
        'primaryChannel': 'var(--pitch10-primary-channel)',
        'secondaryNote': jI(0x560),
        'primaryNote': 'var(--pitch10-primary-note)'
    }]),
    aL[jI(0x5c2)] = a8([{
        'name': jI(0x69e),
        'secondaryChannel': jI(0x381),
        'primaryChannel': 'var(--noise1-primary-channel)',
        'secondaryNote': jI(0x1fa),
        'primaryNote': jI(0x85b)
    }, {
        'name': jI(0x771),
        'secondaryChannel': 'var(--noise2-secondary-channel)',
        'primaryChannel': 'var(--noise2-primary-channel)',
        'secondaryNote': 'var(--noise2-secondary-note)',
        'primaryNote': jI(0x186)
    }, {
        'name': 'noise3',
        'secondaryChannel': 'var(--noise3-secondary-channel)',
        'primaryChannel': jI(0x1aa),
        'secondaryNote': 'var(--noise3-secondary-note)',
        'primaryNote': 'var(--noise3-primary-note)'
    }, {
        'name': jI(0x611),
        'secondaryChannel': 'var(--noise4-secondary-channel)',
        'primaryChannel': jI(0x36a),
        'secondaryNote': 'var(--noise4-secondary-note)',
        'primaryNote': 'var(--noise4-primary-note)'
    }, {
        'name': 'noise5',
        'secondaryChannel': jI(0x64d),
        'primaryChannel': 'var(--noise5-primary-channel)',
        'secondaryNote': 'var(--noise5-secondary-note)',
        'primaryNote': jI(0x664)
    }]),
    aL['h'] = document[jI(0x314)][jI(0x2b8)](aD['style']({
        'type': 'text/css'
    }));
    const aM = document[jI(0x6e5)][jI(0x2b8)](aD['div']({
        'style': 'width:30px;\x20height:30px;\x20overflow:\x20auto;'
    }, aD[jI(0x504)]({
        'style': 'width:100%;height:40px'
    })));
    aM[jI(0x646)]['clientWidth'] < 0x1e && document['documentElement']['classList']['add']('obtrusive-scrollbars'),
    document[jI(0x6e5)]['removeChild'](aM),
    document['head']['appendChild'](aD['style']({
        'type': jI(0x495)
    }, jI(0x869) + aL[jI(0x29d)] + '\x20' + aL['editorBackground'] + jI(0x27f) + aL['editorBackground'] + jI(0x85a) + aL[jI(0x29d)] + ';\x0a\x09border:\x203px\x20solid\x20' + aL[jI(0x187)] + ';\x0a}\x0a\x0a\x0a.beepboxEditor\x20{\x0a\x09display:\x20grid;\x0a\x20\x20\x20\x20grid-template-columns:\x20minmax(0,\x201fr)\x20max-content;\x0a\x20\x20\x20\x20grid-template-rows:\x20max-content\x201fr;\x20/*\x20max-content\x20minmax(0,\x201fr);\x20Chrome\x2080\x20grid\x20layout\x20regression.\x20https://bugs.chromium.org/p/chromium/issues/detail?id=1050307\x20*/\x0a\x20\x20\x20\x20grid-template-areas:\x20\x22pattern-area\x20settings-area\x22\x20\x22track-area\x20settings-area\x22;\x0a\x09grid-column-gap:\x206px;\x0a\x09grid-row-gap:\x206px;\x0a\x09position:\x20relative;\x0a\x09touch-action:\x20manipulation;\x0a\x09cursor:\x20default;\x0a\x09font-size:\x2013px;\x0a\x09overflow:\x20hidden;\x0a\x09color:\x20' + aL['primaryText'] + jI(0x2c8) + aL['editorBackground'] + ';\x0a}\x0a\x0a.beepboxEditor\x20.noSelection\x20{\x0a\x09-webkit-touch-callout:\x20none;\x0a\x09-webkit-user-select:\x20none;\x0a\x09-moz-user-select:\x20none;\x0a\x09-ms-user-select:\x20none;\x0a\x09user-select:\x20none;\x0a}\x0a\x0a.beepboxEditor\x20div\x20{\x0a\x09margin:\x200;\x0a\x09padding:\x200;\x0a}\x0a\x0a.beepboxEditor\x20.pattern-area\x20{\x0a\x09grid-area:\x20pattern-area;\x0a\x09height:\x20481px;\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20row;\x0a\x09position:\x20relative;\x0a}\x0a\x0a.beepboxEditor\x20.track-area\x20{\x0a\x09grid-area:\x20track-area;\x0a}\x0a\x0a.beepboxEditor\x20.loopEditor\x20{\x0a\x09height:\x2020px;\x0a\x09position:\x20sticky;\x0a\x09bottom:\x200;\x0a\x09padding:\x205px\x200;\x0a\x09background-color:\x20' + aL[jI(0x187)] + jI(0x546) + aL[jI(0x1e6)] + jI(0x192) + aL[jI(0x76c)] + ';\x0a\x09text-decoration:\x20underline;\x0a}\x0a.beepboxEditor\x20.tip:active\x20{\x0a\x09color:\x20' + aL['primaryText'] + ';\x0a}\x0a\x0a.beepboxEditor\x20.volume-speaker\x20{\x0a\x09flex-shrink:\x200;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20' + aL['secondaryText'] + ';\x0a\x09-webkit-mask-image:\x20var(--volume-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--volume-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.drum-button\x20{\x0a\x09flex:\x201;\x0a\x09background-color:\x20transparent;\x0a\x09background-image:\x20var(--drum-symbol);\x0a\x09background-repeat:\x20no-repeat;\x0a\x09background-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.piano-button\x20{\x0a\x09flex:\x201;\x0a\x09position:\x20relative;\x0a\x09display:\x20flex;\x0a\x09align-items:\x20center;\x0a}\x0a.beepboxEditor\x20.piano-button::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09width:\x20100%;\x0a\x09height:\x20100%;\x0a\x09pointer-events:\x20none;\x0a\x09background-image:\x20var(--piano-key-symbol);\x0a\x09background-repeat:\x20no-repeat;\x0a\x09background-position:\x20center;\x0a\x09background-size:\x20100%\x20115.38%;\x0a}\x0a.beepboxEditor\x20.piano-button.disabled::after\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09right:\x200;\x0a\x09top:\x200;\x0a\x09width:\x2070%;\x0a\x09height:\x20100%;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20' + aL[jI(0x187)] + ';\x0a\x09-webkit-mask-image:\x20linear-gradient(90deg,\x20transparent\x200%,\x20gray\x2070%,\x20gray\x20100%);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20linear-gradient(90deg,\x20transparent\x200%,\x20gray\x2070%,\x20gray\x20100%);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.piano-button.pressed,\x20.beepboxEditor\x20.drum-button.pressed\x20{\x0a\x09filter:\x20brightness(0.5);\x0a}\x0a\x0a.beepboxEditor\x20.customize-instrument\x20{\x0a\x09margin:\x202px\x200;\x0a}\x0a.beepboxEditor\x20.customize-instrument::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--customize-dial-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--customize-dial-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.instrumentCopyPasteRow\x20{\x0a\x09gap:\x202px;\x0a}\x0a\x0a.beepboxEditor\x20.copy-instrument\x20{\x0a\x09margin:\x202px\x200;\x0a\x09flex-grow:\x201;\x0a}\x0a.beepboxEditor\x20.copy-instrument::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--instrument-copy-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--instrument-copy-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.paste-instrument\x20{\x0a\x09margin:\x202px\x200;\x0a\x09flex-grow:\x201;\x0a}\x0a.beepboxEditor\x20.paste-instrument::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--instrument-paste-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--instrument-paste-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.envelopeEditor\x20{\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20column;\x0a}\x0a\x0a.beepboxEditor\x20.envelope-row\x20{\x0a\x09display:\x20flex;\x0a\x09margin:\x202px\x200;\x0a\x09gap:\x202px;\x0a}\x0a\x0a.beepboxEditor\x20.add-envelope\x20{\x0a\x09width:\x20var(--button-size);\x0a}\x0a.beepboxEditor\x20.add-envelope::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--add-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--add-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a.beepboxEditor\x20.add-envelope:disabled\x20{\x0a\x09visibility:\x20hidden;\x0a}\x0a\x0a.beepboxEditor\x20.effects-menu\x20{\x0a\x09width:\x20var(--button-size);\x0a\x09position:\x20relative;\x0a}\x0a.beepboxEditor\x20.effects-menu::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--menu-down-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--menu-down-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.zoomInButton,\x20.beepboxEditor\x20.zoomOutButton\x20{\x0a\x09width:\x20var(--button-size);\x0a\x09position:\x20absolute;\x0a\x09right:\x2010px;\x0a}\x0a.beepboxEditor\x20.zoomInButton\x20{\x0a\x09top:\x2010px;\x0a}\x0a.beepboxEditor\x20.zoomOutButton\x20{\x0a\x09top:\x2050px;\x0a}\x0a.beepboxEditor\x20.zoomInButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--zoom-in-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--zoom-in-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a.beepboxEditor\x20.zoomOutButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--zoom-out-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--zoom-out-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.delete-envelope\x20{\x0a\x09width:\x20var(--button-size);\x0a\x09flex-shrink:\x200;\x0a\x09flex-grow:\x200;\x0a}\x0a.beepboxEditor\x20.delete-envelope::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--close-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--close-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a.beepboxEditor\x20.delete-envelope:disabled\x20{\x0a\x09visibility:\x20hidden;\x0a}\x0a\x0a.beepboxEditor\x20.menu.file::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--file-page-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--file-page-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.menu.edit::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--edit-pencil-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--edit-pencil-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.menu.preferences::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--preferences-gear-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--preferences-gear-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.mute-button::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20100%;\x0a\x09height:\x20100%;\x0a\x09background:\x20' + aL[jI(0x305)] + jI(0x782) + aL[jI(0x187)] + jI(0x5d3) + aL['editorBackground'] + ';\x0a\x09opacity:\x200.5;\x0a\x09display:\x20flex;\x0a}\x0a\x0a.beepboxEditor\x20.prompt\x20{\x0a\x09margin:\x20auto;\x0a\x09text-align:\x20center;\x0a\x09background:\x20' + aL['editorBackground'] + ';\x0a\x09border-radius:\x2015px;\x0a\x09border:\x204px\x20solid\x20' + aL['uiWidgetBackground'] + ';\x0a\x09color:\x20' + aL[jI(0x305)] + ';\x0a\x09padding:\x2020px;\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20column;\x0a\x09position:\x20relative;\x0a\x09box-shadow:\x205px\x205px\x2020px\x2010px\x20rgba(0,0,0,0.5);\x0a}\x0a\x0a.beepboxEditor\x20.prompt\x20>\x20*:not(:first-child):not(.cancelButton)\x20{\x0a\x09margin-top:\x201.5em;\x0a}\x0a\x0a.beepboxEditor\x20.prompt\x20h2\x20{\x0a\x09font-size:\x202em;\x0a\x09margin:\x200\x2016px;\x0a\x09font-weight:\x20normal;\x0a}\x0a\x0a.beepboxEditor\x20.prompt\x20p\x20{\x0a\x09text-align:\x20left;\x0a\x09margin:\x201em\x200;\x0a}\x0a\x0a.beepboxEditor\x20.prompt\x20label\x20{\x0a\x09cursor:\x20pointer;\x0a}\x0a\x0a.beepboxEditor\x20.prompt.recordingSetupPrompt\x20p\x20{\x0a\x09margin-top:\x200.75em;\x0a\x09margin-bottom:\x200;\x0a}\x0a\x0a.beepboxEditor\x20.prompt.recordingSetupPrompt\x20>\x20label:not(:first-child):not(.cancelButton)\x20{\x0a\x09margin:\x202px\x200;\x0a}\x0a\x0a.beepboxEditor\x20.layout-option\x20{\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20column;\x0a\x09flex:\x201;\x0a\x09cursor:\x20pointer;\x0a\x09color:\x20' + aL[jI(0x1e6)] + jI(0x7bf) + aL['primaryText'] + ';\x0a}\x0a\x0a.beepboxEditor\x20.selectContainer\x20{\x0a\x09position:\x20relative;\x0a}\x0a.beepboxEditor\x20.selectContainer:not(.menu)::after\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09right:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x2014px;\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--select-arrows-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--select-arrows-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a.beepboxEditor\x20.selectContainer.menu::after\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09right:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--menu-down-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--menu-down-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a.beepboxEditor\x20select\x20{\x0a\x09margin:\x200;\x0a\x09padding:\x200\x204px;\x0a\x09display:\x20block;\x0a\x09height:\x20var(--button-size);\x0a\x09border:\x20none;\x0a\x09border-radius:\x205px;\x0a\x09background:\x20' + aL[jI(0x29d)] + ';\x0a\x09color:\x20inherit;\x0a\x09font-size:\x20inherit;\x0a\x09cursor:\x20pointer;\x0a\x09font-family:\x20inherit;\x0a\x09font-weight:\x20inherit;\x0a\x0a\x09-webkit-appearance:none;\x0a\x09-moz-appearance:\x20none;\x0a\x09appearance:\x20none;\x0a}\x0a.beepboxEditor\x20.menu\x20select\x20{\x0a\x09padding:\x200\x20var(--button-size);\x0a}\x0a.beepboxEditor\x20select:focus\x20{\x0a\x09background:\x20' + aL['uiWidgetFocus'] + ';\x0a\x09outline:\x20none;\x0a}\x0a.beepboxEditor\x20.menu\x20select\x20{\x0a\x09text-align:\x20center;\x0a\x09text-align-last:\x20center;\x0a}\x0a.beepboxEditor\x20.settings-area\x20select\x20{\x0a\x20\x20\x20\x20\x20\x20\x20width:\x20100%;\x0a}\x0a\x0a/*\x20This\x20makes\x20it\x20look\x20better\x20in\x20firefox\x20on\x20my\x20computer...\x20What\x20about\x20others?\x0a@-moz-document\x20url-prefix()\x20{\x0a\x09.beepboxEditor\x20select\x20{\x20padding:\x200\x202px;\x20}\x0a}\x0a*/\x0a.beepboxEditor\x20button\x20{\x0a\x09margin:\x200;\x0a\x09position:\x20relative;\x0a\x09height:\x20var(--button-size);\x0a\x09border:\x20none;\x0a\x09border-radius:\x205px;\x0a\x09background:\x20' + aL[jI(0x29d)] + ';\x0a\x09color:\x20inherit;\x0a\x09font-size:\x20inherit;\x0a\x09font-family:\x20inherit;\x0a\x09font-weight:\x20inherit;\x0a\x09cursor:\x20pointer;\x0a}\x0a.beepboxEditor\x20button:focus\x20{\x0a\x09background:\x20' + aL[jI(0x6f2)] + ';\x0a\x09outline:\x20none;\x0a}\x0a\x0a.beepboxEditor\x20button.cancelButton\x20{\x0a\x09float:\x20right;\x0a\x09width:\x20var(--button-size);\x0a\x09position:\x20absolute;\x0a\x09top:\x208px;\x0a\x09right:\x208px;\x0a}\x0a\x0a.beepboxEditor\x20.playback-bar-controls\x20{\x0a\x09display:\x20grid;\x0a\x09grid-template-columns:\x20minmax(0,\x201fr)\x20minmax(0,\x201fr)\x20minmax(0,\x201fr)\x20minmax(0,\x201fr);\x0a\x09grid-template-rows:\x20min-content;\x0a\x09grid-column-gap:\x204px;\x0a}\x0a\x0a.beepboxEditor\x20button.playButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--play-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--play-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a.beepboxEditor\x20button.pauseButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--pause-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--pause-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a.beepboxEditor\x20button.recordButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--record-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--record-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a.beepboxEditor\x20button.stopButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x200;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translateY(-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--stop-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--stop-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20button.prevBarButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x2050%;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translate(-50%,\x20-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--prev-bar-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--prev-bar-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20button.nextBarButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09flex-shrink:\x200;\x0a\x09position:\x20absolute;\x0a\x09left:\x2050%;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translate(-50%,\x20-50%);\x0a\x09pointer-events:\x20none;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--next-bar-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--next-bar-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20button.playButton,\x20.beepboxEditor\x20button.pauseButton,\x20.beepboxEditor\x20button.recordButton,\x20.beepboxEditor\x20button.stopButton,\x20.beepboxEditor\x20button.okayButton,\x20.beepboxEditor\x20button.exportButton\x20{\x0a\x09padding-left:\x20var(--button-size);\x0a}\x0a.beepboxEditor\x20button.playButton,\x20.beepboxEditor\x20button.pauseButton,\x20.beepboxEditor\x20button.recordButton\x20{\x0a\x09grid-column-start:\x201;\x0a\x09grid-column-end:\x203;\x0a}\x0a.beepboxEditor\x20button.stopButton\x20{\x0a\x09grid-column-start:\x201;\x0a\x09grid-column-end:\x205;\x0a}\x0a.beepboxEditor\x20button.prevBarButton\x20{\x0a\x09grid-column-start:\x203;\x0a\x09grid-column-end:\x204;\x0a}\x0a.beepboxEditor\x20button.nextBarButton\x20{\x0a\x09grid-column-start:\x204;\x0a\x09grid-column-end:\x205;\x0a}\x0a\x0a.beepboxEditor\x20button.playButton.shrunk,\x20.beepboxEditor\x20button.recordButton.shrunk\x20{\x0a\x09padding:\x200;\x0a}\x0a.beepboxEditor\x20button.playButton.shrunk::before,\x20.beepboxEditor\x20button.recordButton.shrunk::before\x20{\x0a\x09left:\x2050%;\x0a\x09top:\x2050%;\x0a\x09transform:\x20translate(-50%,\x20-50%);\x0a}\x0a.beepboxEditor\x20button.playButton.shrunk\x20span,\x20.beepboxEditor\x20button.recordButton.shrunk\x20span\x20{\x0a\x09display:\x20none;\x0a}\x0a.beepboxEditor\x20button.playButton.shrunk\x20{\x0a\x09grid-column-start:\x201;\x0a\x09grid-column-end:\x202;\x0a}\x0a.beepboxEditor\x20button.recordButton.shrunk\x20{\x0a\x09grid-column-start:\x202;\x0a\x09grid-column-end:\x203;\x0a}\x0a\x0a.beepboxEditor\x20button.cancelButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--close-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--close-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20button.okayButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09-webkit-mask-image:\x20var(--checkmark-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a\x09mask-image:\x20var(--checkmark-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20button.exportButton::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20var(--button-size);\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--export-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--export-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20{\x0a\x09display:\x20flex;\x0a\x09gap:\x202px;\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20button\x20{\x0a\x09flex-grow:\x201;\x0a\x09min-width:\x200;\x0a\x09padding:\x200;\x0a\x09flex-basis:\x200;\x0a\x09display:\x20flex;\x0a\x09align-items:\x20center;\x0a\x09justify-content:\x20center;\x0a\x09color:\x20var(--text-color-lit);\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20.remove-instrument,\x20.beepboxEditor\x20.instrument-bar\x20.add-instrument\x20{\x0a\x09max-width:\x20var(--button-size);\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20>\x20:not(:first-child)\x20{\x0a\x09border-top-left-radius:\x200;\x0a\x09border-bottom-left-radius:\x200;\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20>\x20:not(.last-button)\x20{\x0a\x09border-top-right-radius:\x200;\x0a\x09border-bottom-right-radius:\x200;\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20.selected-instrument\x20{\x0a\x09background:\x20var(--background-color-lit);\x0a\x09color:\x20' + aL[jI(0x4d7)] + jI(0x774) + aL['editorBackground'] + jI(0x85c) + aL[jI(0x4d7)] + ';\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20.remove-instrument::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20100%;\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--close-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--close-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20.instrument-bar\x20.add-instrument::before\x20{\x0a\x09content:\x20\x22\x22;\x0a\x09position:\x20absolute;\x0a\x09width:\x20100%;\x0a\x09height:\x20var(--button-size);\x0a\x09left:\x200;\x0a\x09top:\x200;\x0a\x09pointer-events:\x20none;\x0a\x09background:\x20currentColor;\x0a\x09mask-image:\x20var(--add-symbol);\x0a\x09mask-repeat:\x20no-repeat;\x0a\x09mask-position:\x20center;\x0a\x09-webkit-mask-image:\x20var(--add-symbol);\x0a\x09-webkit-mask-repeat:\x20no-repeat;\x0a\x09-webkit-mask-position:\x20center;\x0a}\x0a\x0a.beepboxEditor\x20canvas\x20{\x0a\x09overflow:\x20hidden;\x0a\x09position:\x20absolute;\x0a\x09display:\x20block;\x0a}\x0a\x0a.beepboxEditor\x20.trackContainer\x20{\x0a\x09flex-grow:\x201;\x0a}\x0a\x0a.beepboxEditor\x20.trackAndMuteContainer\x20{\x0a\x09display:\x20flex;\x0a\x09align-items:\x20flex-start;\x0a\x09width:\x20100%;\x0a\x09min-height:\x200;\x0a\x09flex:\x201;\x0a\x09overflow-x:\x20hidden;\x0a\x09position:\x20relative;\x0a}\x0a\x0a.beepboxEditor\x20.channelRow\x20{\x0a\x09display:\x20flex;\x0a}\x0a\x0a.beepboxEditor\x20.channelBox\x20{\x0a\x09display:\x20flex;\x0a\x09text-align:\x20center;\x0a\x09align-items:\x20center;\x0a\x09justify-content:\x20center;\x0a\x09box-sizing:\x20border-box;\x0a\x09padding-top:\x201px;\x0a}\x0a\x0a.beepboxEditor\x20.channelBoxLabel\x20{\x0a\x09font-size:\x2020px;\x0a\x09font-family:\x20sans-serif;\x0a\x09font-weight:\x20bold;\x0a}\x0a\x0a.beepboxEditor\x20.muteEditor\x20{\x0a\x09width:\x2032px;\x0a\x09flex-shrink:\x200;\x0a\x09display:\x20flex;\x0a\x09flex-direction:\x20column;\x0a\x09align-items:\x20stretch;\x0a\x09position:\x20sticky;\x0a\x09left:\x200;\x0a\x09z-index:\x201;\x0a\x09background:\x20' + aL['editorBackground'] + jI(0x88f) + aL[jI(0x6f2)] + ';\x0a\x09color:\x20' + aL[jI(0x305)] + ';\x0a}\x0a\x0a.beepboxEditor\x20input[type=text]::selection,\x20.beepboxEditor\x20input[type=number]::selection\x20{\x0a\x09background-color:\x20' + aL[jI(0x654)] + ';\x0a\x09color:\x20' + aL['primaryText'] + jI(0x272) + aL[jI(0x29d)] + ';\x0a}\x0a.beepboxEditor\x20input[type=range]::-webkit-slider-thumb\x20{\x0a\x09height:\x20var(--button-size);\x0a\x09width:\x206px;\x0a\x09border-radius:\x203px;\x0a\x09background:\x20currentColor;\x0a\x09cursor:\x20pointer;\x0a\x09-webkit-appearance:\x20none;\x0a\x09margin-top:\x20-10px;\x0a}\x0a.beepboxEditor\x20input[type=range]:focus::-webkit-slider-runnable-track\x20{\x0a\x09background:\x20' + aL['uiWidgetFocus'] + ';\x0a}\x0a.beepboxEditor\x20input[type=range]::-moz-range-track\x20{\x0a\x09width:\x20100%;\x0a\x09height:\x206px;\x0a\x09cursor:\x20pointer;\x0a\x09background:\x20' + aL[jI(0x29d)] + jI(0x1bc) + aL['uiWidgetFocus'] + jI(0x7e4) + aL[jI(0x29d)] + ';\x0a\x09border-color:\x20transparent;\x0a}\x0a.beepboxEditor\x20input[type=range]:focus::-ms-track\x20{\x0a\x09background:\x20' + aL['uiWidgetFocus'] + ';\x0a}\x0a.beepboxEditor\x20input[type=range]::-ms-thumb\x20{\x0a\x09height:\x20var(--button-size);\x0a\x09width:\x206px;\x0a\x09border-radius:\x203px;\x0a\x09background:\x20currentColor;\x0a\x09cursor:\x20pointer;\x0a}\x0a\x0a/*\x20wide\x20screen\x20*/\x0a@media\x20(min-width:\x20711px)\x20{\x0a\x09#beepboxEditorContainer\x20{\x0a\x09\x09display:\x20table;\x0a\x09}\x0a\x09.beepboxEditor\x20{\x0a\x09\x09flex-direction:\x20row;\x0a\x09}\x0a\x09.beepboxEditor:focus-within\x20{\x0a\x09\x09outline:\x203px\x20solid\x20' + aL['uiWidgetBackground'] + jI(0x817)));
    class aN {
        static['setLayout'](fE) {
            this['h']['textContent'] = this['l'][fE];
        }
    }
    function aO(fE, fF) {
        const jY = jI;
        for (let fG = 0x0; fG < fE[jY(0x57c)]; fG++)
            fE[fG] *= fF;
    }
    function aP(fE) {
        const jZ = jI;
        if (!function(fF) {
            return !(!fF || fF & fF - 0x1);
        }(fE))
            throw new Error('FFT\x20array\x20length\x20must\x20be\x20a\x20power\x20of\x202.');
        return Math[jZ(0x874)](Math['log'](fE) / Math[jZ(0x5a0)](0x2));
    }
    function aQ(fE, fF) {
        const k0 = jI
          , fG = aP(fF);
        if (fF < 0x4)
            throw new Error(k0(0x6ca));
        for (let fH = fG - 0x1; fH >= 0x2; fH--) {
            const fI = 0x1 << fH
              , fJ = fI >> 0x1
              , fK = fI << 0x1
              , fL = 0x2 * Math['PI'] / fK
              , fM = Math['cos'](fL)
              , fN = Math['sin'](fL)
              , fO = 0x2 * fM;
            for (let fP = 0x0; fP < fF; fP += fK) {
                const fQ = fP
                  , fR = fQ + fJ
                  , fS = fQ + fI
                  , fT = fS + fJ
                  , fU = fS + fI
                  , fV = fE[fQ]
                  , fW = fE[fS];
                fE[fQ] = fV + fW,
                fE[fR] *= 0x2,
                fE[fS] = fV - fW,
                fE[fT] *= 0x2;
                let fX = fM
                  , fY = -fN
                  , fZ = 0x1
                  , g0 = 0x0;
                for (let g1 = 0x1; g1 < fJ; g1++) {
                    const g2 = fQ + g1
                      , g3 = fS - g1
                      , g4 = fS + g1
                      , g5 = fU - g1
                      , g6 = fE[g2]
                      , g7 = fE[g3]
                      , g8 = fE[g4]
                      , g9 = fE[g5]
                      , ga = g6 - g7
                      , gb = g8 + g9;
                    fE[g2] = g6 + g7,
                    fE[g3] = g9 - g8,
                    fE[g4] = ga * fX - gb * fY,
                    fE[g5] = gb * fX + ga * fY;
                    const gc = fO * fX - fZ
                      , gd = fO * fY - g0;
                    fZ = fX,
                    g0 = fY,
                    fX = gc,
                    fY = gd;
                }
            }
        }
        for (let gf = 0x0; gf < fF; gf += 0x4) {
            const gg = gf + 0x1
              , gh = gf + 0x2
              , gj = gf + 0x3
              , gk = fE[gf]
              , gl = 0x2 * fE[gg]
              , gm = fE[gh]
              , go = 0x2 * fE[gj]
              , gp = gk + gm
              , gq = gk - gm;
            fE[gf] = gp + gl,
            fE[gg] = gp - gl,
            fE[gh] = gq + go,
            fE[gj] = gq - go;
        }
        !function(gr, gu) {
            const k1 = k0
              , gv = aP(gu);
            if (gv > 0x10)
                throw new Error(k1(0x29e));
            const gw = 0x10 - gv;
            for (let gx = 0x0; gx < gu; gx++) {
                let gy;
                if (gy = (0xaaaa & gx) >> 0x1 | (0x5555 & gx) << 0x1,
                gy = (0xcccc & gy) >> 0x2 | (0x3333 & gy) << 0x2,
                gy = (0xf0f0 & gy) >> 0x4 | (0xf0f & gy) << 0x4,
                gy = (gy >> 0x8 | (0xff & gy) << 0x8) >> gw,
                gy > gx) {
                    let gz = gr[gx];
                    gr[gx] = gr[gy],
                    gr[gy] = gz;
                }
            }
        }(fE, fF);
    }
    aN['l'] = {
        'small': '',
        'long': jI(0x77c) + aL['uiWidgetBackground'] + '\x20' + aL['editorBackground'] + jI(0x889) + aL['editorBackground'] + jI(0x62f) + aL['uiWidgetBackground'] + jI(0x633) + aL[jI(0x187)] + ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer::-webkit-scrollbar-corner\x20{\x0a\x09\x09\x09\x09\x09background-color:\x20' + aL['editorBackground'] + jI(0x752),
        'tall': jI(0x402) + aL['editorBackground'] + ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.play-pause-area\x20{\x0a\x09\x09\x09\x09\x09position:\x20sticky;\x0a\x09\x09\x09\x09\x09top:\x2022px;\x0a\x09\x09\x09\x09\x09z-index:\x201;\x0a\x09\x09\x09\x09\x09background:\x20' + aL[jI(0x187)] + jI(0x693) + aL[jI(0x187)] + ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09.beepboxEditor\x20.barScrollBar\x20{\x0a\x09\x09\x09\x09\x09display:\x20none;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackContainer\x20{\x0a\x09\x09\x09\x09\x09overflow:\x20visible;\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer\x20{\x0a\x09\x09\x09\x09\x09scrollbar-width:\x20auto;\x0a\x09\x09\x09\x09\x09scrollbar-color:\x20' + aL['uiWidgetBackground'] + '\x20' + aL[jI(0x187)] + jI(0x889) + aL['editorBackground'] + ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer::-webkit-scrollbar-thumb\x20{\x0a\x09\x09\x09\x09\x09background-color:\x20' + aL['uiWidgetBackground'] + ';\x0a\x09\x09\x09\x09\x09border:\x203px\x20solid\x20' + aL[jI(0x187)] + ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09\x09.beepboxEditor\x20.trackAndMuteContainer::-webkit-scrollbar-corner\x20{\x0a\x09\x09\x09\x09\x09background-color:\x20' + aL['editorBackground'] + ';\x0a\x09\x09\x09\x09}\x0a\x09\x09\x09}\x0a\x09\x09'
    },
    aN['h'] = document[jI(0x314)]['appendChild'](aD['style']({
        'type': 'text/css'
    }));
    class aR {
        constructor() {
            this['u'] = 0x1,
            this['m'] = [void 0x0],
            this['g'] = 0x0,
            this['v'] = 0x0,
            this['k'] = 0x0;
        }
        ['pushFront'](fE) {
            this['k'] >= this['u'] && this['M'](),
            this['v'] = this['v'] - 0x1 & this['g'],
            this['m'][this['v']] = fE,
            this['k']++;
        }
        [jI(0x531)](fE) {
            this['k'] >= this['u'] && this['M'](),
            this['m'][this['v'] + this['k'] & this['g']] = fE,
            this['k']++;
        }
        ['popFront']() {
            if (this['k'] <= 0x0)
                throw new Error('No\x20elements\x20left\x20to\x20pop.');
            const fE = this['m'][this['v']];
            return this['m'][this['v']] = void 0x0,
            this['v'] = this['v'] + 0x1 & this['g'],
            this['k']--,
            fE;
        }
        ['popBack']() {
            if (this['k'] <= 0x0)
                throw new Error('No\x20elements\x20left\x20to\x20pop.');
            this['k']--;
            const fE = this['v'] + this['k'] & this['g']
              , fF = this['m'][fE];
            return this['m'][fE] = void 0x0,
            fF;
        }
        [jI(0x670)]() {
            const k2 = jI;
            if (this['k'] <= 0x0)
                throw new Error(k2(0x34a));
            return this['m'][this['v']];
        }
        ['peakBack']() {
            if (this['k'] <= 0x0)
                throw new Error('No\x20elements\x20left\x20to\x20pop.');
            return this['m'][this['v'] + this['k'] - 0x1 & this['g']];
        }
        [jI(0x5f4)]() {
            return this['k'];
        }
        [jI(0x38d)](fE, fF) {
            if (fE < 0x0 || fE >= this['k'])
                throw new Error('Invalid\x20index');
            this['m'][this['v'] + fE & this['g']] = fF;
        }
        ['get'](fE) {
            if (fE < 0x0 || fE >= this['k'])
                throw new Error('Invalid\x20index');
            return this['m'][this['v'] + fE & this['g']];
        }
        [jI(0x3ee)](fE) {
            const k3 = jI;
            if (fE < 0x0 || fE >= this['k'])
                throw new Error('Invalid\x20index');
            if (fE <= this['k'] >> 0x1) {
                for (; fE > 0x0; )
                    this['set'](fE, this[k3(0x5c3)](fE - 0x1)),
                    fE--;
                this['popFront']();
            } else {
                for (fE++; fE < this['k']; )
                    this[k3(0x38d)](fE - 0x1, this[k3(0x5c3)](fE)),
                    fE++;
                this['popBack']();
            }
        }
        ['M']() {
            if (this['u'] >= 0x40000000)
                throw new Error('Capacity\x20too\x20big.');
            this['u'] = this['u'] << 0x1;
            const fE = this['m']
              , fF = new Array(this['u'])
              , fG = 0x0 | this['k']
              , fH = 0x0 | this['v'];
            for (let fI = 0x0; fI < fG; fI++)
                fF[fI] = fE[fH + fI & this['g']];
            for (let fJ = fG; fJ < this['u']; fJ++)
                fF[fJ] = void 0x0;
            this['v'] = 0x0,
            this['m'] = fF,
            this['g'] = this['u'] - 0x1;
        }
    }
    class aS {
        constructor() {
            this['a'] = [0x1],
            this['b'] = [0x1],
            this['order'] = 0x0;
        }
        ['linearGain0thOrder'](fE) {
            const k4 = jI;
            this['b'][0x0] = fE,
            this[k4(0x79e)] = 0x0;
        }
        [jI(0x544)](fE) {
            const k5 = jI
              , fF = 0x1 / Math[k5(0x5fa)](0.5 * fE)
              , fG = 0x1 + fF;
            this['a'][0x1] = (0x1 - fF) / fG,
            this['b'][0x1] = this['b'][0x0] = 0x1 / fG,
            this[k5(0x79e)] = 0x1;
        }
        ['lowPass1stOrderSimplified'](fE) {
            const k6 = jI
              , fF = 0x2 * Math['sin'](0.5 * fE);
            this['a'][0x1] = fF - 0x1,
            this['b'][0x0] = fF,
            this['b'][0x1] = 0x0,
            this[k6(0x79e)] = 0x1;
        }
        [jI(0x588)](fE) {
            const k7 = jI
              , fF = 0x1 / Math['tan'](0.5 * fE)
              , fG = 0x1 + fF;
            this['a'][0x1] = (0x1 - fF) / fG,
            this['b'][0x0] = fF / fG,
            this['b'][0x1] = -fF / fG,
            this[k7(0x79e)] = 0x1;
        }
        [jI(0x59d)](fE, fF) {
            const k8 = jI
              , fG = Math[k8(0x5fa)](0.5 * fE)
              , fH = Math['sqrt'](fF)
              , fI = (fG * fH - 0x1) / (fG * fH + 0x1);
            this['a'][0x1] = fI / 0x1,
            this['b'][0x0] = (0x1 + fI + fF * (0x1 - fI)) / 0x2,
            this['b'][0x1] = (0x1 + fI - fF * (0x1 - fI)) / 0x2,
            this['order'] = 0x1;
        }
        ['allPass1stOrderInvertPhaseAbove'](fE) {
            const fF = (Math['sin'](fE) - 0x1) / Math['cos'](fE);
            this['a'][0x1] = fF,
            this['b'][0x0] = fF,
            this['b'][0x1] = 0x1,
            this['order'] = 0x1;
        }
        ['allPass1stOrderFractionalDelay'](fE) {
            const k9 = jI
              , fF = (0x1 - fE) / (0x1 + fE);
            this['a'][0x1] = fF,
            this['b'][0x0] = fF,
            this['b'][0x1] = 0x1,
            this[k9(0x79e)] = 0x1;
        }
        ['lowPass2ndOrderButterworth'](fE, fF) {
            const ka = jI
              , fG = Math['sin'](fE) / (0x2 * fF)
              , fH = Math['cos'](fE)
              , fI = 0x1 + fG;
            this['a'][0x1] = -0x2 * fH / fI,
            this['a'][0x2] = (0x1 - fG) / fI,
            this['b'][0x2] = this['b'][0x0] = (0x1 - fH) / (0x2 * fI),
            this['b'][0x1] = (0x1 - fH) / fI,
            this[ka(0x79e)] = 0x2;
        }
        ['lowPass2ndOrderSimplified'](fE, fF) {
            const kb = jI
              , fG = 0x2 * Math[kb(0x51b)](fE / 0x2)
              , fH = 0x1 - 0x1 / (0x2 * fF)
              , fI = fH + fH / (0x1 - fG);
            this['a'][0x1] = 0x2 * fG + (fG - 0x1) * fG * fI - 0x2,
            this['a'][0x2] = (fG - 0x1) * (fG - fG * fI - 0x1),
            this['b'][0x0] = fG * fG,
            this['b'][0x1] = 0x0,
            this['b'][0x2] = 0x0,
            this[kb(0x79e)] = 0x2;
        }
        ['highPass2ndOrderButterworth'](fE, fF) {
            const kc = jI
              , fG = Math['sin'](fE) / (0x2 * fF)
              , fH = Math['cos'](fE)
              , fI = 0x1 + fG;
            this['a'][0x1] = -0x2 * fH / fI,
            this['a'][0x2] = (0x1 - fG) / fI,
            this['b'][0x2] = this['b'][0x0] = (0x1 + fH) / (0x2 * fI),
            this['b'][0x1] = -(0x1 + fH) / fI,
            this[kc(0x79e)] = 0x2;
        }
        ['highShelf2ndOrder'](fE, fF, fG) {
            const kd = jI
              , fH = Math['sqrt'](fF)
              , fI = Math['cos'](fE)
              , fJ = fH + 0x1
              , fK = fH - 0x1
              , fL = 0.5 * Math['sin'](fE) * Math[kd(0x74f)](fJ / fH * (0x1 / fG - 0x1) + 0x2)
              , fM = 0x2 * Math[kd(0x74f)](fH) * fL
              , fN = fJ - fK * fI + fM;
            this['a'][0x1] = 0x2 * (fK - fJ * fI) / fN,
            this['a'][0x2] = (fJ - fK * fI - fM) / fN,
            this['b'][0x0] = fH * (fJ + fK * fI + fM) / fN,
            this['b'][0x1] = -0x2 * fH * (fK + fJ * fI) / fN,
            this['b'][0x2] = fH * (fJ + fK * fI - fM) / fN,
            this['order'] = 0x2;
        }
        [jI(0x24d)](fE, fF, fG) {
            const ke = jI
              , fH = Math[ke(0x74f)](fF)
              , fI = fG * fE / (fH >= 0x1 ? fH : 0x1 / fH)
              , fJ = Math['tan'](0.5 * fI)
              , fK = 0x1 + fJ / fH;
            this['b'][0x0] = (0x1 + fJ * fH) / fK,
            this['b'][0x1] = this['a'][0x1] = -0x2 * Math['cos'](fE) / fK,
            this['b'][0x2] = (0x1 - fJ * fH) / fK,
            this['a'][0x2] = (0x1 - fJ / fH) / fK,
            this['order'] = 0x2;
        }
    }
    class aT {
        constructor() {
            this['real'] = 0x0,
            this['imag'] = 0x0,
            this['denom'] = 0x1;
        }
        [jI(0x17a)](fE, fF) {
            const kf = jI;
            this['analyzeComplex'](fE, Math['cos'](fF), Math[kf(0x51b)](fF));
        }
        ['analyzeComplex'](fE, fF, fG) {
            const fH = fE['a']
              , fI = fE['b']
              , fJ = fF
              , fK = -fG;
            let fL = fI[0x0] + fI[0x1] * fJ
              , fM = fI[0x1] * fK
              , fN = 0x1 + fH[0x1] * fJ
              , fO = fH[0x1] * fK
              , fP = fJ
              , fQ = fK;
            for (let fR = 0x2; fR <= fE['order']; fR++) {
                const fS = fP * fK + fQ * fJ;
                fP = fP * fJ - fQ * fK,
                fQ = fS,
                fL += fI[fR] * fP,
                fM += fI[fR] * fQ,
                fN += fH[fR] * fP,
                fO += fH[fR] * fQ;
            }
            this['denom'] = fN * fN + fO * fO,
            this['real'] = fL * fN + fM * fO,
            this['imag'] = fM * fN - fL * fO;
        }
        ['magnitude']() {
            const kg = jI;
            return Math['sqrt'](this['real'] * this[kg(0x431)] + this[kg(0x7b5)] * this['imag']) / this[kg(0x4ba)];
        }
        [jI(0x721)]() {
            const kh = jI;
            return Math[kh(0x7d8)](this['imag'], this['real']);
        }
    }
    class aU {
        constructor() {
            const ki = jI;
            this['a1'] = 0x0,
            this['a2'] = 0x0,
            this['b0'] = 0x1,
            this['b1'] = 0x0,
            this['b2'] = 0x0,
            this[ki(0x344)] = 0x0,
            this[ki(0x67b)] = 0x0,
            this['b0Delta'] = 0x0,
            this[ki(0x85e)] = 0x0,
            this[ki(0x33d)] = 0x0,
            this[ki(0x7f4)] = 0x0,
            this['output2'] = 0x0,
            this[ki(0x1d3)] = !0x1;
        }
        ['resetOutput']() {
            const kj = jI;
            this['output1'] = 0x0,
            this[kj(0x60d)] = 0x0;
        }
        ['loadCoefficientsWithGradient'](fE, fF, fG, fH) {
            const kk = jI;
            if (0x2 != fE['order'] || 0x2 != fF[kk(0x79e)])
                throw new Error();
            this['a1'] = fE['a'][0x1],
            this['a2'] = fE['a'][0x2],
            this['b0'] = fE['b'][0x0],
            this['b1'] = fE['b'][0x1],
            this['b2'] = fE['b'][0x2],
            this[kk(0x344)] = (fF['a'][0x1] - fE['a'][0x1]) * fG,
            this['a2Delta'] = (fF['a'][0x2] - fE['a'][0x2]) * fG,
            fH ? (this[kk(0x348)] = Math[kk(0x3b6)](fF['b'][0x0] / fE['b'][0x0], fG),
            this['b1Delta'] = Math['pow'](fF['b'][0x1] / fE['b'][0x1], fG),
            this['b2Delta'] = Math['pow'](fF['b'][0x2] / fE['b'][0x2], fG)) : (this[kk(0x348)] = (fF['b'][0x0] - fE['b'][0x0]) * fG,
            this['b1Delta'] = (fF['b'][0x1] - fE['b'][0x1]) * fG,
            this[kk(0x33d)] = (fF['b'][0x2] - fE['b'][0x2]) * fG),
            this[kk(0x1d3)] = fH;
        }
    }
    function aV(fE) {
        const kl = jI;
        return 0x2 * Math[kl(0x1c6)](0.5 * fE);
    }
    const aW = 1e-24;
    function aX(fE, fF, fG) {
        return fG <= (fF -= 0x1) ? fG >= fE ? fG : fE : fF;
    }
    function aY(fE, fF, fG) {
        if (fE <= fG && fG <= fF)
            return fG;
        throw new Error('Value\x20' + fG + '\x20not\x20in\x20range\x20[' + fE + ',\x20' + fF + ']');
    }
    const aZ = [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x2d, 0x5f]
      , b0 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x3e, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x0, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0];
    class b1 {
        constructor(fE, fF, fG) {
            const km = jI;
            this['S'] = [],
            this['F'] = 0x0;
            for (let fH = fF; fH < fG; fH++) {
                const fI = b0[fE[km(0x5c8)](fH)];
                this['S'][km(0x557)](fI >> 0x5 & 0x1),
                this['S'][km(0x557)](fI >> 0x4 & 0x1),
                this['S']['push'](fI >> 0x3 & 0x1),
                this['S'][km(0x557)](fI >> 0x2 & 0x1),
                this['S']['push'](fI >> 0x1 & 0x1),
                this['S']['push'](0x1 & fI);
            }
        }
        ['read'](fE) {
            let fF = 0x0;
            for (; fE > 0x0; )
                fF <<= 0x1,
                fF += this['S'][this['F']++],
                fE--;
            return fF;
        }
        ['readLongTail'](fE, fF) {
            let fG = fE
              , fH = fF;
            for (; this['S'][this['F']++]; )
                fG += 0x1 << fH,
                fH++;
            for (; fH > 0x0; )
                fH--,
                this['S'][this['F']++] && (fG += 0x1 << fH);
            return fG;
        }
        [jI(0x190)]() {
            const kn = jI;
            return this[kn(0x2f0)](0x1, 0x4);
        }
        ['readLegacyPartDuration']() {
            return this['readLongTail'](0x1, 0x2);
        }
        ['readPinCount']() {
            const ko = jI;
            return this[ko(0x2f0)](0x1, 0x0);
        }
        [jI(0x30f)]() {
            const kp = jI;
            return this[kp(0x55c)](0x1) ? -this['readLongTail'](0x1, 0x3) : this['readLongTail'](0x1, 0x3);
        }
    }
    class b2 {
        constructor() {
            this['P'] = 0x0,
            this['S'] = [];
        }
        ['clear']() {
            this['P'] = 0x0;
        }
        ['write'](fE, fF) {
            for (fE--; fE >= 0x0; )
                this['S'][this['P']++] = fF >>> fE & 0x1,
                fE--;
        }
        ['writeLongTail'](fE, fF, fG) {
            const kq = jI;
            if (fG < fE)
                throw new Error(kq(0x3e4));
            fG -= fE;
            let fH = fF;
            for (; fG >= 0x1 << fH; )
                this['S'][this['P']++] = 0x1,
                fG -= 0x1 << fH,
                fH++;
            for (this['S'][this['P']++] = 0x0; fH > 0x0; )
                fH--,
                this['S'][this['P']++] = fG >>> fH & 0x1;
        }
        ['writePartDuration'](fE) {
            const kr = jI;
            this[kr(0x385)](0x1, 0x4, fE);
        }
        [jI(0x660)](fE) {
            const ks = jI;
            this[ks(0x385)](0x1, 0x0, fE);
        }
        [jI(0x7d0)](fE) {
            const kt = jI;
            fE < 0x0 ? (this[kt(0x54b)](0x1, 0x1),
            this['writeLongTail'](0x1, 0x3, -fE)) : (this[kt(0x54b)](0x1, 0x0),
            this['writeLongTail'](0x1, 0x3, fE));
        }
        [jI(0x7dd)](fE) {
            for (let fF = 0x0; fF < fE['P']; fF++)
                this['S'][this['P']++] = fE['S'][fF];
        }
        ['encodeBase64'](fE) {
            const ku = jI;
            for (let fF = 0x0; fF < this['P']; fF += 0x6) {
                const fG = this['S'][fF] << 0x5 | this['S'][fF + 0x1] << 0x4 | this['S'][fF + 0x2] << 0x3 | this['S'][fF + 0x3] << 0x2 | this['S'][fF + 0x4] << 0x1 | this['S'][fF + 0x5];
                fE[ku(0x557)](aZ[fG]);
            }
            return fE;
        }
        [jI(0x30d)]() {
            return Math['ceil'](this['P'] / 0x6);
        }
    }
    function b3(fE, fF, fG) {
        return {
            'interval': fE,
            'time': fF,
            'size': fG
        };
    }
    class b4 {
        constructor(fE, fF, fG, fH, fI=!0x1) {
            const kv = jI;
            this['pitches'] = [fE],
            this[kv(0x2a6)] = [b3(0x0, 0x0, fH), b3(0x0, fG - fF, fI ? 0x0 : fH)],
            this['start'] = fF,
            this[kv(0x63e)] = fG,
            this['continuesLastPattern'] = !0x1;
        }
        ['pickMainInterval']() {
            const kw = jI;
            let fE = 0x0
              , fF = 0x0;
            for (let fG = 0x1; fG < this['pins'][kw(0x57c)]; fG++) {
                const fH = this['pins'][fG - 0x1]
                  , fI = this['pins'][fG];
                if (fH['interval'] == fI['interval']) {
                    const fJ = fI['time'] - fH['time'];
                    fE < fJ && (fE = fJ,
                    fF = fH[kw(0x24b)]);
                }
            }
            if (0x0 == fE) {
                let fK = 0x0;
                for (let fL = 0x0; fL < this['pins'][kw(0x57c)]; fL++) {
                    const fM = this[kw(0x2a6)][fL];
                    fK < fM['size'] && (fK = fM[kw(0x81f)],
                    fF = fM['interval']);
                }
            }
            return fF;
        }
        [jI(0x1b6)]() {
            const kx = jI
              , fE = new b4(-0x1,this[kx(0x1b7)],this['end'],a1[kx(0x483)]);
            fE[kx(0x68d)] = this[kx(0x68d)]['concat'](),
            fE['pins'] = [];
            for (const fF of this['pins'])
                fE[kx(0x2a6)]['push'](b3(fF['interval'], fF['time'], fF['size']));
            return fE['continuesLastPattern'] = this['continuesLastPattern'],
            fE;
        }
        ['getEndPinIndex'](fE) {
            const ky = jI;
            let fF;
            for (fF = 0x1; fF < this['pins']['length'] - 0x1 && !(this['pins'][fF][ky(0x2e3)] + this['start'] > fE); fF++)
                ;
            return fF;
        }
    }
    class b5 {
        constructor() {
            const kz = jI;
            this[kz(0x58c)] = [],
            this['instruments'] = [0x0];
        }
        ['cloneNotes']() {
            const kA = jI
              , fE = [];
            for (const fF of this[kA(0x58c)])
                fE['push'](fF['clone']());
            return fE;
        }
        [jI(0x6d3)]() {
            const kB = jI;
            this['notes']['length'] = 0x0,
            this['instruments'][0x0] = 0x0,
            this[kB(0x84c)]['length'] = 0x1;
        }
        ['toJsonObject'](fE) {
            const kC = jI
              , fF = [];
            for (const fH of this[kC(0x58c)]) {
                const fI = [];
                for (const fK of fH[kC(0x2a6)])
                    fI[kC(0x557)]({
                        'tick': (fK[kC(0x2e3)] + fH[kC(0x1b7)]) * a1[kC(0x307)][fE['rhythm']][kC(0x4b7)] / a1['partsPerBeat'],
                        'pitchBend': fK['interval'],
                        'volume': Math['round'](0x64 * fK[kC(0x81f)] / 0x3)
                    });
                const fJ = {
                    'pitches': fH['pitches'],
                    'points': fI
                };
                0x0 == fH[kC(0x1b7)] && (fJ['continuesLastPattern'] = fH['continuesLastPattern']),
                fF[kC(0x557)](fJ);
            }
            const fG = {
                'notes': fF
            };
            return fE[kC(0x776)] && (fG['instruments'] = this['instruments'][kC(0x422)](fL => fL + 0x1)),
            fG;
        }
        ['fromJsonObject'](fE, fF, fG, fH, fI) {
            const kD = jI;
            if (fF['patternInstruments']) {
                if (Array['isArray'](fE[kD(0x84c)])) {
                    const fJ = fE[kD(0x84c)]
                      , fK = aX(a1['instrumentCountMin'], fF['getMaxInstrumentsPerPatternForChannel'](fG) + 0x1, fJ[kD(0x57c)]);
                    for (let fL = 0x0; fL < fK; fL++)
                        this[kD(0x84c)][fL] = aX(0x0, fG[kD(0x84c)]['length'], (0x0 | fJ[fL]) - 0x1);
                    this[kD(0x84c)]['length'] = fK;
                } else
                    this['instruments'][0x0] = aX(0x0, fG[kD(0x84c)]['length'], (0x0 | fE[kD(0x299)]) - 0x1),
                    this[kD(0x84c)]['length'] = 0x1;
            }
            if (fE['notes'] && fE['notes'][kD(0x57c)] > 0x0) {
                const fM = Math['min'](fF['beatsPerBar'] * a1[kD(0x58d)], fE[kD(0x58c)][kD(0x57c)] >>> 0x0);
                let fN = 0x0;
                for (let fO = 0x0; fO < fE['notes']['length'] && !(fO >= fM); fO++) {
                    const fP = fE['notes'][fO];
                    if (!(fP && fP[kD(0x68d)] && fP[kD(0x68d)][kD(0x57c)] >= 0x1 && fP[kD(0x762)] && fP[kD(0x762)][kD(0x57c)] >= 0x2))
                        continue;
                    const fQ = new b4(0x0,0x0,0x0,0x0);
                    fQ[kD(0x68d)] = [],
                    fQ['pins'] = [];
                    for (let fW = 0x0; fW < fP[kD(0x68d)][kD(0x57c)]; fW++) {
                        const fX = 0x0 | fP['pitches'][fW];
                        if (-0x1 == fQ['pitches'][kD(0x2fb)](fX) && (fQ[kD(0x68d)]['push'](fX),
                        fQ[kD(0x68d)][kD(0x57c)] >= a1[kD(0x5d4)]))
                            break;
                    }
                    if (fQ[kD(0x68d)][kD(0x57c)] < 0x1)
                        continue;
                    let fR = fN
                      , fS = 0x0;
                    for (let fY = 0x0; fY < fP['points'][kD(0x57c)]; fY++) {
                        const fZ = fP[kD(0x762)][fY];
                        if (null == fZ || null == fZ[kD(0x493)])
                            continue;
                        const g0 = null == fZ[kD(0x729)] ? 0x0 : 0x0 | fZ['pitchBend']
                          , g1 = Math['round'](+fZ[kD(0x493)] * a1[kD(0x58d)] / fH)
                          , g2 = null == fZ[kD(0x7c6)] ? 0x3 : Math['max'](0x0, Math['min'](0x3, Math['round'](0x3 * (0x0 | fZ['volume']) / 0x64)));
                        if (!(g1 > fF[kD(0x6c9)] * a1['partsPerBeat'])) {
                            if (0x0 == fQ['pins']['length']) {
                                if (g1 < fR)
                                    continue;
                                fQ['start'] = g1,
                                fS = g0;
                            } else {
                                if (g1 <= fR)
                                    continue;
                            }
                            fR = g1,
                            fQ[kD(0x2a6)]['push'](b3(g0 - fS, g1 - fQ['start'], g2));
                        }
                    }
                    if (fQ[kD(0x2a6)][kD(0x57c)] < 0x2)
                        continue;
                    fQ['end'] = fQ[kD(0x2a6)][fQ[kD(0x2a6)]['length'] - 0x1][kD(0x2e3)] + fQ['start'];
                    const fT = fI ? a1[kD(0x71e)] - 0x1 : a1['maxPitch'];
                    let fU = fT
                      , fV = 0x0;
                    for (let g3 = 0x0; g3 < fQ['pitches'][kD(0x57c)]; g3++)
                        fQ['pitches'][g3] += fS,
                        (fQ['pitches'][g3] < 0x0 || fQ[kD(0x68d)][g3] > fT) && (fQ[kD(0x68d)][kD(0x712)](g3, 0x1),
                        g3--),
                        fQ['pitches'][g3] < fU && (fU = fQ[kD(0x68d)][g3]),
                        fQ[kD(0x68d)][g3] > fV && (fV = fQ['pitches'][g3]);
                    if (!(fQ[kD(0x68d)]['length'] < 0x1)) {
                        for (let g4 = 0x0; g4 < fQ[kD(0x2a6)]['length']; g4++) {
                            const g5 = fQ['pins'][g4];
                            g5['interval'] + fU < 0x0 && (g5['interval'] = -fU),
                            g5['interval'] + fV > fT && (g5['interval'] = fT - fV),
                            g4 >= 0x2 && g5[kD(0x24b)] == fQ[kD(0x2a6)][g4 - 0x1][kD(0x24b)] && g5[kD(0x24b)] == fQ[kD(0x2a6)][g4 - 0x2][kD(0x24b)] && g5['size'] == fQ[kD(0x2a6)][g4 - 0x1][kD(0x81f)] && g5[kD(0x81f)] == fQ[kD(0x2a6)][g4 - 0x2]['size'] && (fQ['pins'][kD(0x712)](g4 - 0x1, 0x1),
                            g4--);
                        }
                        0x0 == fQ['start'] ? fQ['continuesLastPattern'] = !0x0 === fP[kD(0x790)] : fQ[kD(0x790)] = !0x1,
                        this['notes'][kD(0x557)](fQ),
                        fN = fQ['end'];
                    }
                }
            }
        }
    }
    class b6 {
        constructor(fE) {
            const kE = jI;
            this[kE(0x353)] = 0x0,
            this[kE(0x328)] = 0x0,
            this['reset'](fE);
        }
        ['reset'](fE) {
            const kF = jI;
            this[kF(0x353)] = 0x0,
            this['amplitude'] = fE <= 0x1 ? a1[kF(0x826)] : 0x0;
        }
    }
    class b7 {
        constructor(fE) {
            const kG = jI;
            this[kG(0x5ee)] = [],
            this['hash'] = -0x1,
            this[kG(0x6d3)](fE);
        }
        ['reset'](fE) {
            const kH = jI;
            for (let fF = 0x0; fF < a1[kH(0x6e7)]; fF++)
                if (fE)
                    this['spectrum'][fF] = Math[kH(0x874)](a1[kH(0x17f)] * (0x1 / Math['sqrt'](0x1 + fF / 0x3)));
                else {
                    const fG = 0x0 == fF || 0x7 == fF || 0xb == fF || 0xe == fF || 0x10 == fF || 0x12 == fF || 0x15 == fF || 0x17 == fF || fF >= 0x19;
                    this[kH(0x5ee)][fF] = fG ? Math['max'](0x0, Math[kH(0x874)](a1['spectrumMax'] * (0x1 - fF / 0x1e))) : 0x0;
                }
            this['markCustomWaveDirty']();
        }
        [jI(0x77e)]() {
            const kI = jI
              , fE = bp['fittingPowerOfTwo'](a1['spectrumMax'] + 0x2) - 0x1;
            let fF = 0x0;
            for (const fG of this['spectrum'])
                fF = fF * fE + fG >>> 0x0;
            this[kI(0x169)] = fF;
        }
    }
    class b8 {
        constructor() {
            const kJ = jI;
            this[kJ(0x522)] = null,
            this['I'] = -0x1;
        }
        [jI(0x183)](fE, fF) {
            const kK = jI;
            if (this['I'] == fE['hash'])
                return this[kK(0x522)];
            this['I'] = fE['hash'];
            const fG = a1['spectrumNoiseLength'];
            null != this[kK(0x522)] && this['wave'][kK(0x57c)] == fG + 0x1 || (this[kK(0x522)] = new Float32Array(fG + 0x1));
            const fH = this['wave'];
            for (let fL = 0x0; fL < fG; fL++)
                fH[fL] = 0x0;
            const fI = [0x0, 0x1 / 0x7, Math['log2'](0x5 / 0x4), 0x3 / 0x7, Math['log2'](1.5), 0x5 / 0x7, 0x6 / 0x7];
            function fJ(fM) {
                return fF + Math['floor'](fM / a1['spectrumControlPointsPerOctave']) + fI[(fM + a1['spectrumControlPointsPerOctave']) % a1['spectrumControlPointsPerOctave']];
            }
            let fK = 0x1;
            for (let fM = 0x0; fM < a1['spectrumControlPoints'] + 0x1; fM++) {
                const fN = fM <= 0x0 ? 0x0 : fE['spectrum'][fM - 0x1]
                  , fO = fM >= a1['spectrumControlPoints'] ? fE['spectrum'][a1[kK(0x6e7)] - 0x1] : fE[kK(0x5ee)][fM]
                  , fP = fJ(fM - 0x1);
                let fQ = fJ(fM);
                fM >= a1[kK(0x6e7)] && (fQ = 0xe + 0.25 * (fQ - 0xe)),
                0x0 == fN && 0x0 == fO || (fK += 0.02 * a6(fH, fG, fP, fQ, fN / a1[kK(0x17f)], fO / a1[kK(0x17f)], -0.5));
            }
            return fE['spectrum'][a1['spectrumControlPoints'] - 0x1] > 0x0 && (fK += 0.02 * a6(fH, fG, 0xe + 0.25 * (fJ(a1[kK(0x6e7)]) - 0xe), 0xe, fE[kK(0x5ee)][a1['spectrumControlPoints'] - 0x1] / a1[kK(0x17f)], 0x0, -0.5)),
            aQ(fH, fG),
            aO(fH, 0x5 / (Math[kK(0x74f)](fG) * Math['pow'](fK, 0.75))),
            fH[fG] = fH[0x0],
            fH;
        }
    }
    class b9 {
        constructor() {
            const kL = jI;
            this['harmonics'] = [],
            this['hash'] = -0x1,
            this[kL(0x6d3)]();
        }
        ['reset']() {
            const kM = jI;
            for (let fE = 0x0; fE < a1[kM(0x234)]; fE++)
                this['harmonics'][fE] = 0x0;
            this[kM(0x4bd)][0x0] = a1[kM(0x51f)],
            this[kM(0x4bd)][0x3] = a1[kM(0x51f)],
            this[kM(0x4bd)][0x6] = a1[kM(0x51f)],
            this['markCustomWaveDirty']();
        }
        ['markCustomWaveDirty']() {
            const kN = jI
              , fE = bp[kN(0x727)](a1['harmonicsMax'] + 0x2) - 0x1;
            let fF = 0x0;
            for (const fG of this['harmonics'])
                fF = fF * fE + fG >>> 0x0;
            this['hash'] = fF;
        }
    }
    class ba {
        constructor() {
            const kO = jI;
            this[kO(0x522)] = null,
            this['I'] = -0x1;
        }
        ['getCustomWave'](fE, fF) {
            const kP = jI;
            if (this['I'] == fE[kP(0x169)] && this['q'] == fF)
                return this[kP(0x522)];
            this['I'] = fE['hash'],
            this['q'] = fF;
            const fG = 0x7 == fF ? a1[kP(0x74e)] : a1[kP(0x6b8)]
              , fH = a1[kP(0x3ba)]
              , fI = a5(0x0, null, null);
            null != this[kP(0x522)] && this[kP(0x522)]['length'] == fH + 0x1 || (this['wave'] = new Float32Array(fH + 0x1));
            const fJ = this[kP(0x522)];
            for (let fM = 0x0; fM < fH; fM++)
                fJ[fM] = 0x0;
            let fK = 0x1;
            for (let fN = 0x0; fN < fG; fN++) {
                const fO = fN + 0x1;
                let fP = fN < a1['harmonicsControlPoints'] ? fE[kP(0x4bd)][fN] : fE[kP(0x4bd)][a1['harmonicsControlPoints'] - 0x1];
                fN >= a1['harmonicsControlPoints'] && (fP *= 0x1 - (fN - a1[kP(0x234)]) / (fG - a1['harmonicsControlPoints']));
                const fQ = fP / a1[kP(0x51f)];
                let fR = Math[kP(0x3b6)](0x2, fP - a1[kP(0x51f)] + 0x1) * Math['sqrt'](fQ);
                fN < a1['harmonicsControlPoints'] && (fK += fR),
                fR *= Math['pow'](fO, -0.25),
                fR *= fI[fN + 0x24d],
                fJ[fH - fO] = fR;
            }
            aQ(fJ, fH);
            const fL = 0x1 / Math['pow'](fK, 0.7);
            for (let fS = 0x0; fS < fJ['length']; fS++)
                fJ[fS] *= fL;
            return a3(fJ),
            fJ[fH] = fJ[0x0],
            fJ;
        }
    }
    class bb {
        constructor() {
            const kQ = jI;
            this['freq'] = 0x0,
            this['gain'] = a1[kQ(0x749)],
            this[kQ(0x7d5)] = 0x2;
        }
        ['set'](fE, fF) {
            const kR = jI;
            this['freq'] = fE,
            this[kR(0x4c8)] = fF;
        }
        [jI(0x227)]() {
            const kS = jI;
            return bb[kS(0x880)](this[kS(0x395)]);
        }
        static[jI(0x880)](fE) {
            const kT = jI;
            return a1[kT(0x5aa)] * Math[kT(0x3b6)](0x2, (fE - a1['filterFreqReferenceSetting']) * a1['filterFreqStep']);
        }
        static['getSettingValueFromHz'](fE) {
            const kU = jI;
            return Math[kU(0x253)](fE / a1[kU(0x5aa)]) / a1['filterFreqStep'] + a1[kU(0x6f3)];
        }
        static[jI(0x518)](fE) {
            const kV = jI;
            return Math['max'](0x0, Math['min'](a1[kV(0x564)] - 0x1, Math[kV(0x874)](bb[kV(0x3d0)](fE))));
        }
        [jI(0x3f2)](fE=0x1) {
            const kW = jI
              , fF = (this[kW(0x4c8)] - a1[kW(0x749)]) * a1['filterGainStep']
              , fG = 0x2 == this[kW(0x7d5)] ? 0x0 : -0.5
              , fH = fG + (fF - fG) * fE;
            return Math['pow'](0x2, fH);
        }
        static['getRoundedSettingValueFromLinearGain'](fE) {
            return Math['max'](0x0, Math['min'](a1['filterGainRange'] - 0x1, Math['round'](Math['log2'](fE) / a1['filterGainStep'] + a1['filterGainCenter'])));
        }
        ['toCoefficients'](fE, fF, fG=0x1, fH=0x1) {
            const kX = jI
              , fI = 0x2 * Math['PI'] * Math[kX(0x2f6)](a1[kX(0x22e)], Math['min'](a1[kX(0x32d)], fG * this[kX(0x227)]())) / fF
              , fJ = this['getLinearGain'](fH);
            switch (this[kX(0x7d5)]) {
            case 0x0:
                fE['lowPass2ndOrderButterworth'](fI, fJ);
                break;
            case 0x1:
                fE['highPass2ndOrderButterworth'](fI, fJ);
                break;
            case 0x2:
                fE[kX(0x24d)](fI, fJ, 0x1);
                break;
            default:
                throw new Error();
            }
        }
        [jI(0x3fa)]() {
            const kY = jI
              , fE = (this['freq'] - a1[kY(0x6f3)]) * a1[kY(0x56f)]
              , fF = (this[kY(0x4c8)] - a1[kY(0x749)]) * a1[kY(0x233)];
            switch (this['type']) {
            case 0x0:
                const fG = Math[kY(0x3b6)](0x2, fE) * a1['filterFreqReferenceHz'] / 0x1f40
                  , fH = (Math[kY(0x74f)](0x1 + 0x4 * fG) - 0x1) / 0x2
                  , fI = Math[kY(0x253)](fH);
                return Math['pow'](0.5, 0.2 * Math[kY(0x2f6)](0x0, fF + 0x1) + Math[kY(0x4c5)](0x0, Math[kY(0x2f6)](-0x3, 0.595 * fI + 0.35 * Math[kY(0x4c5)](0x0, fF + 0x1))));
            case 0x1:
                return Math['pow'](0.5, 0.125 * Math[kY(0x2f6)](0x0, fF + 0x1) + Math[kY(0x4c5)](0x0, 0.3 * (-fE - Math['log2'](a1['filterFreqReferenceHz'] / 0x7d)) + 0.2 * Math['min'](0x0, fF + 0x1)));
            case 0x2:
                const fJ = fE + Math['log2'](a1['filterFreqReferenceHz'] / 0x7d0)
                  , fK = Math[kY(0x3b6)](0x1 / (0x1 + Math['pow'](fJ / 0x3, 0x2)), 0x2);
                return Math[kY(0x3b6)](0.5, 0.125 * Math[kY(0x2f6)](0x0, fF) + 0.1 * fK * Math['min'](0x0, fF));
            default:
                throw new Error();
            }
        }
    }
    class bc {
        constructor() {
            const kZ = jI;
            this['controlPoints'] = [],
            this[kZ(0x559)] = 0x0,
            this[kZ(0x6d3)]();
        }
        ['reset']() {
            this['controlPointCount'] = 0x0;
        }
        ['addPoint'](fE, fF, fG) {
            const l0 = jI;
            let fH;
            this['controlPoints'][l0(0x57c)] <= this[l0(0x559)] ? (fH = new bb(),
            this['controlPoints'][this['controlPointCount']] = fH) : fH = this['controlPoints'][this[l0(0x559)]],
            this['controlPointCount']++,
            fH['type'] = fE,
            fH['set'](fF, fG);
        }
        [jI(0x87a)]() {
            const l1 = jI
              , fE = [];
            for (let fF = 0x0; fF < this['controlPointCount']; fF++) {
                const fG = this[l1(0x47a)][fF];
                fE[l1(0x557)]({
                    'type': a1[l1(0x5f3)][fG['type']],
                    'cutoffHz': Math['round'](0x64 * fG['getHz']()) / 0x64,
                    'linearGain': Math['round'](0x2710 * fG[l1(0x3f2)]()) / 0x2710
                });
            }
            return fE;
        }
        [jI(0x78a)](fE) {
            const l2 = jI;
            if (this[l2(0x47a)]['length'] = 0x0,
            fE)
                for (const fF of fE) {
                    const fG = new bb();
                    fG[l2(0x7d5)] = a1['filterTypeNames'][l2(0x2fb)](fF[l2(0x7d5)]),
                    -0x1 == fG['type'] && (fG[l2(0x7d5)] = 0x2),
                    null != fF['cutoffHz'] ? fG[l2(0x395)] = bb['getRoundedSettingValueFromHz'](fF[l2(0x74a)]) : fG['freq'] = 0x0,
                    null != fF['linearGain'] ? fG['gain'] = bb['getRoundedSettingValueFromLinearGain'](fF[l2(0x316)]) : fG['gain'] = a1['filterGainCenter'],
                    this[l2(0x47a)]['push'](fG);
                }
            this[l2(0x559)] = this[l2(0x47a)][l2(0x57c)];
        }
        [jI(0x4aa)](fE, fF, fG) {
            const l3 = jI;
            this[l3(0x6d3)]();
            const fH = 0x2 * Math['asin'](0.475)
              , fI = fF > 0x1
              , fJ = 0x0 == fF
              , fK = 0xa == fE
              , fL = 0x3 == fG[l3(0x7d5)] || 0x4 == fG[l3(0x7d5)] || 0x8 == fG[l3(0x7d5)] || 0x0 == fG['type']
              , fM = 0xbb80
              , fN = 0x1f40 * Math['pow'](0x2, 0.5 * (fE - 0xa))
              , fO = Math['min'](fH, 0x2 * Math['PI'] * fN / fM);
            if (0x1 == fG[l3(0x7d5)] && !fI && fK)
                ;
            else {
                if (fJ) {
                    const fP = 3.5
                      , fQ = fO * Math[l3(0x3b6)](0x2, fP)
                      , fR = fM * (fQ / (0x1 + fQ / Math['PI'])) / (0x2 * Math['PI'])
                      , fS = bb['getRoundedSettingValueFromHz'](fR)
                      , fT = bb[l3(0x880)](fS)
                      , fU = 0x2 * Math['PI'] * fT / fM
                      , fV = new aS();
                    fV[l3(0x3e6)](fO);
                    const fW = new aT();
                    fW['analyze'](fV, fU);
                    const fX = fW[l3(0x7f8)]();
                    let fY = Math['log2'](fX);
                    fY = 0.82 * (fY + fP) - fP,
                    fL && (fY = Math[l3(0x4c5)](fY, -0x1));
                    const fZ = Math['pow'](0x2, fY)
                      , g0 = bb['getRoundedSettingValueFromLinearGain'](fZ);
                    this['addPoint'](0x0, fS, g0);
                } else {
                    const g1 = 0.5 / (0x1 - 0.95 * Math['sqrt'](Math[l3(0x2f6)](0x0, fF - 0x1) / 0x6))
                      , g2 = 0.5 / g1
                      , g3 = fO + (fO * (fO / (0x2 * Math['PI'] * 0x1f40 / fM) * Math['pow'](g2, 0.9) + 0x1) - fO) * g2;
                    let g4;
                    g4 = fL ? fM * Math['min'](g3, fO * Math['pow'](0x2, 0.25)) / (0x2 * Math['PI']) : fM * g3 / (0x2 * Math['PI']);
                    const g5 = bb[l3(0x518)](g4);
                    let g6;
                    if (fL)
                        g6 = g1;
                    else {
                        const g8 = new aS();
                        g8['lowPass2ndOrderSimplified'](fO, g1);
                        const g9 = new aT();
                        g9['analyze'](g8, g3),
                        g6 = g9[l3(0x7f8)]();
                    }
                    fI || (g6 = Math[l3(0x4c5)](g6, Math['sqrt'](0.5)));
                    const g7 = bb['getRoundedSettingValueFromLinearGain'](g6);
                    this[l3(0x4cb)](0x0, g5, g7);
                }
            }
        }
    }
    class bd {
        constructor() {
            const l4 = jI;
            this[l4(0x46a)] = 0x0,
            this[l4(0x2c5)] = 0x0,
            this['envelope'] = 0x0,
            this[l4(0x6d3)]();
        }
        ['reset']() {
            const l5 = jI;
            this['target'] = 0x0,
            this[l5(0x2c5)] = 0x0,
            this[l5(0x1cf)] = 0x0;
        }
        ['toJsonObject']() {
            const l6 = jI
              , fE = {
                'target': a1[l6(0x45f)][this['target']]['name'],
                'envelope': a1[l6(0x6ac)][this['envelope']][l6(0x340)]
            };
            return a1['instrumentAutomationTargets'][this['target']][l6(0x64b)] > 0x1 && (fE[l6(0x2c5)] = this[l6(0x2c5)]),
            fE;
        }
        [jI(0x78a)](fE) {
            const l7 = jI;
            this['reset']();
            let fF = a1[l7(0x45f)][l7(0x64a)][fE['target']];
            null == fF && (fF = a1[l7(0x45f)]['dictionary']['noteVolume']),
            this['target'] = fF['index'];
            let fG = a1[l7(0x6ac)]['dictionary'][fE['envelope']];
            null == fG && (fG = a1['envelopes'][l7(0x64a)]['none']),
            this[l7(0x1cf)] = fG['index'],
            null != fE['index'] ? this[l7(0x2c5)] = aX(0x0, a1[l7(0x45f)][this['target']][l7(0x64b)], 0x0 | fE[l7(0x2c5)]) : this['index'] = 0x0;
        }
    }
    class bf {
        constructor(fE) {
            const l8 = jI;
            this[l8(0x7d5)] = 0x0,
            this[l8(0x760)] = 0x0,
            this[l8(0x556)] = 0x2,
            this[l8(0x744)] = 0x1,
            this[l8(0x7c3)] = new bc(),
            this['noteFilter'] = new bc(),
            this['envelopes'] = [],
            this[l8(0x863)] = 0x0,
            this[l8(0x43f)] = 0x0,
            this[l8(0x84b)] = a1['fadeOutNeutral'],
            this['transition'] = a1[l8(0x87b)]['dictionary']['normal'][l8(0x2c5)],
            this['pitchShift'] = 0x0,
            this[l8(0x84d)] = 0x0,
            this['vibrato'] = 0x0,
            this[l8(0x5d2)] = 0x0,
            this[l8(0x5a9)] = 0x0,
            this[l8(0x3e3)] = 0x1,
            this[l8(0x7c6)] = 0x0,
            this[l8(0x19c)] = a1[l8(0x374)],
            this['pulseWidth'] = a1['pulseWidthRange'] - 0x1,
            this[l8(0x555)] = a1['supersawDynamismMax'],
            this['supersawSpread'] = Math['ceil'](a1['supersawSpreadMax'] / 0x2),
            this[l8(0x4de)] = 0x0,
            this['stringSustain'] = 0xa,
            this['stringSustainType'] = 0x1,
            this['distortion'] = 0x0,
            this['bitcrusherFreq'] = 0x0,
            this[l8(0x41e)] = 0x0,
            this[l8(0x215)] = 0x0,
            this['reverb'] = 0x0,
            this['echoSustain'] = 0x0,
            this[l8(0x6e6)] = 0x0,
            this['algorithm'] = 0x0,
            this['feedbackType'] = 0x0,
            this[l8(0x31f)] = 0x0,
            this[l8(0x350)] = [],
            this['harmonicsWave'] = new b9(),
            this['drumsetEnvelopes'] = [],
            this['drumsetSpectrumWaves'] = [],
            this['spectrumWave'] = new b7(fE);
            for (let fF = 0x0; fF < a1['operatorCount']; fF++)
                this[l8(0x350)][fF] = new b6(fF);
            for (let fG = 0x0; fG < a1[l8(0x71e)]; fG++)
                this['drumsetEnvelopes'][fG] = a1['envelopes']['dictionary']['twang\x202']['index'],
                this['drumsetSpectrumWaves'][fG] = new b7(!0x0);
        }
        ['setTypeAndReset'](fE, fF) {
            const l9 = jI;
            switch (this[l9(0x7d5)] = fE,
            this['preset'] = fE,
            this['volume'] = 0x0,
            this['effects'] = 0x0,
            this[l9(0x215)] = a1['chorusRange'] - 0x1,
            this['reverb'] = 0x2,
            this['echoSustain'] = Math['floor'](0.5 * (a1['echoSustainRange'] - 0x1)),
            this['echoDelay'] = Math['floor'](0.5 * (a1['echoDelayRange'] - 0x1)),
            this[l9(0x7c3)][l9(0x6d3)](),
            this[l9(0x823)]['reset'](),
            this[l9(0x1ce)] = Math['floor'](0.75 * (a1[l9(0x2fd)] - 0x1)),
            this['bitcrusherFreq'] = Math[l9(0x4fb)](0.5 * (a1['bitcrusherFreqRange'] - 0x1)),
            this['bitcrusherQuantization'] = Math['floor'](0.5 * (a1['bitcrusherQuantizationRange'] - 0x1)),
            this['pan'] = a1[l9(0x374)],
            this[l9(0x66a)] = a1['pitchShiftCenter'],
            this[l9(0x84d)] = a1[l9(0x439)],
            this['vibrato'] = 0x0,
            this['unison'] = 0x0,
            this['stringSustain'] = 0xa,
            this[l9(0x71d)] = a1['enableAcousticSustain'] ? 0x1 : 0x0,
            this['fadeIn'] = 0x0,
            this[l9(0x84b)] = a1[l9(0x645)],
            this[l9(0x83f)] = a1[l9(0x87b)]['dictionary'][l9(0x72b)][l9(0x2c5)],
            this['envelopeCount'] = 0x0,
            fE) {
            case 0x0:
                this[l9(0x556)] = 0x2,
                this[l9(0x3e3)] = a1[l9(0x80a)]['dictionary'][l9(0x4f4)][l9(0x2c5)];
                break;
            case 0x1:
                this['chord'] = a1['chords'][l9(0x64a)]['custom\x20interval'][l9(0x2c5)],
                this[l9(0x803)] = 0x0,
                this[l9(0x3db)] = 0x0,
                this[l9(0x31f)] = 0x0;
                for (let fG = 0x0; fG < this[l9(0x350)]['length']; fG++)
                    this[l9(0x350)][fG]['reset'](fG);
                break;
            case 0x2:
                this[l9(0x744)] = 0x1,
                this['chord'] = a1['chords'][l9(0x64a)][l9(0x4f4)][l9(0x2c5)];
                break;
            case 0x3:
                this['chord'] = a1['chords'][l9(0x64a)][l9(0x82d)]['index'],
                this[l9(0x80c)][l9(0x6d3)](fF);
                break;
            case 0x4:
                this['chord'] = a1['chords']['dictionary'][l9(0x82d)]['index'];
                for (let fH = 0x0; fH < a1['drumCount']; fH++)
                    this['drumsetEnvelopes'][fH] = a1[l9(0x6ac)][l9(0x64a)]['twang\x202'][l9(0x2c5)],
                    this[l9(0x526)][fH]['reset'](fF);
                break;
            case 0x5:
                this[l9(0x3e3)] = a1['chords']['dictionary'][l9(0x82d)][l9(0x2c5)],
                this[l9(0x3aa)][l9(0x6d3)]();
                break;
            case 0x6:
                this['chord'] = a1[l9(0x80a)]['dictionary'][l9(0x4f4)]['index'],
                this['pulseWidth'] = a1['pulseWidthRange'] - 0x1;
                break;
            case 0x7:
                this[l9(0x3e3)] = a1['chords']['dictionary'][l9(0x861)][l9(0x2c5)],
                this[l9(0x3aa)]['reset']();
                break;
            case 0x8:
                this[l9(0x3e3)] = a1[l9(0x80a)]['dictionary'][l9(0x4f4)][l9(0x2c5)],
                this['supersawDynamism'] = a1['supersawDynamismMax'],
                this['supersawSpread'] = Math['ceil'](a1['supersawSpreadMax'] / 0x2),
                this['supersawShape'] = 0x0,
                this['pulseWidth'] = a1['pulseWidthRange'] - 0x1;
                break;
            default:
                throw new Error(l9(0x2ed) + fE);
            }
            this[l9(0x3e3)] != a1['chords']['dictionary']['simultaneous']['index'] && (this[l9(0x5a9)] = 0x800 | this[l9(0x5a9)]);
        }
        ['convertLegacySettings'](fE) {
            const la = jI;
            let fF = fE[la(0x3c4)]
              , fG = fE[la(0x185)]
              , fH = fE[la(0x3bb)]
              , fI = fE[la(0x465)]
              , fJ = fE['operatorEnvelopes']
              , fK = fE[la(0x42a)];
            null == fF && (fF = 0x0 == this['type'] ? 0x6 : 0xa),
            null == fG && (fG = 0x0),
            null == fH && (fH = a1['envelopes'][la(0x64a)][la(0x3a9)]),
            null == fI && (fI = a1[la(0x6ac)][la(0x64a)][0x6 == this['type'] ? la(0x4a8) : la(0x3a9)]),
            null == fJ && (fJ = [a1['envelopes']['dictionary'][0x1 == this[la(0x7d5)] ? la(0x583) : la(0x3a9)], a1[la(0x6ac)][la(0x64a)][la(0x3a9)], a1['envelopes'][la(0x64a)]['none'], a1['envelopes'][la(0x64a)]['none']]),
            null == fK && (fK = a1['envelopes'][la(0x64a)]['none']),
            0xa == fF && 0x2 == fH['type'] && (fH = a1[la(0x6ac)]['dictionary'][la(0x3a9)]);
            const fL = a1[la(0x26c)][this[la(0x803)]]['carrierCount'];
            let fM = !0x0
              , fN = !0x0
              , fO = 0x0 == fH[la(0x7d5)] || 0x0 == fI['type'];
            if (0x1 == this['type']) {
                fO = fO || 0x0 == fK['type'];
                for (let fP = 0x0; fP < fJ['length']; fP++)
                    fP < fL ? 0x0 != fJ[fP]['type'] ? fN = !0x1 : fM = !0x1 : fO = fO || 0x0 == fJ[fP][la(0x7d5)];
            }
            this['envelopeCount'] = 0x0,
            0x1 == this['type'] && (fN && fO ? this['addEnvelope'](a1['instrumentAutomationTargets']['dictionary']['noteVolume']['index'], 0x0, a1['envelopes'][la(0x64a)][la(0x583)]['index']) : fM && !fO && this['addEnvelope'](a1['instrumentAutomationTargets'][la(0x64a)]['none'][la(0x2c5)], 0x0, a1['envelopes'][la(0x64a)]['note\x20size'][la(0x2c5)])),
            0x1 == fH[la(0x7d5)] ? (this['noteFilter'][la(0x6d3)](),
            this[la(0x7c3)][la(0x4aa)](fF, fG, fH),
            this['effects'] &= -0x21) : (this['eqFilter'][la(0x6d3)](),
            this[la(0x823)]['convertLegacySettings'](fF, fG, fH),
            this[la(0x5a9)] |= 0x20,
            this[la(0x3f7)](a1['instrumentAutomationTargets']['dictionary'][la(0x7c5)][la(0x2c5)], 0x0, fH['index'])),
            0x1 != fI['type'] && this[la(0x3f7)](a1[la(0x45f)][la(0x64a)]['pulseWidth'][la(0x2c5)], 0x0, fI[la(0x2c5)]);
            for (let fQ = 0x0; fQ < fJ[la(0x57c)]; fQ++)
                fQ < fL && fN || 0x1 != fJ[fQ]['type'] && this['addEnvelope'](a1[la(0x45f)][la(0x64a)][la(0x1f8)]['index'], fQ, fJ[fQ][la(0x2c5)]);
            0x1 != fK['type'] && this['addEnvelope'](a1['instrumentAutomationTargets']['dictionary'][la(0x31f)][la(0x2c5)], 0x0, fK[la(0x2c5)]);
        }
        [jI(0x87a)]() {
            const lb = jI
              , fE = {
                'type': a1[lb(0x840)][this[lb(0x7d5)]],
                'volume': 0x14 * (0x5 - this[lb(0x7c6)]),
                'eqFilter': this[lb(0x7c3)]['toJsonObject']()
            };
            this[lb(0x760)] != this[lb(0x7d5)] && (fE[lb(0x760)] = this[lb(0x760)]);
            const fF = [];
            for (const fH of a1[lb(0x62b)])
                this['effects'] & 0x1 << fH && fF['push'](a1['effectNames'][fH]);
            if (fE['effects'] = fF,
            a9(this['effects']) && (fE['transition'] = a1[lb(0x87b)][this[lb(0x83f)]]['name']),
            aa(this[lb(0x5a9)]) && (fE['chord'] = this[lb(0x1b0)]()['name']),
            ab(this['effects']) && (fE['pitchShiftSemitones'] = this['pitchShift']),
            ac(this['effects']) && (fE[lb(0x60b)] = bp['detuneToCents'](this[lb(0x84d)] - a1['detuneCenter'])),
            ad(this['effects']) && (fE[lb(0x7b2)] = a1[lb(0x639)][this['vibrato']]['name']),
            af(this[lb(0x5a9)]) && (fE['noteFilter'] = this['noteFilter'][lb(0x87a)]()),
            ag(this[lb(0x5a9)]) && (fE[lb(0x1ce)] = Math[lb(0x874)](0x64 * this['distortion'] / (a1['distortionRange'] - 0x1))),
            ah(this[lb(0x5a9)]) && (fE['bitcrusherOctave'] = (a1[lb(0x448)] - 0x1 - this['bitcrusherFreq']) * a1['bitcrusherOctaveStep'],
            fE['bitcrusherQuantization'] = Math['round'](0x64 * this[lb(0x41e)] / (a1['bitcrusherQuantizationRange'] - 0x1))),
            aj(this[lb(0x5a9)]) && (fE['pan'] = Math[lb(0x874)](0x64 * (this[lb(0x19c)] - a1[lb(0x374)]) / a1[lb(0x374)])),
            ak(this['effects']) && (fE['chorus'] = Math['round'](0x64 * this['chorus'] / (a1[lb(0x31e)] - 0x1))),
            al(this[lb(0x5a9)]) && (fE['echoSustain'] = Math['round'](0x64 * this[lb(0x7b6)] / (a1[lb(0x769)] - 0x1)),
            fE['echoDelayBeats'] = Math[lb(0x874)](0x3e8 * (this[lb(0x6e6)] + 0x1) * a1[lb(0x6f6)] / (a1['ticksPerPart'] * a1['partsPerBeat'])) / 0x3e8),
            am(this[lb(0x5a9)]) && (fE['reverb'] = Math['round'](0x64 * this['reverb'] / (a1['reverbRange'] - 0x1))),
            0x4 != this[lb(0x7d5)] && (fE[lb(0x2be)] = Math['round'](0x2710 * bp['fadeInSettingToSeconds'](this[lb(0x43f)])) / 0x2710,
            fE[lb(0x3f9)] = bp['fadeOutSettingToTicks'](this['fadeOut'])),
            0x5 == this['type'] || 0x7 == this[lb(0x7d5)]) {
                fE[lb(0x4bd)] = [];
                for (let fI = 0x0; fI < a1['harmonicsControlPoints']; fI++)
                    fE['harmonics'][fI] = Math['round'](0x64 * this['harmonicsWave']['harmonics'][fI] / a1[lb(0x51f)]);
            }
            if (0x2 == this['type'])
                fE['wave'] = a1['chipNoises'][this[lb(0x744)]]['name'];
            else {
                if (0x3 == this['type']) {
                    fE[lb(0x5ee)] = [];
                    for (let fJ = 0x0; fJ < a1[lb(0x6e7)]; fJ++)
                        fE['spectrum'][fJ] = Math[lb(0x874)](0x64 * this[lb(0x80c)][lb(0x5ee)][fJ] / a1['spectrumMax']);
                } else {
                    if (0x4 == this[lb(0x7d5)]) {
                        fE['drums'] = [];
                        for (let fK = 0x0; fK < a1[lb(0x71e)]; fK++) {
                            const fL = [];
                            for (let fM = 0x0; fM < a1[lb(0x6e7)]; fM++)
                                fL[fM] = Math[lb(0x874)](0x64 * this['drumsetSpectrumWaves'][fK]['spectrum'][fM] / a1['spectrumMax']);
                            fE['drums'][fK] = {
                                'filterEnvelope': this[lb(0x651)](fK)[lb(0x340)],
                                'spectrum': fL
                            };
                        }
                    } else {
                        if (0x0 == this['type'])
                            fE[lb(0x522)] = a1[lb(0x25a)][this['chipWave']][lb(0x340)],
                            fE['unison'] = a1['unisons'][this['unison']][lb(0x340)];
                        else {
                            if (0x6 == this['type'])
                                fE[lb(0x1a7)] = Math[lb(0x874)](0x64 * a4(this['pulseWidth']) * 0x186a0) / 0x186a0;
                            else {
                                if (0x8 == this['type'])
                                    fE['pulseWidth'] = Math[lb(0x874)](0x64 * a4(this['pulseWidth']) * 0x186a0) / 0x186a0,
                                    fE[lb(0x21e)] = Math[lb(0x874)](0x64 * this[lb(0x555)] / a1['supersawDynamismMax']),
                                    fE[lb(0x212)] = Math[lb(0x874)](0x64 * this['supersawSpread'] / a1[lb(0x2ff)]),
                                    fE[lb(0x39c)] = Math[lb(0x874)](0x64 * this['supersawShape'] / a1[lb(0x36f)]);
                                else {
                                    if (0x7 == this[lb(0x7d5)])
                                        fE['unison'] = a1[lb(0x285)][this[lb(0x5d2)]]['name'],
                                        fE[lb(0x499)] = Math[lb(0x874)](0x64 * this['stringSustain'] / (a1[lb(0x240)] - 0x1)),
                                        a1['enableAcousticSustain'] && (fE['stringSustainType'] = a1['sustainTypeNames'][this['stringSustainType']]);
                                    else {
                                        if (0x5 == this['type'])
                                            fE['unison'] = a1['unisons'][this['unison']][lb(0x340)];
                                        else {
                                            if (0x1 != this[lb(0x7d5)])
                                                throw new Error('Unrecognized\x20instrument\x20type');
                                            {
                                                const fN = [];
                                                for (const fO of this['operators'])
                                                    fN['push']({
                                                        'frequency': a1['operatorFrequencies'][fO[lb(0x353)]][lb(0x340)],
                                                        'amplitude': fO['amplitude']
                                                    });
                                                fE[lb(0x803)] = a1['algorithms'][this[lb(0x803)]]['name'],
                                                fE[lb(0x3db)] = a1['feedbacks'][this[lb(0x3db)]]['name'],
                                                fE['feedbackAmplitude'] = this[lb(0x31f)],
                                                fE['operators'] = fN;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            const fG = [];
            for (let fP = 0x0; fP < this[lb(0x863)]; fP++)
                fG['push'](this['envelopes'][fP][lb(0x87a)]());
            return fE['envelopes'] = fG,
            fE;
        }
        ['fromJsonObject'](fE, fF, fG=0x0) {
            const lc = jI;
            null == fE && (fE = {});
            let fH = a1[lc(0x840)]['indexOf'](fE['type']);
            if (-0x1 == fH && (fH = fF ? 0x2 : 0x0),
            this[lc(0x380)](fH, fF),
            null != fE[lc(0x760)] && (this[lc(0x760)] = fE[lc(0x760)] >>> 0x0),
            null != fE[lc(0x7c6)] ? this[lc(0x7c6)] = aX(0x0, a1['volumeRange'], Math[lc(0x874)](0x5 - (0x0 | fE['volume']) / 0x14)) : this['volume'] = 0x0,
            Array[lc(0x3f8)](fE['effects'])) {
                let fN = 0x0;
                for (let fO = 0x0; fO < fE[lc(0x5a9)][lc(0x57c)]; fO++)
                    fN |= 0x1 << a1['effectNames'][lc(0x2fb)](fE['effects'][fO]);
                this[lc(0x5a9)] = 0xfff & fN;
            } else {
                const fP = [lc(0x3a9), 'reverb', lc(0x215), lc(0x5f6)];
                this['effects'] = fP[lc(0x2fb)](fE['effects']),
                -0x1 == this[lc(0x5a9)] && (this[lc(0x5a9)] = 0x2 == this['type'] ? 0x0 : 0x1);
            }
            this[lc(0x83f)] = a1[lc(0x87b)][lc(0x64a)][lc(0x72b)]['index'];
            const fI = fE[lc(0x83f)] || fE['envelope'];
            if (null != fI) {
                let fQ = a1[lc(0x87b)][lc(0x64a)][fI];
                if (null == fE['fadeInSeconds'] || null == fE[lc(0x3f9)]) {
                    const fR = {
                        'binary': {
                            'transition': lc(0x218),
                            'fadeInSeconds': 0x0,
                            'fadeOutTicks': -0x1
                        },
                        'seamless': {
                            'transition': lc(0x218),
                            'fadeInSeconds': 0x0,
                            'fadeOutTicks': -0x1
                        },
                        'sudden': {
                            'transition': 'normal',
                            'fadeInSeconds': 0x0,
                            'fadeOutTicks': -0x3
                        },
                        'hard': {
                            'transition': 'normal',
                            'fadeInSeconds': 0x0,
                            'fadeOutTicks': -0x3
                        },
                        'smooth': {
                            'transition': 'normal',
                            'fadeInSeconds': 0.025,
                            'fadeOutTicks': -0x3
                        },
                        'soft': {
                            'transition': 'normal',
                            'fadeInSeconds': 0.025,
                            'fadeOutTicks': -0x3
                        },
                        'slide': {
                            'transition': lc(0x86c),
                            'fadeInSeconds': 0.025,
                            'fadeOutTicks': -0x3
                        },
                        'cross\x20fade': {
                            'transition': lc(0x72b),
                            'fadeInSeconds': 0.04,
                            'fadeOutTicks': 0x6
                        },
                        'hard\x20fade': {
                            'transition': lc(0x72b),
                            'fadeInSeconds': 0x0,
                            'fadeOutTicks': 0x30
                        },
                        'medium\x20fade': {
                            'transition': lc(0x72b),
                            'fadeInSeconds': 0.0125,
                            'fadeOutTicks': 0x48
                        },
                        'soft\x20fade': {
                            'transition': lc(0x72b),
                            'fadeInSeconds': 0.06,
                            'fadeOutTicks': 0x60
                        }
                    }[fI];
                    null != fR && (fQ = a1['transitions']['dictionary'][fR['transition']],
                    this['fadeIn'] = bp[lc(0x59f)](fR[lc(0x2be)]),
                    this[lc(0x84b)] = bp['ticksToFadeOutSetting'](fR['fadeOutTicks']));
                }
                null != fQ && (this['transition'] = fQ['index']),
                this[lc(0x83f)] != a1[lc(0x87b)][lc(0x64a)]['normal'][lc(0x2c5)] && (this[lc(0x5a9)] = 0x400 | this[lc(0x5a9)]);
            }
            null != fE['fadeInSeconds'] && (this['fadeIn'] = bp['secondsToFadeInSetting'](+fE[lc(0x2be)])),
            null != fE['fadeOutTicks'] && (this[lc(0x84b)] = bp['ticksToFadeOutSetting'](+fE[lc(0x3f9)]));
            {
                const fS = fE['chord']
                  , fT = {
                    'harmony': 'simultaneous'
                }
                  , fU = a1[lc(0x80a)]['dictionary'][fT[fS]] || a1['chords'][lc(0x64a)][fS];
                null != fU ? this[lc(0x3e3)] = fU[lc(0x2c5)] : 0x2 == this[lc(0x7d5)] ? this[lc(0x3e3)] = a1['chords']['dictionary'][lc(0x4f4)][lc(0x2c5)] : 0x7 == this[lc(0x7d5)] ? this[lc(0x3e3)] = a1[lc(0x80a)][lc(0x64a)][lc(0x861)][lc(0x2c5)] : 0x0 == this['type'] ? this['chord'] = a1['chords']['dictionary']['arpeggio']['index'] : 0x1 == this['type'] ? this[lc(0x3e3)] = a1[lc(0x80a)]['dictionary'][lc(0x7f2)]['index'] : this['chord'] = a1[lc(0x80a)]['dictionary']['simultaneous'][lc(0x2c5)];
            }
            this[lc(0x5d2)] = a1[lc(0x285)]['dictionary'][lc(0x3a9)][lc(0x2c5)];
            const fJ = fE[lc(0x5d2)] || fE['interval'] || fE['chorus'];
            if (null != fJ) {
                const fV = {
                    'union': 'none',
                    'fifths': 'fifth',
                    'octaves': lc(0x60c)
                }
                  , fW = a1[lc(0x285)][lc(0x64a)][fV[fJ]] || a1[lc(0x285)]['dictionary'][fJ];
                null != fW && (this[lc(0x5d2)] = fW['index']);
            }
            'custom\x20harmony' == fE[lc(0x215)] && (this[lc(0x5d2)] = a1['unisons'][lc(0x64a)][lc(0x536)][lc(0x2c5)],
            this[lc(0x3e3)] = a1['chords']['dictionary']['custom\x20interval'][lc(0x2c5)]),
            this[lc(0x3e3)] == a1['chords'][lc(0x64a)][lc(0x82d)][lc(0x2c5)] || Array[lc(0x3f8)](fE[lc(0x5a9)]) || (this['effects'] = 0x800 | this[lc(0x5a9)]),
            null != fE[lc(0x4d4)] && (this[lc(0x66a)] = aX(0x0, a1[lc(0x759)], Math['round'](+fE[lc(0x4d4)]))),
            null != fE[lc(0x60b)] && (this['detune'] = aX(0x0, a1[lc(0x804)] + 0x1, Math['round'](a1['detuneCenter'] + bp[lc(0x24e)](+fE['detuneCents'])))),
            this[lc(0x7b2)] = a1['vibratos'][lc(0x64a)][lc(0x3a9)]['index'];
            const fK = fE['vibrato'] || fE[lc(0x47d)];
            if (null != fK) {
                const fX = {
                    'vibrato\x20light': 'light',
                    'vibrato\x20delayed': 'delayed',
                    'vibrato\x20heavy': lc(0x283)
                }
                  , fY = a1['vibratos'][lc(0x64a)][fX[fJ]] || a1[lc(0x639)]['dictionary'][fK];
                null != fY && (this[lc(0x7b2)] = fY[lc(0x2c5)]),
                fY != a1['vibratos']['dictionary'][lc(0x3a9)] && (this[lc(0x5a9)] = 0x200 | this['effects']);
            }
            if (null != fE['pan'] ? (this['pan'] = aX(0x0, a1['panMax'] + 0x1, Math[lc(0x874)](a1['panCenter'] + (0x0 | fE['pan']) * a1['panCenter'] / 0x64)),
            this[lc(0x19c)] != a1['panCenter'] && (this[lc(0x5a9)] = 0x4 | this[lc(0x5a9)])) : this['pan'] = a1['panCenter'],
            null != fE[lc(0x1ce)] && (this['distortion'] = aX(0x0, a1[lc(0x2fd)], Math['round']((a1[lc(0x2fd)] - 0x1) * (0x0 | fE[lc(0x1ce)]) / 0x64))),
            null != fE['bitcrusherOctave'] && (this[lc(0x770)] = a1[lc(0x448)] - 0x1 - +fE[lc(0x657)] / a1['bitcrusherOctaveStep']),
            null != fE[lc(0x41e)] && (this['bitcrusherQuantization'] = aX(0x0, a1[lc(0x86b)], Math['round']((a1['bitcrusherQuantizationRange'] - 0x1) * (0x0 | fE['bitcrusherQuantization']) / 0x64))),
            null != fE[lc(0x7b6)] && (this['echoSustain'] = aX(0x0, a1['echoSustainRange'], Math[lc(0x874)]((a1[lc(0x769)] - 0x1) * (0x0 | fE['echoSustain']) / 0x64))),
            null != fE['echoDelayBeats'] && (this[lc(0x6e6)] = aX(0x0, a1[lc(0x7d9)], Math['round'](+fE[lc(0x334)] * (a1['ticksPerPart'] * a1[lc(0x58d)]) / a1[lc(0x6f6)] - 0x1))),
            isNaN(fE[lc(0x215)]) || (this[lc(0x215)] = aX(0x0, a1['chorusRange'], Math[lc(0x874)]((a1['chorusRange'] - 0x1) * (0x0 | fE[lc(0x215)]) / 0x64))),
            null != fE['reverb'] ? this[lc(0x76b)] = aX(0x0, a1['reverbRange'], Math['round']((a1[lc(0x796)] - 0x1) * (0x0 | fE['reverb']) / 0x64)) : 0x0 == fG ? this['effects'] = -0x2 & this['effects'] : this[lc(0x76b)] = fG,
            null != fE[lc(0x1a7)] ? this[lc(0x1a7)] = aX(0x0, a1['pulseWidthRange'], Math['round'](Math[lc(0x253)](+fE[lc(0x1a7)] / 0x32) / 0.5 - 0x1 + 0x8)) : this['pulseWidth'] = a1['pulseWidthRange'] - 0x1,
            null != fE[lc(0x21e)] ? this['supersawDynamism'] = aX(0x0, a1['supersawDynamismMax'] + 0x1, Math[lc(0x874)](a1['supersawDynamismMax'] * (0x0 | fE[lc(0x21e)]) / 0x64)) : this[lc(0x555)] = a1[lc(0x4bc)],
            null != fE[lc(0x212)] ? this['supersawSpread'] = aX(0x0, a1[lc(0x2ff)] + 0x1, Math[lc(0x874)](a1[lc(0x2ff)] * (0x0 | fE[lc(0x212)]) / 0x64)) : this['supersawSpread'] = Math['ceil'](a1[lc(0x2ff)] / 0x2),
            null != fE[lc(0x39c)] ? this[lc(0x4de)] = aX(0x0, a1[lc(0x36f)] + 0x1, Math['round'](a1[lc(0x36f)] * (0x0 | fE[lc(0x39c)]) / 0x64)) : this[lc(0x4de)] = 0x0,
            null != fE[lc(0x4bd)]) {
                for (let fZ = 0x0; fZ < a1['harmonicsControlPoints']; fZ++)
                    this[lc(0x3aa)][lc(0x4bd)][fZ] = Math[lc(0x2f6)](0x0, Math['min'](a1['harmonicsMax'], Math['round'](a1['harmonicsMax'] * +fE[lc(0x4bd)][fZ] / 0x64)));
                this['harmonicsWave'][lc(0x77e)]();
            } else
                this[lc(0x3aa)][lc(0x6d3)]();
            if (null != fE[lc(0x5ee)]) {
                for (let g0 = 0x0; g0 < a1[lc(0x6e7)]; g0++)
                    this[lc(0x80c)]['spectrum'][g0] = Math[lc(0x2f6)](0x0, Math[lc(0x4c5)](a1['spectrumMax'], Math[lc(0x874)](a1['spectrumMax'] * +fE['spectrum'][g0] / 0x64)));
                this[lc(0x80c)][lc(0x77e)]();
            } else
                this[lc(0x80c)][lc(0x6d3)](fF);
            null != fE['stringSustain'] ? this['stringSustain'] = aX(0x0, a1[lc(0x240)], Math['round']((a1[lc(0x240)] - 0x1) * (0x0 | fE['stringSustain']) / 0x64)) : this[lc(0x499)] = 0xa,
            this['stringSustainType'] = a1[lc(0x40c)] ? a1['sustainTypeNames'][lc(0x2fb)](fE['stringSustainType']) : 0x0,
            -0x1 == this[lc(0x71d)] && (this['stringSustainType'] = 0x0),
            0x2 == this['type'] && (this[lc(0x744)] = a1[lc(0x5f0)][lc(0x5ad)](g1 => g1['name'] == fE['wave']),
            -0x1 == this[lc(0x744)] && (this['chipNoise'] = 0x1));
            const fL = {
                'custom': lc(0x583),
                'steady': 'none',
                'pluck\x201': lc(0x570),
                'pluck\x202': 'twang\x202',
                'pluck\x203': lc(0x7b1)
            }
              , fM = g1 => null != fL[g1] ? a1['envelopes'][lc(0x64a)][fL[g1]] : a1[lc(0x6ac)][lc(0x64a)][g1];
            if (0x4 == this[lc(0x7d5)] && null != fE[lc(0x659)])
                for (let g1 = 0x0; g1 < a1['drumCount']; g1++) {
                    const g2 = fE['drums'][g1];
                    if (null != g2) {
                        if (this['drumsetEnvelopes'][g1] = a1[lc(0x6ac)][lc(0x64a)][lc(0x4a8)][lc(0x2c5)],
                        null != g2[lc(0x3bb)]) {
                            const g3 = fM(g2[lc(0x3bb)]);
                            null != g3 && (this['drumsetEnvelopes'][g1] = g3['index']);
                        }
                        if (null != g2['spectrum']) {
                            for (let g4 = 0x0; g4 < a1[lc(0x6e7)]; g4++)
                                this[lc(0x526)][g1][lc(0x5ee)][g4] = Math[lc(0x2f6)](0x0, Math[lc(0x4c5)](a1['spectrumMax'], Math['round'](a1['spectrumMax'] * +g2['spectrum'][g4] / 0x64)));
                        }
                    }
                }
            if (0x0 == this[lc(0x7d5)]) {
                const g5 = {
                    'triangle': 0x1,
                    'square': 0x2,
                    'pulse\x20wide': 0x3,
                    'pulse\x20narrow': 0x4,
                    'sawtooth': 0x5,
                    'double\x20saw': 0x6,
                    'double\x20pulse': 0x7,
                    'spiky': 0x8,
                    'plateau': 0x0
                };
                this['chipWave'] = null != g5[fE['wave']] ? g5[fE['wave']] : a1[lc(0x25a)][lc(0x5ad)](g6 => g6[lc(0x340)] == fE['wave']),
                -0x1 == this[lc(0x556)] && (this['chipWave'] = 0x1);
            }
            if (0x1 == this['type']) {
                this[lc(0x803)] = a1[lc(0x26c)]['findIndex'](g6 => g6['name'] == fE[lc(0x803)]),
                -0x1 == this['algorithm'] && (this['algorithm'] = 0x0),
                this['feedbackType'] = a1[lc(0x6bb)]['findIndex'](g6 => g6['name'] == fE[lc(0x3db)]),
                -0x1 == this['feedbackType'] && (this[lc(0x3db)] = 0x0),
                null != fE[lc(0x31f)] ? this[lc(0x31f)] = aX(0x0, a1[lc(0x826)] + 0x1, 0x0 | fE[lc(0x31f)]) : this[lc(0x31f)] = 0x0;
                for (let g6 = 0x0; g6 < a1[lc(0x5b2)]; g6++) {
                    const g7 = this[lc(0x350)][g6];
                    let g8;
                    null != fE[lc(0x350)] && (g8 = fE[lc(0x350)][g6]),
                    null == g8 && (g8 = {}),
                    g7['frequency'] = a1[lc(0x587)]['findIndex'](g9 => g9[lc(0x340)] == g8['frequency']),
                    -0x1 == g7[lc(0x353)] && (g7[lc(0x353)] = 0x0),
                    null != g8[lc(0x328)] ? g7['amplitude'] = aX(0x0, a1['operatorAmplitudeMax'] + 0x1, 0x0 | g8['amplitude']) : g7[lc(0x328)] = 0x0;
                }
            }
            if (null != fE[lc(0x823)] ? this['noteFilter'][lc(0x78a)](fE['noteFilter']) : this[lc(0x823)]['reset'](),
            Array[lc(0x3f8)](fE[lc(0x7c3)]))
                this[lc(0x7c3)]['fromJsonObject'](fE['eqFilter']);
            else {
                this['eqFilter'][lc(0x6d3)]();
                const g9 = {}
                  , ga = 0x1f40
                  , gb = 0xb
                  , gc = 0x8;
                if (null != fE[lc(0x50f)] ? g9['filterCutoff'] = aX(0x0, gb, Math['round'](gb - 0x1 + 0x2 * Math['log']((0x0 | fE['filterCutoffHz']) / ga) / Math['LN2'])) : g9[lc(0x3c4)] = 0x0 == this[lc(0x7d5)] ? 0x6 : 0xa,
                null != fE['filterResonance'] ? g9['filterResonance'] = aX(0x0, gc, Math['round']((gc - 0x1) * (0x0 | fE['filterResonance']) / 0x64)) : g9['filterResonance'] = 0x0,
                g9['filterEnvelope'] = fM(fE[lc(0x3bb)]),
                g9[lc(0x465)] = fM(fE[lc(0x465)]),
                g9[lc(0x42a)] = fM(fE['feedbackEnvelope']),
                Array['isArray'](fE['operators'])) {
                    g9['operatorEnvelopes'] = [];
                    for (let gd = 0x0; gd < a1['operatorCount']; gd++) {
                        let gf;
                        null != fE[lc(0x350)][gd] && (gf = fM(fE['operators'][gd]['envelope'])),
                        g9[lc(0x321)][gd] = null != gf ? gf : a1['envelopes'][lc(0x64a)][lc(0x3a9)];
                    }
                }
                if (null != fE[lc(0x325)]) {
                    const gg = [0xa, 0x6, 0x3, 0x0, 0x8, 0x5, 0x2]
                      , gh = ['none', lc(0x3a9), lc(0x3a9), lc(0x3a9), lc(0x37c), 'decay\x202', 'decay\x203']
                      , gj = [lc(0x3a9), 'bright', 'medium', lc(0x409), lc(0x4dd), lc(0x297), lc(0x619)]
                      , gk = {
                        'sustain\x20sharp': 0x1,
                        'sustain\x20medium': 0x2,
                        'sustain\x20soft': 0x3,
                        'decay\x20sharp': 0x4
                    };
                    let gl = null != gk[fE['filter']] ? gk[fE[lc(0x325)]] : gj[lc(0x2fb)](fE[lc(0x325)]);
                    -0x1 == gl && (gl = 0x0),
                    g9[lc(0x3c4)] = gg[gl],
                    g9[lc(0x3bb)] = fM(gh[gl]),
                    g9[lc(0x185)] = 0x0;
                }
                this[lc(0x4aa)](g9);
            }
            if (Array['isArray'](fE[lc(0x6ac)])) {
                const gm = fE[lc(0x6ac)];
                for (let go = 0x0; go < gm[lc(0x57c)] && !(this['envelopeCount'] >= a1['maxEnvelopeCount']); go++) {
                    const gp = new bd();
                    gp[lc(0x78a)](gm[go]),
                    this['addEnvelope'](gp['target'], gp[lc(0x2c5)], gp[lc(0x1cf)]);
                }
            }
        }
        static['frequencyFromPitch'](fE) {
            const ld = jI;
            return 0x1b8 * Math[ld(0x3b6)](0x2, (fE - 0x45) / 0xc);
        }
        ['addEnvelope'](fE, fF, fG) {
            const le = jI;
            if (!this['supportsEnvelopeTarget'](fE, fF))
                throw new Error();
            if (this['envelopeCount'] >= a1['maxEnvelopeCount'])
                throw new Error();
            for (; this['envelopes'][le(0x57c)] <= this['envelopeCount']; )
                this[le(0x6ac)][this['envelopes']['length']] = new bd();
            const fH = this['envelopes'][this['envelopeCount']];
            fH[le(0x46a)] = fE,
            fH['index'] = fF,
            fH['envelope'] = fG,
            this['envelopeCount']++;
        }
        [jI(0x38f)](fE, fF) {
            const lf = jI
              , fG = a1['instrumentAutomationTargets'][fE];
            return (null != fG[lf(0x29a)] || 'none' == fG['name']) && (!(fF >= fG['maxCount']) && ((null == fG[lf(0x80e)] || -0x1 != fG[lf(0x80e)]['indexOf'](this[lf(0x7d5)])) && ((null == fG[lf(0x47d)] || 0x0 != (this['effects'] & 0x1 << fG['effect'])) && !(fG['isFilter'] && fF >= this[lf(0x823)]['controlPointCount']))));
        }
        [jI(0x232)]() {
            const lg = jI;
            for (let fE = 0x0; fE < this[lg(0x863)]; fE++) {
                const fF = this['envelopes'][fE]['target']
                  , fG = this['envelopes'][fE]['index'];
                this['supportsEnvelopeTarget'](fF, fG) || (this['envelopes'][fE]['target'] = a1[lg(0x45f)][lg(0x64a)][lg(0x3a9)][lg(0x2c5)],
                this[lg(0x6ac)][fE][lg(0x2c5)] = 0x0);
            }
        }
        ['getTransition']() {
            const lh = jI;
            return a9(this['effects']) ? a1['transitions'][this['transition']] : a1['transitions'][lh(0x64a)][lh(0x72b)];
        }
        ['getFadeInSeconds']() {
            const li = jI;
            return 0x4 == this['type'] ? 0x0 : bp[li(0x474)](this['fadeIn']);
        }
        ['getFadeOutTicks']() {
            const lj = jI;
            return 0x4 == this[lj(0x7d5)] ? a1['drumsetFadeOutTicks'] : bp['fadeOutSettingToTicks'](this[lj(0x84b)]);
        }
        [jI(0x1b0)]() {
            const lk = jI;
            return aa(this[lk(0x5a9)]) ? a1['chords'][this[lk(0x3e3)]] : a1[lk(0x80a)]['dictionary']['simultaneous'];
        }
        [jI(0x651)](fE) {
            const ll = jI;
            if (0x4 != this[ll(0x7d5)])
                throw new Error('Can\x27t\x20getDrumsetEnvelope()\x20for\x20non-drumset.');
            return a1['envelopes'][this['drumsetEnvelopes'][fE]];
        }
    }
    class bg {
        constructor() {
            const lm = jI;
            this['octave'] = 0x0,
            this[lm(0x84c)] = [],
            this['patterns'] = [],
            this['bars'] = [],
            this[lm(0x3ef)] = !0x1;
        }
    }
    class bh {
        constructor(fE) {
            this['channels'] = [],
            null != fE ? this['fromBase64String'](fE) : this['initToDefault'](!0x0);
        }
        [jI(0x777)]() {
            const ln = jI;
            return this[ln(0x1c4)] + this['noiseChannelCount'];
        }
        [jI(0x5c9)]() {
            const lo = jI;
            return Math[lo(0x2f6)](this[lo(0x394)] ? a1[lo(0x6f9)] : a1['instrumentCountMin'], this['patternInstruments'] ? a1['patternInstrumentCountMax'] : a1['instrumentCountMin']);
        }
        [jI(0x5a8)](fE) {
            const lp = jI;
            return this[lp(0x501)](this['channels'][fE]);
        }
        ['getMaxInstrumentsPerPatternForChannel'](fE) {
            const lq = jI;
            return this['layeredInstruments'] ? Math[lq(0x4c5)](a1['layeredInstrumentCountMax'], fE[lq(0x84c)][lq(0x57c)]) : 0x1;
        }
        [jI(0x67a)](fE) {
            const lr = jI;
            return fE >= this[lr(0x1c4)];
        }
        [jI(0x6e3)](fE=!0x0) {
            const ls = jI;
            if (this[ls(0x7ad)] = 0x0,
            this['key'] = 0x0,
            this['loopStart'] = 0x0,
            this[ls(0x278)] = 0x4,
            this['tempo'] = 0x96,
            this['beatsPerBar'] = 0x8,
            this[ls(0x647)] = 0x10,
            this['patternsPerChannel'] = 0x8,
            this[ls(0x237)] = 0x1,
            this[ls(0x394)] = !0x1,
            this['patternInstruments'] = !0x1,
            fE) {
                this['pitchChannelCount'] = 0x3,
                this['noiseChannelCount'] = 0x1;
                for (let fF = 0x0; fF < this['getChannelCount'](); fF++) {
                    const fG = fF >= this[ls(0x1c4)];
                    this['channels'][ls(0x57c)] <= fF && (this['channels'][fF] = new bg());
                    const fH = this[ls(0x7b3)][fF];
                    fH['octave'] = fG ? 0x0 : 0x4 - fF;
                    for (let fI = 0x0; fI < this['patternsPerChannel']; fI++)
                        fH[ls(0x3cb)]['length'] <= fI ? fH['patterns'][fI] = new b5() : fH[ls(0x3cb)][fI][ls(0x6d3)]();
                    fH['patterns']['length'] = this[ls(0x468)];
                    for (let fJ = 0x0; fJ < a1['instrumentCountMin']; fJ++)
                        fH[ls(0x84c)]['length'] <= fJ && (fH['instruments'][fJ] = new bf(fG)),
                        fH['instruments'][fJ]['setTypeAndReset'](fG ? 0x2 : 0x0, fG);
                    fH['instruments'][ls(0x57c)] = a1['instrumentCountMin'];
                    for (let fK = 0x0; fK < this['barCount']; fK++)
                        fH[ls(0x81a)][fK] = fK < 0x4 ? 0x1 : 0x0;
                    fH['bars']['length'] = this[ls(0x647)];
                }
                this['channels']['length'] = this['getChannelCount']();
            }
        }
        [jI(0x17e)]() {
            const lt = jI;
            let fE, fF = [];
            if (fF[lt(0x557)](aZ[bh['T']]),
            fF['push'](0x6f, aZ[this['pitchChannelCount']], aZ[this['noiseChannelCount']]),
            fF['push'](0x47, aZ[this[lt(0x7ad)]]),
            fF['push'](0x4b, aZ[this['key']]),
            fF['push'](0x6e, aZ[this['loopStart'] >> 0x6], aZ[0x3f & this['loopStart']]),
            fF[lt(0x557)](0x70, aZ[this['loopLength'] - 0x1 >> 0x6], aZ[this['loopLength'] - 0x1 & 0x3f]),
            fF[lt(0x557)](0x73, aZ[this[lt(0x68a)] >> 0x6], aZ[0x3f & this['tempo']]),
            fF['push'](0x79, aZ[this[lt(0x6c9)] - 0x1]),
            fF[lt(0x557)](0x66, aZ[this['barCount'] - 0x1 >> 0x6], aZ[this['barCount'] - 0x1 & 0x3f]),
            fF[lt(0x557)](0x61, aZ[this['patternsPerChannel'] - 0x1 >> 0x6], aZ[this[lt(0x468)] - 0x1 & 0x3f]),
            fF[lt(0x557)](0x46, aZ[this[lt(0x237)]]),
            fF[lt(0x557)](0x42, aZ[this[lt(0x394)] << 0x1 | this[lt(0x776)]]),
            this['layeredInstruments'] || this[lt(0x776)]) {
                for (let fN = 0x0; fN < this['getChannelCount'](); fN++)
                    fF['push'](aZ[this['channels'][fN][lt(0x84c)]['length'] - a1['instrumentCountMin']]);
            }
            fF['push'](0x67);
            for (let fO = 0x0; fO < this['pitchChannelCount']; fO++)
                fF['push'](aZ[this['channels'][fO][lt(0x60c)]]);
            for (let fP = 0x0; fP < this[lt(0x777)](); fP++)
                for (let fQ = 0x0; fQ < this[lt(0x7b3)][fP][lt(0x84c)][lt(0x57c)]; fQ++) {
                    const fR = this['channels'][fP][lt(0x84c)][fQ];
                    fF['push'](0x72, aZ[fR['type']]),
                    fF['push'](0x77, aZ[fR['volume']]),
                    fF['push'](0x43, aZ[fR['preset'] >> 0x6], aZ[0x3f & fR['preset']]),
                    fF[lt(0x557)](0x48, aZ[fR[lt(0x7c3)][lt(0x559)]]);
                    for (let fS = 0x0; fS < fR[lt(0x7c3)][lt(0x559)]; fS++) {
                        const fT = fR['eqFilter']['controlPoints'][fS];
                        fF[lt(0x557)](aZ[fT['type']], aZ[fT['freq']], aZ[fT[lt(0x4c8)]]);
                    }
                    if (fF['push'](0x69, aZ[fR['effects'] >> 0x6], aZ[0x3f & fR[lt(0x5a9)]]),
                    af(fR[lt(0x5a9)])) {
                        fF['push'](aZ[fR[lt(0x823)][lt(0x559)]]);
                        for (let fU = 0x0; fU < fR[lt(0x823)][lt(0x559)]; fU++) {
                            const fV = fR['noteFilter']['controlPoints'][fU];
                            fF['push'](aZ[fV['type']], aZ[fV[lt(0x395)]], aZ[fV['gain']]);
                        }
                    }
                    if (a9(fR[lt(0x5a9)]) && fF[lt(0x557)](aZ[fR[lt(0x83f)]]),
                    aa(fR[lt(0x5a9)]) && fF[lt(0x557)](aZ[fR[lt(0x3e3)]]),
                    ab(fR[lt(0x5a9)]) && fF[lt(0x557)](aZ[fR['pitchShift']]),
                    ac(fR['effects']) && fF[lt(0x557)](aZ[fR['detune']]),
                    ad(fR[lt(0x5a9)]) && fF[lt(0x557)](aZ[fR[lt(0x7b2)]]),
                    ag(fR['effects']) && fF[lt(0x557)](aZ[fR['distortion']]),
                    ah(fR['effects']) && fF[lt(0x557)](aZ[fR[lt(0x770)]], aZ[fR['bitcrusherQuantization']]),
                    aj(fR[lt(0x5a9)]) && fF[lt(0x557)](aZ[fR['pan']]),
                    ak(fR['effects']) && fF[lt(0x557)](aZ[fR[lt(0x215)]]),
                    al(fR[lt(0x5a9)]) && fF[lt(0x557)](aZ[fR[lt(0x7b6)]], aZ[fR[lt(0x6e6)]]),
                    am(fR['effects']) && fF['push'](aZ[fR['reverb']]),
                    0x4 != fR['type'] && fF['push'](0x74, aZ[fR[lt(0x43f)]], aZ[fR['fadeOut']]),
                    0x5 == fR[lt(0x7d5)] || 0x7 == fR[lt(0x7d5)]) {
                        fF[lt(0x557)](0x41);
                        const fW = new b2();
                        for (let fX = 0x0; fX < a1['harmonicsControlPoints']; fX++)
                            fW[lt(0x54b)](a1['harmonicsControlPointBits'], fR['harmonicsWave'][lt(0x4bd)][fX]);
                        fW[lt(0x7d6)](fF);
                    }
                    if (0x0 == fR[lt(0x7d5)])
                        fF[lt(0x557)](0x76, aZ[fR['chipWave']]),
                        fF[lt(0x557)](0x4a, aZ[fR['unison']]);
                    else {
                        if (0x1 == fR[lt(0x7d5)]) {
                            fF[lt(0x557)](0x65, aZ[fR[lt(0x803)]]),
                            fF['push'](0x6c, aZ[fR[lt(0x3db)]]),
                            fF[lt(0x557)](0x6a, aZ[fR[lt(0x31f)]]),
                            fF[lt(0x557)](0x7a);
                            for (let fY = 0x0; fY < a1[lt(0x5b2)]; fY++)
                                fF[lt(0x557)](aZ[fR[lt(0x350)][fY]['frequency']]);
                            fF['push'](0x63);
                            for (let fZ = 0x0; fZ < a1[lt(0x5b2)]; fZ++)
                                fF[lt(0x557)](aZ[fR['operators'][fZ]['amplitude']]);
                        } else {
                            if (0x2 == fR['type'])
                                fF['push'](0x76, aZ[fR[lt(0x744)]]);
                            else {
                                if (0x3 == fR[lt(0x7d5)]) {
                                    fF[lt(0x557)](0x71);
                                    const g0 = new b2();
                                    for (let g1 = 0x0; g1 < a1['spectrumControlPoints']; g1++)
                                        g0[lt(0x54b)](a1[lt(0x6e8)], fR[lt(0x80c)][lt(0x5ee)][g1]);
                                    g0[lt(0x7d6)](fF);
                                } else {
                                    if (0x4 == fR['type']) {
                                        fF[lt(0x557)](0x49);
                                        for (let g3 = 0x0; g3 < a1['drumCount']; g3++)
                                            fF['push'](aZ[fR[lt(0x4be)][g3]]);
                                        fF[lt(0x557)](0x71);
                                        const g2 = new b2();
                                        for (let g4 = 0x0; g4 < a1[lt(0x71e)]; g4++)
                                            for (let g5 = 0x0; g5 < a1[lt(0x6e7)]; g5++)
                                                g2[lt(0x54b)](a1[lt(0x6e8)], fR[lt(0x526)][g4]['spectrum'][g5]);
                                        g2['encodeBase64'](fF);
                                    } else {
                                        if (0x5 == fR[lt(0x7d5)])
                                            fF['push'](0x4a, aZ[fR[lt(0x5d2)]]);
                                        else {
                                            if (0x6 == fR['type'])
                                                fF[lt(0x557)](0x44, aZ[fR['pulseWidth']]);
                                            else {
                                                if (0x8 == fR['type'])
                                                    fF[lt(0x557)](0x4e, aZ[fR['supersawDynamism']], aZ[fR[lt(0x426)]], aZ[fR['supersawShape']]),
                                                    fF[lt(0x557)](0x44, aZ[fR['pulseWidth']]);
                                                else {
                                                    if (0x7 != fR['type'])
                                                        throw new Error('Unknown\x20instrument\x20type.');
                                                    if (fF[lt(0x557)](0x4a, aZ[fR['unison']]),
                                                    a1['stringSustainRange'] > 0x20)
                                                        throw new Error(lt(0x3ad));
                                                    fF['push'](0x4d, aZ[fR['stringSustain'] | fR['stringSustainType'] << 0x5]);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    fF[lt(0x557)](0x64, aZ[fR['envelopeCount']]);
                    for (let g6 = 0x0; g6 < fR[lt(0x863)]; g6++)
                        fF[lt(0x557)](aZ[fR['envelopes'][g6]['target']]),
                        a1['instrumentAutomationTargets'][fR[lt(0x6ac)][g6]['target']][lt(0x64b)] > 0x1 && fF['push'](aZ[fR[lt(0x6ac)][g6]['index']]),
                        fF[lt(0x557)](aZ[fR['envelopes'][g6]['envelope']]);
                }
            fF['push'](0x78),
            fE = new b2();
            let fG = 0x0;
            for (; 0x1 << fG < this['patternsPerChannel'] + 0x1; )
                fG++;
            for (let g7 = 0x0; g7 < this[lt(0x777)](); g7++)
                for (let g8 = 0x0; g8 < this['barCount']; g8++)
                    fE['write'](fG, this['channels'][g7]['bars'][g8]);
            fE[lt(0x7d6)](fF),
            fF[lt(0x557)](0x62),
            fE = new b2();
            const fH = new b2()
              , fI = bh[lt(0x4f9)](a1[lt(0x483)]);
            for (let g9 = 0x0; g9 < this['getChannelCount'](); g9++) {
                const ga = this[lt(0x7b3)][g9]
                  , gb = this['getMaxInstrumentsPerPattern'](g9)
                  , gc = bh[lt(0x4f9)](gb - a1[lt(0x3ec)])
                  , gd = bh[lt(0x4f9)](ga[lt(0x84c)]['length'] - 0x1)
                  , gf = this[lt(0x67a)](g9)
                  , gg = gf ? 0x0 : ga['octave'] * a1[lt(0x36d)];
                let gh = gf ? 0x4 : gg;
                const gj = gf ? [0x4, 0x6, 0x7, 0x2, 0x3, 0x8, 0x0, 0xa] : [0x0, 0x7, 0xc, 0x13, 0x18, -0x5, -0xc]
                  , gk = [];
                for (let gl = 0x0; gl < gj[lt(0x57c)]; gl++)
                    gj[gl] += gg;
                for (const gm of ga[lt(0x3cb)]) {
                    if (this[lt(0x776)]) {
                        const go = aY(a1[lt(0x3ec)], gb, gm[lt(0x84c)][lt(0x57c)]);
                        fE['write'](gc, go - a1['instrumentCountMin']);
                        for (let gp = 0x0; gp < go; gp++)
                            fE[lt(0x54b)](gd, gm[lt(0x84c)][gp]);
                    }
                    if (gm['notes']['length'] > 0x0) {
                        fE['write'](0x1, 0x1);
                        let gq = 0x0;
                        for (const gr of gm[lt(0x58c)]) {
                            gr[lt(0x1b7)] > gq && (fE[lt(0x54b)](0x2, 0x0),
                            fE['writePartDuration'](gr[lt(0x1b7)] - gq)),
                            fH[lt(0x5c0)]();
                            for (let gB = 0x1; gB < gr['pitches']['length']; gB++)
                                fH['write'](0x1, 0x1);
                            gr['pitches'][lt(0x57c)] < a1[lt(0x5d4)] && fH['write'](0x1, 0x0),
                            fH[lt(0x660)](gr[lt(0x2a6)]['length'] - 0x1),
                            fH['write'](fI, gr['pins'][0x0][lt(0x81f)]);
                            let gu = 0x0
                              , gv = gr[lt(0x68d)][0x0]
                              , gw = gv;
                            const gx = [];
                            for (let gC = 0x1; gC < gr['pins'][lt(0x57c)]; gC++) {
                                const gD = gr[lt(0x2a6)][gC]
                                  , gE = gv + gD[lt(0x24b)];
                                gw != gE ? (fH[lt(0x54b)](0x1, 0x1),
                                gx['push'](gE),
                                gw = gE) : fH['write'](0x1, 0x0),
                                fH['writePartDuration'](gD['time'] - gu),
                                gu = gD[lt(0x2e3)],
                                fH['write'](fI, gD[lt(0x81f)]);
                            }
                            const gy = String['fromCharCode'][lt(0x73e)](null, fH['encodeBase64']([]))
                              , gz = gk[lt(0x2fb)](gy);
                            -0x1 == gz ? (fE[lt(0x54b)](0x2, 0x1),
                            fE['concat'](fH)) : (fE[lt(0x54b)](0x1, 0x1),
                            fE[lt(0x385)](0x0, 0x0, gz),
                            gk[lt(0x712)](gz, 0x1)),
                            gk[lt(0x17b)](gy),
                            gk[lt(0x57c)] > 0xa && gk[lt(0x16a)]();
                            const gA = gr['pitches']['concat'](gx);
                            for (let gF = 0x0; gF < gA['length']; gF++) {
                                const gG = gA[gF]
                                  , gH = gj['indexOf'](gG);
                                if (-0x1 == gH) {
                                    let gI = 0x0
                                      , gJ = gh;
                                    if (gJ < gG) {
                                        for (; gJ != gG; )
                                            gJ++,
                                            -0x1 == gj['indexOf'](gJ) && gI++;
                                    } else {
                                        for (; gJ != gG; )
                                            gJ--,
                                            -0x1 == gj[lt(0x2fb)](gJ) && gI--;
                                    }
                                    fE[lt(0x54b)](0x1, 0x1),
                                    fE[lt(0x7d0)](gI);
                                } else
                                    fE[lt(0x54b)](0x1, 0x0),
                                    fE['write'](0x3, gH),
                                    gj[lt(0x712)](gH, 0x1);
                                gj[lt(0x17b)](gG),
                                gj[lt(0x57c)] > 0x8 && gj[lt(0x16a)](),
                                gh = gF == gr['pitches']['length'] - 0x1 ? gr[lt(0x68d)][0x0] : gG;
                            }
                            0x0 == gr['start'] && fE[lt(0x54b)](0x1, gr['continuesLastPattern'] ? 0x1 : 0x0),
                            gq = gr['end'];
                        }
                        gq < this['beatsPerBar'] * a1['partsPerBeat'] && (fE[lt(0x54b)](0x2, 0x0),
                        fE[lt(0x5ef)](this['beatsPerBar'] * a1['partsPerBeat'] - gq));
                    } else
                        fE[lt(0x54b)](0x1, 0x0);
                }
            }
            let fJ = fE[lt(0x30d)]()
              , fK = [];
            for (; fJ > 0x0; )
                fK[lt(0x17b)](aZ[0x3f & fJ]),
                fJ >>= 0x6;
            fF['push'](aZ[fK['length']]),
            Array[lt(0x687)][lt(0x557)][lt(0x73e)](fF, fK),
            fE['encodeBase64'](fF);
            let fL = 0x25 + fF[lt(0x57c)];
            for (let gK = 0x0; gK < fF['length']; gK++) {
                const gL = b0[fF[gK]];
                fF[gK] = aZ[gL ^ gK + fL & 0x3f],
                fL += gL;
            }
            const fM = 0xfa00;
            if (fF[lt(0x57c)] < fM)
                return String[lt(0x23e)][lt(0x73e)](null, fF);
            {
                let gM = '';
                for (let gN = 0x0; gN < fF[lt(0x57c)]; gN += fM)
                    gM += String['fromCharCode'][lt(0x73e)](null, fF[lt(0x52b)](gN, gN + fM));
                return gM;
            }
        }
        static['L'](fE) {
            const lu = jI;
            return 0x0 == fE ? fE = 0x1 : 0x1 == fE && (fE = 0x0),
            a1[lu(0x6ac)][aX(0x0, a1['envelopes']['length'], fE)];
        }
        [jI(0x5c6)](fE) {
            const lv = jI;
            if (null == fE || '' == fE)
                return void this['initToDefault'](!0x0);
            let fF = 0x0;
            for (; fE[lv(0x5c8)](fF) <= 0x20; )
                fF++;
            0x23 == fE[lv(0x5c8)](fF) && fF++,
            fE = fE['slice'](fF),
            fF = 0x0;
            let fG = 0x25 + fE[lv(0x57c)]
              , fH = [];
            for (let fV = 0x0; fV < fE[lv(0x57c)]; fV++) {
                const fW = b0[fE[lv(0x5c8)](fV)] ^ fV + fG & 0x3f;
                fH[fV] = aZ[fW],
                fG += fW;
            }
            fE = '';
            for (let fX = 0x0; fX < fH[lv(0x57c)]; fX += 0xfa00)
                fE += String[lv(0x23e)][lv(0x73e)](null, fH['slice'](fX, fX + 0xfa00));
            const fI = b0[fE[lv(0x5c8)](fF++)];
            if (-0x1 == fI || fI > bh['T'] || fI < bh['D'])
                return;
            const fJ = fI < 0x3
              , fK = fI < 0x4
              , fL = fI < 0x5
              , fM = fI < 0x6
              , fN = fI < 0x7
              , fO = fI < 0x8
              , fP = fI < 0x9;
            if (this['initToDefault'](fP),
            fJ) {
                for (const fY of this['channels'])
                    fY[lv(0x84c)][0x0][lv(0x83f)] = a1['transitions']['dictionary'][lv(0x218)][lv(0x2c5)],
                    fY[lv(0x84c)][0x0][lv(0x5a9)] |= 0x400;
                this['channels'][0x3]['instruments'][0x0]['chipNoise'] = 0x0;
            }
            let fQ = null;
            if (fP) {
                fQ = [];
                for (let fZ = fQ['length']; fZ < this['getChannelCount'](); fZ++) {
                    fQ[fZ] = [];
                    for (let g0 = 0x0; g0 < a1[lv(0x3ec)]; g0++)
                        fQ[fZ][g0] = {};
                }
            }
            let fR, fS = 0x0, fT = 0x0, fU = -0x1;
            for (; fF < fE[lv(0x57c)]; )
                switch (fR = fE['charCodeAt'](fF++)) {
                case 0x6f:
                    this[lv(0x1c4)] = b0[fE[lv(0x5c8)](fF++)],
                    this[lv(0x3ea)] = b0[fE['charCodeAt'](fF++)],
                    this[lv(0x1c4)] = aY(a1[lv(0x433)], a1[lv(0x2af)], this['pitchChannelCount']),
                    this[lv(0x3ea)] = aY(a1['noiseChannelCountMin'], a1['noiseChannelCountMax'], this[lv(0x3ea)]);
                    for (let g1 = this['channels'][lv(0x57c)]; g1 < this['getChannelCount'](); g1++)
                        this['channels'][g1] = new bg();
                    if (this[lv(0x7b3)]['length'] = this[lv(0x777)](),
                    fP)
                        for (let g2 = fQ['length']; g2 < this['getChannelCount'](); g2++) {
                            fQ[g2] = [];
                            for (let g3 = 0x0; g3 < a1[lv(0x3ec)]; g3++)
                                fQ[g2][g3] = {};
                        }
                    break;
                case 0x47:
                    this['scale'] = b0[fE[lv(0x5c8)](fF++)],
                    fJ && 0xa == this['scale'] && (this[lv(0x7ad)] = 0xb);
                    break;
                case 0x4b:
                    this['key'] = aX(0x0, a1[lv(0x7af)][lv(0x57c)], fN ? 0xb - b0[fE['charCodeAt'](fF++)] : b0[fE['charCodeAt'](fF++)]);
                    break;
                case 0x6e:
                    this['loopStart'] = fL ? b0[fE['charCodeAt'](fF++)] : (b0[fE[lv(0x5c8)](fF++)] << 0x6) + b0[fE[lv(0x5c8)](fF++)];
                    break;
                case 0x70:
                    this[lv(0x278)] = fL ? b0[fE['charCodeAt'](fF++)] : (b0[fE['charCodeAt'](fF++)] << 0x6) + b0[fE['charCodeAt'](fF++)] + 0x1;
                    break;
                case 0x73:
                    this[lv(0x68a)] = fK ? [0x5f, 0x78, 0x97, 0xbe][b0[fE[lv(0x5c8)](fF++)]] : fN ? [0x58, 0x5f, 0x67, 0x6f, 0x78, 0x82, 0x8c, 0x97, 0xa3, 0xb0, 0xbe, 0xce, 0xde, 0xf0, 0x103][b0[fE[lv(0x5c8)](fF++)]] : b0[fE['charCodeAt'](fF++)] << 0x6 | b0[fE['charCodeAt'](fF++)],
                    this[lv(0x68a)] = aX(a1['tempoMin'], a1[lv(0x2e6)] + 0x1, this['tempo']);
                    break;
                case 0x45:
                    fP && (fS = b0[fE['charCodeAt'](fF++)],
                    fS = aX(0x0, 0x4, fS));
                    break;
                case 0x79:
                    this[lv(0x6c9)] = fJ ? [0x6, 0x7, 0x8, 0x9, 0xa][b0[fE['charCodeAt'](fF++)]] : b0[fE[lv(0x5c8)](fF++)] + 0x1,
                    this[lv(0x6c9)] = Math[lv(0x2f6)](a1['beatsPerBarMin'], Math[lv(0x4c5)](a1[lv(0x5bd)], this[lv(0x6c9)]));
                    break;
                case 0x66:
                    {
                        const g4 = (b0[fE['charCodeAt'](fF++)] << 0x6) + b0[fE[lv(0x5c8)](fF++)] + 0x1;
                        this[lv(0x647)] = aY(a1['barCountMin'], a1[lv(0x80f)], g4);
                        for (let g5 = 0x0; g5 < this[lv(0x777)](); g5++) {
                            for (let g6 = this[lv(0x7b3)][g5]['bars'][lv(0x57c)]; g6 < this['barCount']; g6++)
                                this[lv(0x7b3)][g5]['bars'][g6] = 0x1;
                            this['channels'][g5][lv(0x81a)]['length'] = this[lv(0x647)];
                        }
                    }
                    break;
                case 0x61:
                    {
                        let g7;
                        g7 = fO ? b0[fE['charCodeAt'](fF++)] + 0x1 : (b0[fE['charCodeAt'](fF++)] << 0x6) + b0[fE[lv(0x5c8)](fF++)] + 0x1,
                        this['patternsPerChannel'] = aY(0x1, a1[lv(0x80f)], g7);
                        const g8 = this['getChannelCount']();
                        for (let g9 = 0x0; g9 < g8; g9++) {
                            const ga = this[lv(0x7b3)][g9][lv(0x3cb)];
                            for (let gb = ga[lv(0x57c)]; gb < this[lv(0x468)]; gb++)
                                ga[gb] = new b5();
                            ga[lv(0x57c)] = this[lv(0x468)];
                        }
                    }
                    break;
                case 0x42:
                    if (fP) {
                        const gc = aY(a1[lv(0x3ec)], a1[lv(0x789)], b0[fE['charCodeAt'](fF++)] + a1[lv(0x3ec)]);
                        this[lv(0x394)] = !0x1,
                        this['patternInstruments'] = gc > 0x1;
                        for (let gd = 0x0; gd < this[lv(0x777)](); gd++) {
                            const gf = gd >= this['pitchChannelCount'];
                            for (let gg = this[lv(0x7b3)][gd][lv(0x84c)]['length']; gg < gc; gg++)
                                this[lv(0x7b3)][gd][lv(0x84c)][gg] = new bf(gf);
                            if (this[lv(0x7b3)][gd][lv(0x84c)]['length'] = gc,
                            fM) {
                                for (let gh = 0x0; gh < gc; gh++)
                                    this['channels'][gd][lv(0x84c)][gh]['setTypeAndReset'](gf ? 0x2 : 0x0, gf);
                            }
                            for (let gj = fQ[gd][lv(0x57c)]; gj < gc; gj++)
                                fQ[gd][gj] = {};
                        }
                    } else {
                        const gk = b0[fE['charCodeAt'](fF++)];
                        this['layeredInstruments'] = 0x0 != (0x2 & gk),
                        this[lv(0x776)] = 0x0 != (0x1 & gk);
                        for (let gl = 0x0; gl < this[lv(0x777)](); gl++) {
                            let gm = 0x1;
                            (this[lv(0x394)] || this['patternInstruments']) && (gm = aY(a1['instrumentCountMin'], this['getMaxInstrumentsPerChannel'](), b0[fE[lv(0x5c8)](fF++)] + a1['instrumentCountMin']));
                            const go = this['channels'][gl]
                              , gp = this[lv(0x67a)](gl);
                            for (let gq = go[lv(0x84c)][lv(0x57c)]; gq < gm; gq++)
                                go[lv(0x84c)][gq] = new bf(gp);
                            go['instruments']['length'] = gm;
                        }
                    }
                    break;
                case 0x46:
                    this[lv(0x237)] = b0[fE['charCodeAt'](fF++)];
                    break;
                case 0x67:
                    if (fJ) {
                        const gr = b0[fE['charCodeAt'](fF++)];
                        this['channels'][gr]['octave'] = aX(0x0, a1['pitchOctaves'], b0[fE['charCodeAt'](fF++)] + 0x1),
                        gr >= this[lv(0x1c4)] && (this[lv(0x7b3)][gr]['octave'] = 0x0);
                    } else {
                        if (fP) {
                            for (let gu = 0x0; gu < this['getChannelCount'](); gu++)
                                this[lv(0x7b3)][gu]['octave'] = aX(0x0, a1['pitchOctaves'], b0[fE[lv(0x5c8)](fF++)] + 0x1),
                                gu >= this['pitchChannelCount'] && (this['channels'][gu][lv(0x60c)] = 0x0);
                        } else {
                            for (let gv = 0x0; gv < this[lv(0x1c4)]; gv++)
                                this['channels'][gv][lv(0x60c)] = aX(0x0, a1['pitchOctaves'], b0[fE['charCodeAt'](fF++)]);
                            for (let gw = this['pitchChannelCount']; gw < this['getChannelCount'](); gw++)
                                this[lv(0x7b3)][gw][lv(0x60c)] = 0x0;
                        }
                    }
                    break;
                case 0x72:
                    {
                        fU++,
                        fU >= this[lv(0x7b3)][fT][lv(0x84c)]['length'] && (fT++,
                        fU = 0x0),
                        aY(0x0, this[lv(0x7b3)]['length'] - 0x1, fT);
                        const gx = this[lv(0x7b3)][fT]['instruments'][fU]
                          , gy = aY(0x0, 0x8, b0[fE[lv(0x5c8)](fF++)]);
                        gx['setTypeAndReset'](gy, fT >= this[lv(0x1c4)]),
                        fN && (gx[lv(0x5a9)] = 0x0,
                        fS > 0x0 && !this['getChannelIsNoise'](fT) && (gx[lv(0x76b)] = fS,
                        gx['effects'] |= 0x1),
                        gx['chord'] != a1['chords']['dictionary']['simultaneous']['index'] && (gx[lv(0x5a9)] |= 0x800));
                    }
                    break;
                case 0x43:
                    {
                        const gz = b0[fE[lv(0x5c8)](fF++)] << 0x6 | b0[fE['charCodeAt'](fF++)];
                        this['channels'][fT][lv(0x84c)][fU][lv(0x760)] = gz;
                    }
                    break;
                case 0x76:
                    if (fJ) {
                        const gA = [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x0]
                          , gB = b0[fE['charCodeAt'](fF++)]
                          , gC = this['channels'][gB][lv(0x84c)][0x0];
                        gC['chipWave'] = aX(0x0, a1[lv(0x25a)][lv(0x57c)], 0x0 | gA[b0[fE['charCodeAt'](fF++)]]),
                        gC[lv(0x4aa)](fQ[gB][0x0]);
                    } else {
                        if (fM) {
                            const gD = [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x0];
                            for (let gE = 0x0; gE < this[lv(0x777)](); gE++)
                                for (const gF of this[lv(0x7b3)][gE][lv(0x84c)])
                                    gE >= this['pitchChannelCount'] ? gF[lv(0x744)] = aX(0x0, a1['chipNoises']['length'], b0[fE[lv(0x5c8)](fF++)]) : gF['chipWave'] = aX(0x0, a1['chipWaves'][lv(0x57c)], 0x0 | gD[b0[fE['charCodeAt'](fF++)]]);
                        } else {
                            if (fN) {
                                const gG = [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x0];
                                fT >= this['pitchChannelCount'] ? this[lv(0x7b3)][fT]['instruments'][fU][lv(0x744)] = aX(0x0, a1['chipNoises']['length'], b0[fE[lv(0x5c8)](fF++)]) : this[lv(0x7b3)][fT][lv(0x84c)][fU]['chipWave'] = aX(0x0, a1[lv(0x25a)][lv(0x57c)], 0x0 | gG[b0[fE['charCodeAt'](fF++)]]);
                            } else
                                fT >= this[lv(0x1c4)] ? this[lv(0x7b3)][fT][lv(0x84c)][fU]['chipNoise'] = aX(0x0, a1['chipNoises']['length'], b0[fE['charCodeAt'](fF++)]) : this[lv(0x7b3)][fT][lv(0x84c)][fU]['chipWave'] = aX(0x0, a1[lv(0x25a)]['length'], b0[fE[lv(0x5c8)](fF++)]);
                        }
                    }
                    break;
                case 0x48:
                    if (fP) {
                        if (fN) {
                            const gH = [0xa, 0x6, 0x3, 0x0, 0x8, 0x5, 0x2]
                              , gI = [lv(0x3a9), lv(0x3a9), lv(0x3a9), 'none', 'decay\x201', 'decay\x202', 'decay\x203'];
                            if (fJ) {
                                const gJ = b0[fE[lv(0x5c8)](fF++)]
                                  , gK = this[lv(0x7b3)][gJ]['instruments'][0x0]
                                  , gL = fQ[gJ][0x0]
                                  , gM = [0x1, 0x3, 0x4, 0x5][aX(0x0, gH[lv(0x57c)], b0[fE['charCodeAt'](fF++)])];
                                gL['filterCutoff'] = gH[gM],
                                gL['filterResonance'] = 0x0,
                                gL[lv(0x3bb)] = a1['envelopes'][lv(0x64a)][gI[gM]],
                                gK[lv(0x4aa)](gL);
                            } else {
                                if (fM) {
                                    for (let gN = 0x0; gN < this[lv(0x777)](); gN++)
                                        for (let gO = 0x0; gO < this['channels'][gN]['instruments'][lv(0x57c)]; gO++) {
                                            const gP = this[lv(0x7b3)][gN]['instruments'][gO]
                                              , gQ = fQ[gN][gO]
                                              , gR = aX(0x0, gH['length'], b0[fE['charCodeAt'](fF++)] + 0x1);
                                            gN < this[lv(0x1c4)] ? (gQ['filterCutoff'] = gH[gR],
                                            gQ['filterResonance'] = 0x0,
                                            gQ['filterEnvelope'] = a1[lv(0x6ac)]['dictionary'][gI[gR]]) : (gQ[lv(0x3c4)] = 0xa,
                                            gQ['filterResonance'] = 0x0,
                                            gQ[lv(0x3bb)] = a1['envelopes'][lv(0x64a)][lv(0x3a9)]),
                                            gP[lv(0x4aa)](gQ);
                                        }
                                } else {
                                    const gS = aX(0x0, gH['length'], b0[fE['charCodeAt'](fF++)])
                                      , gT = this[lv(0x7b3)][fT][lv(0x84c)][fU]
                                      , gU = fQ[fT][fU];
                                    gU['filterCutoff'] = gH[gS],
                                    gU['filterResonance'] = 0x0,
                                    gU[lv(0x3bb)] = a1['envelopes'][lv(0x64a)][gI[gS]],
                                    gT['convertLegacySettings'](gU);
                                }
                            }
                        } else {
                            const gV = 0xb
                              , gW = this[lv(0x7b3)][fT]['instruments'][fU]
                              , gX = fQ[fT][fU];
                            gX['filterCutoff'] = aX(0x0, gV, b0[fE[lv(0x5c8)](fF++)]),
                            gW['convertLegacySettings'](gX);
                        }
                    } else {
                        const gY = this[lv(0x7b3)][fT]['instruments'][fU]
                          , gZ = b0[fE['charCodeAt'](fF++)];
                        gY[lv(0x7c3)]['controlPointCount'] = aX(0x0, a1['filterMaxPoints'] + 0x1, gZ);
                        for (let h0 = gY[lv(0x7c3)]['controlPoints']['length']; h0 < gY[lv(0x7c3)]['controlPointCount']; h0++)
                            gY['eqFilter'][lv(0x47a)][h0] = new bb();
                        for (let h1 = 0x0; h1 < gY['eqFilter']['controlPointCount']; h1++) {
                            const h2 = gY['eqFilter'][lv(0x47a)][h1];
                            h2[lv(0x7d5)] = aX(0x0, 0x3, b0[fE[lv(0x5c8)](fF++)]),
                            h2[lv(0x395)] = aX(0x0, a1[lv(0x564)], b0[fE['charCodeAt'](fF++)]),
                            h2[lv(0x4c8)] = aX(0x0, a1[lv(0x723)], b0[fE['charCodeAt'](fF++)]);
                        }
                        for (let h3 = gY['eqFilter'][lv(0x559)]; h3 < gZ; h3++)
                            fF += 0x3;
                    }
                    break;
                case 0x6d:
                    if (fP) {
                        const h4 = 0x8
                          , h5 = this['channels'][fT]['instruments'][fU]
                          , h6 = fQ[fT][fU];
                        h6[lv(0x185)] = aX(0x0, h4, b0[fE[lv(0x5c8)](fF++)]),
                        h5[lv(0x4aa)](h6);
                    }
                    break;
                case 0x49:
                    {
                        const h7 = this[lv(0x7b3)][fT][lv(0x84c)][fU];
                        if (fP) {
                            if (0x4 == h7[lv(0x7d5)]) {
                                for (let h8 = 0x0; h8 < a1[lv(0x71e)]; h8++)
                                    h7['drumsetEnvelopes'][h8] = bh['L'](b0[fE[lv(0x5c8)](fF++)])['index'];
                            } else {
                                const h9 = fQ[fT][fU];
                                h9[lv(0x3bb)] = bh['L'](b0[fE['charCodeAt'](fF++)]),
                                h7['convertLegacySettings'](h9);
                            }
                        } else {
                            for (let ha = 0x0; ha < a1['drumCount']; ha++)
                                h7['drumsetEnvelopes'][ha] = aX(0x0, a1[lv(0x6ac)][lv(0x57c)], b0[fE['charCodeAt'](fF++)]);
                        }
                    }
                    break;
                case 0x44:
                    {
                        const hb = this['channels'][fT]['instruments'][fU];
                        if (hb[lv(0x1a7)] = aX(0x0, a1['pulseWidthRange'], b0[fE['charCodeAt'](fF++)]),
                        fP) {
                            const hc = fQ[fT][fU];
                            hc['pulseEnvelope'] = bh['L'](b0[fE['charCodeAt'](fF++)]),
                            hb[lv(0x4aa)](hc);
                        }
                    }
                    break;
                case 0x4e:
                    {
                        const hd = this['channels'][fT][lv(0x84c)][fU];
                        hd[lv(0x555)] = aX(0x0, a1['supersawDynamismMax'] + 0x1, b0[fE[lv(0x5c8)](fF++)]),
                        hd['supersawSpread'] = aX(0x0, a1['supersawSpreadMax'] + 0x1, b0[fE[lv(0x5c8)](fF++)]),
                        hd['supersawShape'] = aX(0x0, a1['supersawShapeMax'] + 0x1, b0[fE['charCodeAt'](fF++)]);
                    }
                    break;
                case 0x4d:
                    {
                        const hf = this['channels'][fT][lv(0x84c)][fU]
                          , hg = b0[fE[lv(0x5c8)](fF++)];
                        hf['stringSustain'] = aX(0x0, a1['stringSustainRange'], 0x1f & hg),
                        hf['stringSustainType'] = a1['enableAcousticSustain'] ? aX(0x0, 0x2, hg >> 0x5) : 0x0;
                    }
                    break;
                case 0x74:
                    if (fP) {
                        const hh = [{
                            'transition': lv(0x218),
                            'fadeInSeconds': 0x0,
                            'fadeOutTicks': -0x1
                        }, {
                            'transition': lv(0x72b),
                            'fadeInSeconds': 0x0,
                            'fadeOutTicks': -0x3
                        }, {
                            'transition': lv(0x72b),
                            'fadeInSeconds': 0.025,
                            'fadeOutTicks': -0x3
                        }, {
                            'transition': 'slide\x20in\x20pattern',
                            'fadeInSeconds': 0.025,
                            'fadeOutTicks': -0x3
                        }, {
                            'transition': 'normal',
                            'fadeInSeconds': 0.04,
                            'fadeOutTicks': 0x6
                        }, {
                            'transition': lv(0x72b),
                            'fadeInSeconds': 0x0,
                            'fadeOutTicks': 0x30
                        }, {
                            'transition': 'normal',
                            'fadeInSeconds': 0.0125,
                            'fadeOutTicks': 0x48
                        }, {
                            'transition': 'normal',
                            'fadeInSeconds': 0.06,
                            'fadeOutTicks': 0x60
                        }];
                        if (fJ) {
                            const hj = b0[fE[lv(0x5c8)](fF++)]
                              , hk = hh[aX(0x0, hh['length'], b0[fE['charCodeAt'](fF++)])]
                              , hl = this[lv(0x7b3)][hj]['instruments'][0x0];
                            hl[lv(0x43f)] = bp['secondsToFadeInSetting'](hk['fadeInSeconds']),
                            hl['fadeOut'] = bp['ticksToFadeOutSetting'](hk['fadeOutTicks']),
                            hl[lv(0x83f)] = a1[lv(0x87b)][lv(0x64a)][hk['transition']]['index'],
                            hl['transition'] != a1['transitions']['dictionary'][lv(0x72b)][lv(0x2c5)] && (hl['effects'] |= 0x400);
                        } else {
                            if (fM) {
                                for (let hm = 0x0; hm < this[lv(0x777)](); hm++)
                                    for (const ho of this[lv(0x7b3)][hm][lv(0x84c)]) {
                                        const hp = hh[aX(0x0, hh['length'], b0[fE['charCodeAt'](fF++)])];
                                        ho[lv(0x43f)] = bp['secondsToFadeInSetting'](hp['fadeInSeconds']),
                                        ho[lv(0x84b)] = bp[lv(0x7e7)](hp[lv(0x3f9)]),
                                        ho[lv(0x83f)] = a1[lv(0x87b)][lv(0x64a)][hp[lv(0x83f)]]['index'],
                                        ho['transition'] != a1[lv(0x87b)][lv(0x64a)][lv(0x72b)]['index'] && (ho['effects'] |= 0x400);
                                    }
                            } else {
                                const hq = hh[aX(0x0, hh['length'], b0[fE[lv(0x5c8)](fF++)])]
                                  , hr = this['channels'][fT][lv(0x84c)][fU];
                                hr[lv(0x43f)] = bp[lv(0x59f)](hq[lv(0x2be)]),
                                hr['fadeOut'] = bp[lv(0x7e7)](hq[lv(0x3f9)]),
                                hr[lv(0x83f)] = a1[lv(0x87b)]['dictionary'][hq[lv(0x83f)]][lv(0x2c5)],
                                hr[lv(0x83f)] != a1[lv(0x87b)]['dictionary']['normal'][lv(0x2c5)] && (hr['effects'] |= 0x400);
                            }
                        }
                    } else {
                        const hu = this['channels'][fT][lv(0x84c)][fU];
                        hu['fadeIn'] = aX(0x0, a1[lv(0x5bb)], b0[fE['charCodeAt'](fF++)]),
                        hu[lv(0x84b)] = aX(0x0, a1['fadeOutTicks'][lv(0x57c)], b0[fE[lv(0x5c8)](fF++)]);
                    }
                    break;
                case 0x75:
                    if (fP) {
                        if (fN) {
                            if (fJ) {
                                const hv = [0x0, 0x3, 0x2, 0x0]
                                  , hw = ['none', lv(0x3a9), lv(0x3a9), lv(0x174)]
                                  , hx = b0[fE[lv(0x5c8)](fF++)]
                                  , hy = aX(0x0, hv['length'], b0[fE[lv(0x5c8)](fF++)])
                                  , hz = this['channels'][hx][lv(0x84c)][0x0]
                                  , hA = fQ[hx][0x0];
                                hz['vibrato'] = hv[hy],
                                null != hA[lv(0x3bb)] && 0x1 != hA['filterEnvelope']['type'] || (hA[lv(0x3bb)] = a1['envelopes']['dictionary'][hw[hy]],
                                hz[lv(0x4aa)](hA)),
                                hz['vibrato'] != a1['vibratos'][lv(0x64a)][lv(0x3a9)][lv(0x2c5)] && (hz['effects'] |= 0x200);
                            } else {
                                if (fM) {
                                    const hB = [0x0, 0x1, 0x2, 0x3, 0x0, 0x0]
                                      , hC = [lv(0x3a9), 'none', lv(0x3a9), lv(0x3a9), lv(0x883), lv(0x174)];
                                    for (let hD = 0x0; hD < this[lv(0x777)](); hD++)
                                        for (let hE = 0x0; hE < this[lv(0x7b3)][hD][lv(0x84c)]['length']; hE++) {
                                            const hF = aX(0x0, hB[lv(0x57c)], b0[fE[lv(0x5c8)](fF++)])
                                              , hG = this[lv(0x7b3)][hD]['instruments'][hE]
                                              , hH = fQ[hD][hE];
                                            hG['vibrato'] = hB[hF],
                                            null != hH[lv(0x3bb)] && 0x1 != hH['filterEnvelope'][lv(0x7d5)] || (hH[lv(0x3bb)] = a1['envelopes'][lv(0x64a)][hC[hF]],
                                            hG['convertLegacySettings'](hH)),
                                            hG[lv(0x7b2)] != a1[lv(0x639)]['dictionary'][lv(0x3a9)][lv(0x2c5)] && (hG['effects'] |= 0x200),
                                            0x0 == fS || this[lv(0x67a)](hD) || (hG[lv(0x5a9)] |= 0x1,
                                            hG[lv(0x76b)] = fS);
                                        }
                                } else {
                                    const hI = [0x0, 0x1, 0x2, 0x3, 0x0, 0x0]
                                      , hJ = [lv(0x3a9), 'none', 'none', lv(0x3a9), lv(0x883), 'tremolo2']
                                      , hK = aX(0x0, hI[lv(0x57c)], b0[fE['charCodeAt'](fF++)])
                                      , hL = this[lv(0x7b3)][fT]['instruments'][fU]
                                      , hM = fQ[fT][fU];
                                    hL['vibrato'] = hI[hK],
                                    null != hM['filterEnvelope'] && 0x1 != hM['filterEnvelope'][lv(0x7d5)] || (hM[lv(0x3bb)] = a1[lv(0x6ac)][lv(0x64a)][hJ[hK]],
                                    hL[lv(0x4aa)](hM)),
                                    hL['vibrato'] != a1['vibratos'][lv(0x64a)][lv(0x3a9)]['index'] && (hL['effects'] |= 0x200),
                                    0x0 != fS && (hL[lv(0x5a9)] |= 0x1,
                                    hL[lv(0x76b)] = fS);
                                }
                            }
                        } else {
                            const hN = this[lv(0x7b3)][fT]['instruments'][fU]
                              , hO = aX(0x0, a1[lv(0x639)]['length'], b0[fE[lv(0x5c8)](fF++)]);
                            hN[lv(0x7b2)] = hO,
                            hN[lv(0x7b2)] != a1['vibratos']['dictionary'][lv(0x3a9)]['index'] && (hN[lv(0x5a9)] |= 0x200);
                        }
                    }
                    break;
                case 0x4a:
                    if (fJ) {
                        const hP = b0[fE[lv(0x5c8)](fF++)];
                        this[lv(0x7b3)][hP]['instruments'][0x0][lv(0x5d2)] = aX(0x0, a1['unisons'][lv(0x57c)], b0[fE['charCodeAt'](fF++)]);
                    } else {
                        if (fM) {
                            for (let hQ = 0x0; hQ < this[lv(0x777)](); hQ++)
                                for (const hR of this[lv(0x7b3)][hQ]['instruments']) {
                                    const hS = b0[fE['charCodeAt'](fF++)];
                                    let hT = aX(0x0, a1[lv(0x285)][lv(0x57c)], hS);
                                    0x8 == hS && (hT = 0x2,
                                    hR['chord'] = 0x3),
                                    hR['unison'] = hT;
                                }
                        } else {
                            if (fN) {
                                const hU = b0[fE['charCodeAt'](fF++)];
                                let hV = aX(0x0, a1[lv(0x285)]['length'], hU);
                                0x8 == hU && (hV = 0x2,
                                this[lv(0x7b3)][fT][lv(0x84c)][fU][lv(0x3e3)] = 0x3),
                                this['channels'][fT][lv(0x84c)][fU]['unison'] = hV;
                            } else
                                this[lv(0x7b3)][fT][lv(0x84c)][fU]['unison'] = aX(0x0, a1['unisons'][lv(0x57c)], b0[fE[lv(0x5c8)](fF++)]);
                        }
                    }
                    break;
                case 0x68:
                    if (fP) {
                        const hW = this[lv(0x7b3)][fT][lv(0x84c)][fU];
                        hW['chord'] = aX(0x0, a1[lv(0x80a)][lv(0x57c)], b0[fE['charCodeAt'](fF++)]),
                        hW[lv(0x3e3)] != a1[lv(0x80a)][lv(0x64a)][lv(0x82d)]['index'] && (hW[lv(0x5a9)] |= 0x800);
                    }
                    break;
                case 0x69:
                    {
                        const hX = this['channels'][fT]['instruments'][fU];
                        if (fP) {
                            hX['effects'] = 0xfff & b0[fE['charCodeAt'](fF++)],
                            0x0 == fS ? hX[lv(0x5a9)] &= -0x2 : am(hX['effects']) && (hX[lv(0x76b)] = fS),
                            hX['pan'] != a1['panCenter'] && (hX[lv(0x5a9)] |= 0x4),
                            hX[lv(0x7b2)] != a1['vibratos']['dictionary'][lv(0x3a9)][lv(0x2c5)] && (hX['effects'] |= 0x4);
                            const hY = fQ[fT][fU];
                            hX['convertLegacySettings'](hY);
                        } else {
                            if (hX['effects'] = b0[fE[lv(0x5c8)](fF++)] << 0x6 | b0[fE['charCodeAt'](fF++)],
                            af(hX['effects'])) {
                                const hZ = b0[fE[lv(0x5c8)](fF++)];
                                hX['noteFilter']['controlPointCount'] = aX(0x0, a1['filterMaxPoints'] + 0x1, hZ);
                                for (let i0 = hX[lv(0x823)]['controlPoints'][lv(0x57c)]; i0 < hX['noteFilter']['controlPointCount']; i0++)
                                    hX[lv(0x823)][lv(0x47a)][i0] = new bb();
                                for (let i1 = 0x0; i1 < hX['noteFilter']['controlPointCount']; i1++) {
                                    const i2 = hX[lv(0x823)]['controlPoints'][i1];
                                    i2['type'] = aX(0x0, 0x3, b0[fE['charCodeAt'](fF++)]),
                                    i2['freq'] = aX(0x0, a1['filterFreqRange'], b0[fE[lv(0x5c8)](fF++)]),
                                    i2[lv(0x4c8)] = aX(0x0, a1['filterGainRange'], b0[fE['charCodeAt'](fF++)]);
                                }
                                for (let i3 = hX['noteFilter'][lv(0x559)]; i3 < hZ; i3++)
                                    fF += 0x3;
                            }
                            a9(hX[lv(0x5a9)]) && (hX[lv(0x83f)] = aX(0x0, a1[lv(0x87b)]['length'], b0[fE[lv(0x5c8)](fF++)])),
                            aa(hX[lv(0x5a9)]) && (hX['chord'] = aX(0x0, a1[lv(0x80a)]['length'], b0[fE[lv(0x5c8)](fF++)])),
                            ab(hX[lv(0x5a9)]) && (hX['pitchShift'] = aX(0x0, a1['pitchShiftRange'], b0[fE['charCodeAt'](fF++)])),
                            ac(hX[lv(0x5a9)]) && (hX[lv(0x84d)] = aX(0x0, a1[lv(0x804)] + 0x1, b0[fE[lv(0x5c8)](fF++)])),
                            ad(hX[lv(0x5a9)]) && (hX[lv(0x7b2)] = aX(0x0, a1['vibratos'][lv(0x57c)], b0[fE['charCodeAt'](fF++)])),
                            ag(hX[lv(0x5a9)]) && (hX['distortion'] = aX(0x0, a1[lv(0x2fd)], b0[fE[lv(0x5c8)](fF++)])),
                            ah(hX[lv(0x5a9)]) && (hX['bitcrusherFreq'] = aX(0x0, a1[lv(0x448)], b0[fE[lv(0x5c8)](fF++)]),
                            hX['bitcrusherQuantization'] = aX(0x0, a1[lv(0x86b)], b0[fE[lv(0x5c8)](fF++)])),
                            aj(hX[lv(0x5a9)]) && (hX[lv(0x19c)] = aX(0x0, a1['panMax'] + 0x1, b0[fE['charCodeAt'](fF++)])),
                            ak(hX[lv(0x5a9)]) && (hX['chorus'] = aX(0x0, a1['chorusRange'], b0[fE[lv(0x5c8)](fF++)])),
                            al(hX['effects']) && (hX['echoSustain'] = aX(0x0, a1[lv(0x769)], b0[fE[lv(0x5c8)](fF++)]),
                            hX['echoDelay'] = aX(0x0, a1[lv(0x7d9)], b0[fE['charCodeAt'](fF++)])),
                            am(hX[lv(0x5a9)]) && (hX[lv(0x76b)] = aX(0x0, a1['reverbRange'], b0[fE['charCodeAt'](fF++)]));
                        }
                        hX['effects'] &= 0xfff;
                    }
                    break;
                case 0x77:
                    if (fJ) {
                        const i4 = b0[fE['charCodeAt'](fF++)]
                          , i5 = this[lv(0x7b3)][i4]['instruments'][0x0];
                        i5[lv(0x7c6)] = aX(0x0, a1[lv(0x853)], b0[fE['charCodeAt'](fF++)]),
                        0x5 == i5['volume'] && (i5[lv(0x7c6)] = a1['volumeRange'] - 0x1);
                    } else {
                        if (fM) {
                            for (let i6 = 0x0; i6 < this['getChannelCount'](); i6++)
                                for (const i7 of this['channels'][i6]['instruments'])
                                    i7[lv(0x7c6)] = aX(0x0, a1['volumeRange'], b0[fE['charCodeAt'](fF++)]),
                                    0x5 == i7['volume'] && (i7[lv(0x7c6)] = a1[lv(0x853)] - 0x1);
                        } else {
                            if (fN) {
                                const i8 = this[lv(0x7b3)][fT]['instruments'][fU];
                                i8[lv(0x7c6)] = aX(0x0, a1[lv(0x853)], b0[fE[lv(0x5c8)](fF++)]),
                                0x5 == i8['volume'] && (i8['volume'] = a1['volumeRange'] - 0x1);
                            } else
                                this[lv(0x7b3)][fT]['instruments'][fU][lv(0x7c6)] = aX(0x0, a1[lv(0x853)], b0[fE[lv(0x5c8)](fF++)]);
                        }
                    }
                    break;
                case 0x4c:
                    fP && (this[lv(0x7b3)][fT][lv(0x84c)][fU]['pan'] = aX(0x0, a1[lv(0x368)] + 0x1, b0[fE[lv(0x5c8)](fF++)]));
                    break;
                case 0x65:
                    {
                        const i9 = this[lv(0x7b3)][fT][lv(0x84c)][fU];
                        if (i9['algorithm'] = aX(0x0, a1[lv(0x26c)][lv(0x57c)], b0[fE[lv(0x5c8)](fF++)]),
                        fP) {
                            const ia = fQ[fT][fU];
                            i9['convertLegacySettings'](ia);
                        }
                    }
                    break;
                case 0x6c:
                    this['channels'][fT]['instruments'][fU][lv(0x3db)] = aX(0x0, a1[lv(0x6bb)][lv(0x57c)], b0[fE['charCodeAt'](fF++)]);
                    break;
                case 0x6a:
                    this['channels'][fT][lv(0x84c)][fU][lv(0x31f)] = aX(0x0, a1['operatorAmplitudeMax'] + 0x1, b0[fE['charCodeAt'](fF++)]);
                    break;
                case 0x6b:
                    if (fP) {
                        const ib = this['channels'][fT]['instruments'][fU]
                          , ic = fQ[fT][fU];
                        ic[lv(0x42a)] = bh['L'](b0[fE['charCodeAt'](fF++)]),
                        ib['convertLegacySettings'](ic);
                    }
                    break;
                case 0x7a:
                    for (let id = 0x0; id < a1[lv(0x5b2)]; id++)
                        this['channels'][fT][lv(0x84c)][fU][lv(0x350)][id]['frequency'] = aX(0x0, a1[lv(0x587)]['length'], b0[fE[lv(0x5c8)](fF++)]);
                    break;
                case 0x63:
                    for (let ig = 0x0; ig < a1[lv(0x5b2)]; ig++)
                        this[lv(0x7b3)][fT][lv(0x84c)][fU]['operators'][ig]['amplitude'] = aX(0x0, a1[lv(0x826)] + 0x1, b0[fE['charCodeAt'](fF++)]);
                    break;
                case 0x64:
                    {
                        const ih = this[lv(0x7b3)][fT][lv(0x84c)][fU];
                        if (fP) {
                            const ij = fQ[fT][fU];
                            ij[lv(0x321)] = [];
                            for (let ik = 0x0; ik < a1['operatorCount']; ik++)
                                ij[lv(0x321)][ik] = bh['L'](b0[fE[lv(0x5c8)](fF++)]);
                            ih['convertLegacySettings'](ij);
                        } else {
                            const il = aX(0x0, a1[lv(0x517)] + 0x1, b0[fE['charCodeAt'](fF++)]);
                            for (let im = 0x0; im < il; im++) {
                                const io = aX(0x0, a1['instrumentAutomationTargets']['length'], b0[fE[lv(0x5c8)](fF++)]);
                                let ip = 0x0;
                                const iq = a1[lv(0x45f)][io][lv(0x64b)];
                                iq > 0x1 && (ip = aX(0x0, iq, b0[fE[lv(0x5c8)](fF++)]));
                                const ir = aX(0x0, a1['envelopes']['length'], b0[fE[lv(0x5c8)](fF++)]);
                                ih['addEnvelope'](io, ip, ir);
                            }
                        }
                    }
                    break;
                case 0x71:
                    {
                        const iu = this['channels'][fT]['instruments'][fU];
                        if (0x3 == iu[lv(0x7d5)]) {
                            const iv = Math['ceil'](a1[lv(0x6e7)] * a1['spectrumControlPointBits'] / 0x6)
                              , iw = new b1(fE,fF,fF + iv);
                            for (let ix = 0x0; ix < a1[lv(0x6e7)]; ix++)
                                iu['spectrumWave']['spectrum'][ix] = iw['read'](a1['spectrumControlPointBits']);
                            iu[lv(0x80c)]['markCustomWaveDirty'](),
                            fF += iv;
                        } else {
                            if (0x4 != iu['type'])
                                throw new Error(lv(0x6ed));
                            {
                                const iy = Math[lv(0x600)](a1[lv(0x71e)] * a1[lv(0x6e7)] * a1['spectrumControlPointBits'] / 0x6)
                                  , iz = new b1(fE,fF,fF + iy);
                                for (let iA = 0x0; iA < a1[lv(0x71e)]; iA++) {
                                    for (let iB = 0x0; iB < a1['spectrumControlPoints']; iB++)
                                        iu['drumsetSpectrumWaves'][iA][lv(0x5ee)][iB] = iz[lv(0x55c)](a1[lv(0x6e8)]);
                                    iu[lv(0x526)][iA]['markCustomWaveDirty']();
                                }
                                fF += iy;
                            }
                        }
                    }
                    break;
                case 0x41:
                    {
                        const iC = this['channels'][fT][lv(0x84c)][fU]
                          , iD = Math[lv(0x600)](a1['harmonicsControlPoints'] * a1[lv(0x521)] / 0x6)
                          , iE = new b1(fE,fF,fF + iD);
                        for (let iF = 0x0; iF < a1['harmonicsControlPoints']; iF++)
                            iC[lv(0x3aa)][lv(0x4bd)][iF] = iE[lv(0x55c)](a1[lv(0x521)]);
                        iC['harmonicsWave']['markCustomWaveDirty'](),
                        fF += iD;
                    }
                    break;
                case 0x78:
                    {
                        let iG;
                        if (fJ) {
                            const iH = b0[fE[lv(0x5c8)](fF++)]
                              , iI = b0[fE['charCodeAt'](fF++)];
                            iG = Math[lv(0x600)](0.5 * iI);
                            const iJ = new b1(fE,fF,fF + iG);
                            for (let iK = 0x0; iK < iI; iK++)
                                this[lv(0x7b3)][iH][lv(0x81a)][iK] = iJ['read'](0x3) + 0x1;
                        } else {
                            if (fL) {
                                let iL = 0x0;
                                for (; 0x1 << iL < this[lv(0x468)]; )
                                    iL++;
                                iG = Math['ceil'](this['getChannelCount']() * this['barCount'] * iL / 0x6);
                                const iM = new b1(fE,fF,fF + iG);
                                for (let iN = 0x0; iN < this['getChannelCount'](); iN++)
                                    for (let iO = 0x0; iO < this['barCount']; iO++)
                                        this[lv(0x7b3)][iN][lv(0x81a)][iO] = iM['read'](iL) + 0x1;
                            } else {
                                let iP = 0x0;
                                for (; 0x1 << iP < this['patternsPerChannel'] + 0x1; )
                                    iP++;
                                iG = Math[lv(0x600)](this[lv(0x777)]() * this[lv(0x647)] * iP / 0x6);
                                const iQ = new b1(fE,fF,fF + iG);
                                for (let iR = 0x0; iR < this['getChannelCount'](); iR++)
                                    for (let iS = 0x0; iS < this[lv(0x647)]; iS++)
                                        this['channels'][iR][lv(0x81a)][iS] = iQ[lv(0x55c)](iP);
                            }
                        }
                        fF += iG;
                    }
                    break;
                case 0x62:
                    {
                        let iT, iU = 0x0;
                        if (fJ)
                            iT = b0[fE[lv(0x5c8)](fF++)],
                            fF++,
                            iU = b0[fE['charCodeAt'](fF++)],
                            iU <<= 0x6,
                            iU += b0[fE[lv(0x5c8)](fF++)];
                        else {
                            iT = 0x0;
                            let iX = aY(0x1, 0x4, b0[fE['charCodeAt'](fF++)]);
                            for (; iX > 0x0; )
                                iU <<= 0x6,
                                iU += b0[fE[lv(0x5c8)](fF++)],
                                iX--;
                        }
                        const iV = new b1(fE,fF,fF + iU);
                        fF += iU;
                        const iW = bh['getNeededBits'](a1[lv(0x483)]);
                        for (; ; ) {
                            const iY = this[lv(0x7b3)][iT]
                              , iZ = this[lv(0x67a)](iT)
                              , j0 = this[lv(0x5a8)](iT)
                              , j1 = bh['getNeededBits'](j0 - a1[lv(0x3ec)])
                              , j2 = bh[lv(0x4f9)](iY['instruments']['length'] - 0x1)
                              , j3 = iZ ? 0x0 : 0xc * iY[lv(0x60c)];
                            let j4 = iZ ? 0x4 : j3;
                            const j5 = iZ ? [0x4, 0x6, 0x7, 0x2, 0x3, 0x8, 0x0, 0xa] : [0x0, 0x7, 0xc, 0x13, 0x18, -0x5, -0xc]
                              , j6 = [];
                            for (let j7 = 0x0; j7 < j5['length']; j7++)
                                j5[j7] += j3;
                            for (let j8 = 0x0; j8 < this['patternsPerChannel']; j8++) {
                                const j9 = iY['patterns'][j8];
                                if (fP)
                                    j9['instruments'][0x0] = aY(0x0, iY[lv(0x84c)][lv(0x57c)] - 0x1, iV[lv(0x55c)](j2)),
                                    j9[lv(0x84c)]['length'] = 0x1;
                                else {
                                    if (this['patternInstruments']) {
                                        const jd = aY(a1[lv(0x3ec)], j0, iV['read'](j1) + a1['instrumentCountMin']);
                                        for (let jf = 0x0; jf < jd; jf++)
                                            j9['instruments'][jf] = aY(0x0, iY['instruments'][lv(0x57c)] - 0x1, iV[lv(0x55c)](j2));
                                        j9[lv(0x84c)][lv(0x57c)] = jd;
                                    } else
                                        j9[lv(0x84c)][0x0] = 0x0,
                                        j9[lv(0x84c)]['length'] = a1[lv(0x3ec)];
                                }
                                if (!fJ && 0x0 == iV[lv(0x55c)](0x1)) {
                                    j9[lv(0x58c)]['length'] = 0x0;
                                    continue;
                                }
                                let ja = 0x0;
                                const jb = j9[lv(0x58c)];
                                let jc = 0x0;
                                for (; ja < this['beatsPerBar'] * a1[lv(0x58d)]; ) {
                                    const jg = 0x1 == iV['read'](0x1);
                                    let jh = !0x1
                                      , jj = 0x0;
                                    if (jg ? jj = aY(0x0, j6[lv(0x57c)] - 0x1, iV['readLongTail'](0x0, 0x0)) : jh = 0x1 == iV[lv(0x55c)](0x1),
                                    jg || jh) {
                                        let jk, jl, jm;
                                        if (jg)
                                            jk = j6[jj],
                                            j6[lv(0x712)](jj, 0x1);
                                        else {
                                            for (jk = {},
                                            jk[lv(0x746)] = 0x1; jk[lv(0x746)] < a1[lv(0x5d4)] && 0x1 == iV['read'](0x1); )
                                                jk['pitchCount']++;
                                            jk[lv(0x814)] = iV['readPinCount'](),
                                            jk[lv(0x847)] = iV['read'](iW),
                                            jk['pins'] = [],
                                            jk['length'] = 0x0,
                                            jk['bendCount'] = 0x0;
                                            for (let jr = 0x0; jr < jk[lv(0x814)]; jr++) {
                                                let ju = {};
                                                ju['pitchBend'] = 0x1 == iV['read'](0x1),
                                                ju[lv(0x729)] && jk['bendCount']++,
                                                jk['length'] += fN ? iV[lv(0x3a6)]() * a1['partsPerBeat'] / a1[lv(0x307)][this[lv(0x237)]][lv(0x4b7)] : iV['readPartDuration'](),
                                                ju['time'] = jk['length'],
                                                ju[lv(0x81f)] = iV[lv(0x55c)](iW),
                                                jk[lv(0x2a6)][lv(0x557)](ju);
                                            }
                                        }
                                        j6['unshift'](jk),
                                        j6[lv(0x57c)] > 0xa && j6[lv(0x16a)](),
                                        jb['length'] <= jc ? (jl = new b4(0x0,ja,ja + jk['length'],jk[lv(0x847)]),
                                        jb[jc++] = jl) : (jl = jb[jc++],
                                        jl[lv(0x1b7)] = ja,
                                        jl['end'] = ja + jk[lv(0x57c)],
                                        jl[lv(0x2a6)][0x0][lv(0x81f)] = jk[lv(0x847)]);
                                        let jo = 0x0;
                                        const jp = [];
                                        for (let jv = 0x0; jv < jk[lv(0x746)] + jk['bendCount']; jv++) {
                                            if (0x0 == iV[lv(0x55c)](0x1)) {
                                                const jw = aY(0x0, j5[lv(0x57c)] - 0x1, iV['read'](0x3));
                                                jm = j5[jw],
                                                j5['splice'](jw, 0x1);
                                            } else {
                                                const jx = iV['readPitchInterval']();
                                                jm = j4;
                                                let jy = jx;
                                                for (; jy > 0x0; ) {
                                                    for (jm++; -0x1 != j5['indexOf'](jm); )
                                                        jm++;
                                                    jy--;
                                                }
                                                for (; jy < 0x0; ) {
                                                    for (jm--; -0x1 != j5[lv(0x2fb)](jm); )
                                                        jm--;
                                                    jy++;
                                                }
                                            }
                                            j5['unshift'](jm),
                                            j5['length'] > 0x8 && j5['pop'](),
                                            jv < jk['pitchCount'] ? jl[lv(0x68d)][jo++] = jm : jp['push'](jm),
                                            j4 = jv == jk[lv(0x746)] - 0x1 ? jl[lv(0x68d)][0x0] : jm;
                                        }
                                        jl[lv(0x68d)][lv(0x57c)] = jo,
                                        jp[lv(0x17b)](jl[lv(0x68d)][0x0]);
                                        let jq = 0x1;
                                        for (const jz of jk['pins']) {
                                            jz[lv(0x729)] && jp[lv(0x3e7)]();
                                            const jA = jp[0x0] - jl[lv(0x68d)][0x0];
                                            if (jl[lv(0x2a6)][lv(0x57c)] <= jq)
                                                jl['pins'][jq++] = b3(jA, jz['time'], jz[lv(0x81f)]);
                                            else {
                                                const jB = jl['pins'][jq++];
                                                jB['interval'] = jA,
                                                jB['time'] = jz[lv(0x2e3)],
                                                jB['size'] = jz['size'];
                                            }
                                        }
                                        jl[lv(0x2a6)][lv(0x57c)] = jq,
                                        0x0 != jl['start'] || fP ? jl[lv(0x790)] = !0x1 : jl[lv(0x790)] = 0x1 == iV['read'](0x1),
                                        ja = aY(0x0, this['beatsPerBar'] * a1[lv(0x58d)], jl[lv(0x63e)]);
                                    } else
                                        ja += fN ? iV['readLegacyPartDuration']() * a1['partsPerBeat'] / a1['rhythms'][this['rhythm']][lv(0x4b7)] : iV[lv(0x190)]();
                                }
                                jb[lv(0x57c)] = jc;
                            }
                            if (fJ)
                                break;
                            if (iT++,
                            iT >= this['getChannelCount']())
                                break;
                        }
                    }
                    break;
                default:
                    throw new Error('Unrecognized\x20song\x20tag\x20code\x20' + String['fromCharCode'](fR) + lv(0x77f) + (fF - 0x1));
                }
        }
        [jI(0x87a)](fE=!0x0, fF=0x1, fG=!0x0) {
            const lw = jI
              , fH = [];
            for (let fI = 0x0; fI < this['getChannelCount'](); fI++) {
                const fJ = this['channels'][fI]
                  , fK = []
                  , fL = this[lw(0x67a)](fI);
                for (const fP of fJ['instruments'])
                    fK['push'](fP[lw(0x87a)]());
                const fM = [];
                for (const fQ of fJ[lw(0x3cb)])
                    fM['push'](fQ['toJsonObject'](this));
                const fN = [];
                if (fE) {
                    for (let fR = 0x0; fR < this[lw(0x699)]; fR++)
                        fN[lw(0x557)](fJ[lw(0x81a)][fR]);
                }
                for (let fS = 0x0; fS < fF; fS++)
                    for (let fT = this['loopStart']; fT < this['loopStart'] + this['loopLength']; fT++)
                        fN['push'](fJ['bars'][fT]);
                if (fG) {
                    for (let fU = this[lw(0x699)] + this[lw(0x278)]; fU < this['barCount']; fU++)
                        fN[lw(0x557)](fJ['bars'][fU]);
                }
                const fO = {
                    'type': fL ? 'drum' : lw(0x403),
                    'instruments': fK,
                    'patterns': fM,
                    'sequence': fN
                };
                fL || (fO['octaveScrollBar'] = fJ['octave'] - 0x1),
                fH[lw(0x557)](fO);
            }
            return {
                'format': bh['B'],
                'version': bh['T'],
                'scale': a1[lw(0x379)][this[lw(0x7ad)]][lw(0x340)],
                'key': a1['keys'][this[lw(0x319)]]['name'],
                'introBars': this[lw(0x699)],
                'loopBars': this[lw(0x278)],
                'beatsPerBar': this['beatsPerBar'],
                'ticksPerBeat': a1['rhythms'][this[lw(0x237)]]['stepsPerBeat'],
                'beatsPerMinute': this[lw(0x68a)],
                'layeredInstruments': this[lw(0x394)],
                'patternInstruments': this[lw(0x776)],
                'channels': fH
            };
        }
        [jI(0x4d5)](fE, fF) {
            const lx = jI;
            if (fF < 0x0 || fF >= this[lx(0x647)])
                return null;
            const fG = this['channels'][fE]['bars'][fF];
            return 0x0 == fG ? null : this['channels'][fE][lx(0x3cb)][fG - 0x1];
        }
        [jI(0x6b5)]() {
            return this['tempo'];
        }
        static['getNeededBits'](fE) {
            const ly = jI;
            return 0x20 - Math[ly(0x296)](Math['ceil'](fE + 0x1) - 0x1);
        }
    }
    bh['B'] = 'BeepBox',
    bh['D'] = 0x2,
    bh['T'] = 0x9;
    class bj {
        constructor() {
            const lz = jI;
            this[lz(0x3fc)] = null,
            this[lz(0x282)] = 0x0,
            this[lz(0x219)] = 0x0,
            this[lz(0x245)] = 0x0,
            this['sustainFilterA1Delta'] = 0x0,
            this[lz(0x2e8)] = 0x0,
            this[lz(0x3ae)] = 0x0,
            this[lz(0x7fe)] = 0x0,
            this[lz(0x6de)] = 0x0,
            this[lz(0x49f)] = 0x0,
            this['sustainFilterB1Delta'] = 0x0,
            this[lz(0x5dc)] = 0x0,
            this[lz(0x25c)] = 0x0,
            this[lz(0x6d3)]();
        }
        ['reset']() {
            const lA = jI;
            this['delayIndex'] = -0x1,
            this[lA(0x343)] = 0x0,
            this[lA(0x4c4)] = 0x0,
            this['sustainFilterSample'] = 0x0,
            this[lA(0x79c)] = 0x0,
            this[lA(0x537)] = 0x0,
            this['sustainFilterPrevInput2'] = 0x0,
            this['fractionalDelaySample'] = 0x0,
            this['prevDelayLength'] = -0x1,
            this['delayResetOffset'] = 0x0;
        }
        ['update'](fE, fF, fG, fH, fI, fJ, fK, fL) {
            const lB = jI
              , fM = 0x2 * Math['PI'] * a1[lB(0x58f)] / fE[lB(0x6a5)]
              , fN = this[lB(0x2ab)]
              , fO = fG['phaseDeltas'][fH]
              , fP = fG['phaseDeltaScales'][fH]
              , fQ = fO * Math['pow'](fP, fI)
              , fR = 0x2 * Math['PI'] * fO
              , fS = 0x2 * Math['PI'] * fQ
              , fT = 0x2 * fR
              , fU = 0x2 * fS
              , fV = Math['min'](Math['PI'], fR * a1[lB(0x393)] * Math['pow'](fM / fR, a1['pickedStringDispersionFreqScale']))
              , fW = Math[lB(0x4c5)](Math['PI'], fS * a1['pickedStringDispersionFreqMult'] * Math['pow'](fM / fS, a1[lB(0x82e)]))
              , fX = 0x2 * Math['PI'] * a1['pickedStringShelfHz'] / fE['samplesPerSecond']
              , fY = (Math[lB(0x3b6)](0x64, fJ) - 0x1) / 0x63
              , fZ = (Math['pow'](0x64, fK) - 0x1) / 0x63
              , g0 = 0x1 == fL ? 0.25 : 0x0
              , g1 = 15.6
              , g2 = 0x3 * fE[lB(0x6a5)] / 0xbb80
              , g3 = Math['pow'](0.5, fY * Math['pow'](fX / (fR * g1), 0x1 + 0x2 * g0) * g1)
              , g4 = Math[lB(0x3b6)](0.5, fZ * Math[lB(0x3b6)](fX / (fS * g1), 0x1 + 0x2 * g0) * g1)
              , g5 = Math[lB(0x3b6)](g3, 0.002)
              , g6 = Math[lB(0x3b6)](g4, 0.002);
            bp[lB(0x52f)][lB(0x855)](fV),
            fE[lB(0x2c7)][lB(0x17a)](bp['tempFilterStartCoefficients'], fT);
            const g7 = bp[lB(0x52f)]['b'][0x0]
              , g8 = -fE['tempFrequencyResponse']['angle']() / fT;
            bp[lB(0x6e0)][lB(0x855)](fW),
            fE[lB(0x2c7)]['analyze'](bp['tempFilterEndCoefficients'], fU);
            const g9 = bp['tempFilterEndCoefficients']['b'][0x0]
              , ga = -fE[lB(0x2c7)][lB(0x721)]() / fU
              , gb = 0x0 == fL ? 0x0 : 0x1;
            if (0x0 == gb) {
                const gC = Math[lB(0x3b6)](g3, a1['stringDecayRate'])
                  , gD = Math['pow'](g4, a1[lB(0x265)]);
                bp[lB(0x52f)]['highShelf2ndOrder'](fX, gC, 0.5),
                bp[lB(0x6e0)][lB(0x662)](fX, gD, 0.5);
            } else {
                const gE = Math[lB(0x3b6)](0x1 == gb ? 0x0 : 0x1, 0.25)
                  , gF = Math[lB(0x3b6)](g2 * g2 * fR * 3.3 * 0xbb80 / fE[lB(0x6a5)], 0.5 + g0) / g2 / Math['pow'](fY, 0.5)
                  , gG = Math[lB(0x3b6)](g2 * g2 * fS * 3.3 * 0xbb80 / fE[lB(0x6a5)], 0.5 + g0) / g2 / Math['pow'](fZ, 0.5)
                  , gH = gF * Math['pow'](0x2, 0.5 - 1.75 * (0x1 - Math[lB(0x3b6)](0x1 - gE, 0.85)))
                  , gI = gG * Math[lB(0x3b6)](0x2, 0.5 - 1.75 * (0x1 - Math[lB(0x3b6)](0x1 - gE, 0.85)))
                  , gJ = Math[lB(0x3b6)](0x2, -Math[lB(0x3b6)](0x2, -Math[lB(0x3b6)](gE, 0.9)))
                  , gK = Math[lB(0x3b6)](0x2, -Math[lB(0x3b6)](0x2, -Math[lB(0x3b6)](gE, 0.9)));
                bp[lB(0x52f)][lB(0x19f)](aV(gH), gJ),
                bp['tempFilterEndCoefficients'][lB(0x19f)](aV(gI), gK);
            }
            fE['tempFrequencyResponse']['analyze'](bp[lB(0x52f)], fT);
            const gc = bp[lB(0x52f)]['a'][0x1]
              , gd = bp[lB(0x52f)]['a'][0x2]
              , gf = bp['tempFilterStartCoefficients']['b'][0x0] * g5
              , gg = bp[lB(0x52f)]['b'][0x1] * g5
              , gh = bp['tempFilterStartCoefficients']['b'][0x2] * g5
              , gj = -fE['tempFrequencyResponse']['angle']() / fT;
            fE['tempFrequencyResponse']['analyze'](bp['tempFilterEndCoefficients'], fU);
            const gk = bp['tempFilterEndCoefficients']['a'][0x1]
              , gl = bp['tempFilterEndCoefficients']['a'][0x2]
              , gm = bp[lB(0x6e0)]['b'][0x0] * g6
              , go = bp[lB(0x6e0)]['b'][0x1] * g6
              , gp = bp['tempFilterEndCoefficients']['b'][0x2] * g6
              , gq = -fE[lB(0x2c7)][lB(0x721)]() / fU
              , gr = 0x1 / fO
              , gu = 0x1 / fQ
              , gv = Math[lB(0x600)](0x2 * Math[lB(0x2f6)](gr, gu))
              , gw = gr - g8 - gj
              , gx = gu - ga - gq;
            this['prevDelayLength'] = gw,
            this[lB(0x677)] = (gx - gw) / fI,
            this['allPassG'] = g7,
            this[lB(0x245)] = gc,
            this[lB(0x2e8)] = gd,
            this['sustainFilterB0'] = gf,
            this[lB(0x49f)] = gg,
            this[lB(0x5dc)] = gh,
            this[lB(0x219)] = (g9 - g7) / fI,
            this[lB(0x4ec)] = (gk - gc) / fI,
            this['sustainFilterA2Delta'] = (gl - gd) / fI,
            this[lB(0x6de)] = (gm - gf) / fI,
            this['sustainFilterB1Delta'] = (go - gg) / fI,
            this['sustainFilterB2Delta'] = (gp - gh) / fI;
            const gy = Math[lB(0x216)](Math[lB(0x253)](gw / fN)) > 0.01
              , gz = -0x1 == this['delayIndex'] || gy;
            if (null == this['delayLine'] || this[lB(0x3fc)]['length'] <= gv) {
                const gL = Math[lB(0x600)](0x2 * fE[lB(0x6a5)] / bf[lB(0x574)](0xc))
                  , gM = new Float32Array(bp[lB(0x727)](Math[lB(0x2f6)](gL, gv)));
                if (!gz && null != this['delayLine']) {
                    const gN = this['delayLine']['length'] - 0x1 >> 0x0
                      , gO = this[lB(0x500)] + this[lB(0x706)];
                    this[lB(0x500)] = this[lB(0x3fc)]['length'] - this[lB(0x706)];
                    for (let gP = 0x0; gP < this[lB(0x3fc)][lB(0x57c)]; gP++)
                        gM[gP] = this[lB(0x3fc)][gO + gP & gN];
                }
                this[lB(0x3fc)] = gM;
            }
            const gA = this[lB(0x3fc)]
              , gB = gA[lB(0x57c)] - 0x1 >> 0x0;
            if (gz) {
                this['delayIndex'] = 0x0,
                this[lB(0x343)] = 0x0,
                this['allPassPrevInput'] = 0x0,
                this['sustainFilterSample'] = 0x0,
                this['sustainFilterPrevOutput2'] = 0x0,
                this['sustainFilterPrevInput1'] = 0x0,
                this[lB(0x4b4)] = 0x0,
                this['fractionalDelaySample'] = 0x0;
                const gQ = -gw
                  , gR = Math[lB(0x4fb)](gQ - gr / 0x2)
                  , gS = Math['ceil'](gR + 0x2 * gr);
                this[lB(0x706)] = gS;
                for (let h2 = gR; h2 <= gS; h2++)
                    gA[h2 & gB] = 0x0;
                const gT = fF['wave']
                  , gU = gT[lB(0x57c)] - 0x1
                  , gV = gU / gr
                  , gW = Math['min'](0.2 * gr, 0.003 * fE[lB(0x6a5)])
                  , gX = Math['ceil'](gQ)
                  , gY = gQ + gr + gW
                  , gZ = gY;
                let h0 = (gX - gQ) * gV
                  , h1 = 0x0;
                for (let h3 = gX; h3 <= gZ; h3++) {
                    const h4 = 0x0 | h0
                      , h5 = h4 % gU;
                    let h6 = gT[h5];
                    const h7 = h0 - h4;
                    h6 += (gT[h5 + 0x1] - h6) * h7;
                    const h8 = (h6 - h1) / gV
                      , h9 = Math['min'](0x1, (h3 - gQ) / gW) * Math['min'](0x1, (gY - h3) / gW)
                      , ha = h9 * h9 * (0x3 - 0x2 * h9);
                    gA[h3 & gB] += h8 * ha,
                    h1 = h6,
                    h0 += gV;
                }
            }
        }
    }
    class bk {
        constructor() {
            const lC = jI;
            this['noteSecondsStart'] = 0x0,
            this[lC(0x52d)] = 0x0,
            this[lC(0x6f0)] = 0x0,
            this['noteTicksEnd'] = 0x0,
            this[lC(0x53b)] = a1['noteSizeMax'],
            this[lC(0x207)] = a1[lC(0x483)],
            this[lC(0x50d)] = a1[lC(0x483)],
            this[lC(0x615)] = a1[lC(0x483)],
            this['O'] = a1['noteSizeMax'],
            this[lC(0x469)] = 0x0,
            this['prevNoteSecondsEnd'] = 0x0,
            this['prevNoteTicksStart'] = 0x0,
            this['prevNoteTicksEnd'] = 0x0,
            this['N'] = a1[lC(0x483)],
            this[lC(0x239)] = !0x1,
            this['prevSlideEnd'] = !0x1,
            this[lC(0x80b)] = !0x1,
            this['nextSlideEnd'] = !0x1,
            this[lC(0x2b3)] = 0x0,
            this[lC(0x7da)] = 0x0,
            this[lC(0x5ba)] = 0x0,
            this[lC(0x3cc)] = 0x0,
            this[lC(0x391)] = [],
            this[lC(0x66e)] = [],
            this['R'] = [],
            this['H'] = 0x0,
            this['lowpassCutoffDecayVolumeCompensation'] = 0x1;
            for (let fE = 0x0; fE < 0x24; fE++)
                this['envelopeStarts'][fE] = 0x1,
                this[lC(0x66e)][fE] = 0x1;
            this['reset']();
        }
        ['reset']() {
            const lD = jI;
            this[lD(0x52d)] = 0x0,
            this[lD(0x5ae)] = 0x0,
            this['O'] = a1[lD(0x483)],
            this[lD(0x279)] = 0x0,
            this['prevNoteTicksEnd'] = 0x0,
            this['N'] = a1[lD(0x483)],
            this['H'] = 0x0;
        }
        ['computeEnvelopes'](fE, fF, fG, fH, fI) {
            const lE = jI
              , fJ = fE[lE(0x3a8)]();
            null == fI || !fI[lE(0x1fc)] || fJ['continues'] || fI['forceContinueAtStart'] || (this['prevNoteSecondsEnd'] = this[lE(0x52d)],
            this['prevNoteTicksEnd'] = this[lE(0x5ae)],
            this['N'] = this['O'],
            this['noteSecondsEnd'] = 0x0,
            this[lE(0x5ae)] = 0x0),
            null != fI && (null != fI[lE(0x833)] ? this['O'] = fI['note'][lE(0x2a6)][fI['note'][lE(0x2a6)][lE(0x57c)] - 0x1][lE(0x81f)] : this['O'] = a1[lE(0x483)]);
            const fK = fG + 0x1
              , fL = this[lE(0x52d)]
              , fM = fL + fH
              , fN = this['noteTicksEnd']
              , fO = fN + 0x1
              , fP = this['prevNoteSecondsEnd']
              , fQ = fP + fH
              , fR = this[lE(0x622)]
              , fS = fR + 0x1
              , fT = 0x1 / (a1[lE(0x696)] * a1['partsPerBeat'])
              , fU = fT * fG
              , fV = fT * fK;
            let fW = this['O']
              , fX = this['O']
              , fY = this['N']
              , fZ = 0x0
              , g0 = !0x1
              , g1 = !0x1
              , g2 = !0x1
              , g3 = !0x1
              , g4 = 0x0
              , g5 = 0x0
              , g6 = 0x0
              , g7 = 0x0;
            if (null != fI && null != fI[lE(0x833)] && !fI['passedEndOfNote']) {
                const ga = fI['note'][lE(0x61c)](fF)
                  , gb = fI[lE(0x833)]['pins'][ga - 0x1]
                  , gc = fI['note'][lE(0x2a6)][ga]
                  , gd = (fI['note'][lE(0x1b7)] + gb['time']) * a1['ticksPerPart']
                  , gf = (fI[lE(0x833)][lE(0x1b7)] + gc['time']) * a1[lE(0x696)]
                  , gg = (fG - gd) / (gf - gd)
                  , gh = (fK - gd) / (gf - gd);
                if (fW = gb['size'] + (gc['size'] - gb['size']) * gg,
                fX = gb[lE(0x81f)] + (gc['size'] - gb[lE(0x81f)]) * gh,
                fJ[lE(0x320)]) {
                    const gj = fI[lE(0x672)] * a1['ticksPerPart']
                      , gk = fI[lE(0x608)] * a1[lE(0x696)]
                      , gl = 0.5 * (gk - gj)
                      , gm = Math[lE(0x4c5)](gl, fJ['slideTicks']);
                    null == fI[lE(0x397)] || fI['forceContinueAtStart'] || (fG - gj < gm && (g0 = !0x0,
                    g4 = 0.5 * (0x1 - (fG - gj) / gm)),
                    fK - gj < gm && (g1 = !0x0,
                    g5 = 0.5 * (0x1 - (fK - gj) / gm))),
                    null == fI['nextNote'] || fI[lE(0x7ee)] || (fZ = fI[lE(0x291)]['pins'][0x0]['size'],
                    gk - fG < gm && (g2 = !0x0,
                    g6 = 0.5 * (0x1 - (gk - fG) / gm)),
                    gk - fK < gm && (g3 = !0x0,
                    g7 = 0.5 * (0x1 - (gk - fK) / gm)));
                }
            }
            let g8 = 0x1
              , g9 = !0x1;
            for (let go = 0x0; go <= fE[lE(0x863)]; go++) {
                let gp, gq, gr;
                if (go == fE['envelopeCount']) {
                    if (g9)
                        break;
                    gp = a1[lE(0x45f)]['dictionary'][lE(0x5cd)],
                    gq = 0x0,
                    gr = a1['envelopes'][lE(0x64a)]['note\x20size'];
                } else {
                    let gu = fE['envelopes'][go];
                    gp = a1[lE(0x45f)][gu[lE(0x46a)]],
                    gq = gu['index'],
                    gr = a1[lE(0x6ac)][gu['envelope']],
                    0x0 == gr['type'] && (g9 = !0x0);
                }
                if (null != gp[lE(0x29a)]) {
                    const gv = gp['computeIndex'] + gq;
                    let gw = bk['computeEnvelope'](gr, fL, fU, fW)
                      , gx = bk[lE(0x620)](gr, fM, fV, fX);
                    g0 && (gw += (bk[lE(0x620)](gr, fP, fU, fY) - gw) * g4);
                    g1 && (gx += (bk[lE(0x620)](gr, fQ, fV, fY) - gx) * g5);
                    g2 && (gw += (bk[lE(0x620)](gr, 0x0, fU, fZ) - gw) * g6);
                    g3 && (gx += (bk[lE(0x620)](gr, 0x0, fV, fZ) - gx) * g7);
                    if (this[lE(0x391)][gv] *= gw,
                    this[lE(0x66e)][gv] *= gx,
                    this['R'][this['H']++] = gv,
                    gp['isFilter']) {
                        const gy = fE['noteFilter'];
                        gy['controlPointCount'] > gq && 0x0 == gy[lE(0x47a)][gq][lE(0x7d5)] && (g8 = Math[lE(0x2f6)](g8, bk[lE(0x614)](gr)));
                    }
                }
            }
            this[lE(0x60a)] = fL,
            this[lE(0x52d)] = fM,
            this[lE(0x6f0)] = fN,
            this[lE(0x5ae)] = fO,
            this[lE(0x469)] = fP,
            this[lE(0x279)] = fQ,
            this[lE(0x21c)] = fR,
            this['prevNoteTicksEnd'] = fS,
            this[lE(0x50d)] = fY,
            this['nextNoteSize'] = fZ,
            this[lE(0x53b)] = fW,
            this[lE(0x207)] = fX,
            this[lE(0x239)] = g0,
            this[lE(0x7fc)] = g1,
            this[lE(0x80b)] = g2,
            this['nextSlideEnd'] = g3,
            this[lE(0x2b3)] = g4,
            this[lE(0x7da)] = g5,
            this[lE(0x5ba)] = g6,
            this['nextSlideRatioEnd'] = g7,
            this[lE(0x4ce)] = g8;
        }
        [jI(0x7b9)]() {
            const lF = jI;
            for (let fE = 0x0; fE < this['H']; fE++) {
                const fF = this['R'][fE];
                this[lF(0x391)][fF] = 0x1,
                this['envelopeEnds'][fF] = 0x1;
            }
            this['H'] = 0x0;
        }
        static['computeEnvelope'](fE, fF, fG, fH) {
            const lG = jI;
            switch (fE['type']) {
            case 0x0:
                return bp['noteSizeToVolumeMult'](fH);
            case 0x1:
                return 0x1;
            case 0x4:
                return 0x1 / (0x1 + fF * fE['speed']);
            case 0x5:
                return 0x1 - 0x1 / (0x1 + fF * fE[lG(0x354)]);
            case 0x6:
                return 0.5 - 0.5 * Math[lG(0x828)](0x2 * fG * Math['PI'] * fE['speed']);
            case 0x7:
                return 0.75 - 0.25 * Math['cos'](0x2 * fG * Math['PI'] * fE[lG(0x354)]);
            case 0x2:
                return Math[lG(0x2f6)](0x1, 0x2 - 0xa * fF);
            case 0x3:
                const fI = 0.25 / Math['sqrt'](fE['speed']);
                return fF < fI ? fF / fI : 0x1 / (0x1 + (fF - fI) * fE['speed']);
            case 0x8:
                return Math[lG(0x3b6)](0x2, -fE['speed'] * fF);
            default:
                throw new Error(lG(0x738));
            }
        }
        static['getLowpassCutoffDecayVolumeCompensation'](fE) {
            const lH = jI;
            return 0x8 == fE[lH(0x7d5)] ? 1.25 + 0.025 * fE[lH(0x354)] : 0x4 == fE['type'] ? 0x1 + 0.02 * fE['speed'] : 0x1;
        }
    }
    class bl {
        constructor() {
            const lI = jI;
            this[lI(0x68d)] = Array(a1[lI(0x5d4)])['fill'](0x0),
            this[lI(0x746)] = 0x0,
            this[lI(0x540)] = 0x0,
            this['drumsetPitch'] = null,
            this['note'] = null,
            this['prevNote'] = null,
            this[lI(0x291)] = null,
            this[lI(0x7ec)] = 0x0,
            this['nextNotePitchIndex'] = 0x0,
            this[lI(0x809)] = !0x0,
            this[lI(0x1fc)] = !0x1,
            this['isOnLastTick'] = !0x1,
            this[lI(0x1b1)] = !0x1,
            this[lI(0x6ea)] = !0x1,
            this[lI(0x7ee)] = !0x1,
            this['noteStartPart'] = 0x0,
            this[lI(0x608)] = 0x0,
            this[lI(0x19b)] = 0x0,
            this['liveInputSamplesHeld'] = 0x0,
            this['lastInterval'] = 0x0,
            this['noiseSample'] = 0x0,
            this[lI(0x66d)] = [],
            this[lI(0x6b6)] = [],
            this['phaseDeltaScales'] = [],
            this[lI(0x618)] = 0x0,
            this['expressionDelta'] = 0x0,
            this['operatorExpressions'] = [],
            this[lI(0x4d9)] = [],
            this[lI(0x2ea)] = Array(a1['maxPitchOrOperatorCount'])[lI(0x88a)](null),
            this['prevVibrato'] = null,
            this[lI(0x425)] = null,
            this[lI(0x1a7)] = 0x0,
            this['pulseWidthDelta'] = 0x0,
            this['supersawDynamism'] = 0x0,
            this['supersawDynamismDelta'] = 0x0,
            this['supersawUnisonDetunes'] = [],
            this['supersawShape'] = 0x0,
            this['supersawShapeDelta'] = 0x0,
            this[lI(0x4f1)] = 0x0,
            this[lI(0x2fa)] = 0x0,
            this[lI(0x88b)] = null,
            this[lI(0x56d)] = -0x1,
            this['supersawPrevPhaseDelta'] = null,
            this[lI(0x596)] = [],
            this[lI(0x4fd)] = [],
            this[lI(0x2d4)] = 0x0,
            this['initialNoteFilterInput1'] = 0x0,
            this[lI(0x457)] = 0x0,
            this['specialIntervalExpressionMult'] = 0x1,
            this[lI(0x673)] = [],
            this['feedbackMult'] = 0x0,
            this[lI(0x369)] = 0x0,
            this['envelopeComputer'] = new bk(),
            this['reset']();
        }
        ['reset']() {
            const lJ = jI;
            this[lJ(0x2e1)] = 0x0;
            for (let fE = 0x0; fE < a1[lJ(0x514)]; fE++)
                this['phases'][fE] = 0x0,
                this['feedbackOutputs'][fE] = 0x0,
                this[lJ(0x2ea)][fE] = null;
            for (let fF = 0x0; fF < this[lJ(0x2d4)]; fF++)
                this[lJ(0x4fd)][fF]['resetOutput']();
            this['noteFilterCount'] = 0x0,
            this['initialNoteFilterInput1'] = 0x0,
            this['initialNoteFilterInput2'] = 0x0,
            this['liveInputSamplesHeld'] = 0x0,
            this[lJ(0x56d)] = -0x1;
            for (const fG of this[lJ(0x596)])
                fG[lJ(0x6d3)]();
            this[lJ(0x1e0)][lJ(0x6d3)](),
            this[lJ(0x59b)] = null,
            this[lJ(0x425)] = null,
            this[lJ(0x432)] = null,
            this['drumsetPitch'] = null;
        }
    }
    class bm {
        constructor() {
            const lK = jI;
            this[lK(0x2dc)] = !0x1,
            this[lK(0x74b)] = !0x1,
            this['tonesAddedInThisTick'] = !0x1,
            this['flushingDelayLines'] = !0x1,
            this[lK(0x830)] = !0x1,
            this['attentuationProgress'] = 0x0,
            this['flushedSamples'] = 0x0,
            this[lK(0x32a)] = new aR(),
            this['releasedTones'] = new aR(),
            this[lK(0x6b9)] = new aR(),
            this[lK(0x7d5)] = 0x0,
            this[lK(0x510)] = null,
            this['wave'] = null,
            this[lK(0x2d3)] = 0x1,
            this[lK(0x5d2)] = null,
            this['chord'] = null,
            this['effects'] = 0x0,
            this['eqFilterVolume'] = 0x1,
            this['eqFilterVolumeDelta'] = 0x0,
            this[lK(0x477)] = 0x1,
            this['mixVolumeDelta'] = 0x0,
            this[lK(0x6bf)] = 0x0,
            this['delayInputMultDelta'] = 0x0,
            this[lK(0x1ce)] = 0x0,
            this[lK(0x3b1)] = 0x0,
            this[lK(0x6cc)] = 0x0,
            this['distortionDriveDelta'] = 0x0,
            this[lK(0x32c)] = 0x0,
            this[lK(0x7d7)] = 0x0,
            this['distortionFractionalInput3'] = 0x0,
            this['distortionPrevInput'] = 0x0,
            this[lK(0x166)] = 0x0,
            this['bitcrusherPrevInput'] = 0x0,
            this['bitcrusherCurrentOutput'] = 0x0,
            this['bitcrusherPhase'] = 0x1,
            this[lK(0x1da)] = 0x0,
            this['bitcrusherPhaseDeltaScale'] = 0x1,
            this[lK(0x68c)] = 0x1,
            this['bitcrusherScaleScale'] = 0x1,
            this[lK(0x2ce)] = 0x1,
            this['bitcrusherFoldLevelScale'] = 0x1,
            this['eqFilters'] = [],
            this[lK(0x859)] = 0x0,
            this['initialEqFilterInput1'] = 0x0,
            this['initialEqFilterInput2'] = 0x0,
            this[lK(0x2fe)] = null,
            this[lK(0x390)] = 0x0,
            this[lK(0x778)] = 0x0,
            this[lK(0x70d)] = 0x0,
            this[lK(0x26e)] = 0x0,
            this[lK(0x4db)] = 0x0,
            this[lK(0x70b)] = 0x0,
            this['panningOffsetR'] = 0x0,
            this[lK(0x7f9)] = 0x0,
            this['panningOffsetDeltaR'] = 0x0,
            this['chorusDelayLineL'] = null,
            this[lK(0x846)] = null,
            this['chorusDelayLineDirty'] = !0x1,
            this[lK(0x256)] = 0x0,
            this['chorusPhase'] = 0x0,
            this[lK(0x6d1)] = 0x0,
            this['chorusVoiceMultDelta'] = 0x0,
            this[lK(0x4ca)] = 0x0,
            this['chorusCombinedMultDelta'] = 0x0,
            this[lK(0x20b)] = null,
            this[lK(0x35f)] = null,
            this[lK(0x535)] = !0x1,
            this['echoDelayPos'] = 0x0,
            this[lK(0x5bc)] = 0x0,
            this[lK(0x705)] = null,
            this[lK(0x7e2)] = 0x0,
            this['echoDelayOffsetRatioDelta'] = 0x0,
            this['echoMult'] = 0x0,
            this['echoMultDelta'] = 0x0,
            this[lK(0x198)] = 0x0,
            this[lK(0x290)] = 0x0,
            this[lK(0x793)] = 0x0,
            this[lK(0x63a)] = 0x0,
            this[lK(0x51c)] = 0x0,
            this[lK(0x1a6)] = 0x0,
            this['echoShelfPrevInputR'] = 0x0,
            this[lK(0x76f)] = null,
            this[lK(0x42d)] = !0x1,
            this[lK(0x885)] = 0x0,
            this['reverbMult'] = 0x0,
            this['reverbMultDelta'] = 0x0,
            this[lK(0x7cd)] = 0x0,
            this[lK(0x5a5)] = 0x0,
            this[lK(0x466)] = 0x0,
            this[lK(0x7d2)] = 0x0,
            this['reverbShelfSample1'] = 0x0,
            this['reverbShelfSample2'] = 0x0,
            this[lK(0x84a)] = 0x0,
            this['reverbShelfPrevInput0'] = 0x0,
            this['reverbShelfPrevInput1'] = 0x0,
            this['reverbShelfPrevInput2'] = 0x0,
            this['reverbShelfPrevInput3'] = 0x0,
            this['spectrumWave'] = new b8(),
            this['harmonicsWave'] = new ba(),
            this['drumsetSpectrumWaves'] = [];
            for (let fE = 0x0; fE < a1['drumCount']; fE++)
                this[lK(0x526)][fE] = new b8();
        }
        ['allocateNecessaryBuffers'](fE, fF, fG) {
            const lL = jI;
            if (aj(fF[lL(0x5a9)]) && (null == this['panningDelayLine'] || this['panningDelayLine']['length'] < fE[lL(0x427)]) && (this[lL(0x2fe)] = new Float32Array(fE['panningDelayBufferSize'])),
            ak(fF[lL(0x5a9)]) && ((null == this[lL(0x33c)] || this[lL(0x33c)][lL(0x57c)] < fE['chorusDelayBufferSize']) && (this['chorusDelayLineL'] = new Float32Array(fE['chorusDelayBufferSize'])),
            (null == this[lL(0x846)] || this[lL(0x846)][lL(0x57c)] < fE['chorusDelayBufferSize']) && (this[lL(0x846)] = new Float32Array(fE['chorusDelayBufferSize']))),
            al(fF[lL(0x5a9)])) {
                const fH = Math[lL(0x2f6)](a1[lL(0x7d9)] >> 0x1, fF['echoDelay'] + 0x1)
                  , fI = 0x2 * bp['fittingPowerOfTwo'](fH * a1['echoDelayStepTicks'] * fG);
                if (null == this['echoDelayLineL'] || null == this[lL(0x35f)])
                    this[lL(0x20b)] = new Float32Array(fI),
                    this['echoDelayLineR'] = new Float32Array(fI);
                else {
                    if (this['echoDelayLineL']['length'] < fI || this['echoDelayLineR'][lL(0x57c)] < fI) {
                        const fJ = new Float32Array(fI)
                          , fK = new Float32Array(fI)
                          , fL = this['echoDelayLineL'][lL(0x57c)] - 0x1;
                        for (let fM = 0x0; fM < this['echoDelayLineL']['length']; fM++)
                            fJ[fM] = this['echoDelayLineL'][this['echoDelayPos'] + fM & fL],
                            fK[fM] = this[lL(0x20b)][this[lL(0x669)] + fM & fL];
                        this['echoDelayPos'] = this[lL(0x20b)][lL(0x57c)],
                        this[lL(0x20b)] = fJ,
                        this['echoDelayLineR'] = fK;
                    }
                }
            }
            am(fF[lL(0x5a9)]) && null == this['reverbDelayLine'] && (this[lL(0x76f)] = new Float32Array(a1[lL(0x21b)]));
        }
        [jI(0x26b)]() {
            const lM = jI;
            this[lM(0x685)] = 0x0,
            this[lM(0x6af)] = 0x0,
            this['bitcrusherPhase'] = 0x1;
            for (let fE = 0x0; fE < this['eqFilterCount']; fE++)
                this['eqFilters'][fE][lM(0x331)]();
            if (this[lM(0x859)] = 0x0,
            this['initialEqFilterInput1'] = 0x0,
            this['initialEqFilterInput2'] = 0x0,
            this['distortionFractionalInput1'] = 0x0,
            this['distortionFractionalInput2'] = 0x0,
            this['distortionFractionalInput3'] = 0x0,
            this['distortionPrevInput'] = 0x0,
            this['distortionNextOutput'] = 0x0,
            this[lM(0x390)] = 0x0,
            null != this[lM(0x2fe)]) {
                for (let fF = 0x0; fF < this['panningDelayLine']['length']; fF++)
                    this[lM(0x2fe)][fF] = 0x0;
            }
            this['echoDelayOffsetEnd'] = null,
            this[lM(0x63a)] = 0x0,
            this[lM(0x51c)] = 0x0,
            this['echoShelfPrevInputL'] = 0x0,
            this[lM(0x34e)] = 0x0,
            this['reverbShelfSample0'] = 0x0,
            this['reverbShelfSample1'] = 0x0,
            this[lM(0x2c6)] = 0x0,
            this['reverbShelfSample3'] = 0x0,
            this['reverbShelfPrevInput0'] = 0x0,
            this['reverbShelfPrevInput1'] = 0x0,
            this[lM(0x48e)] = 0x0,
            this[lM(0x413)] = 0x0,
            this[lM(0x2dc)] = !0x1,
            this['flushingDelayLines'] = !0x1,
            this[lM(0x830)] = !0x1,
            this[lM(0x871)] = 0x0,
            this[lM(0x443)] = 0x0;
        }
        [jI(0x2e0)]() {
            const lN = jI;
            if (this['deactivate'](),
            this[lN(0x2f3)]) {
                for (let fE = 0x0; fE < this[lN(0x33c)]['length']; fE++)
                    this['chorusDelayLineL'][fE] = 0x0;
                for (let fF = 0x0; fF < this[lN(0x846)][lN(0x57c)]; fF++)
                    this[lN(0x846)][fF] = 0x0;
            }
            if (this[lN(0x535)]) {
                for (let fG = 0x0; fG < this[lN(0x20b)]['length']; fG++)
                    this[lN(0x20b)][fG] = 0x0;
                for (let fH = 0x0; fH < this['echoDelayLineR']['length']; fH++)
                    this[lN(0x35f)][fH] = 0x0;
            }
            if (this['reverbDelayLineDirty']) {
                for (let fI = 0x0; fI < this[lN(0x76f)]['length']; fI++)
                    this[lN(0x76f)][fI] = 0x0;
            }
            this['chorusPhase'] = 0x0;
        }
        [jI(0x3d5)](fE, fF, fG, fH, fI) {
            const lO = jI;
            this['computed'] = !0x0,
            this[lO(0x7d5)] = fF[lO(0x7d5)],
            this['synthesizer'] = bp[lO(0x7e8)](fF),
            this[lO(0x5d2)] = a1[lO(0x285)][fF['unison']],
            this['chord'] = fF[lO(0x1b0)](),
            this[lO(0x2d3)] = a1[lO(0x5f0)][fF[lO(0x744)]][lO(0x269)];
            let fJ = fF[lO(0x5a9)];
            0x0 == fF[lO(0x1ce)] && (fJ &= -0x9),
            fF[lO(0x19c)] == a1['panCenter'] && (fJ &= -0x5),
            0x0 == fF[lO(0x215)] && (fJ &= -0x3),
            0x0 == fF['echoSustain'] && (fJ &= -0x41),
            0x0 == fF['reverb'] && (fJ &= -0x2),
            this[lO(0x5a9)] = fJ,
            this['allocateNecessaryBuffers'](fE, fF, fG);
            const fK = fE[lO(0x6a5)];
            this['updateWaves'](fF, fK);
            const fL = ag(fJ)
              , fM = ah(fJ)
              , fN = aj(fJ)
              , fO = ak(fJ)
              , fP = al(fJ)
              , fQ = am(fJ);
            if (fL) {
                const g2 = Math['min'](0x1, fF[lO(0x1ce)] / (a1['distortionRange'] - 0x1))
                  , g3 = Math[lO(0x4c5)](0x1, fF[lO(0x1ce)] / (a1['distortionRange'] - 0x1))
                  , g4 = Math['pow'](0x1 - 0.895 * (Math[lO(0x3b6)](0x14, g2) - 0x1) / 0x13, 0x2)
                  , g5 = Math[lO(0x3b6)](0x1 - 0.895 * (Math['pow'](0x14, g3) - 0x1) / 0x13, 0x2)
                  , g6 = (0x1 + 0x2 * g2) / a1[lO(0x4f2)]
                  , g7 = (0x1 + 0x2 * g3) / a1[lO(0x4f2)];
                this['distortion'] = g4,
                this['distortionDelta'] = (g5 - g4) / fH,
                this['distortionDrive'] = g6,
                this[lO(0x170)] = (g7 - g6) / fH;
            }
            if (fM) {
                const g8 = fF[lO(0x770)]
                  , g9 = fF[lO(0x770)]
                  , ga = fF[lO(0x41e)]
                  , gb = fF[lO(0x41e)]
                  , gc = a1['keys'][fE[lO(0x3c1)][lO(0x319)]][lO(0x2d8)]
                  , gd = bf['frequencyFromPitch'](gc + 0x3c) * Math[lO(0x3b6)](0x2, (a1[lO(0x448)] - 0x1 - g8) * a1[lO(0x3ab)])
                  , gf = bf['frequencyFromPitch'](gc + 0x3c) * Math[lO(0x3b6)](0x2, (a1['bitcrusherFreqRange'] - 0x1 - g9) * a1['bitcrusherOctaveStep'])
                  , gg = Math[lO(0x4c5)](0x1, gd / fK)
                  , gh = Math['min'](0x1, gf / fK);
                this['bitcrusherPhaseDelta'] = gg,
                this['bitcrusherPhaseDeltaScale'] = Math['pow'](gh / gg, 0x1 / fH);
                const gj = 0x2 * a1[lO(0x61f)] * Math[lO(0x3b6)](0x2, 0x1 - Math['pow'](0x2, 0.5 * (a1['bitcrusherQuantizationRange'] - 0x1 - ga)))
                  , gk = 0x2 * a1['bitcrusherBaseVolume'] * Math['pow'](0x2, 0x1 - Math[lO(0x3b6)](0x2, 0.5 * (a1[lO(0x86b)] - 0x1 - gb)));
                this['bitcrusherScale'] = gj,
                this[lO(0x4f8)] = Math[lO(0x3b6)](gk / gj, 0x1 / fH);
                const gl = 0x2 * a1['bitcrusherBaseVolume'] * Math['pow'](1.5, a1['bitcrusherQuantizationRange'] - 0x1 - ga)
                  , gm = 0x2 * a1[lO(0x61f)] * Math[lO(0x3b6)](1.5, a1[lO(0x86b)] - 0x1 - gb);
                this['bitcrusherFoldLevel'] = gl,
                this[lO(0x813)] = Math['pow'](gm / gl, 0x1 / fH);
            }
            let fR = 0x1;
            const fS = fF['eqFilter'];
            for (let go = 0x0; go < fS['controlPointCount']; go++) {
                const gp = fS['controlPoints'][go];
                gp[lO(0x44e)](bp['tempFilterStartCoefficients'], fK, 0x1, 0x1),
                gp['toCoefficients'](bp['tempFilterEndCoefficients'], fK, 0x1, 0x1),
                this['eqFilters'][lO(0x57c)] <= go && (this[lO(0x67d)][go] = new aU()),
                this[lO(0x67d)][go][lO(0x1e3)](bp['tempFilterStartCoefficients'], bp['tempFilterEndCoefficients'], 0x1 / fH, 0x0 == gp['type']),
                fR *= gp[lO(0x3fa)]();
            }
            this[lO(0x859)] = fS['controlPointCount'],
            fR = Math['min'](0x3, fR);
            const fT = bp['instrumentVolumeToVolumeMult'](fF[lO(0x7c6)]);
            this['mixVolume'] = fT;
            const fU = fT;
            this[lO(0x773)] = (fU - this['mixVolume']) / fH;
            let fV = fR
              , fW = fR
              , fX = 0x1
              , fY = 0x1;
            if (fN) {
                const gq = (fF['pan'] - a1[lO(0x374)]) / a1[lO(0x374)]
                  , gr = Math['max'](-0x1, Math[lO(0x4c5)](0x1, gq))
                  , gu = Math['max'](-0x1, Math[lO(0x4c5)](0x1, gq))
                  , gv = 1.414 * Math[lO(0x828)]((0x1 + gr) * Math['PI'] * 0.25)
                  , gw = 1.414 * Math['cos']((0x1 - gr) * Math['PI'] * 0.25)
                  , gx = 1.414 * Math[lO(0x828)]((0x1 + gu) * Math['PI'] * 0.25)
                  , gy = 1.414 * Math['cos']((0x1 - gu) * Math['PI'] * 0.25)
                  , gz = fK * a1[lO(0x603)]
                  , gA = gr * gz
                  , gB = gu * gz
                  , gC = Math['max'](0x0, gA)
                  , gD = Math[lO(0x2f6)](0x0, -gA)
                  , gE = Math['max'](0x0, gB)
                  , gF = Math['max'](0x0, -gB);
                this[lO(0x778)] = gv,
                this[lO(0x70d)] = gw,
                this['panningVolumeDeltaL'] = (gx - gv) / fH,
                this[lO(0x4db)] = (gy - gw) / fH,
                this[lO(0x70b)] = this[lO(0x390)] - gC + fE[lO(0x427)],
                this['panningOffsetR'] = this['panningDelayPos'] - gD + fE[lO(0x427)],
                this[lO(0x7f9)] = (gE - gC) / fH,
                this[lO(0x716)] = (gF - gD) / fH;
            }
            if (fO) {
                let gG = Math['min'](0x1, fF[lO(0x215)] / (a1[lO(0x31e)] - 0x1))
                  , gH = Math['min'](0x1, fF['chorus'] / (a1[lO(0x31e)] - 0x1));
                gG = 0.6 * gG + 0.4 * Math[lO(0x3b6)](gG, 0x6),
                gH = 0.6 * gH + 0.4 * Math['pow'](gH, 0x6);
                const gI = 0x1 / Math['sqrt'](0x3 * gG * gG + 0x1)
                  , gJ = 0x1 / Math['sqrt'](0x3 * gH * gH + 0x1);
                this[lO(0x6d1)] = gG,
                this[lO(0x722)] = (gH - gG) / fH,
                this['chorusCombinedMult'] = gI,
                this[lO(0x293)] = (gJ - gI) / fH;
            }
            let fZ = 0x0
              , g0 = 0x0;
            if (fP) {
                const gK = 0.9 * Math['min'](0x1, Math['pow'](fF[lO(0x7b6)] / a1['echoSustainRange'], 1.1))
                  , gL = 0.9 * Math['min'](0x1, Math[lO(0x3b6)](fF['echoSustain'] / a1['echoSustainRange'], 1.1));
                this[lO(0x39e)] = gK,
                this[lO(0x534)] = (gL - gK) / fH,
                fZ = Math[lO(0x2f6)](gK, gL);
                const gM = Math['round']((fF['echoDelay'] + 0x1) * a1['echoDelayStepTicks'] * fG);
                null != this['echoDelayOffsetEnd'] ? this[lO(0x5bc)] = this['echoDelayOffsetEnd'] : this[lO(0x5bc)] = gM,
                this['echoDelayOffsetEnd'] = gM,
                g0 = 0.5 * (this['echoDelayOffsetStart'] + this[lO(0x705)]) / fK,
                this[lO(0x7e2)] = 0x0,
                this['echoDelayOffsetRatioDelta'] = 0x1 / fH;
                const gN = 0x2 * Math['PI'] * a1['echoShelfHz'] / fE[lO(0x6a5)];
                bp['tempFilterStartCoefficients']['highShelf1stOrder'](gN, a1['echoShelfGain']),
                this['echoShelfA1'] = bp[lO(0x52f)]['a'][0x1],
                this[lO(0x290)] = bp[lO(0x52f)]['b'][0x0],
                this[lO(0x793)] = bp['tempFilterStartCoefficients']['b'][0x1];
            }
            let g1 = 0x0;
            if (fQ) {
                const gO = 0.425 * Math['min'](0x1, Math['pow'](fF[lO(0x76b)] / a1[lO(0x796)], 0.667))
                  , gP = 0.425 * Math['min'](0x1, Math[lO(0x3b6)](fF['reverb'] / a1[lO(0x796)], 0.667));
                this['reverbMult'] = gO,
                this['reverbMultDelta'] = (gP - gO) / fH,
                g1 = Math['max'](gO, gP);
                const gQ = 0x2 * Math['PI'] * a1['reverbShelfHz'] / fE[lO(0x6a5)];
                bp[lO(0x52f)][lO(0x59d)](gQ, a1['reverbShelfGain']),
                this[lO(0x7cd)] = bp[lO(0x52f)]['a'][0x1],
                this['reverbShelfB0'] = bp[lO(0x52f)]['b'][0x0],
                this['reverbShelfB1'] = bp['tempFilterStartCoefficients']['b'][0x1];
            }
            if (this['tonesAddedInThisTick'])
                this[lO(0x871)] = 0x0,
                this[lO(0x443)] = 0x0,
                this['flushingDelayLines'] = !0x1;
            else {
                if (this[lO(0x19a)]) {
                    fV = 0x0,
                    fW = 0x0,
                    fX = 0x0,
                    fY = 0x0;
                    let gR = 0x0;
                    fO && (gR += fE['chorusDelayBufferSize']),
                    fP && (gR += this['echoDelayLineL'][lO(0x57c)]),
                    fQ && (gR += a1[lO(0x21b)]),
                    this[lO(0x443)] += fH,
                    this['flushedSamples'] >= gR && (this[lO(0x830)] = !0x0);
                } else {
                    0x0 == this['attentuationProgress'] || (fV = 0x0),
                    fW = 0x0;
                    const gS = 0x1 / 0x100
                      , gT = -Math['log2'](gS);
                    let gU = 0x0;
                    if (fO && (gU += a1[lO(0x4a1)]),
                    fP) {
                        const gX = Math['pow'](fZ, 0x1 / g0);
                        gU += -0x1 / Math['log2'](gX) * gT;
                    }
                    if (fQ) {
                        const gY = 0x2 * g1
                          , gZ = a1[lO(0x21b)] / 0x4 / fK
                          , h0 = Math['pow'](gY, 0x1 / gZ);
                        gU += -0x1 / Math['log2'](h0) * gT;
                    }
                    const gV = fG / fK / gU
                      , gW = this[lO(0x871)] + gV;
                    gW >= 0x1 && (fY = 0x0),
                    this[lO(0x871)] = gW,
                    this[lO(0x871)] >= 0x1 && (this[lO(0x19a)] = !0x0);
                }
            }
            this[lO(0x807)] = fV,
            this[lO(0x4b0)] = (fW - fV) / fH,
            this['delayInputMult'] = fX,
            this[lO(0x724)] = (fY - fX) / fH;
        }
        ['updateWaves'](fE, fF) {
            const lP = jI;
            if (0x0 == fE['type'])
                this['wave'] = a1[lP(0x25a)][fE['chipWave']]['samples'];
            else {
                if (0x2 == fE['type'])
                    this[lP(0x522)] = a5(fE[lP(0x744)], aQ, aO);
                else {
                    if (0x5 == fE[lP(0x7d5)])
                        this['wave'] = this['harmonicsWave']['getCustomWave'](fE['harmonicsWave'], fE[lP(0x7d5)]);
                    else {
                        if (0x7 == fE['type'])
                            this['wave'] = this['harmonicsWave']['getCustomWave'](fE['harmonicsWave'], fE[lP(0x7d5)]);
                        else {
                            if (0x3 == fE[lP(0x7d5)])
                                this[lP(0x522)] = this['spectrumWave']['getCustomWave'](fE[lP(0x80c)], 0x8);
                            else {
                                if (0x4 == fE[lP(0x7d5)]) {
                                    for (let fG = 0x0; fG < a1[lP(0x71e)]; fG++)
                                        this['drumsetSpectrumWaves'][fG][lP(0x183)](fE['drumsetSpectrumWaves'][fG], bm['G'](fG));
                                    this[lP(0x522)] = null;
                                } else
                                    this[lP(0x522)] = null;
                            }
                        }
                    }
                }
            }
        }
        ['getDrumsetWave'](fE) {
            const lQ = jI;
            if (0x4 == this['type'])
                return this['drumsetSpectrumWaves'][fE][lQ(0x522)];
            throw new Error(lQ(0x834));
        }
        static['drumsetIndexReferenceDelta'](fE) {
            return bf['frequencyFromPitch'](a1['spectrumBasePitch'] + 0x6 * fE) / 0xac44;
        }
        static['G'](fE) {
            const lR = jI;
            return 0xf + Math[lR(0x253)](bm[lR(0x6f8)](fE));
        }
    }
    class bo {
        constructor() {
            const lS = jI;
            this[lS(0x84c)] = [],
            this[lS(0x3ef)] = !0x1,
            this['singleSeamlessInstrument'] = null;
        }
    }
    class bp {
        constructor(fE=null) {
            const lT = jI;
            this[lT(0x6a5)] = 0xac44,
            this[lT(0x3c1)] = null,
            this[lT(0x7a0)] = !0x1,
            this['anticipatePoorPerformance'] = !0x1,
            this['liveInputDuration'] = 0x0,
            this['liveInputStarted'] = !0x1,
            this['liveInputPitches'] = [],
            this['liveInputChannel'] = 0x0,
            this['liveInputInstruments'] = [],
            this['loopRepeatCount'] = -0x1,
            this[lT(0x7c6)] = 0x1,
            this['enableMetronome'] = !0x1,
            this['countInMetronome'] = !0x1,
            this['playheadInternal'] = 0x0,
            this[lT(0x6e2)] = 0x0,
            this['prevBar'] = null,
            this['nextBar'] = null,
            this[lT(0x408)] = 0x0,
            this['part'] = 0x0,
            this['tick'] = 0x0,
            this['isAtStartOfTick'] = !0x0,
            this[lT(0x3df)] = 0x0,
            this['isPlayingSong'] = !0x1,
            this[lT(0x679)] = !0x1,
            this[lT(0x628)] = 0x0,
            this['browserAutomaticallyClearsAudioBuffer'] = !0x0,
            this['tempDrumSetControlPoint'] = new bb(),
            this[lT(0x2c7)] = new aT(),
            this['channels'] = [],
            this['tonePool'] = new aR(),
            this['tempMatchedPitchTones'] = Array(a1['maxChordSize'])['fill'](null),
            this['startedMetronome'] = !0x1,
            this['metronomeSamplesRemaining'] = -0x1,
            this['metronomeAmplitude'] = 0x0,
            this['metronomePrevAmplitude'] = 0x0,
            this[lT(0x2d9)] = 0x0,
            this['limit'] = 0x0,
            this['tempMonoInstrumentSampleBuffer'] = null,
            this[lT(0x33a)] = null,
            this['scriptNode'] = null,
            this['audioProcessCallback'] = fF => {
                const lU = lT
                  , fG = fF['outputBuffer']
                  , fH = fG[lU(0x435)](0x0)
                  , fI = fG[lU(0x435)](0x1);
                if (!this[lU(0x1ff)] || 0x0 == fH[0x0] && 0x0 == fI[0x0] && 0x0 == fH[fG[lU(0x57c)] - 0x1] && 0x0 == fI[fG['length'] - 0x1] || (this[lU(0x1ff)] = !0x1),
                !this[lU(0x1ff)]) {
                    const fJ = fG[lU(0x57c)];
                    for (let fK = 0x0; fK < fJ; fK++)
                        fH[fK] = 0x0,
                        fI[fK] = 0x0;
                }
                !this[lU(0x753)] && performance[lU(0x23b)]() >= this[lU(0x628)] ? this['deactivateAudio']() : this['synthesize'](fH, fI, fG[lU(0x57c)], this[lU(0x753)]);
            }
            ,
            this['computeDelayBufferSizes'](),
            null != fE && this[lT(0x16f)](fE);
        }
        ['syncSongState']() {
            const lV = jI
              , fE = this[lV(0x3c1)][lV(0x777)]();
            for (let fF = this['channels']['length']; fF < fE; fF++)
                this[lV(0x7b3)][fF] = new bo();
            this['channels'][lV(0x57c)] = fE;
            for (let fG = 0x0; fG < fE; fG++) {
                const fH = this['song'][lV(0x7b3)][fG]
                  , fI = this[lV(0x7b3)][fG];
                for (let fJ = fI['instruments']['length']; fJ < fH[lV(0x84c)]['length']; fJ++)
                    fI['instruments'][fJ] = new bm();
                if (fI['instruments']['length'] = fH['instruments'][lV(0x57c)],
                fI['muted'] != fH[lV(0x3ef)] && (fI['muted'] = fH['muted'],
                fI[lV(0x3ef)])) {
                    for (const fK of fI[lV(0x84c)])
                        fK[lV(0x2e0)]();
                }
            }
        }
        [jI(0x1ef)](fE) {
            const lW = jI;
            if (null != fE) {
                this[lW(0x406)]();
                const fF = this['getSamplesPerTick']();
                for (let fG = 0x0; fG < fE[lW(0x777)](); fG++)
                    for (let fH = 0x0; fH < fE[lW(0x7b3)][fG][lW(0x84c)]['length']; fH++) {
                        const fI = fE[lW(0x7b3)][fG]['instruments'][fH]
                          , fJ = this[lW(0x7b3)][fG]['instruments'][fH];
                        bp['getInstrumentSynthFunction'](fI),
                        fJ['updateWaves'](fI, this['samplesPerSecond']),
                        fJ['allocateNecessaryBuffers'](this, fI, fF);
                    }
            }
        }
        static[jI(0x5c5)](fE) {
            return (Math['pow'](0x10, fE / 0xf) - 0x1) / 0xf;
        }
        get['playing']() {
            return this['isPlayingSong'];
        }
        get['recording']() {
            const lX = jI;
            return this[lX(0x679)];
        }
        get['playhead']() {
            const lY = jI;
            return this[lY(0x6e4)];
        }
        set['playhead'](fE) {
            const lZ = jI;
            if (null != this[lZ(0x3c1)]) {
                this['playheadInternal'] = Math['max'](0x0, Math['min'](this[lZ(0x3c1)]['barCount'], fE));
                let fF = this['playheadInternal'];
                this['bar'] = Math['floor'](fF),
                fF = this[lZ(0x3c1)][lZ(0x6c9)] * (fF - this[lZ(0x6e2)]),
                this[lZ(0x408)] = Math['floor'](fF),
                fF = a1['partsPerBeat'] * (fF - this['beat']),
                this['part'] = Math[lZ(0x4fb)](fF),
                fF = a1['ticksPerPart'] * (fF - this[lZ(0x46b)]),
                this['tick'] = Math['floor'](fF),
                this[lZ(0x3df)] = 0x0,
                this['isAtStartOfTick'] = !0x0,
                this['prevBar'] = null;
            }
        }
        [jI(0x511)]() {
            const m0 = jI;
            if (null == this['song'])
                throw new Error();
            return this[m0(0x78e)]() * a1['ticksPerPart'] * a1['partsPerBeat'] * this[m0(0x3c1)][m0(0x6c9)];
        }
        ['getTicksIntoBar']() {
            const m1 = jI;
            return (this[m1(0x408)] * a1['partsPerBeat'] + this[m1(0x46b)]) * a1[m1(0x696)] + this['tick'];
        }
        ['getCurrentPart']() {
            const m2 = jI;
            return this['beat'] * a1[m2(0x58d)] + this[m2(0x46b)];
        }
        [jI(0x703)](fE, fF) {
            const m3 = jI;
            if (null == this[m3(0x3c1)])
                throw new Error();
            let fG = this['song'][m3(0x278)] * (this['loopRepeatCount'] + 0x1);
            return fE && (fG += this[m3(0x3c1)]['loopStart']),
            fF && (fG += this[m3(0x3c1)][m3(0x647)] - (this['song']['loopStart'] + this[m3(0x3c1)][m3(0x278)])),
            fG;
        }
        ['setSong'](fE) {
            const m4 = jI;
            m4(0x428) == typeof fE ? this['song'] = new bh(fE) : fE instanceof bh && (this['song'] = fE),
            this['prevBar'] = null;
        }
        ['computeDelayBufferSizes']() {
            const m5 = jI;
            this['panningDelayBufferSize'] = bp[m5(0x727)](this['samplesPerSecond'] * a1[m5(0x603)]),
            this[m5(0x4e3)] = this['panningDelayBufferSize'] - 0x1,
            this[m5(0x829)] = bp[m5(0x727)](this['samplesPerSecond'] * a1['chorusMaxDelay']),
            this['chorusDelayBufferMask'] = this['chorusDelayBufferSize'] - 0x1;
        }
        ['activateAudio']() {
            const m6 = jI
              , fE = this[m6(0x755)] ? this['preferLowerLatency'] ? 0x800 : 0x1000 : this['preferLowerLatency'] ? 0x200 : 0x800;
            if (null == this['audioCtx'] || null == this['scriptNode'] || this[m6(0x3b7)]['bufferSize'] != fE) {
                null != this[m6(0x3b7)] && this['deactivateAudio']();
                const fF = this[m6(0x755)] ? this[m6(0x7a0)] ? m6(0x45a) : m6(0x261) : this[m6(0x7a0)] ? 'interactive' : 'balanced';
                this[m6(0x33a)] = this[m6(0x33a)] || new (window[(m6(0x573))] || window['webkitAudioContext'])({
                    'latencyHint': fF
                }),
                this['samplesPerSecond'] = this[m6(0x33a)][m6(0x83d)],
                this[m6(0x3b7)] = this['audioCtx'][m6(0x635)] ? this[m6(0x33a)]['createScriptProcessor'](fE, 0x0, 0x2) : this[m6(0x33a)]['createJavaScriptNode'](fE, 0x0, 0x2),
                this[m6(0x3b7)]['onaudioprocess'] = this[m6(0x6a4)],
                this[m6(0x3b7)][m6(0x39b)] = 'explicit',
                this[m6(0x3b7)]['channelInterpretation'] = 'speakers',
                this['scriptNode']['connect'](this['audioCtx'][m6(0x636)]),
                this['computeDelayBufferSizes']();
            }
            this[m6(0x33a)][m6(0x5ec)]();
        }
        [jI(0x86d)]() {
            const m7 = jI;
            null != this['audioCtx'] && null != this['scriptNode'] && (this[m7(0x3b7)][m7(0x349)](this[m7(0x33a)][m7(0x636)]),
            this['scriptNode'] = null,
            this['audioCtx']['close'] && this['audioCtx'][m7(0x498)](),
            this['audioCtx'] = null);
        }
        ['maintainLiveInput']() {
            const m8 = jI;
            this['activateAudio'](),
            this[m8(0x628)] = performance[m8(0x23b)]() + 0x2710;
        }
        [jI(0x311)]() {
            const m9 = jI;
            this['isPlayingSong'] || (this['isPlayingSong'] = !0x0,
            this[m9(0x1ef)](this['song']),
            this['activateAudio']());
        }
        [jI(0x67f)]() {
            const ma = jI;
            this['isPlayingSong'] && (this[ma(0x753)] = !0x1,
            this[ma(0x679)] = !0x1);
        }
        ['startRecording']() {
            const mb = jI;
            this[mb(0x7a0)] = !0x0,
            this[mb(0x679)] = !0x0,
            this[mb(0x311)]();
        }
        [jI(0x383)]() {
            this['bar'] = 0x0,
            this['snapToBar']();
        }
        [jI(0x6cd)](fE) {
            const mc = jI;
            this[mc(0x6e2)] = fE,
            this[mc(0x6e4)] = this['bar'],
            this['prevBar'] = null;
        }
        [jI(0x476)]() {
            const md = jI;
            this['playheadInternal'] = this[md(0x6e2)],
            this[md(0x408)] = 0x0,
            this['part'] = 0x0,
            this['tick'] = 0x0,
            this['tickSampleCountdown'] = 0x0,
            this[md(0x6f5)] = !0x0,
            this[md(0x629)] = null;
        }
        ['resetEffects']() {
            const me = jI;
            if (this['limit'] = 0x0,
            this['freeAllTones'](),
            null != this['song']) {
                for (const fE of this[me(0x7b3)])
                    for (const fF of fE[me(0x84c)])
                        fF[me(0x2e0)]();
            }
        }
        ['jumpIntoLoop']() {
            const mf = jI;
            if (this[mf(0x3c1)] && (this[mf(0x6e2)] < this[mf(0x3c1)][mf(0x699)] || this[mf(0x6e2)] >= this['song']['loopStart'] + this['song']['loopLength'])) {
                const fE = this[mf(0x6e2)];
                this['bar'] = this[mf(0x3c1)]['loopStart'],
                this['playheadInternal'] += this[mf(0x6e2)] - fE,
                this['prevBar'] = null;
            }
        }
        ['goToNextBar']() {
            const mg = jI;
            if (!this['song'])
                return;
            this[mg(0x629)] = this['bar'];
            const fE = this[mg(0x6e2)];
            this['bar']++,
            this[mg(0x6e2)] >= this['song']['barCount'] && (this[mg(0x6e2)] = 0x0),
            this['playheadInternal'] += this[mg(0x6e2)] - fE;
        }
        ['goToPrevBar']() {
            const mh = jI;
            if (!this[mh(0x3c1)])
                return;
            this[mh(0x629)] = null;
            const fE = this['bar'];
            this['bar']--,
            (this[mh(0x6e2)] < 0x0 || this['bar'] >= this['song']['barCount']) && (this[mh(0x6e2)] = this['song']['barCount'] - 0x1),
            this['playheadInternal'] += this['bar'] - fE;
        }
        [jI(0x208)]() {
            const mi = jI;
            let fE = this[mi(0x6e2)] + 0x1;
            return this[mi(0x679)] ? fE >= this['song']['barCount'] && (fE = this['song']['barCount'] - 0x1) : 0x0 != this[mi(0x315)] && fE == this[mi(0x3c1)][mi(0x699)] + this[mi(0x3c1)][mi(0x278)] && (fE = this[mi(0x3c1)]['loopStart']),
            fE;
        }
        [jI(0x3e2)](fE, fF, fG, fH=!0x0) {
            const mj = jI;
            if (null == this[mj(0x3c1)]) {
                for (let fQ = 0x0; fQ < fG; fQ++)
                    fE[fQ] = 0x0,
                    fF[fQ] = 0x0;
                return void this['deactivateAudio']();
            }
            const fI = this[mj(0x3c1)]
              , fJ = this['getSamplesPerTick']();
            let fK = !0x1;
            (this['tickSampleCountdown'] <= 0x0 || this[mj(0x3df)] > fJ) && (this['tickSampleCountdown'] = fJ,
            this['isAtStartOfTick'] = !0x0),
            fH && (this['beat'] >= fI['beatsPerBar'] && (this['beat'] = 0x0,
            this['part'] = 0x0,
            this[mj(0x493)] = 0x0,
            this['tickSampleCountdown'] = fJ,
            this[mj(0x6f5)] = !0x0,
            this[mj(0x629)] = this['bar'],
            this['bar'] = this['getNextBar'](),
            this['bar'] <= this[mj(0x629)] && this['loopRepeatCount'] > 0x0 && this[mj(0x315)]--),
            this['bar'] >= fI[mj(0x647)] && (this['bar'] = 0x0,
            -0x1 != this[mj(0x315)] && (fK = !0x0,
            this['pause']()))),
            this[mj(0x406)](),
            (null == this[mj(0x191)] || this['tempMonoInstrumentSampleBuffer'][mj(0x57c)] < fG) && (this['tempMonoInstrumentSampleBuffer'] = new Float32Array(fG));
            const fL = +this[mj(0x7c6)]
              , fM = 0x1 - Math[mj(0x3b6)](0.5, 0x4 / this[mj(0x6a5)])
              , fN = 0x1 - Math['pow'](0.5, 0xfa0 / this[mj(0x6a5)]);
            let fO = +this['limit']
              , fP = 0x0;
            for (; fP < fG && !fK; ) {
                this[mj(0x1cb)] = this['getNextBar'](),
                this['nextBar'] >= fI['barCount'] && (this[mj(0x1cb)] = null);
                const fR = fG - fP
                  , fS = Math[mj(0x600)](this['tickSampleCountdown'])
                  , fT = Math['min'](fS, fR)
                  , fU = fP + fT;
                for (let fV = 0x0; fV < fI['getChannelCount'](); fV++) {
                    const fW = fI[mj(0x7b3)][fV]
                      , fX = this['channels'][fV];
                    this['isAtStartOfTick'] && (this['determineCurrentActiveTones'](fI, fV, fJ, fH && !this[mj(0x4ee)]),
                    this['determineLiveInputTones'](fI, fV, fJ));
                    for (let fY = 0x0; fY < fW['instruments'][mj(0x57c)]; fY++) {
                        const fZ = fW['instruments'][fY]
                          , g0 = fX['instruments'][fY];
                        if (this['isAtStartOfTick']) {
                            let g1 = g0['activeTones'][mj(0x5f4)]() + g0[mj(0x6b9)]['count']();
                            for (let g2 = 0x0; g2 < g0['releasedTones'][mj(0x5f4)](); g2++) {
                                const g3 = g0[mj(0x225)]['get'](g2);
                                if (g3['ticksSinceReleased'] >= Math['abs'](fZ[mj(0x241)]())) {
                                    this[mj(0x43c)](g0, g2),
                                    g2--;
                                    continue;
                                }
                                const g4 = g1 >= a1[mj(0x5ac)];
                                this[mj(0x509)](fI, fV, fJ, g3, !0x0, g4),
                                g1++;
                            }
                            g0['awake'] && (g0[mj(0x74b)] || g0['compute'](this, fZ, fJ, Math['ceil'](fJ), null),
                            g0[mj(0x74b)] = !0x1);
                        }
                        for (let g5 = 0x0; g5 < g0['activeTones']['count'](); g5++) {
                            const g6 = g0[mj(0x32a)][mj(0x5c3)](g5);
                            this[mj(0x1d7)](fV, fP, fT, g6);
                        }
                        for (let g7 = 0x0; g7 < g0['liveInputTones']['count'](); g7++) {
                            const g8 = g0[mj(0x6b9)]['get'](g7);
                            this['playTone'](fV, fP, fT, g8);
                        }
                        for (let g9 = 0x0; g9 < g0[mj(0x225)][mj(0x5f4)](); g9++) {
                            const ga = g0[mj(0x225)][mj(0x5c3)](g9);
                            this['playTone'](fV, fP, fT, ga);
                        }
                        g0['awake'] && bp['effectsSynth'](this, fE, fF, fP, fT, g0);
                    }
                }
                if (this[mj(0x295)] || this['countInMetronome']) {
                    if (0x0 == this['part']) {
                        if (!this['startedMetronome']) {
                            const gb = fI['beatsPerBar'] > 0x4 && fI['beatsPerBar'] % 0x2 == 0x0 && this[mj(0x408)] == fI[mj(0x6c9)] / 0x2
                              , gc = 0x0 == this['beat'] ? 0x8 : gb ? 0x6 : 0x4
                              , gd = 0x0 == this[mj(0x408)] ? 0x640 : gb ? 0x4b0 : 0x320
                              , gf = 0x0 == this[mj(0x408)] ? 0.06 : gb ? 0.05 : 0.04
                              , gg = this['samplesPerSecond'] / gd
                              , gh = 0x2 * Math['PI'] / gg;
                            this['metronomeSamplesRemaining'] = Math[mj(0x4fb)](gg * gc),
                            this[mj(0x2d9)] = 0x2 * Math[mj(0x828)](gh),
                            this['metronomeAmplitude'] = gf * Math[mj(0x51b)](gh),
                            this[mj(0x547)] = 0x0,
                            this[mj(0x6db)] = !0x0;
                        }
                        if (this[mj(0x7dc)] > 0x0) {
                            const gj = Math[mj(0x4c5)](fU, fP + this[mj(0x7dc)]);
                            this['metronomeSamplesRemaining'] -= gj - fP;
                            for (let gk = fP; gk < gj; gk++) {
                                fE[gk] += this['metronomeAmplitude'],
                                fF[gk] += this['metronomeAmplitude'];
                                const gl = this['metronomeFilter'] * this[mj(0x1fb)] - this[mj(0x547)];
                                this[mj(0x547)] = this['metronomeAmplitude'],
                                this['metronomeAmplitude'] = gl;
                            }
                        }
                    } else
                        this[mj(0x6db)] = !0x1;
                }
                for (let gm = fP; gm < fU; gm++) {
                    const go = fE[gm]
                      , gp = fF[gm]
                      , gq = Math[mj(0x2f6)](Math['abs'](go), Math['abs'](gp));
                    fO += (gq - fO) * (fO < gq ? fN : fM * (0x1 + fO));
                    const gr = fL / (fO >= 0x1 ? 1.05 * fO : 0.8 * fO + 0.25);
                    fE[gm] = go * gr,
                    fF[gm] = gp * gr;
                }
                if (fP += fT,
                this['isAtStartOfTick'] = !0x1,
                this['tickSampleCountdown'] -= fT,
                this[mj(0x3df)] <= 0x0) {
                    this[mj(0x6f5)] = !0x0;
                    for (const gu of this[mj(0x7b3)])
                        for (const gv of gu[mj(0x84c)]) {
                            for (let gw = 0x0; gw < gv['releasedTones'][mj(0x5f4)](); gw++) {
                                const gx = gv[mj(0x225)]['get'](gw);
                                gx[mj(0x37a)] ? (this['freeReleasedTone'](gv, gw),
                                gw--) : gx[mj(0x19b)]++;
                            }
                            gv['deactivateAfterThisTick'] && gv[mj(0x26b)](),
                            gv[mj(0x798)] = !0x1;
                        }
                    this[mj(0x493)]++,
                    this[mj(0x3df)] += fJ,
                    this[mj(0x493)] == a1[mj(0x696)] && (this['tick'] = 0x0,
                    this['part']++,
                    this[mj(0x28b)]--,
                    this[mj(0x46b)] == a1['partsPerBeat'] && (this[mj(0x46b)] = 0x0,
                    fH && (this[mj(0x408)]++,
                    this[mj(0x408)] == fI[mj(0x6c9)] && (this['beat'] = 0x0,
                    this['countInMetronome'] ? this['countInMetronome'] = !0x1 : (this['prevBar'] = this['bar'],
                    this['bar'] = this['getNextBar'](),
                    this['bar'] <= this[mj(0x629)] && this['loopRepeatCount'] > 0x0 && this[mj(0x315)]--,
                    this[mj(0x6e2)] >= fI[mj(0x647)] && (this['bar'] = 0x0,
                    -0x1 != this[mj(0x315)] && (fK = !0x0,
                    this[mj(0x553)](),
                    this['pause']())))))));
                }
            }
            (!Number[mj(0x539)](fO) || Math['abs'](fO) < aW) && (fO = 0x0),
            this['limit'] = fO,
            fH && !this[mj(0x4ee)] && (this[mj(0x6e4)] = (((this[mj(0x493)] + 0x1 - this[mj(0x3df)] / fJ) / 0x2 + this[mj(0x46b)]) / a1['partsPerBeat'] + this['beat']) / fI['beatsPerBar'] + this['bar']);
        }
        ['freeTone'](fE) {
            const mk = jI;
            this['tonePool'][mk(0x531)](fE);
        }
        [jI(0x1c1)]() {
            const ml = jI;
            if (this[ml(0x5ea)]['count']() > 0x0) {
                const fE = this[ml(0x5ea)][ml(0x175)]();
                return fE['freshlyAllocated'] = !0x0,
                fE;
            }
            return new bl();
        }
        ['releaseTone'](fE, fF) {
            const mm = jI;
            fE['releasedTones'][mm(0x884)](fF),
            fF[mm(0x1fc)] = !0x1,
            fF['passedEndOfNote'] = !0x0;
        }
        ['freeReleasedTone'](fE, fF) {
            const mn = jI;
            this['freeTone'](fE[mn(0x225)]['get'](fF)),
            fE[mn(0x225)][mn(0x3ee)](fF);
        }
        [jI(0x601)]() {
            const mo = jI;
            for (const fE of this['channels'])
                for (const fF of fE[mo(0x84c)]) {
                    for (; fF['activeTones']['count']() > 0x0; )
                        this['freeTone'](fF['activeTones']['popBack']());
                    for (; fF['releasedTones'][mo(0x5f4)]() > 0x0; )
                        this[mo(0x284)](fF['releasedTones'][mo(0x175)]());
                    for (; fF['liveInputTones']['count']() > 0x0; )
                        this[mo(0x284)](fF[mo(0x6b9)][mo(0x175)]());
                }
        }
        ['determineLiveInputTones'](fE, fF, fG) {
            const mp = jI
              , fH = fE[mp(0x7b3)][fF]
              , fI = this[mp(0x7b3)][fF]
              , fJ = this['liveInputPitches'];
            for (let fK = 0x0; fK < fH['instruments'][mp(0x57c)]; fK++) {
                const fL = fI['instruments'][fK]
                  , fM = fL['liveInputTones'];
                let fN = 0x0;
                if (this['liveInputDuration'] > 0x0 && fF == this[mp(0x61b)] && fJ['length'] > 0x0 && -0x1 != this['liveInputInstruments'][mp(0x2fb)](fK)) {
                    const fO = fH[mp(0x84c)][fK];
                    if (fO['getChord']()[mp(0x1b9)]) {
                        let fP;
                        fM[mp(0x5f4)]() <= fN ? (fP = this['newTone'](),
                        fM[mp(0x531)](fP)) : !fO[mp(0x3a8)]()['isSeamless'] && this['liveInputStarted'] ? (this['releaseTone'](fL, fM['get'](fN)),
                        fP = this['newTone'](),
                        fM['set'](fN, fP)) : fP = fM['get'](fN),
                        fN++;
                        for (let fQ = 0x0; fQ < fJ[mp(0x57c)]; fQ++)
                            fP[mp(0x68d)][fQ] = fJ[fQ];
                        fP['pitchCount'] = fJ['length'],
                        fP[mp(0x540)] = 0x1,
                        fP['instrumentIndex'] = fK,
                        fP[mp(0x833)] = fP['prevNote'] = fP[mp(0x291)] = null,
                        fP['atNoteStart'] = this['liveInputStarted'],
                        fP[mp(0x6ea)] = !0x1,
                        fP['forceContinueAtEnd'] = !0x1,
                        this[mp(0x509)](fE, fF, fG, fP, !0x1, !0x1);
                    } else {
                        this[mp(0x1d6)](fM, fJ);
                        for (let fR = 0x0; fR < fJ['length']; fR++) {
                            let fS;
                            null != this['tempMatchedPitchTones'][fN] ? (fS = this[mp(0x5e7)][fN],
                            this['tempMatchedPitchTones'][fN] = null,
                            0x1 == fS[mp(0x746)] && fS[mp(0x68d)][0x0] == fJ[fR] || (this[mp(0x29b)](fL, fS),
                            fS = this[mp(0x1c1)]()),
                            fM[mp(0x531)](fS)) : (fS = this['newTone'](),
                            fM[mp(0x531)](fS)),
                            fN++,
                            fS['pitches'][0x0] = fJ[fR],
                            fS[mp(0x746)] = 0x1,
                            fS['chordSize'] = fJ['length'],
                            fS['instrumentIndex'] = fK,
                            fS[mp(0x833)] = fS[mp(0x397)] = fS[mp(0x291)] = null,
                            fS['atNoteStart'] = this['liveInputStarted'],
                            fS['forceContinueAtStart'] = !0x1,
                            fS[mp(0x7ee)] = !0x1,
                            this[mp(0x509)](fE, fF, fG, fS, !0x1, !0x1);
                        }
                    }
                }
                for (; fM['count']() > fN; )
                    this[mp(0x29b)](fL, fM['popBack']());
                this['clearTempMatchedPitchTones'](fN, fL);
            }
            this['liveInputStarted'] = !0x1;
        }
        [jI(0x3ca)](fE, fF, fG, fH, fI, fJ, fK, fL, fM, fN) {
            const mq = jI;
            if (fE['patternInstruments'] && -0x1 == fH[mq(0x84c)]['indexOf'](fI)) {
                if (fG[mq(0x84c)][mq(0x57c)] > 0x1 || fH[mq(0x84c)][mq(0x57c)] > 0x1)
                    return null;
                const fO = fF['instruments'][fH[mq(0x84c)][0x0]];
                if (fN)
                    return fO['getChord']();
                const fP = fO[mq(0x3a8)]();
                return fJ['includeAdjacentPatterns'] && fP['includeAdjacentPatterns'] && fP[mq(0x320)] == fJ[mq(0x320)] ? fO['getChord']() : null;
            }
            return fN || fJ[mq(0x252)] ? fK : null;
        }
        static[jI(0x4cd)](fE, fF) {
            const mr = jI;
            if (fE[mr(0x68d)]['length'] != fF['pitches'][mr(0x57c)])
                return !0x1;
            const fG = fE['pins'][fE[mr(0x2a6)][mr(0x57c)] - 0x1][mr(0x24b)];
            for (const fH of fE[mr(0x68d)])
                if (-0x1 == fF['pitches']['indexOf'](fH + fG))
                    return !0x1;
            return !0x0;
        }
        [jI(0x1d6)](fE, fF) {
            const ms = jI;
            for (let fG = 0x0; fG < fE['count'](); fG++) {
                const fH = fE['get'](fG)
                  , fI = fH[ms(0x68d)][0x0] + fH[ms(0x831)];
                for (let fJ = 0x0; fJ < fF[ms(0x57c)]; fJ++)
                    if (fF[fJ] == fI) {
                        this['tempMatchedPitchTones'][fJ] = fH,
                        fE['remove'](fG),
                        fG--;
                        break;
                    }
            }
            for (; fE[ms(0x5f4)]() > 0x0; ) {
                const fK = fE['popFront']();
                for (let fL = 0x0; fL < this[ms(0x5e7)][ms(0x57c)]; fL++)
                    if (null == this['tempMatchedPitchTones'][fL]) {
                        this[ms(0x5e7)][fL] = fK;
                        break;
                    }
            }
        }
        ['determineCurrentActiveTones'](fE, fF, fG, fH) {
            const mt = jI
              , fI = fE[mt(0x7b3)][fF]
              , fJ = this['channels'][fF]
              , fK = fE[mt(0x4d5)](fF, this['bar'])
              , fL = this[mt(0x34c)]()
              , fM = this['tick'] + a1[mt(0x696)] * fL;
            let fN = null
              , fO = null
              , fP = null;
            if (fH && null != fK && !fI['muted'] && (!this[mt(0x679)] || this['liveInputChannel'] != fF)) {
                for (let fQ = 0x0; fQ < fK[mt(0x58c)][mt(0x57c)]; fQ++)
                    if (fK['notes'][fQ]['end'] <= fL)
                        fO = fK[mt(0x58c)][fQ];
                    else {
                        if (fK['notes'][fQ][mt(0x1b7)] <= fL && fK['notes'][fQ]['end'] > fL)
                            fN = fK[mt(0x58c)][fQ];
                        else {
                            if (fK['notes'][fQ]['start'] > fL) {
                                fP = fK['notes'][fQ];
                                break;
                            }
                        }
                    }
                null != fN && (null != fO && fO[mt(0x63e)] != fN[mt(0x1b7)] && (fO = null),
                null != fP && fP[mt(0x1b7)] != fN[mt(0x63e)] && (fP = null));
            }
            if (null != fK && (!fE[mt(0x394)] || 0x1 == fI['instruments']['length'] || fE['patternInstruments'] && 0x1 == fK[mt(0x84c)][mt(0x57c)])) {
                const fR = fE['patternInstruments'] ? fK['instruments'][0x0] : 0x0;
                if (null != fJ['singleSeamlessInstrument'] && fJ[mt(0x487)] != fR && fJ['singleSeamlessInstrument'] < fJ[mt(0x84c)][mt(0x57c)]) {
                    const fS = fJ['instruments'][fJ[mt(0x487)]]
                      , fT = fJ['instruments'][fR];
                    for (; fS['activeTones'][mt(0x5f4)]() > 0x0; )
                        fT[mt(0x32a)][mt(0x884)](fS[mt(0x32a)][mt(0x175)]());
                }
                fJ[mt(0x487)] = fR;
            } else
                fJ['singleSeamlessInstrument'] = null;
            for (let fU = 0x0; fU < fI[mt(0x84c)][mt(0x57c)]; fU++) {
                const fV = fJ['instruments'][fU]
                  , fW = fV['activeTones'];
                let fX = 0x0;
                if (null != fN && (!fE['patternInstruments'] || -0x1 != fK[mt(0x84c)][mt(0x2fb)](fU))) {
                    const fY = fI['instruments'][fU];
                    let fZ = fO
                      , g0 = fP;
                    const g1 = a1['partsPerBeat'] * fE[mt(0x6c9)]
                      , g2 = fY['getTransition']()
                      , g3 = fY[mt(0x1b0)]();
                    let g4 = !0x1
                      , g5 = !0x1
                      , g6 = 0x0
                      , g7 = 0x0;
                    if (0x0 == fN['start']) {
                        let g8 = null == this[mt(0x629)] ? null : fE['getPattern'](fF, this[mt(0x629)]);
                        if (null != g8) {
                            const g9 = g8[mt(0x58c)]['length'] <= 0x0 ? null : g8['notes'][g8[mt(0x58c)][mt(0x57c)] - 0x1];
                            if (null != g9 && g9['end'] == g1) {
                                const ga = fN[mt(0x790)] && bp[mt(0x4cd)](g9, fN)
                                  , gb = this[mt(0x3ca)](fE, fI, fK, g8, fU, g2, g3, fN, g9, ga);
                                null != gb && (fZ = g9,
                                g6 = gb[mt(0x1b9)] ? 0x1 : fZ[mt(0x68d)][mt(0x57c)],
                                g4 = ga);
                            }
                        }
                    } else
                        null != fZ && (g6 = g3[mt(0x1b9)] ? 0x1 : fZ['pitches']['length']);
                    if (fN['end'] == g1) {
                        let gc = null == this[mt(0x1cb)] ? null : fE['getPattern'](fF, this[mt(0x1cb)]);
                        if (null != gc) {
                            const gd = gc[mt(0x58c)]['length'] <= 0x0 ? null : gc[mt(0x58c)][0x0];
                            if (null != gd && 0x0 == gd['start']) {
                                const gf = gd[mt(0x790)] && bp[mt(0x4cd)](fN, gd)
                                  , gg = this['adjacentPatternHasCompatibleInstrumentTransition'](fE, fI, fK, gc, fU, g2, g3, fN, gd, gf);
                                null != gg && (g0 = gd,
                                g7 = gg['singleTone'] ? 0x1 : g0[mt(0x68d)][mt(0x57c)],
                                g5 = gf);
                            }
                        }
                    } else
                        null != g0 && (g7 = g3['singleTone'] ? 0x1 : g0['pitches'][mt(0x57c)]);
                    if (g3[mt(0x1b9)]) {
                        const gh = a1[mt(0x696)] * fN['start'] == fM;
                        let gj;
                        if (fW['count']() <= fX)
                            gj = this['newTone'](),
                            fW[mt(0x531)](gj);
                        else {
                            if (!gh || (g2[mt(0x4a5)] || g4) && null != fZ)
                                gj = fW[mt(0x5c3)](fX);
                            else {
                                const gk = fW['get'](fX);
                                gk[mt(0x37a)] ? this['freeTone'](gk) : this['releaseTone'](fV, gk),
                                gj = this['newTone'](),
                                fW[mt(0x38d)](fX, gj);
                            }
                        }
                        fX++;
                        for (let gl = 0x0; gl < fN[mt(0x68d)][mt(0x57c)]; gl++)
                            gj[mt(0x68d)][gl] = fN[mt(0x68d)][gl];
                        gj['pitchCount'] = fN['pitches'][mt(0x57c)],
                        gj[mt(0x540)] = 0x1,
                        gj['instrumentIndex'] = fU,
                        gj[mt(0x833)] = fN,
                        gj['noteStartPart'] = fN['start'],
                        gj[mt(0x608)] = fN['end'],
                        gj[mt(0x397)] = fZ,
                        gj['nextNote'] = g0,
                        gj[mt(0x7ec)] = 0x0,
                        gj[mt(0x6ad)] = 0x0,
                        gj['atNoteStart'] = gh,
                        gj['passedEndOfNote'] = !0x1,
                        gj[mt(0x6ea)] = g4,
                        gj['forceContinueAtEnd'] = g5,
                        this['computeTone'](fE, fF, fG, gj, !0x1, !0x1);
                    } else {
                        const gm = fY['getTransition']();
                        (gm['isSeamless'] && !gm[mt(0x320)] && 0x0 == g3[mt(0x358)] || g4) && a1[mt(0x696)] * fN[mt(0x1b7)] == fM && null != fZ && this['moveTonesIntoOrderedTempMatchedList'](fW, fN['pitches']);
                        let go = 0x0;
                        for (let gp = 0x0; gp < fN['pitches']['length']; gp++) {
                            let gq = g6 > gp ? fZ : null
                              , gr = fN
                              , gu = g7 > gp ? g0 : null
                              , gv = gr[mt(0x1b7)] + go
                              , gw = !0x1;
                            if (gv > fL) {
                                if (!(fW[mt(0x5f4)]() > gp && (gm['isSeamless'] || g4) && null != gq))
                                    break;
                                gu = gr,
                                gr = gq,
                                gq = null,
                                gv = gr['start'] + go,
                                gw = !0x0;
                            }
                            let gx = gr['end'];
                            (gm['isSeamless'] || g4) && null != gu && (gx = Math[mt(0x4c5)](a1['partsPerBeat'] * this['song'][mt(0x6c9)], gx + go)),
                            (gm[mt(0x73a)] || g4) && null != gq || (go += g3['strumParts']);
                            const gy = a1[mt(0x696)] * gv == fM;
                            let gz;
                            if (null != this[mt(0x5e7)][fX])
                                gz = this[mt(0x5e7)][fX],
                                this['tempMatchedPitchTones'][fX] = null,
                                fW[mt(0x531)](gz);
                            else {
                                if (fW[mt(0x5f4)]() <= fX)
                                    gz = this[mt(0x1c1)](),
                                    fW[mt(0x531)](gz);
                                else {
                                    if (!gy || (gm[mt(0x4a5)] || g4) && null != gq)
                                        gz = fW[mt(0x5c3)](fX);
                                    else {
                                        const gA = fW[mt(0x5c3)](fX);
                                        gA[mt(0x37a)] ? this[mt(0x284)](gA) : this[mt(0x29b)](fV, gA),
                                        gz = this[mt(0x1c1)](),
                                        fW[mt(0x38d)](fX, gz);
                                    }
                                }
                            }
                            fX++,
                            gz['pitches'][0x0] = gr['pitches'][gp],
                            gz['pitchCount'] = 0x1,
                            gz[mt(0x540)] = gr['pitches']['length'],
                            gz['instrumentIndex'] = fU,
                            gz[mt(0x833)] = gr,
                            gz[mt(0x672)] = gv,
                            gz[mt(0x608)] = gx,
                            gz[mt(0x397)] = gq,
                            gz['nextNote'] = gu,
                            gz['prevNotePitchIndex'] = gp,
                            gz[mt(0x6ad)] = gp,
                            gz[mt(0x1fc)] = gy,
                            gz[mt(0x1b1)] = gw,
                            gz[mt(0x6ea)] = g4 && null != gq,
                            gz['forceContinueAtEnd'] = g5 && null != gu,
                            this['computeTone'](fE, fF, fG, gz, !0x1, !0x1);
                        }
                    }
                }
                for (; fW[mt(0x5f4)]() > fX; ) {
                    const gB = fW[mt(0x175)]()
                      , gC = fE['channels'][fF];
                    if (gB[mt(0x1f2)] < gC['instruments']['length'] && !gB['isOnLastTick']) {
                        const gD = fJ['instruments'][gB['instrumentIndex']];
                        this[mt(0x29b)](gD, gB);
                    } else
                        this[mt(0x284)](gB);
                }
                this['clearTempMatchedPitchTones'](fX, fV);
            }
        }
        [jI(0x386)](fE, fF) {
            const mu = jI;
            for (let fG = fE; fG < this[mu(0x5e7)]['length']; fG++) {
                const fH = this['tempMatchedPitchTones'][fG];
                null != fH && (fH['isOnLastTick'] ? this[mu(0x284)](fH) : this[mu(0x29b)](fF, fH),
                this['tempMatchedPitchTones'][fG] = null);
            }
        }
        ['playTone'](fE, fF, fG, fH) {
            const mv = jI
              , fI = this['channels'][fE]['instruments'][fH['instrumentIndex']];
            fI['synthesizer'](this, fF, fG, fH, fI),
            fH[mv(0x1e0)][mv(0x7b9)]();
        }
        static[jI(0x52e)](fE) {
            return 0x1 / (0.25 * (fE - 0x1) + 0x1);
        }
        ['computeTone'](fE, fF, fG, fH, fI, fJ) {
            const mw = jI
              , fK = Math[mw(0x600)](fG)
              , fL = fE[mw(0x7b3)][fF]
              , fM = this['channels'][fF]
              , fN = fL['instruments'][fH[mw(0x1f2)]]
              , fO = fM['instruments'][fH['instrumentIndex']];
            fO[mw(0x2dc)] = !0x0,
            fO[mw(0x798)] = !0x0,
            fO[mw(0x74b)] || fO['compute'](this, fN, fG, fK, fH);
            const fP = fE['getChannelIsNoise'](fF)
              , fQ = fN[mw(0x3a8)]()
              , fR = fN['getChord']()
              , fS = fR[mw(0x1b9)] ? 0x1 : bp[mw(0x52e)](fH['chordSize'])
              , fT = fP ? a1['noiseInterval'] : 0x1
              , fU = a1['ticksPerPart'] * fG / this[mw(0x6a5)]
              , fV = 0x1 / this[mw(0x6a5)]
              , fW = 0x1 / a1['partsPerBeat']
              , fX = this['getTicksIntoBar']()
              , fY = fX / a1[mw(0x696)]
              , fZ = (fX + 0x1) / a1[mw(0x696)]
              , g0 = this[mw(0x34c)]();
            let g1 = 0x1;
            fH[mw(0x79f)] = 0x1;
            let g2 = fJ
              , g3 = 0x0
              , g4 = 0x0
              , g5 = 0x1
              , g6 = 0x1
              , g7 = fS
              , g8 = fS
              , g9 = 0x10
              , ga = a1['keys'][fE[mw(0x319)]][mw(0x2d8)]
              , gb = 0x1
              , gc = 0x30;
            if (0x3 == fN['type'])
                gb = a1[mw(0x6ba)],
                fP && (ga = a1[mw(0x2b6)],
                gb *= 0x2),
                g9 = a1['spectrumBasePitch'],
                gc = 0x1c;
            else {
                if (0x4 == fN['type'])
                    ga = a1['spectrumBasePitch'],
                    gb = a1['drumsetBaseExpression'],
                    g9 = ga;
                else {
                    if (0x2 == fN['type'])
                        ga = a1[mw(0x5f0)][fN['chipNoise']][mw(0x2d8)],
                        gb = a1['noiseBaseExpression'],
                        g9 = ga,
                        gc = a1[mw(0x5f0)][fN['chipNoise']][mw(0x64e)] ? 0x18 : 0x3c;
                    else {
                        if (0x1 == fN['type'])
                            gb = a1[mw(0x626)];
                        else {
                            if (0x0 == fN[mw(0x7d5)])
                                gb = a1[mw(0x2c9)];
                            else {
                                if (0x5 == fN['type'])
                                    gb = a1['harmonicsBaseExpression'];
                                else {
                                    if (0x6 == fN[mw(0x7d5)])
                                        gb = a1['pwmBaseExpression'];
                                    else {
                                        if (0x8 == fN['type'])
                                            gb = a1[mw(0x277)];
                                        else {
                                            if (0x7 != fN['type'])
                                                throw new Error(mw(0x7ff));
                                            gb = a1[mw(0x59c)];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            (fH['atNoteStart'] && !fQ[mw(0x4a5)] && !fH['forceContinueAtStart'] || fH[mw(0x809)]) && fH[mw(0x6d3)](),
            fH['freshlyAllocated'] = !0x1;
            for (let gj = 0x0; gj < a1['maxPitchOrOperatorCount']; gj++)
                fH['phaseDeltas'][gj] = 0x0,
                fH[mw(0x82f)][gj] = 0x0,
                fH[mw(0x6c5)][gj] = 0x0,
                fH['operatorExpressionDeltas'][gj] = 0x0;
            if (fH['expression'] = 0x0,
            fH['expressionDelta'] = 0x0,
            fI) {
                const gk = fH[mw(0x19b)]
                  , gl = fH['ticksSinceReleased'] + 0x1;
                g3 = g4 = fH[mw(0x831)];
                const gm = Math[mw(0x216)](fN['getFadeOutTicks']());
                g5 = bp[mw(0x62c)]((0x1 - gk / gm) * a1[mw(0x483)]),
                g6 = bp['noteSizeToVolumeMult']((0x1 - gl / gm) * a1[mw(0x483)]),
                fJ && (g6 = 0x0),
                fH[mw(0x19b)] + 0x1 >= gm && (g2 = !0x0);
            } else {
                if (null == fH[mw(0x833)])
                    g5 = g6 = 0x1,
                    fH['lastInterval'] = 0x0,
                    fH['ticksSinceReleased'] = 0x0,
                    fH[mw(0x4a4)] += fK;
                else {
                    const go = fH['note']
                      , gp = fH[mw(0x291)]
                      , gq = fH[mw(0x672)]
                      , gr = fH[mw(0x608)]
                      , gu = go[mw(0x61c)](g0)
                      , gv = go['pins'][gu - 0x1]
                      , gw = go[mw(0x2a6)][gu]
                      , gx = gq * a1['ticksPerPart']
                      , gy = gr * a1[mw(0x696)]
                      , gz = (go['start'] + gv[mw(0x2e3)]) * a1['ticksPerPart']
                      , gA = (go['start'] + gw[mw(0x2e3)]) * a1['ticksPerPart'];
                    fH['ticksSinceReleased'] = 0x0;
                    const gB = g0 * a1['ticksPerPart'] + this[mw(0x493)]
                      , gC = gB + 0x1
                      , gD = gB - gx
                      , gE = gC - gx
                      , gF = Math[mw(0x4c5)](0x1, (gB - gz) / (gA - gz))
                      , gG = Math[mw(0x4c5)](0x1, (gC - gz) / (gA - gz));
                    if (g5 = 0x1,
                    g6 = 0x1,
                    g3 = gv['interval'] + (gw['interval'] - gv[mw(0x24b)]) * gF,
                    g4 = gv[mw(0x24b)] + (gw['interval'] - gv['interval']) * gG,
                    fH[mw(0x831)] = g4,
                    !fQ['isSeamless'] && !fH['forceContinueAtEnd'] || null == gp) {
                        const gH = -fN['getFadeOutTicks']();
                        if (gH > 0x0) {
                            const gI = gy - gx;
                            g5 *= Math['min'](0x1, (gI - gD) / gH),
                            g6 *= Math['min'](0x1, (gI - gE) / gH),
                            gC >= gx + gI && (g2 = !0x0);
                        }
                    }
                }
            }
            fH[mw(0x37a)] = g2;
            const gd = fH[mw(0x1e0)];
            gd['computeEnvelopes'](fN, g0, a1['ticksPerPart'] * fY, fG / this['samplesPerSecond'], fH);
            const gf = fH[mw(0x1e0)][mw(0x391)]
              , gg = fH['envelopeComputer']['envelopeEnds'];
            if (null != fH[mw(0x833)] && fQ['slides']) {
                const gJ = fH[mw(0x397)]
                  , gK = fH[mw(0x291)];
                if (null != gJ) {
                    const gL = gJ[mw(0x68d)][fH['prevNotePitchIndex']] + gJ['pins'][gJ['pins']['length'] - 0x1]['interval'] - fH[mw(0x68d)][0x0];
                    if (gd[mw(0x239)] && (g3 += gL * gd[mw(0x2b3)]),
                    gd[mw(0x7fc)] && (g4 += gL * gd['prevSlideRatioEnd']),
                    !fR['singleTone']) {
                        const gM = gJ['pitches'][mw(0x57c)] - fH['chordSize'];
                        gd['prevSlideStart'] && (g7 = bp['computeChordExpression'](fH['chordSize'] + gM * gd['prevSlideRatioStart'])),
                        gd['prevSlideEnd'] && (g8 = bp[mw(0x52e)](fH['chordSize'] + gM * gd['prevSlideRatioEnd']));
                    }
                }
                if (null != gK) {
                    const gN = gK[mw(0x68d)][fH['nextNotePitchIndex']] - (fH['pitches'][0x0] + fH[mw(0x833)]['pins'][fH[mw(0x833)][mw(0x2a6)]['length'] - 0x1]['interval']);
                    if (gd[mw(0x80b)] && (g3 += gN * gd[mw(0x5ba)]),
                    gd['nextSlideEnd'] && (g4 += gN * gd[mw(0x3cc)]),
                    !fR[mw(0x1b9)]) {
                        const gO = gK[mw(0x68d)]['length'] - fH[mw(0x540)];
                        gd[mw(0x80b)] && (g7 = bp[mw(0x52e)](fH[mw(0x540)] + gO * gd[mw(0x5ba)])),
                        gd[mw(0x5f7)] && (g8 = bp[mw(0x52e)](fH['chordSize'] + gO * gd[mw(0x3cc)]));
                    }
                }
            }
            if (ab(fN['effects'])) {
                const gP = a1['justIntonationSemitones'][fN[mw(0x66a)]] / fT;
                g3 += gP * gf[0xe],
                g4 += gP * gg[0xe];
            }
            if (ac(fN[mw(0x5a9)])) {
                const gQ = gf[0xf]
                  , gR = gg[0xf];
                g3 += bp[mw(0x5d6)]((fN['detune'] - a1['detuneCenter']) * gQ) * a1['pitchesPerOctave'] / 0x4b0,
                g4 += bp[mw(0x5d6)]((fN[mw(0x84d)] - a1['detuneCenter']) * gR) * a1[mw(0x36d)] / 0x4b0;
            }
            if (ad(fN[mw(0x5a9)])) {
                const gS = a1['vibratos'][fN['vibrato']]['delayTicks']
                  , gT = a1[mw(0x639)][fN[mw(0x7b2)]]['amplitude'];
                let gU;
                if (null != fH['prevVibrato'])
                    gU = fH[mw(0x59b)];
                else {
                    if (gU = gT * bp[mw(0x766)](fN, fU * fY) * gf[0x10],
                    gS > 0x0) {
                        const gW = gS - gd[mw(0x6f0)];
                        gU *= Math[mw(0x2f6)](0x0, Math[mw(0x4c5)](0x1, 0x1 - gW / 0x2));
                    }
                }
                let gV = gT * bp[mw(0x766)](fN, fU * fZ) * gg[0x10];
                if (gS > 0x0) {
                    const gX = gS - gd['noteTicksEnd'];
                    gV *= Math['max'](0x0, Math['min'](0x1, 0x1 - gX / 0x2));
                }
                fH['prevVibrato'] = gV,
                g3 += gU,
                g4 += gV;
            }
            if (!fQ['isSeamless'] && !fH['forceContinueAtStart'] || null == fH[mw(0x397)]) {
                const gY = fN[mw(0x7a3)]();
                gY > 0x0 && (g5 *= Math['min'](0x1, gd[mw(0x60a)] / gY),
                g6 *= Math['min'](0x1, gd[mw(0x52d)] / gY));
            }
            0x4 == fN['type'] && null == fH[mw(0x28a)] && (fH['drumsetPitch'] = fH[mw(0x68d)][0x0],
            null != fH[mw(0x833)] && (fH['drumsetPitch'] += fH[mw(0x833)][mw(0x7c8)]()),
            fH[mw(0x28a)] = Math[mw(0x2f6)](0x0, Math['min'](a1['drumCount'] - 0x1, fH['drumsetPitch'])));
            let gh = gd[mw(0x4ce)];
            if (af(fN['effects'])) {
                const gZ = fN[mw(0x823)]
                  , h0 = gf[0x1]
                  , h1 = gg[0x1];
                for (let h2 = 0x0; h2 < gZ[mw(0x559)]; h2++) {
                    const h3 = gf[0x11 + h2]
                      , h4 = gg[0x11 + h2]
                      , h5 = gf[0x19 + h2]
                      , h6 = gg[0x19 + h2]
                      , h7 = gZ['controlPoints'][h2];
                    h7[mw(0x44e)](bp['tempFilterStartCoefficients'], this[mw(0x6a5)], h0 * h3, h5),
                    h7[mw(0x44e)](bp[mw(0x6e0)], this['samplesPerSecond'], h1 * h4, h6),
                    fH[mw(0x4fd)][mw(0x57c)] <= h2 && (fH['noteFilters'][h2] = new aU()),
                    fH['noteFilters'][h2]['loadCoefficientsWithGradient'](bp['tempFilterStartCoefficients'], bp['tempFilterEndCoefficients'], 0x1 / fK, 0x0 == h7['type']),
                    gh *= h7['getVolumeCompensationMult']();
                }
                fH[mw(0x2d4)] = gZ[mw(0x559)];
            } else
                fH[mw(0x2d4)] = 0x0;
            if (0x4 == fN[mw(0x7d5)]) {
                const h8 = fN[mw(0x651)](fH[mw(0x28a)]);
                gh *= bk[mw(0x614)](h8);
                let h9 = bk['computeEnvelope'](h8, gd['noteSecondsStart'], fW * fY, gd['noteSizeStart'])
                  , ha = bk[mw(0x620)](h8, gd['noteSecondsEnd'], fW * fZ, gd[mw(0x207)]);
                gd[mw(0x239)] && (h9 += (bk[mw(0x620)](h8, gd[mw(0x469)], fW * fY, gd[mw(0x50d)]) - h9) * gd[mw(0x2b3)]);
                gd[mw(0x7fc)] && (ha += (bk[mw(0x620)](h8, gd['prevNoteSecondsEnd'], fW * fZ, gd['prevNoteSize']) - ha) * gd['prevSlideRatioEnd']);
                gd['nextSlideStart'] && (h9 += (bk[mw(0x620)](h8, 0x0, fW * fY, gd[mw(0x615)]) - h9) * gd['nextSlideRatioStart']);
                gd[mw(0x5f7)] && (ha += (bk[mw(0x620)](h8, 0x0, fW * fZ, gd['nextNoteSize']) - ha) * gd[mw(0x3cc)]);
                const hb = this[mw(0x5d5)];
                hb['type'] = 0x0,
                hb[mw(0x4c8)] = bb[mw(0x18f)](0.5),
                hb['freq'] = bb['getRoundedSettingValueFromHz'](0x1f40),
                hb[mw(0x44e)](bp['tempFilterStartCoefficients'], this[mw(0x6a5)], h9 * (0x1 + h9), 0x1),
                hb[mw(0x44e)](bp[mw(0x6e0)], this[mw(0x6a5)], ha * (0x1 + ha), 0x1),
                fH['noteFilters']['length'] == fH['noteFilterCount'] && (fH[mw(0x4fd)][fH[mw(0x2d4)]] = new aU()),
                fH[mw(0x4fd)][fH[mw(0x2d4)]][mw(0x1e3)](bp['tempFilterStartCoefficients'], bp[mw(0x6e0)], 0x1 / fK, !0x0),
                fH[mw(0x2d4)]++;
            }
            if (gh = Math['min'](0x3, gh),
            0x1 == fN[mw(0x7d5)]) {
                let hc = 0x1
                  , hd = 0x0
                  , hf = 0x0;
                const hg = fR['arpeggiates'];
                if (fH['pitchCount'] > 0x1 && hg) {
                    const hp = Math['floor']((this[mw(0x493)] + this[mw(0x46b)] * a1[mw(0x696)]) / a1[mw(0x307)][fE[mw(0x237)]]['ticksPerArpeggio']);
                    hf = fH['pitches'][a7(fH['pitchCount'], fE[mw(0x237)], hp)] - fH[mw(0x68d)][0x0];
                }
                const hh = a1[mw(0x26c)][fN['algorithm']][mw(0x7b4)];
                for (let hq = 0x0; hq < a1['operatorCount']; hq++) {
                    const hr = a1[mw(0x26c)][fN['algorithm']]['associatedCarrier'][hq] - 0x1
                      , hu = fH[mw(0x68d)][hg ? 0x0 : hq < fH[mw(0x746)] ? hq : hr < fH['pitchCount'] ? hr : 0x0]
                      , hv = a1['operatorFrequencies'][fN['operators'][hq]['frequency']]['mult']
                      , hw = a1['operatorCarrierInterval'][hr] + hf
                      , hx = ga + (hu + g3) * fT + hw
                      , hy = ga + (hu + g4) * fT + hw
                      , hz = bf[mw(0x574)](hx)
                      , hA = bf['frequencyFromPitch'](hy)
                      , hB = a1[mw(0x587)][fN[mw(0x350)][hq]['frequency']][mw(0x57a)]
                      , hC = hv * hz + hB
                      , hD = hv * hA + hB
                      , hE = gf[0x5 + hq]
                      , hF = gg[0x5 + hq];
                    let hG, hH;
                    0x1 != hE || 0x1 != hF ? (hG = Math[mw(0x3b6)](0x2, Math[mw(0x253)](hC / hz) * hE) * hz,
                    hH = Math[mw(0x3b6)](0x2, Math['log2'](hD / hA) * hF) * hA) : (hG = hC,
                    hH = hD),
                    fH[mw(0x6b6)][hq] = hG * fV,
                    fH['phaseDeltaScales'][hq] = Math[mw(0x3b6)](hH / hG, 0x1 / fK);
                    const hI = bp[mw(0x5c5)](fN[mw(0x350)][hq][mw(0x328)])
                      , hJ = hI * a1['operatorFrequencies'][fN['operators'][hq][mw(0x353)]][mw(0x84f)];
                    let hK = hJ
                      , hL = hJ;
                    if (hq < hh) {
                        let hM;
                        hM = null != fH[mw(0x2ea)][hq] ? fH['prevPitchExpressions'][hq] : Math[mw(0x3b6)](0x2, -(hx - g9) / gc);
                        const hN = Math['pow'](0x2, -(hy - g9) / gc);
                        fH['prevPitchExpressions'][hq] = hN,
                        hK *= hM,
                        hL *= hN,
                        hd += hI;
                    } else
                        hK *= 1.5 * a1['sineWaveLength'],
                        hL *= 1.5 * a1['sineWaveLength'],
                        hc *= 0x1 - Math[mw(0x4c5)](0x1, fN[mw(0x350)][hq][mw(0x328)] / 0xf);
                    hK *= gf[0x9 + hq],
                    hL *= gg[0x9 + hq],
                    fH[mw(0x6c5)][hq] = hK,
                    fH[mw(0x4d9)][hq] = (hL - hK) / fK;
                }
                hc *= (Math[mw(0x3b6)](0x2, 0x2 - 1.4 * fN[mw(0x31f)] / 0xf) - 0x1) / 0x3,
                hc *= 0x1 - Math[mw(0x4c5)](0x1, Math['max'](0x0, hd - 0x1) / 0x2),
                hc = 0x1 + 0x3 * hc;
                const hj = gb * hc * gh * g5 * g7 * gf[0x0]
                  , hk = gb * hc * gh * g6 * g8 * gg[0x0];
                fH[mw(0x618)] = hj,
                fH[mw(0x65d)] = (hk - hj) / fK;
                const hl = 0.3 * a1[mw(0x24f)] * fN[mw(0x31f)] / 0xf;
                let hm = hl * gf[0xd]
                  , ho = hl * gg[0xd];
                fH[mw(0x68b)] = hm,
                fH[mw(0x369)] = (ho - hm) / fK;
            } else {
                const hO = Math['pow'](0x2, (g4 - g3) * fT / 0xc)
                  , hP = Math['pow'](hO, 0x1 / fK);
                let hQ = fH[mw(0x68d)][0x0];
                if (fH[mw(0x746)] > 0x1 && (fR[mw(0x5e8)] || fR[mw(0x429)])) {
                    const i1 = Math[mw(0x4fb)]((this['tick'] + this[mw(0x46b)] * a1[mw(0x696)]) / a1[mw(0x307)][fE['rhythm']]['ticksPerArpeggio']);
                    if (fR['customInterval']) {
                        const i2 = fH['pitches'][0x1 + a7(fH[mw(0x746)] - 0x1, fE['rhythm'], i1)] - fH['pitches'][0x0];
                        g1 = Math[mw(0x3b6)](0x2, i2 / 0xc),
                        fH[mw(0x79f)] = Math[mw(0x3b6)](0x2, -i2 / gc);
                    } else
                        hQ = fH['pitches'][a7(fH[mw(0x746)], fE['rhythm'], i1)];
                }
                const hR = ga + (hQ + g3) * fT
                  , hS = ga + (hQ + g4) * fT;
                let hT;
                hT = null != fH['prevPitchExpressions'][0x0] ? fH['prevPitchExpressions'][0x0] : Math['pow'](0x2, -(hR - g9) / gc);
                const hU = Math['pow'](0x2, -(hS - g9) / gc);
                fH['prevPitchExpressions'][0x0] = hU;
                let hV = gb * gh;
                if (0x2 == fN['type'] && (hV *= a1[mw(0x5f0)][fN[mw(0x744)]]['expression']),
                0x0 == fN[mw(0x7d5)] && (hV *= a1[mw(0x25a)][fN[mw(0x556)]][mw(0x618)]),
                0x6 == fN[mw(0x7d5)]) {
                    const i3 = a4(fN[mw(0x1a7)])
                      , i4 = i3 * gf[0x2]
                      , i5 = i3 * gg[0x2];
                    fH[mw(0x1a7)] = i4,
                    fH['pulseWidthDelta'] = (i5 - i4) / fK;
                }
                0x7 == fN[mw(0x7d5)] && (hV *= Math[mw(0x3b6)](0x2, 0.7 * (0x1 - fN[mw(0x499)] / (a1[mw(0x240)] - 0x1))));
                const hW = bf['frequencyFromPitch'](hR);
                if (0x0 == fN[mw(0x7d5)] || 0x5 == fN['type'] || 0x7 == fN['type']) {
                    const i6 = a1[mw(0x285)][fN['unison']]
                      , i7 = 0x7 == fN[mw(0x7d5)] ? 0x1 : i6['voices'] / 0x2;
                    hV *= i6['expression'] * i7;
                    const i8 = gf[0x4]
                      , i9 = gg[0x4]
                      , ia = Math[mw(0x3b6)](0x2, (i6['offset'] + i6[mw(0x212)]) * i8 / 0xc)
                      , ib = Math[mw(0x3b6)](0x2, (i6['offset'] + i6[mw(0x212)]) * i9 / 0xc)
                      , ic = Math[mw(0x3b6)](0x2, (i6[mw(0x45c)] - i6['spread']) * i8 / 0xc) * g1
                      , id = Math[mw(0x3b6)](0x2, (i6['offset'] - i6[mw(0x212)]) * i9 / 0xc) * g1;
                    fH[mw(0x6b6)][0x0] = hW * fV * ia,
                    fH[mw(0x6b6)][0x1] = hW * fV * ic,
                    fH[mw(0x82f)][0x0] = hP * Math['pow'](ib / ia, 0x1 / fK),
                    fH['phaseDeltaScales'][0x1] = hP * Math['pow'](id / ic, 0x1 / fK);
                } else
                    fH['phaseDeltas'][0x0] = hW * fV,
                    fH['phaseDeltaScales'][0x0] = hP;
                let hX = 0x1
                  , hY = 0x1;
                if (0x8 == fN['type']) {
                    const ig = 0x1 / Math['sqrt'](a1[mw(0x6b2)])
                      , ih = fN['supersawDynamism'] / a1['supersawDynamismMax']
                      , ij = 0x1 - Math['pow'](Math['max'](0x0, 0x1 - ih * gf[0x21]), 0.2)
                      , ik = 0x1 - Math['pow'](Math[mw(0x2f6)](0x0, 0x1 - ih * gg[0x21]), 0.2)
                      , il = Math['pow'](0x2, Math['log2'](ig) * ij)
                      , im = Math[mw(0x3b6)](0x2, Math['log2'](ig) * ik)
                      , io = Math[mw(0x74f)]((0x1 / Math[mw(0x3b6)](il, 0x2) - 0x1) / (a1[mw(0x6b2)] - 0x1))
                      , ip = Math[mw(0x74f)]((0x1 / Math['pow'](im, 0x2) - 0x1) / (a1[mw(0x6b2)] - 0x1));
                    fH[mw(0x555)] = io,
                    fH[mw(0x176)] = (ip - io) / fK;
                    const iq = -0x1 == fH[mw(0x56d)];
                    if (iq) {
                        let iI = 0x0;
                        for (let iN = 0x0; iN < a1[mw(0x6b2)]; iN++)
                            fH[mw(0x66d)][iN] = iI,
                            iI += -Math[mw(0x5a0)](Math['random']());
                        const iJ = 0x1 + (a1['supersawVoiceCount'] - 0x1) * io;
                        let iK = 0x0;
                        for (let iO = 0x0; iO < a1[mw(0x6b2)]; iO++) {
                            const iP = 0x0 == iO ? 0x1 : io
                              , iQ = fH['phases'][iO] / iI;
                            fH['phases'][iO] = iQ,
                            iK += (iQ - 0.5) * iP;
                        }
                        let iL = 0x1
                          , iM = 0x0;
                        for (let iR = a1['supersawVoiceCount'] - 0x1; iR >= 0x0; iR--) {
                            const iS = 0x1 - fH[mw(0x66d)][iR]
                              , iT = iS - iM;
                            if (iK < 0x0) {
                                const iU = -iK / iJ;
                                if (iU < iT) {
                                    iL = iM + iU;
                                    break;
                                }
                            }
                            iK += iT * iJ - (0x0 == iR ? 0x1 : io),
                            iM = iS;
                        }
                        for (let iV = 0x0; iV < a1[mw(0x6b2)]; iV++)
                            fH[mw(0x66d)][iV] += iL;
                        for (let iW = 0x1; iW < a1['supersawVoiceCount'] - 0x1; iW++) {
                            const iX = iW + Math['floor'](Math[mw(0x50a)]() * (a1[mw(0x6b2)] - iW))
                              , iY = fH[mw(0x66d)][iW];
                            fH['phases'][iW] = fH['phases'][iX],
                            fH[mw(0x66d)][iX] = iY;
                        }
                    }
                    const ir = fN[mw(0x426)] / a1[mw(0x2ff)]
                      , iu = 0.5 * (ir * gf[0x22] + ir * gg[0x22])
                      , iv = Math[mw(0x3b6)](0x1 - Math[mw(0x74f)](Math[mw(0x2f6)](0x0, 0x1 - iu)), 1.75);
                    for (let iZ = 0x0; iZ < a1['supersawVoiceCount']; iZ++) {
                        const j0 = 0x0 == iZ ? 0x0 : Math[mw(0x3b6)](((iZ + 0x1 >> 0x1) - 0.5 + 0.025 * ((0x2 & iZ) - 0x1)) / (a1[mw(0x6b2)] >> 0x1), 1.1) * (0x2 * (0x1 & iZ) - 0x1);
                        fH[mw(0x405)][iZ] = Math['pow'](0x2, iv * j0 / 0xc);
                    }
                    const iw = fN['supersawShape'] / a1['supersawShapeMax']
                      , ix = iw * gf[0x23]
                      , iy = iw * gg[0x23];
                    fH['supersawShape'] = ix,
                    fH['supersawShapeDelta'] = (iy - ix) / fK;
                    const iz = a4(fN['pulseWidth'])
                      , iA = iz * gf[0x2]
                      , iB = iz * gg[0x2]
                      , iC = null != fH[mw(0x432)] ? fH[mw(0x432)] : hW * fV
                      , iD = hW * fV * hO;
                    fH['supersawPrevPhaseDelta'] = iD;
                    const iE = iA / iC
                      , iF = iB / iD;
                    fH[mw(0x4f1)] = iE,
                    fH[mw(0x2fa)] = (iF - iE) / fK;
                    const iG = Math[mw(0x600)](Math['max'](iE, iF)) + 0x2;
                    if (null == fH[mw(0x88b)] || fH['supersawDelayLine']['length'] <= iG) {
                        const j1 = Math[mw(0x600)](0.5 * this[mw(0x6a5)] / bf['frequencyFromPitch'](0x18))
                          , j2 = new Float32Array(bp[mw(0x727)](Math['max'](j1, iG)));
                        if (!iq && null != fH['supersawDelayLine']) {
                            const j3 = fH['supersawDelayLine']['length'] - 0x1 >> 0x0
                              , j4 = fH[mw(0x56d)];
                            for (let j5 = 0x0; j5 < fH['supersawDelayLine'][mw(0x57c)]; j5++)
                                j2[j5] = fH['supersawDelayLine'][j4 + j5 & j3];
                        }
                        fH['supersawDelayLine'] = j2,
                        fH[mw(0x56d)] = fH['supersawDelayLine']['length'];
                    } else
                        iq && (fH['supersawDelayLine']['fill'](0x0),
                        fH[mw(0x56d)] = fH[mw(0x88b)]['length']);
                    const iH = a1[mw(0x2a8)] / a1[mw(0x277)];
                    hX *= (0x1 + (iH - 0x1) * ix) / Math['sqrt'](0x1 + (a1[mw(0x6b2)] - 0x1) * io * io),
                    hY *= (0x1 + (iH - 0x1) * iy) / Math[mw(0x74f)](0x1 + (a1[mw(0x6b2)] - 0x1) * ip * ip);
                }
                const hZ = hV * g5 * g7 * hT * gf[0x0] * hX
                  , i0 = hV * g6 * g8 * hU * gg[0x0] * hY;
                if (fH['expression'] = hZ,
                fH[mw(0x65d)] = (i0 - hZ) / fK,
                0x7 == fN[mw(0x7d5)]) {
                    let j6;
                    if (null != fH[mw(0x425)])
                        j6 = fH[mw(0x425)];
                    else {
                        const ja = fH['envelopeComputer']['envelopeStarts'][0x3];
                        j6 = 0x1 - Math[mw(0x4c5)](0x1, ja * fN[mw(0x499)] / (a1[mw(0x240)] - 0x1));
                    }
                    const j7 = fH['envelopeComputer']['envelopeEnds'][0x3];
                    let j8 = 0x1 - Math[mw(0x4c5)](0x1, j7 * fN[mw(0x499)] / (a1[mw(0x240)] - 0x1));
                    fH['prevStringDecay'] = j8;
                    const j9 = a1['unisons'][fN[mw(0x5d2)]];
                    for (let jb = fH['pickedStrings'][mw(0x57c)]; jb < j9[mw(0x179)]; jb++)
                        fH[mw(0x596)][jb] = new bj();
                    if (fH['atNoteStart'] && !fQ['continues'] && !fH['forceContinueAtStart']) {
                        for (const jc of fH['pickedStrings'])
                            jc[mw(0x500)] = -0x1;
                    }
                    for (let jd = 0x0; jd < j9[mw(0x179)]; jd++)
                        fH[mw(0x596)][jd]['update'](this, fO, fH, jd, fK, j6, j8, fN['stringSustainType']);
                }
            }
        }
        static['getLFOAmplitude'](fE, fF) {
            const mx = jI;
            let fG = 0x0;
            for (const fH of a1[mx(0x639)][fE['vibrato']]['periodsSeconds'])
                fG += Math['sin'](0x2 * Math['PI'] * fF / fH);
            return fG;
        }
        static[jI(0x7e8)](fE) {
            const my = jI;
            if (0x1 == fE['type']) {
                const fF = fE['algorithm'] + '_' + fE['feedbackType'];
                if (null == bp[my(0x346)][fF]) {
                    const fG = [];
                    for (const fI of bp[my(0x248)])
                        if (-0x1 != fI['indexOf'](my(0x854))) {
                            const fJ = [];
                            for (let fK = 0x0; fK < a1[my(0x26c)][fE[my(0x803)]][my(0x7b4)]; fK++)
                                fJ['push'](my(0x5fe) + fK + my(0x359));
                            fG[my(0x557)](fI[my(0x81c)](my(0x870), fJ[my(0x50c)]('\x20+\x20')));
                        } else {
                            if (-0x1 != fI[my(0x2fb)](my(0x1db))) {
                                for (let fL = a1[my(0x5b2)] - 0x1; fL >= 0x0; fL--)
                                    for (const fM of bp['operatorSourceTemplate'])
                                        if (-0x1 != fM[my(0x2fb)]('/*\x20+\x20operator@Scaled*/')) {
                                            let fN = '';
                                            for (const fP of a1['algorithms'][fE[my(0x803)]][my(0x275)][fL])
                                                fN += '\x20+\x20operator' + (fP - 0x1) + 'Scaled';
                                            const fO = a1[my(0x6bb)][fE[my(0x3db)]][my(0x839)][fL];
                                            if (fO['length'] > 0x0) {
                                                fN += '\x20+\x20feedbackMult\x20*\x20(';
                                                const fQ = [];
                                                for (const fR of fO)
                                                    fQ[my(0x557)](my(0x5fe) + (fR - 0x1) + 'Output');
                                                fN += fQ[my(0x50c)]('\x20+\x20') + ')';
                                            }
                                            fG[my(0x557)](fM[my(0x81c)](/\#/g, fL + '')['replace']('/*\x20+\x20operator@Scaled*/', fN));
                                        } else
                                            fG[my(0x557)](fM[my(0x81c)](/\#/g, fL + ''));
                            } else {
                                if (-0x1 != fI[my(0x2fb)]('#')) {
                                    for (let fS = 0x0; fS < a1[my(0x5b2)]; fS++)
                                        fG['push'](fI[my(0x81c)](/\#/g, fS + ''));
                                } else
                                    fG['push'](fI);
                            }
                        }
                    const fH = 'return\x20(synth,\x20bufferIndex,\x20runLength,\x20tone,\x20instrument)\x20=>\x20{' + fG[my(0x50c)]('\x0a') + '}';
                    bp[my(0x346)][fF] = new Function('Config','Synth',fH)(a1, bp);
                }
                return bp[my(0x346)][fF];
            }
            if (0x0 == fE['type'])
                return bp['chipSynth'];
            if (0x5 == fE['type'])
                return bp['harmonicsSynth'];
            if (0x6 == fE[my(0x7d5)])
                return bp[my(0x533)];
            if (0x8 == fE['type'])
                return bp['supersawSynth'];
            if (0x7 == fE[my(0x7d5)])
                return bp['pickedStringSynth'];
            if (0x2 == fE['type'])
                return bp['noiseSynth'];
            if (0x3 == fE['type'])
                return bp[my(0x61d)];
            if (0x4 == fE[my(0x7d5)])
                return bp['drumsetSynth'];
            throw new Error(my(0x2ed) + fE[my(0x7d5)]);
        }
        static['chipSynth'](fE, fF, fG, fH, fI) {
            const mz = jI
              , fJ = fE['tempMonoInstrumentSampleBuffer']
              , fK = fI[mz(0x522)]
              , fL = fK['length'] - 0x1
              , fM = fH['specialIntervalExpressionMult'] * fI['unison']['sign'];
            0x1 != fI['unison'][mz(0x179)] || fI[mz(0x3e3)]['customInterval'] || (fH[mz(0x66d)][0x1] = fH['phases'][0x0]);
            let fN = fH['phaseDeltas'][0x0] * fL
              , fO = fH['phaseDeltas'][0x1] * fL;
            const fP = +fH[mz(0x82f)][0x0]
              , fQ = +fH[mz(0x82f)][0x1];
            let fR = +fH[mz(0x618)];
            const fS = +fH['expressionDelta'];
            let fT = fH[mz(0x66d)][0x0] % 0x1 * fL
              , fU = fH[mz(0x66d)][0x1] % 0x1 * fL;
            const fV = fH['noteFilters']
              , fW = 0x0 | fH['noteFilterCount'];
            let fX = +fH['initialNoteFilterInput1']
              , fY = +fH['initialNoteFilterInput2'];
            const fZ = bp[mz(0x20c)]
              , g0 = 0x0 | fT
              , g1 = 0x0 | fU
              , g2 = g0 % fL
              , g3 = g1 % fL
              , g4 = fT - g0
              , g5 = fU - g1;
            let g6 = +fK[g2]
              , g7 = +fK[g3];
            g6 += (fK[g2 + 0x1] - g6) * g4,
            g7 += (fK[g3 + 0x1] - g7) * g5;
            const g8 = fF + fG;
            for (let g9 = fF; g9 < g8; g9++) {
                fT += fN,
                fU += fO;
                const ga = 0x0 | fT
                  , gb = 0x0 | fU
                  , gc = ga % fL
                  , gd = gb % fL;
                let gf = fK[gc]
                  , gg = fK[gd];
                const gh = fT - ga
                  , gj = fU - gb;
                gf += (fK[gc + 0x1] - gf) * gh,
                gg += (fK[gd + 0x1] - gg) * gj;
                const gk = (gf - g6) / fN
                  , gl = (gg - g7) / fO;
                g6 = gf,
                g7 = gg;
                const gm = gk + gl * fM
                  , go = fZ(gm, fX, fY, fW, fV);
                fY = fX,
                fX = gm,
                fN *= fP,
                fO *= fQ;
                const gp = go * fR;
                fR += fS,
                fJ[g9] += gp;
            }
            fH['phases'][0x0] = fT / fL,
            fH[mz(0x66d)][0x1] = fU / fL,
            fH[mz(0x6b6)][0x0] = fN / fL,
            fH['phaseDeltas'][0x1] = fO / fL,
            fH[mz(0x618)] = fR,
            fE[mz(0x6d5)](fV),
            fH[mz(0x17c)] = fX,
            fH[mz(0x457)] = fY;
        }
        static[jI(0x6ef)](fE, fF, fG, fH, fI) {
            const mA = jI
              , fJ = fE[mA(0x191)]
              , fK = fI[mA(0x522)]
              , fL = fK['length'] - 0x1
              , fM = fH[mA(0x79f)] * fI['unison']['sign'];
            0x1 != fI[mA(0x5d2)][mA(0x179)] || fI['chord'][mA(0x429)] || (fH['phases'][0x1] = fH[mA(0x66d)][0x0]);
            let fN = fH[mA(0x6b6)][0x0] * fL
              , fO = fH['phaseDeltas'][0x1] * fL;
            const fP = +fH[mA(0x82f)][0x0]
              , fQ = +fH['phaseDeltaScales'][0x1];
            let fR = +fH['expression'];
            const fS = +fH[mA(0x65d)];
            let fT = fH[mA(0x66d)][0x0] % 0x1 * fL
              , fU = fH['phases'][0x1] % 0x1 * fL;
            const fV = fH['noteFilters']
              , fW = 0x0 | fH[mA(0x2d4)];
            let fX = +fH['initialNoteFilterInput1']
              , fY = +fH[mA(0x457)];
            const fZ = bp[mA(0x20c)]
              , g0 = 0x0 | fT
              , g1 = 0x0 | fU
              , g2 = g0 % fL
              , g3 = g1 % fL
              , g4 = fT - g0
              , g5 = fU - g1;
            let g6 = +fK[g2]
              , g7 = +fK[g3];
            g6 += (fK[g2 + 0x1] - g6) * g4,
            g7 += (fK[g3 + 0x1] - g7) * g5;
            const g8 = fF + fG;
            for (let g9 = fF; g9 < g8; g9++) {
                fT += fN,
                fU += fO;
                const ga = 0x0 | fT
                  , gb = 0x0 | fU
                  , gc = ga % fL
                  , gd = gb % fL;
                let gf = fK[gc]
                  , gg = fK[gd];
                const gh = fT - ga
                  , gj = fU - gb;
                gf += (fK[gc + 0x1] - gf) * gh,
                gg += (fK[gd + 0x1] - gg) * gj;
                const gk = (gf - g6) / fN
                  , gl = (gg - g7) / fO;
                g6 = gf,
                g7 = gg;
                const gm = gk + gl * fM
                  , go = fZ(gm, fX, fY, fW, fV);
                fY = fX,
                fX = gm,
                fN *= fP,
                fO *= fQ;
                const gp = go * fR;
                fR += fS,
                fJ[g9] += gp;
            }
            fH['phases'][0x0] = fT / fL,
            fH['phases'][0x1] = fU / fL,
            fH['phaseDeltas'][0x0] = fN / fL,
            fH['phaseDeltas'][0x1] = fO / fL,
            fH['expression'] = fR,
            fE[mA(0x6d5)](fV),
            fH['initialNoteFilterInput1'] = fX,
            fH[mA(0x457)] = fY;
        }
        static[jI(0x172)](fE, fF, fG, fH, fI) {
            const mB = jI
              , fJ = fI['unison'][mB(0x179)];
            let fK = bp[mB(0x586)][fJ];
            if (null == fK) {
                let fL = mB(0x666);
                fL += mB(0x7f0);
                const fM = [];
                for (let fN = 0x0; fN < fJ; fN++)
                    fM['push']('fractionalDelaySample' + fN + (0x1 == fN ? mB(0x3e5) : ''));
                fL += fM['join']('\x20+\x20'),
                fL += mB(0x671),
                fL = fL['replace'](/^.*\#.*$/gm, fO => {
                    const mC = mB
                      , fP = [];
                    for (let fQ = 0x0; fQ < fJ; fQ++)
                        fP['push'](fO[mC(0x81c)](/\#/g, String(fQ)));
                    return fP[mC(0x50c)]('\x0a');
                }
                ),
                fK = new Function(mB(0x243),'Synth',fL)(a1, bp),
                bp[mB(0x586)][fJ] = fK;
            }
            fK(fE, fF, fG, fH, fI);
        }
        static[jI(0x61a)](fE, fF, fG, fH, fI, fJ) {
            const mD = jI
              , fK = ag(fJ[mD(0x5a9)])
              , fL = ah(fJ[mD(0x5a9)])
              , fM = fJ[mD(0x859)] > 0x0
              , fN = aj(fJ['effects'])
              , fO = ak(fJ['effects'])
              , fP = al(fJ['effects'])
              , fQ = am(fJ['effects']);
            let fR = 0x0;
            fK && (fR |= 0x1),
            fR <<= 0x1,
            fL && (fR |= 0x1),
            fR <<= 0x1,
            fM && (fR |= 0x1),
            fR <<= 0x1,
            fN && (fR |= 0x1),
            fR <<= 0x1,
            fO && (fR |= 0x1),
            fR <<= 0x1,
            fP && (fR |= 0x1),
            fR <<= 0x1,
            fQ && (fR |= 0x1);
            let fS = bp['effectsFunctionCache'][fR];
            if (null == fS) {
                let fT = 'return\x20(synth,\x20outputDataL,\x20outputDataR,\x20bufferIndex,\x20runLength,\x20instrumentState)\x20=>\x20{';
                const fU = fO || fQ || fP;
                fT += mD(0x42f),
                fU && (fT += mD(0x65a)),
                fK && (fT += mD(0x184)),
                fL && (fT += '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20bitcrusherPrevInput\x20=\x20+instrumentState.bitcrusherPrevInput;\x0a\x09\x09\x09\x09let\x20bitcrusherCurrentOutput\x20=\x20+instrumentState.bitcrusherCurrentOutput;\x0a\x09\x09\x09\x09let\x20bitcrusherPhase\x20=\x20+instrumentState.bitcrusherPhase;\x0a\x09\x09\x09\x09let\x20bitcrusherPhaseDelta\x20=\x20+instrumentState.bitcrusherPhaseDelta;\x0a\x09\x09\x09\x09const\x20bitcrusherPhaseDeltaScale\x20=\x20+instrumentState.bitcrusherPhaseDeltaScale;\x0a\x09\x09\x09\x09let\x20bitcrusherScale\x20=\x20+instrumentState.bitcrusherScale;\x0a\x09\x09\x09\x09const\x20bitcrusherScaleScale\x20=\x20+instrumentState.bitcrusherScaleScale;\x0a\x09\x09\x09\x09let\x20bitcrusherFoldLevel\x20=\x20+instrumentState.bitcrusherFoldLevel;\x0a\x09\x09\x09\x09const\x20bitcrusherFoldLevelScale\x20=\x20+instrumentState.bitcrusherFoldLevelScale;'),
                fM && (fT += mD(0x442)),
                fT += '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20eqFilterVolume\x20=\x20+instrumentState.eqFilterVolume;\x0a\x09\x09\x09\x09const\x20eqFilterVolumeDelta\x20=\x20+instrumentState.eqFilterVolumeDelta;',
                fN && (fT += '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20panningMask\x20=\x20synth.panningDelayBufferMask\x20>>>\x200;\x0a\x09\x09\x09\x09const\x20panningDelayLine\x20=\x20instrumentState.panningDelayLine;\x0a\x09\x09\x09\x09let\x20panningDelayPos\x20=\x20instrumentState.panningDelayPos\x20&\x20panningMask;\x0a\x09\x09\x09\x09let\x20\x20\x20panningVolumeL\x20\x20\x20\x20\x20\x20=\x20+instrumentState.panningVolumeL;\x0a\x09\x09\x09\x09let\x20\x20\x20panningVolumeR\x20\x20\x20\x20\x20\x20=\x20+instrumentState.panningVolumeR;\x0a\x09\x09\x09\x09const\x20panningVolumeDeltaL\x20=\x20+instrumentState.panningVolumeDeltaL;\x0a\x09\x09\x09\x09const\x20panningVolumeDeltaR\x20=\x20+instrumentState.panningVolumeDeltaR;\x0a\x09\x09\x09\x09let\x20\x20\x20panningOffsetL\x20\x20\x20\x20\x20\x20=\x20+instrumentState.panningOffsetL;\x0a\x09\x09\x09\x09let\x20\x20\x20panningOffsetR\x20\x20\x20\x20\x20\x20=\x20+instrumentState.panningOffsetR;\x0a\x09\x09\x09\x09const\x20panningOffsetDeltaL\x20=\x201.0\x20-\x20instrumentState.panningOffsetDeltaL;\x0a\x09\x09\x09\x09const\x20panningOffsetDeltaR\x20=\x201.0\x20-\x20instrumentState.panningOffsetDeltaR;'),
                fO && (fT += '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20chorusMask\x20=\x20synth.chorusDelayBufferMask\x20>>>\x200;\x0a\x09\x09\x09\x09const\x20chorusDelayLineL\x20=\x20instrumentState.chorusDelayLineL;\x0a\x09\x09\x09\x09const\x20chorusDelayLineR\x20=\x20instrumentState.chorusDelayLineR;\x0a\x09\x09\x09\x09instrumentState.chorusDelayLineDirty\x20=\x20true;\x0a\x09\x09\x09\x09let\x20chorusDelayPos\x20=\x20instrumentState.chorusDelayPos\x20&\x20chorusMask;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20chorusVoiceMult\x20=\x20+instrumentState.chorusVoiceMult;\x0a\x09\x09\x09\x09const\x20chorusVoiceMultDelta\x20=\x20+instrumentState.chorusVoiceMultDelta;\x0a\x09\x09\x09\x09let\x20chorusCombinedMult\x20=\x20+instrumentState.chorusCombinedMult;\x0a\x09\x09\x09\x09const\x20chorusCombinedMultDelta\x20=\x20+instrumentState.chorusCombinedMultDelta;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20chorusDuration\x20=\x20+Config.chorusPeriodSeconds;\x0a\x09\x09\x09\x09const\x20chorusAngle\x20=\x20Math.PI\x20*\x202.0\x20/\x20(chorusDuration\x20*\x20synth.samplesPerSecond);\x0a\x09\x09\x09\x09const\x20chorusRange\x20=\x20synth.samplesPerSecond\x20*\x20Config.chorusDelayRange;\x0a\x09\x09\x09\x09const\x20chorusOffset0\x20=\x20synth.chorusDelayBufferSize\x20-\x20Config.chorusDelayOffsets[0][0]\x20*\x20chorusRange;\x0a\x09\x09\x09\x09const\x20chorusOffset1\x20=\x20synth.chorusDelayBufferSize\x20-\x20Config.chorusDelayOffsets[0][1]\x20*\x20chorusRange;\x0a\x09\x09\x09\x09const\x20chorusOffset2\x20=\x20synth.chorusDelayBufferSize\x20-\x20Config.chorusDelayOffsets[0][2]\x20*\x20chorusRange;\x0a\x09\x09\x09\x09const\x20chorusOffset3\x20=\x20synth.chorusDelayBufferSize\x20-\x20Config.chorusDelayOffsets[1][0]\x20*\x20chorusRange;\x0a\x09\x09\x09\x09const\x20chorusOffset4\x20=\x20synth.chorusDelayBufferSize\x20-\x20Config.chorusDelayOffsets[1][1]\x20*\x20chorusRange;\x0a\x09\x09\x09\x09const\x20chorusOffset5\x20=\x20synth.chorusDelayBufferSize\x20-\x20Config.chorusDelayOffsets[1][2]\x20*\x20chorusRange;\x0a\x09\x09\x09\x09let\x20chorusPhase\x20=\x20instrumentState.chorusPhase\x20%\x20(Math.PI\x20*\x202.0);\x0a\x09\x09\x09\x09let\x20chorusTap0Index\x20=\x20chorusDelayPos\x20+\x20chorusOffset0\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[0][0]);\x0a\x09\x09\x09\x09let\x20chorusTap1Index\x20=\x20chorusDelayPos\x20+\x20chorusOffset1\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[0][1]);\x0a\x09\x09\x09\x09let\x20chorusTap2Index\x20=\x20chorusDelayPos\x20+\x20chorusOffset2\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[0][2]);\x0a\x09\x09\x09\x09let\x20chorusTap3Index\x20=\x20chorusDelayPos\x20+\x20chorusOffset3\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[1][0]);\x0a\x09\x09\x09\x09let\x20chorusTap4Index\x20=\x20chorusDelayPos\x20+\x20chorusOffset4\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[1][1]);\x0a\x09\x09\x09\x09let\x20chorusTap5Index\x20=\x20chorusDelayPos\x20+\x20chorusOffset5\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[1][2]);\x0a\x09\x09\x09\x09chorusPhase\x20+=\x20chorusAngle\x20*\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap0End\x20=\x20chorusDelayPos\x20+\x20chorusOffset0\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[0][0])\x20+\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap1End\x20=\x20chorusDelayPos\x20+\x20chorusOffset1\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[0][1])\x20+\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap2End\x20=\x20chorusDelayPos\x20+\x20chorusOffset2\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[0][2])\x20+\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap3End\x20=\x20chorusDelayPos\x20+\x20chorusOffset3\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[1][0])\x20+\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap4End\x20=\x20chorusDelayPos\x20+\x20chorusOffset4\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[1][1])\x20+\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap5End\x20=\x20chorusDelayPos\x20+\x20chorusOffset5\x20-\x20chorusRange\x20*\x20Math.sin(chorusPhase\x20+\x20Config.chorusPhaseOffsets[1][2])\x20+\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap0Delta\x20=\x20(chorusTap0End\x20-\x20chorusTap0Index)\x20/\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap1Delta\x20=\x20(chorusTap1End\x20-\x20chorusTap1Index)\x20/\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap2Delta\x20=\x20(chorusTap2End\x20-\x20chorusTap2Index)\x20/\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap3Delta\x20=\x20(chorusTap3End\x20-\x20chorusTap3Index)\x20/\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap4Delta\x20=\x20(chorusTap4End\x20-\x20chorusTap4Index)\x20/\x20runLength;\x0a\x09\x09\x09\x09const\x20chorusTap5Delta\x20=\x20(chorusTap5End\x20-\x20chorusTap5Index)\x20/\x20runLength;'),
                fP && (fT += '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20echoMult\x20=\x20+instrumentState.echoMult;\x0a\x09\x09\x09\x09const\x20echoMultDelta\x20=\x20+instrumentState.echoMultDelta;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20echoDelayLineL\x20=\x20instrumentState.echoDelayLineL;\x0a\x09\x09\x09\x09const\x20echoDelayLineR\x20=\x20instrumentState.echoDelayLineR;\x0a\x09\x09\x09\x09const\x20echoMask\x20=\x20(echoDelayLineL.length\x20-\x201)\x20>>>\x200;\x0a\x09\x09\x09\x09instrumentState.echoDelayLineDirty\x20=\x20true;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09let\x20echoDelayPos\x20=\x20instrumentState.echoDelayPos\x20&\x20echoMask;\x0a\x09\x09\x09\x09const\x20echoDelayOffsetStart\x20=\x20(echoDelayLineL.length\x20-\x20instrumentState.echoDelayOffsetStart)\x20&\x20echoMask;\x0a\x09\x09\x09\x09const\x20echoDelayOffsetEnd\x20\x20\x20=\x20(echoDelayLineL.length\x20-\x20instrumentState.echoDelayOffsetEnd)\x20&\x20echoMask;\x0a\x09\x09\x09\x09let\x20echoDelayOffsetRatio\x20=\x20+instrumentState.echoDelayOffsetRatio;\x0a\x09\x09\x09\x09const\x20echoDelayOffsetRatioDelta\x20=\x20+instrumentState.echoDelayOffsetRatioDelta;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09const\x20echoShelfA1\x20=\x20+instrumentState.echoShelfA1;\x0a\x09\x09\x09\x09const\x20echoShelfB0\x20=\x20+instrumentState.echoShelfB0;\x0a\x09\x09\x09\x09const\x20echoShelfB1\x20=\x20+instrumentState.echoShelfB1;\x0a\x09\x09\x09\x09let\x20echoShelfSampleL\x20=\x20+instrumentState.echoShelfSampleL;\x0a\x09\x09\x09\x09let\x20echoShelfSampleR\x20=\x20+instrumentState.echoShelfSampleR;\x0a\x09\x09\x09\x09let\x20echoShelfPrevInputL\x20=\x20+instrumentState.echoShelfPrevInputL;\x0a\x09\x09\x09\x09let\x20echoShelfPrevInputR\x20=\x20+instrumentState.echoShelfPrevInputR;'),
                fQ && (fT += mD(0x890)),
                fT += mD(0x2ca),
                fK && (fT += mD(0x4c0)),
                fL && (fT += mD(0x82a)),
                fM && (fT += '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09const\x20inputSample\x20=\x20sample;\x0a\x09\x09\x09\x09\x09sample\x20=\x20applyFilters(inputSample,\x20initialFilterInput1,\x20initialFilterInput2,\x20filterCount,\x20filters);\x0a\x09\x09\x09\x09\x09initialFilterInput2\x20=\x20initialFilterInput1;\x0a\x09\x09\x09\x09\x09initialFilterInput1\x20=\x20inputSample;'),
                fT += '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09sample\x20*=\x20eqFilterVolume;\x0a\x09\x09\x09\x09\x09eqFilterVolume\x20+=\x20eqFilterVolumeDelta;',
                fT += fN ? '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09panningDelayLine[panningDelayPos]\x20=\x20sample;\x0a\x09\x09\x09\x09\x09const\x20panningRatioL\x20\x20=\x20panningOffsetL\x20%\x201;\x0a\x09\x09\x09\x09\x09const\x20panningRatioR\x20\x20=\x20panningOffsetR\x20%\x201;\x0a\x09\x09\x09\x09\x09const\x20panningTapLA\x20\x20\x20=\x20panningDelayLine[(panningOffsetL)\x20&\x20panningMask];\x0a\x09\x09\x09\x09\x09const\x20panningTapLB\x20\x20\x20=\x20panningDelayLine[(panningOffsetL\x20+\x201)\x20&\x20panningMask];\x0a\x09\x09\x09\x09\x09const\x20panningTapRA\x20\x20\x20=\x20panningDelayLine[(panningOffsetR)\x20&\x20panningMask];\x0a\x09\x09\x09\x09\x09const\x20panningTapRB\x20\x20\x20=\x20panningDelayLine[(panningOffsetR\x20+\x201)\x20&\x20panningMask];\x0a\x09\x09\x09\x09\x09const\x20panningTapL\x20\x20\x20\x20=\x20panningTapLA\x20+\x20(panningTapLB\x20-\x20panningTapLA)\x20*\x20panningRatioL;\x0a\x09\x09\x09\x09\x09const\x20panningTapR\x20\x20\x20\x20=\x20panningTapRA\x20+\x20(panningTapRB\x20-\x20panningTapRA)\x20*\x20panningRatioR;\x0a\x09\x09\x09\x09\x09let\x20sampleL\x20=\x20panningTapL\x20*\x20panningVolumeL;\x0a\x09\x09\x09\x09\x09let\x20sampleR\x20=\x20panningTapR\x20*\x20panningVolumeR;\x0a\x09\x09\x09\x09\x09panningDelayPos\x20=\x20(panningDelayPos\x20+\x201)\x20&\x20panningMask;\x0a\x09\x09\x09\x09\x09panningVolumeL\x20+=\x20panningVolumeDeltaL;\x0a\x09\x09\x09\x09\x09panningVolumeR\x20+=\x20panningVolumeDeltaR;\x0a\x09\x09\x09\x09\x09panningOffsetL\x20+=\x20panningOffsetDeltaL;\x0a\x09\x09\x09\x09\x09panningOffsetR\x20+=\x20panningOffsetDeltaR;' : mD(0x882),
                fO && (fT += '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09const\x20chorusTap0Ratio\x20=\x20chorusTap0Index\x20%\x201;\x0a\x09\x09\x09\x09\x09const\x20chorusTap1Ratio\x20=\x20chorusTap1Index\x20%\x201;\x0a\x09\x09\x09\x09\x09const\x20chorusTap2Ratio\x20=\x20chorusTap2Index\x20%\x201;\x0a\x09\x09\x09\x09\x09const\x20chorusTap3Ratio\x20=\x20chorusTap3Index\x20%\x201;\x0a\x09\x09\x09\x09\x09const\x20chorusTap4Ratio\x20=\x20chorusTap4Index\x20%\x201;\x0a\x09\x09\x09\x09\x09const\x20chorusTap5Ratio\x20=\x20chorusTap5Index\x20%\x201;\x0a\x09\x09\x09\x09\x09const\x20chorusTap0A\x20=\x20chorusDelayLineL[(chorusTap0Index)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap0B\x20=\x20chorusDelayLineL[(chorusTap0Index\x20+\x201)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap1A\x20=\x20chorusDelayLineL[(chorusTap1Index)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap1B\x20=\x20chorusDelayLineL[(chorusTap1Index\x20+\x201)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap2A\x20=\x20chorusDelayLineL[(chorusTap2Index)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap2B\x20=\x20chorusDelayLineL[(chorusTap2Index\x20+\x201)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap3A\x20=\x20chorusDelayLineR[(chorusTap3Index)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap3B\x20=\x20chorusDelayLineR[(chorusTap3Index\x20+\x201)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap4A\x20=\x20chorusDelayLineR[(chorusTap4Index)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap4B\x20=\x20chorusDelayLineR[(chorusTap4Index\x20+\x201)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap5A\x20=\x20chorusDelayLineR[(chorusTap5Index)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap5B\x20=\x20chorusDelayLineR[(chorusTap5Index\x20+\x201)\x20&\x20chorusMask];\x0a\x09\x09\x09\x09\x09const\x20chorusTap0\x20=\x20chorusTap0A\x20+\x20(chorusTap0B\x20-\x20chorusTap0A)\x20*\x20chorusTap0Ratio;\x0a\x09\x09\x09\x09\x09const\x20chorusTap1\x20=\x20chorusTap1A\x20+\x20(chorusTap1B\x20-\x20chorusTap1A)\x20*\x20chorusTap1Ratio;\x0a\x09\x09\x09\x09\x09const\x20chorusTap2\x20=\x20chorusTap2A\x20+\x20(chorusTap2B\x20-\x20chorusTap2A)\x20*\x20chorusTap2Ratio;\x0a\x09\x09\x09\x09\x09const\x20chorusTap3\x20=\x20chorusTap3A\x20+\x20(chorusTap3B\x20-\x20chorusTap3A)\x20*\x20chorusTap3Ratio;\x0a\x09\x09\x09\x09\x09const\x20chorusTap4\x20=\x20chorusTap4A\x20+\x20(chorusTap4B\x20-\x20chorusTap4A)\x20*\x20chorusTap4Ratio;\x0a\x09\x09\x09\x09\x09const\x20chorusTap5\x20=\x20chorusTap5A\x20+\x20(chorusTap5B\x20-\x20chorusTap5A)\x20*\x20chorusTap5Ratio;\x0a\x09\x09\x09\x09\x09chorusDelayLineL[chorusDelayPos]\x20=\x20sampleL\x20*\x20delayInputMult;\x0a\x09\x09\x09\x09\x09chorusDelayLineR[chorusDelayPos]\x20=\x20sampleR\x20*\x20delayInputMult;\x0a\x09\x09\x09\x09\x09sampleL\x20=\x20chorusCombinedMult\x20*\x20(sampleL\x20+\x20chorusVoiceMult\x20*\x20(chorusTap1\x20-\x20chorusTap0\x20-\x20chorusTap2));\x0a\x09\x09\x09\x09\x09sampleR\x20=\x20chorusCombinedMult\x20*\x20(sampleR\x20+\x20chorusVoiceMult\x20*\x20(chorusTap4\x20-\x20chorusTap3\x20-\x20chorusTap5));\x0a\x09\x09\x09\x09\x09chorusDelayPos\x20=\x20(chorusDelayPos\x20+\x201)\x20&\x20chorusMask;\x0a\x09\x09\x09\x09\x09chorusTap0Index\x20+=\x20chorusTap0Delta;\x0a\x09\x09\x09\x09\x09chorusTap1Index\x20+=\x20chorusTap1Delta;\x0a\x09\x09\x09\x09\x09chorusTap2Index\x20+=\x20chorusTap2Delta;\x0a\x09\x09\x09\x09\x09chorusTap3Index\x20+=\x20chorusTap3Delta;\x0a\x09\x09\x09\x09\x09chorusTap4Index\x20+=\x20chorusTap4Delta;\x0a\x09\x09\x09\x09\x09chorusTap5Index\x20+=\x20chorusTap5Delta;\x0a\x09\x09\x09\x09\x09chorusVoiceMult\x20+=\x20chorusVoiceMultDelta;\x0a\x09\x09\x09\x09\x09chorusCombinedMult\x20+=\x20chorusCombinedMultDelta;'),
                fP && (fT += mD(0x801)),
                fQ && (fT += mD(0x4ea)),
                fT += mD(0x16c),
                fU && (fT += '\x0a\x09\x09\x09\x09\x09\x0a\x09\x09\x09\x09\x09delayInputMult\x20+=\x20delayInputMultDelta;'),
                fT += mD(0x306),
                fU && (fT += '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09instrumentState.delayInputMult\x20=\x20delayInputMult;'),
                fK && (fT += mD(0x631)),
                fL && (fT += mD(0x836)),
                fM && (fT += mD(0x462)),
                fN && (fT += mD(0x1ca)),
                fO && (fT += mD(0x2cd)),
                fP && (fT += '\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(echoDelayLineL,\x20echoDelayPos,\x20echoMask);\x0a\x09\x09\x09\x09Synth.sanitizeDelayLine(echoDelayLineR,\x20echoDelayPos,\x20echoMask);\x0a\x09\x09\x09\x09instrumentState.echoDelayPos\x20=\x20echoDelayPos;\x0a\x09\x09\x09\x09instrumentState.echoMult\x20=\x20echoMult;\x0a\x09\x09\x09\x09instrumentState.echoDelayOffsetRatio\x20=\x20echoDelayOffsetRatio;\x0a\x09\x09\x09\x09\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(echoShelfSampleL)\x20||\x20Math.abs(echoShelfSampleL)\x20<\x20epsilon)\x20echoShelfSampleL\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(echoShelfSampleR)\x20||\x20Math.abs(echoShelfSampleR)\x20<\x20epsilon)\x20echoShelfSampleR\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(echoShelfPrevInputL)\x20||\x20Math.abs(echoShelfPrevInputL)\x20<\x20epsilon)\x20echoShelfPrevInputL\x20=\x200.0;\x0a\x09\x09\x09\x09if\x20(!Number.isFinite(echoShelfPrevInputR)\x20||\x20Math.abs(echoShelfPrevInputR)\x20<\x20epsilon)\x20echoShelfPrevInputR\x20=\x200.0;\x0a\x09\x09\x09\x09instrumentState.echoShelfSampleL\x20=\x20echoShelfSampleL;\x0a\x09\x09\x09\x09instrumentState.echoShelfSampleR\x20=\x20echoShelfSampleR;\x0a\x09\x09\x09\x09instrumentState.echoShelfPrevInputL\x20=\x20echoShelfPrevInputL;\x0a\x09\x09\x09\x09instrumentState.echoShelfPrevInputR\x20=\x20echoShelfPrevInputR;'),
                fQ && (fT += mD(0x421)),
                fT += '}',
                fS = new Function('Config',mD(0x779),fT)(a1, bp),
                bp['effectsFunctionCache'][fR] = fS;
            }
            fS(fE, fF, fG, fH, fI, fJ);
        }
        static[jI(0x533)](fE, fF, fG, fH, fI) {
            const mE = jI
              , fJ = fE[mE(0x191)];
            let fK = fH[mE(0x6b6)][0x0];
            const fL = +fH[mE(0x82f)][0x0];
            let fM = +fH[mE(0x618)];
            const fN = +fH[mE(0x65d)];
            let fO = fH['phases'][0x0] % 0x1
              , fP = fH['pulseWidth'];
            const fQ = fH[mE(0x2f4)]
              , fR = fH[mE(0x4fd)]
              , fS = 0x0 | fH['noteFilterCount'];
            let fT = +fH[mE(0x17c)]
              , fU = +fH[mE(0x457)];
            const fV = bp[mE(0x20c)]
              , fW = fF + fG;
            for (let fY = fF; fY < fW; fY++) {
                const fZ = fO % 0x1
                  , g0 = (fO + fP) % 0x1;
                let g1 = g0 - fZ;
                if (fZ < fK)
                    g1 += 0.5 * ((fX = fZ / fK) + fX - fX * fX - 0x1);
                else
                    fZ > 0x1 - fK && (g1 += 0.5 * ((fX = (fZ - 0x1) / fK) + fX + fX * fX + 0x1));
                if (g0 < fK)
                    g1 -= 0.5 * ((fX = g0 / fK) + fX - fX * fX - 0x1);
                else {
                    if (g0 > 0x1 - fK) {
                        var fX;
                        g1 -= 0.5 * ((fX = (g0 - 0x1) / fK) + fX + fX * fX + 0x1);
                    }
                }
                const g2 = g1
                  , g3 = fV(g2, fT, fU, fS, fR);
                fU = fT,
                fT = g2,
                fO += fK,
                fK *= fL,
                fP += fQ;
                const g4 = g3 * fM;
                fM += fN,
                fJ[fY] += g4;
            }
            fH['phases'][0x0] = fO,
            fH['phaseDeltas'][0x0] = fK,
            fH[mE(0x618)] = fM,
            fH['pulseWidth'] = fP,
            fE[mE(0x6d5)](fR),
            fH[mE(0x17c)] = fT,
            fH[mE(0x457)] = fU;
        }
        static['supersawSynth'](fE, fF, fG, fH, fI) {
            const mF = jI
              , fJ = fE[mF(0x191)]
              , fK = 0x0 | a1[mF(0x6b2)];
            let fL = fH[mF(0x6b6)][0x0];
            const fM = +fH['phaseDeltaScales'][0x0];
            let fN = +fH['expression'];
            const fO = +fH[mF(0x65d)];
            let fP = fH['phases']
              , fQ = +fH['supersawDynamism'];
            const fR = +fH['supersawDynamismDelta']
              , fS = fH[mF(0x405)];
            let fT = +fH[mF(0x4de)];
            const fU = +fH[mF(0x6a3)];
            let fV = +fH[mF(0x4f1)];
            const fW = +fH[mF(0x2fa)]
              , fX = fH[mF(0x88b)]
              , fY = fX[mF(0x57c)] - 0x1 >> 0x0;
            let fZ = 0x0 | fH[mF(0x56d)];
            fZ = (fZ & fY) + fX['length'];
            const g0 = fH['noteFilters']
              , g1 = 0x0 | fH[mF(0x2d4)];
            let g2 = +fH['initialNoteFilterInput1']
              , g3 = +fH[mF(0x457)];
            const g4 = bp['applyFilters']
              , g5 = fF + fG;
            for (let g7 = fF; g7 < g5; g7++) {
                let g8 = (fP[0x0] + fL) % 0x1
                  , g9 = g8 - 0.5 * (0x1 + (fK - 0x1) * fQ);
                if (g8 < fL)
                    g9 -= 0.5 * ((g6 = g8 / fL) + g6 - g6 * g6 - 0x1);
                else {
                    if (g8 > 0x1 - fL) {
                        var g6;
                        g9 -= 0.5 * ((g6 = (g8 - 0x1) / fL) + g6 + g6 * g6 + 0x1);
                    }
                }
                fP[0x0] = g8;
                for (let gk = 0x1; gk < fK; gk++) {
                    const gl = fL * fS[gk];
                    let gm = (fP[gk] + gl) % 0x1;
                    if (g9 += gm * fQ,
                    gm < gl) {
                        const go = gm / gl;
                        g9 -= 0.5 * (go + go - go * go - 0x1) * fQ;
                    } else {
                        if (gm > 0x1 - gl) {
                            const gp = (gm - 0x1) / gl;
                            g9 -= 0.5 * (gp + gp + gp * gp + 0x1) * fQ;
                        }
                    }
                    fP[gk] = gm;
                }
                fX[fZ & fY] = g9;
                const ga = fZ - fV
                  , gb = 0x0 | ga
                  , gc = gb + 0x1
                  , gd = ga - gb
                  , gf = fX[gb & fY];
                fZ++;
                const gg = g9 - (gf + (fX[gc & fY] - gf) * gd) * fT
                  , gh = g4(gg, g2, g3, g1, g0);
                g3 = g2,
                g2 = gg,
                fL *= fM,
                fQ += fR,
                fT += fU,
                fV += fW;
                const gj = gh * fN;
                fN += fO,
                fJ[g7] += gj;
            }
            fH[mF(0x6b6)][0x0] = fL,
            fH[mF(0x618)] = fN,
            fH[mF(0x555)] = fQ,
            fH[mF(0x4de)] = fT,
            fH['supersawDelayLength'] = fV,
            fH['supersawDelayIndex'] = fZ,
            fE[mF(0x6d5)](g0),
            fH['initialNoteFilterInput1'] = g2,
            fH[mF(0x457)] = g3;
        }
        static['noiseSynth'](fE, fF, fG, fH, fI) {
            const mG = jI
              , fJ = fE[mG(0x191)]
              , fK = fI['wave'];
            let fL = +fH[mG(0x6b6)][0x0];
            const fM = +fH['phaseDeltaScales'][0x0];
            let fN = +fH[mG(0x618)];
            const fO = +fH['expressionDelta'];
            let fP = fH['phases'][0x0] % 0x1 * a1['chipNoiseLength'];
            0x0 == fH['phases'][0x0] && (fP = Math['random']() * a1[mG(0x1cd)]);
            const fQ = a1['chipNoiseLength'] - 0x1;
            let fR = +fH['noiseSample'];
            const fS = fH['noteFilters']
              , fT = 0x0 | fH['noteFilterCount'];
            let fU = +fH[mG(0x17c)]
              , fV = +fH['initialNoteFilterInput2'];
            const fW = bp['applyFilters']
              , fX = Math['min'](0x1, fL * fI['noisePitchFilterMult'])
              , fY = fF + fG;
            for (let fZ = fF; fZ < fY; fZ++) {
                fR += (fK[fP & fQ] - fR) * fX;
                const g0 = fR
                  , g1 = fW(g0, fU, fV, fT, fS);
                fV = fU,
                fU = g0,
                fP += fL,
                fL *= fM;
                const g2 = g1 * fN;
                fN += fO,
                fJ[fZ] += g2;
            }
            fH[mG(0x66d)][0x0] = fP / a1[mG(0x1cd)],
            fH[mG(0x6b6)][0x0] = fL,
            fH['expression'] = fN,
            fH['noiseSample'] = fR,
            fE[mG(0x6d5)](fS),
            fH['initialNoteFilterInput1'] = fU,
            fH['initialNoteFilterInput2'] = fV;
        }
        static['spectrumSynth'](fE, fF, fG, fH, fI) {
            const mH = jI
              , fJ = fE['tempMonoInstrumentSampleBuffer']
              , fK = fI[mH(0x522)];
            let fL = 0x80 * fH['phaseDeltas'][0x0];
            const fM = +fH['phaseDeltaScales'][0x0];
            let fN = +fH['expression'];
            const fO = +fH[mH(0x65d)];
            let fP = +fH[mH(0x2e1)];
            const fQ = fH['noteFilters']
              , fR = 0x0 | fH[mH(0x2d4)];
            let fS = +fH[mH(0x17c)]
              , fT = +fH[mH(0x457)];
            const fU = bp[mH(0x20c)];
            let fV = fH['phases'][0x0] % 0x1 * a1[mH(0x36b)];
            0x0 == fH[mH(0x66d)][0x0] && (fV = bp['findRandomZeroCrossing'](fK, a1['spectrumNoiseLength']) + fL);
            const fW = a1[mH(0x36b)] - 0x1
              , fX = Math[mH(0x4c5)](0x1, fL)
              , fY = fF + fG;
            for (let fZ = fF; fZ < fY; fZ++) {
                const g0 = 0x0 | fV
                  , g1 = g0 & fW;
                let g2 = fK[g1];
                const g3 = fV - g0;
                g2 += (fK[g1 + 0x1] - g2) * g3,
                fP += (g2 - fP) * fX;
                const g4 = fP
                  , g5 = fU(g4, fS, fT, fR, fQ);
                fT = fS,
                fS = g4,
                fV += fL,
                fL *= fM;
                const g6 = g5 * fN;
                fN += fO,
                fJ[fZ] += g6;
            }
            fH[mH(0x66d)][0x0] = fV / a1['spectrumNoiseLength'],
            fH['phaseDeltas'][0x0] = fL / 0x80,
            fH['expression'] = fN,
            fH[mH(0x2e1)] = fP,
            fE[mH(0x6d5)](fQ),
            fH[mH(0x17c)] = fS,
            fH[mH(0x457)] = fT;
        }
        static[jI(0x347)](fE, fF, fG, fH, fI) {
            const mI = jI
              , fJ = fE[mI(0x191)];
            let fK = fI['getDrumsetWave'](fH[mI(0x28a)]);
            const fL = bm[mI(0x6f8)](fH[mI(0x28a)]);
            let fM = fH['phaseDeltas'][0x0] / fL;
            const fN = +fH[mI(0x82f)][0x0];
            let fO = +fH[mI(0x618)];
            const fP = +fH['expressionDelta']
              , fQ = fH[mI(0x4fd)]
              , fR = 0x0 | fH[mI(0x2d4)];
            let fS = +fH[mI(0x17c)]
              , fT = +fH[mI(0x457)];
            const fU = bp['applyFilters'];
            let fV = fH['phases'][0x0] % 0x1 * a1['spectrumNoiseLength'];
            0x0 == fH[mI(0x66d)][0x0] && (fV = bp[mI(0x5d0)](fK, a1[mI(0x36b)]) + fM);
            const fW = a1[mI(0x36b)] - 0x1
              , fX = fF + fG;
            for (let fY = fF; fY < fX; fY++) {
                const fZ = 0x0 | fV
                  , g0 = fZ & fW;
                let g1 = fK[g0];
                const g2 = fV - fZ;
                g1 += (fK[g0 + 0x1] - g1) * g2;
                const g3 = g1
                  , g4 = fU(g3, fS, fT, fR, fQ);
                fT = fS,
                fS = g3,
                fV += fM,
                fM *= fN;
                const g5 = g4 * fO;
                fO += fP,
                fJ[fY] += g5;
            }
            fH['phases'][0x0] = fV / a1['spectrumNoiseLength'],
            fH['phaseDeltas'][0x0] = fM * fL,
            fH[mI(0x618)] = fO,
            fE[mI(0x6d5)](fQ),
            fH['initialNoteFilterInput1'] = fS,
            fH[mI(0x457)] = fT;
        }
        static[jI(0x5d0)](fE, fF) {
            const mJ = jI;
            let fG = Math[mJ(0x50a)]() * fF;
            const fH = fF - 0x1;
            let fI = fG & fH
              , fJ = fE[fI];
            for (let fK = 0x80; fK > 0x0; fK--) {
                const fL = fI + 0x10 & fH
                  , fM = fE[fL];
                if (fJ * fM <= 0x0) {
                    for (let fN = 0x0; fN < 0x10; fN++) {
                        const fO = fI + 0x1 & fH
                          , fP = fE[fO];
                        if (fJ * fP <= 0x0) {
                            const fQ = fP - fJ;
                            fG = fI,
                            Math['abs'](fQ) > 1e-8 && (fG += -fJ / fQ),
                            fG = Math[mJ(0x2f6)](0x0, fG) % fF;
                            break;
                        }
                        fI = fO,
                        fJ = fP;
                    }
                    break;
                }
                fI = fL,
                fJ = fM;
            }
            return fG;
        }
        static[jI(0x6dc)](fE) {
            const mK = jI;
            return fE == a1[mK(0x853)] - 0x1 ? 0x0 : Math[mK(0x3b6)](0x2, a1[mK(0x357)] * fE);
        }
        static[jI(0x204)](fE) {
            const mL = jI;
            return fE <= 0x0 ? a1[mL(0x853)] - 0x1 : Math[mL(0x4c5)](a1[mL(0x853)] - 0x2, Math[mL(0x253)](fE) / a1['volumeLogScale']);
        }
        static[jI(0x62c)](fE) {
            return Math['pow'](Math['max'](0x0, fE) / a1['noteSizeMax'], 1.5);
        }
        static['volumeMultToNoteSize'](fE) {
            const mM = jI;
            return Math[mM(0x3b6)](Math['max'](0x0, fE), 0x1 / 1.5) * a1[mM(0x483)];
        }
        static['fadeInSettingToSeconds'](fE) {
            return 0.0125 * (0.95 * fE + 0.05 * fE * fE);
        }
        static[jI(0x59f)](fE) {
            const mN = jI;
            return aX(0x0, a1[mN(0x5bb)], Math['round']((-0.95 + Math['sqrt'](0.9025 + 0.2 * fE / 0.0125)) / 0.1));
        }
        static[jI(0x3f6)](fE) {
            const mO = jI;
            return a1[mO(0x3f9)][fE];
        }
        static[jI(0x7e7)](fE) {
            const mP = jI;
            let fF = a1[mP(0x3f9)][0x0];
            if (fE <= fF)
                return 0x0;
            for (let fG = 0x1; fG < a1['fadeOutTicks'][mP(0x57c)]; fG++) {
                let fH = a1[mP(0x3f9)][fG];
                if (fE <= fH)
                    return fE < (fF + fH) / 0x2 ? fG - 0x1 : fG;
                fF = fH;
            }
            return a1[mP(0x3f9)][mP(0x57c)] - 0x1;
        }
        static[jI(0x5d6)](fE) {
            return fE * (Math['abs'](fE) + 0x1) / 0x2;
        }
        static[jI(0x24e)](fE) {
            const mQ = jI;
            return Math[mQ(0x617)](fE) * (Math['sqrt'](0x1 + 0x8 * Math[mQ(0x216)](fE)) - 0x1) / 0x2;
        }
        [jI(0x78e)]() {
            const mR = jI;
            if (null == this['song'])
                return 0x0;
            const fE = this[mR(0x3c1)]['getBeatsPerMinute']() / 0x3c
              , fF = a1[mR(0x58d)] * fE
              , fG = a1[mR(0x696)] * fF;
            return this['samplesPerSecond'] / fG;
        }
        static[jI(0x727)](fE) {
            const mS = jI;
            return 0x1 << 0x20 - Math[mS(0x296)](Math[mS(0x600)](fE) - 0x1);
        }
        ['sanitizeFilters'](fE) {
            const mT = jI;
            let fF = !0x1;
            for (const fG of fE) {
                const fH = Math[mT(0x216)](fG['output1'])
                  , fI = Math[mT(0x216)](fG[mT(0x60d)]);
                if (!(fH < 0x64 && fI < 0x64)) {
                    fF = !0x0;
                    break;
                }
                fH < aW && (fG[mT(0x7f4)] = 0x0),
                fI < aW && (fG['output2'] = 0x0);
            }
            if (fF) {
                for (const fJ of fE)
                    fJ[mT(0x7f4)] = 0x0,
                    fJ['output2'] = 0x0;
            }
        }
        static['sanitizeDelayLine'](fE, fF, fG) {
            const mU = jI;
            for (; ; ) {
                const fH = --fF & fG
                  , fI = Math['abs'](fE[fH]);
                if (Number[mU(0x539)](fI) && (0x0 == fI || fI >= aW))
                    break;
                fE[fH] = 0x0;
            }
        }
        static[jI(0x20c)](fE, fF, fG, fH, fI) {
            const mV = jI;
            for (let fJ = 0x0; fJ < fH; fJ++) {
                const fK = fI[fJ]
                  , fL = fK[mV(0x7f4)]
                  , fM = fK['output2']
                  , fN = fK['a1']
                  , fO = fK['a2']
                  , fP = fK['b0']
                  , fQ = fK['b1']
                  , fR = fK['b2'];
                fE = fP * fE + fQ * fF + fR * fG - fN * fL - fO * fM,
                fK['a1'] = fN + fK[mV(0x344)],
                fK['a2'] = fO + fK['a2Delta'],
                fK[mV(0x1d3)] ? (fK['b0'] = fP * fK[mV(0x348)],
                fK['b1'] = fQ * fK[mV(0x85e)],
                fK['b2'] = fR * fK['b2Delta']) : (fK['b0'] = fP + fK['b0Delta'],
                fK['b1'] = fQ + fK[mV(0x85e)],
                fK['b2'] = fR + fK[mV(0x33d)]),
                fK[mV(0x60d)] = fL,
                fK['output1'] = fE,
                fG = fM,
                fF = fL;
            }
            return fE;
        }
    }
    bp['tempFilterStartCoefficients'] = new aS(),
    bp['tempFilterEndCoefficients'] = new aS(),
    bp['fmSynthFunctionCache'] = {},
    bp[jI(0x456)] = Array(0x80)[jI(0x88a)](void 0x0),
    bp[jI(0x586)] = Array(0x3)['fill'](void 0x0),
    bp[jI(0x248)] = ('\x0a\x09\x09const\x20data\x20=\x20synth.tempMonoInstrumentSampleBuffer;\x0a\x09\x09const\x20sineWave\x20=\x20Config.sineWave;\x0a\x09\x09\x0a\x09\x09//\x20I\x27m\x20adding\x201000\x20to\x20the\x20phase\x20to\x20ensure\x20that\x20it\x27s\x20never\x20negative\x20even\x20when\x20modulated\x20by\x20other\x20waves\x20because\x20negative\x20numbers\x20don\x27t\x20work\x20with\x20the\x20modulus\x20operator\x20very\x20well.\x0a\x09\x09let\x20operator#Phase\x20\x20\x20\x20\x20\x20\x20=\x20+((tone.phases[#]\x20%\x201)\x20+\x201000)\x20*\x20' + a1['sineWaveLength'] + ';\x0a\x09\x09let\x20operator#PhaseDelta\x20\x20=\x20+tone.phaseDeltas[#]\x20*\x20' + a1['sineWaveLength'] + ';\x0a\x09\x09let\x20operator#PhaseDeltaScale\x20=\x20+tone.phaseDeltaScales[#];\x0a\x09\x09let\x20operator#OutputMult\x20\x20=\x20+tone.operatorExpressions[#];\x0a\x09\x09const\x20operator#OutputDelta\x20=\x20+tone.operatorExpressionDeltas[#];\x0a\x09\x09let\x20operator#Output\x20\x20\x20\x20\x20\x20=\x20+tone.feedbackOutputs[#];\x0a\x09\x09let\x20feedbackMult\x20\x20\x20\x20\x20\x20\x20\x20\x20=\x20+tone.feedbackMult;\x0a\x09\x09const\x20feedbackDelta\x20\x20\x20\x20\x20\x20=\x20+tone.feedbackDelta;\x0a\x09\x09let\x20expression\x20=\x20+tone.expression;\x0a\x09\x09const\x20expressionDelta\x20=\x20+tone.expressionDelta;\x0a\x09\x09\x0a\x09\x09const\x20filters\x20=\x20tone.noteFilters;\x0a\x09\x09const\x20filterCount\x20=\x20tone.noteFilterCount|0;\x0a\x09\x09let\x20initialFilterInput1\x20=\x20+tone.initialNoteFilterInput1;\x0a\x09\x09let\x20initialFilterInput2\x20=\x20+tone.initialNoteFilterInput2;\x0a\x09\x09const\x20applyFilters\x20=\x20Synth.applyFilters;\x0a\x09\x09\x0a\x09\x09const\x20stopIndex\x20=\x20bufferIndex\x20+\x20runLength;\x0a\x09\x09for\x20(let\x20sampleIndex\x20=\x20bufferIndex;\x20sampleIndex\x20<\x20stopIndex;\x20sampleIndex++)\x20{\x0a\x09\x09\x09//\x20INSERT\x20OPERATOR\x20COMPUTATION\x20HERE\x0a\x09\x09\x09const\x20fmOutput\x20=\x20(/*operator#Scaled*/);\x20//\x20CARRIER\x20OUTPUTS\x0a\x09\x09\x09\x0a\x09\x09\x09const\x20inputSample\x20=\x20fmOutput;\x0a\x09\x09\x09const\x20sample\x20=\x20applyFilters(inputSample,\x20initialFilterInput1,\x20initialFilterInput2,\x20filterCount,\x20filters);\x0a\x09\x09\x09initialFilterInput2\x20=\x20initialFilterInput1;\x0a\x09\x09\x09initialFilterInput1\x20=\x20inputSample;\x0a\x09\x09\x09\x0a\x09\x09\x09feedbackMult\x20+=\x20feedbackDelta;\x0a\x09\x09\x09operator#OutputMult\x20+=\x20operator#OutputDelta;\x0a\x09\x09\x09operator#Phase\x20+=\x20operator#PhaseDelta;\x0a\x09\x09\x09operator#PhaseDelta\x20*=\x20operator#PhaseDeltaScale;\x0a\x09\x09\x09\x0a\x09\x09\x09const\x20output\x20=\x20sample\x20*\x20expression;\x0a\x09\x09\x09expression\x20+=\x20expressionDelta;\x0a\x09\x09\x09\x0a\x09\x09\x09data[sampleIndex]\x20+=\x20output;\x0a\x09\x09}\x0a\x09\x09\x0a\x09\x09tone.phases[#]\x20=\x20operator#Phase\x20/\x20' + a1['sineWaveLength'] + jI(0x250) + a1[jI(0x24f)] + jI(0x552))[jI(0x75e)]('\x0a'),
    bp[jI(0x594)] = ('\x0a\x09\x09\x09const\x20operator#PhaseMix\x20=\x20operator#Phase/*\x20+\x20operator@Scaled*/;\x0a\x09\x09\x09const\x20operator#PhaseInt\x20=\x20operator#PhaseMix|0;\x0a\x09\x09\x09const\x20operator#Index\x20\x20\x20\x20=\x20operator#PhaseInt\x20&\x20' + a1['sineWaveMask'] + ';\x0a\x09\x09\x09const\x20operator#Sample\x20\x20\x20=\x20sineWave[operator#Index];\x0a\x09\x09\x09operator#Output\x20\x20\x20\x20\x20\x20\x20\x20\x20=\x20operator#Sample\x20+\x20(sineWave[operator#Index\x20+\x201]\x20-\x20operator#Sample)\x20*\x20(operator#PhaseMix\x20-\x20operator#PhaseInt);\x0a\x09\x09\x09const\x20operator#Scaled\x20\x20\x20=\x20operator#OutputMult\x20*\x20operator#Output;\x0a\x09')['split']('\x0a');
    const {button: bq, div: br, p: bu, h2: bv} = aD;
    class bw {
        constructor(fE, fF) {
            const mX = jI;
            let fG;
            switch (this['$'] = fE,
            this['_'] = bq({
                'class': 'cancelButton'
            }),
            this['U'] = () => {
                this['$']['undo']();
            }
            ,
            this['cleanUp'] = () => {
                const mW = a0b;
                this['_']['removeEventListener'](mW(0x50e), this['U']);
            }
            ,
            fF) {
            case mX(0x7ad):
                fG = br(bv('Scale'), bu(mX(0x7b7)), bu('Most\x20of\x20the\x20scales\x20have\x20a\x20major\x20version,\x20marked\x20with\x20a\x20smiley\x20face,\x20and\x20a\x20minor\x20version,\x20marked\x20with\x20a\x20sad\x20face.\x20Assuming\x20your\x20song\x20uses\x20all\x20pitches\x20in\x20the\x20scale\x20and\x20especially\x20\x22tonic\x22\x20pitches\x20(the\x20brown\x20rows\x20in\x20the\x20pattern\x20editor)\x20then\x20major\x20scales\x20tend\x20to\x20sound\x20more\x20playful\x20or\x20optimistic,\x20whereas\x20minor\x20scales\x20sound\x20more\x20serious\x20or\x20sad.'));
                break;
            case 'key':
                fG = br(bv(mX(0x310)), bu(mX(0x1e8)), bu(mX(0x728)));
                break;
            case mX(0x68a):
                fG = br(bv('Song\x20Tempo'), bu('This\x20setting\x20controls\x20the\x20speed\x20of\x20your\x20song,\x20measured\x20in\x20beats-per-minute.\x20A\x20\x22beat\x22\x20is\x20the\x20duration\x20of\x20the\x20little\x20gray\x20rectangles\x20in\x20the\x20pattern\x20editor.\x20(In\x20conventional\x20music\x20notation,\x20a\x20\x22quarter\x20note\x22\x20is\x20usually\x20equivalent\x20to\x20\x22beat\x22.)'));
                break;
            case mX(0x76b):
                fG = br(bv(mX(0x1d1)), bu(mX(0x31b)));
                break;
            case 'rhythm':
                fG = br(bv(mX(0x74d)), bu('This\x20setting\x20determines\x20how\x20beats\x20are\x20divided.\x20The\x20pattern\x20editor\x20helps\x20you\x20align\x20notes\x20to\x20fractions\x20of\x20a\x20beat\x20based\x20on\x20this\x20setting.'), bu('If\x20you\x27ve\x20already\x20placed\x20some\x20notes\x20but\x20they\x20don\x27t\x20align\x20with\x20the\x20selected\x20rhythm,\x20you\x20can\x20select\x20the\x20\x22Snap\x20Notes\x20To\x20Rhythm\x22\x20option\x20in\x20the\x20rhythm\x20menu\x20to\x20force\x20the\x20notes\x20in\x20the\x20currently\x20selected\x20pattern(s)\x20to\x20align\x20with\x20the\x20selected\x20rhythm.'));
                break;
            case 'instrumentIndex':
                fG = br(bv(mX(0x56c)), bu('In\x20the\x20\x22Channel\x20Settings\x22\x20option\x20from\x20BeepBox\x27s\x20\x22Edit\x22\x20menu,\x20there\x20are\x20a\x20few\x20ways\x20to\x20enable\x20multiple\x20instruments\x20per\x20channel.'), bu(mX(0x6b0)), bu('Second,\x20you\x20could\x20enable\x20different\x20instruments\x20per\x20pattern.\x20Only\x20one\x20of\x20the\x20instruments\x20will\x20play\x20at\x20any\x20given\x20time,\x20but\x20you\x20can\x20click\x20the\x20instrument\x20number\x20to\x20change\x20which\x20instrument\x20is\x20used\x20for\x20the\x20currently\x20selected\x20pattern(s).'), bu('Finally,\x20you\x20can\x20enable\x20them\x20both,\x20in\x20which\x20case\x20you\x20can\x20click\x20an\x20instrument\x20number\x20once\x20to\x20view\x20it,\x20and\x20again\x20to\x20toggle\x20whether\x20the\x20instrument\x20is\x20used\x20for\x20the\x20currently\x20selected\x20pattern(s).'), bu('Either\x20way,\x20you\x20can\x20click\x20the\x20+\x20button\x20to\x20add\x20more\x20instruments\x20to\x20a\x20channel,\x20and\x20you\x20can\x20press\x20shift\x20and\x20a\x20number\x20key\x20on\x20your\x20keyboard\x20to\x20select\x20an\x20instrument\x20as\x20if\x20you\x20had\x20clicked\x20the\x20corresponding\x20button\x20here.'));
                break;
            case mX(0x5b1):
                fG = br(bv(mX(0x54e)), bu(mX(0x224)));
                break;
            case mX(0x19c):
                fG = br(bv('Instrument\x20Panning'), bu(mX(0x563)), bu('As\x20a\x20suggestion,\x20composers\x20often\x20put\x20lead\x20melodies,\x20drums,\x20and\x20basses\x20in\x20the\x20center,\x20and\x20spread\x20other\x20instruments\x20toward\x20either\x20side.\x20If\x20too\x20many\x20instruments\x20seem\x20like\x20they\x27re\x20coming\x20from\x20the\x20same\x20place,\x20it\x20can\x20feel\x20crowded\x20and\x20harder\x20to\x20distinguish\x20individual\x20sounds,\x20especially\x20if\x20they\x20cover\x20a\x20similar\x20pitch\x20range.'));
                break;
            case 'instrumentType':
                fG = br(bv('Instrument\x20Type'), bu(mX(0x683)), bu(mX(0x312)));
                break;
            case mX(0x7c3):
                fG = br(bv(mX(0x73d)), bu('Filters\x20are\x20a\x20way\x20of\x20emphasizing\x20or\x20diminishing\x20different\x20parts\x20of\x20a\x20sound.\x20Musical\x20notes\x20have\x20a\x20fundamental\x20(base)\x20frequency,\x20but\x20the\x20sound\x20of\x20a\x20musical\x20note\x20also\x20has\x20parts\x20at\x20higher\x20frequencies\x20and\x20filters\x20can\x20adjust\x20the\x20volume\x20of\x20each\x20of\x20these\x20parts\x20based\x20on\x20their\x20frequency.'), bu('Click\x20in\x20the\x20filter\x20editor\x20to\x20insert,\x20delete,\x20or\x20drag\x20a\x20filter\x20control\x20point.\x20The\x20horizontal\x20position\x20of\x20the\x20point\x20determines\x20which\x20frequencies\x20it\x20affects,\x20and\x20the\x20vertical\x20position\x20determines\x20how\x20the\x20volume\x20is\x20affected\x20at\x20that\x20frequency.'), bu('Insert\x20a\x20new\x20point\x20on\x20the\x20left\x20side\x20of\x20the\x20filter\x20editor\x20to\x20add\x20a\x20\x22high-pass\x22\x20filter\x20point,\x20which\x20additionally\x20reduces\x20the\x20volume\x20of\x20lower\x20frequencies,\x20or\x20insert\x20a\x20new\x20point\x20on\x20the\x20right\x20side\x20to\x20add\x20a\x20\x22low-pass\x22\x20filter\x20point\x20which\x20reduces\x20the\x20volume\x20of\x20higher\x20frequencies.'), bu(mX(0x7a2)));
                break;
            case 'noteFilter':
                fG = br(bv(mX(0x674)), bu('Note\x20filters\x20are\x20mostly\x20the\x20same\x20as\x20EQ\x20filters,\x20but\x20have\x20a\x20different\x20purpose.\x20EQ\x20filters\x20are\x20for\x20overall\x20adjustments,\x20whereas\x20note\x20filters\x20are\x20for\x20dynamic\x20control\x20and\x20can\x20be\x20moved\x20with\x20envelopes.\x20Note\x20filters\x20also\x20change\x20how\x20the\x20distortion\x20effect\x20sounds.'), bu(mX(0x2a4)), bu('Click\x20in\x20the\x20filter\x20editor\x20to\x20insert,\x20delete,\x20or\x20drag\x20a\x20filter\x20control\x20point.\x20The\x20horizontal\x20position\x20of\x20the\x20point\x20determines\x20which\x20frequencies\x20it\x20affects,\x20and\x20the\x20vertical\x20position\x20determines\x20how\x20the\x20volume\x20is\x20affected\x20at\x20that\x20frequency.'), bu('Insert\x20a\x20new\x20point\x20on\x20the\x20left\x20side\x20of\x20the\x20filter\x20editor\x20to\x20add\x20a\x20\x22high-pass\x22\x20filter\x20point,\x20which\x20additionally\x20reduces\x20the\x20volume\x20of\x20lower\x20frequencies,\x20or\x20insert\x20a\x20new\x20point\x20on\x20the\x20right\x20side\x20to\x20add\x20a\x20\x22low-pass\x22\x20filter\x20point\x20which\x20reduces\x20the\x20volume\x20of\x20higher\x20frequencies.'));
                break;
            case mX(0x193):
                fG = br(bv(mX(0x416)), bu(mX(0x7be)), bu(mX(0x58e)), bu('You\x20can\x20also\x20make\x20the\x20fade-out\x20start\x20before\x20the\x20note\x20ends\x20to\x20leave\x20a\x20gap\x20before\x20the\x20next\x20note\x20starts,\x20or\x20after\x20the\x20note\x20ends\x20to\x20allow\x20the\x20sound\x20of\x20the\x20end\x20of\x20the\x20note\x20to\x20overlap\x20with\x20the\x20start\x20of\x20the\x20next\x20note.'));
                break;
            case 'transition':
                fG = br(bv('Transition'), bu(mX(0x5e1)), bu('The\x20\x22interrupt\x22\x20transition\x20makes\x20the\x20wave\x20suddenly\x20change\x20from\x20the\x20old\x20note\x27s\x20frequency\x20to\x20the\x20new\x20note\x27s\x20frequency\x20without\x20any\x20fading,\x20but\x20still\x20restarts\x20envelopes\x20at\x20the\x20beginning\x20of\x20the\x20new\x20note.\x20The\x20\x22continue\x22\x20transition\x20is\x20similar\x20but\x20it\x20doesn\x27t\x20even\x20restart\x20envelopes,\x20and\x20can\x20be\x20used\x20to\x20make\x20each\x20of\x20the\x20notes\x20in\x20a\x20chord\x20start\x20or\x20stop\x20at\x20different\x20times!'), bu('The\x20\x22slide\x22\x20transition\x20makes\x20the\x20pitch\x20shift\x20quickly\x20but\x20not\x20instantaneously\x20from\x20the\x20old\x20note\x27s\x20frequency\x20to\x20the\x20new\x20note\x27s\x20frequency,\x20and\x20softly\x20restarts\x20envelopes.\x20The\x20\x22slide\x20in\x20pattern\x22\x20transition\x20is\x20the\x20same\x20except\x20it\x20doesn\x27t\x20connect\x20the\x20last\x20note\x20in\x20a\x20pattern\x20to\x20the\x20first\x20note\x20in\x20the\x20next\x20pattern.'));
                break;
            case mX(0x556):
                fG = br(bv('Chip\x20Wave'), bu(mX(0x376)));
                break;
            case mX(0x744):
                fG = br(bv(mX(0x5a3)), bu(mX(0x280)));
                break;
            case mX(0x555):
                fG = br(bv('Supersaw\x20Dynamism'), bu(mX(0x48b)), bu('At\x20the\x20low\x20end\x20of\x20the\x20slider,\x20only\x20the\x20first\x20wave\x20is\x20contributing\x20to\x20the\x20sound,\x20which\x20sounds\x20like\x20an\x20ordinary\x20static\x20sawtooth\x20wave.\x20At\x20the\x20maximum\x20setting,\x20all\x20of\x20the\x20waves\x20are\x20contributing\x20equally\x20and\x20the\x20resulting\x20tone\x20can\x20randomly\x20shift\x20depending\x20on\x20how\x20the\x20waves\x20line\x20up\x20with\x20each\x20other,\x20similar\x20to\x20the\x20\x22unison\x22\x20and\x20\x22chorus\x22\x20settings.'));
                break;
            case mX(0x426):
                fG = br(bv('Supersaw\x20Spread'), bu(mX(0x6b1)), bu(mX(0x39d)));
                break;
            case 'supersawShape':
                fG = br(bv(mX(0x860)), bu(mX(0x7e1)), bu('When\x20a\x20pulse\x20wave\x20shape\x20is\x20used,\x20you\x20can\x20also\x20control\x20the\x20pulse\x20width\x20with\x20a\x20separate\x20setting.'));
                break;
            case 'pulseWidth':
                fG = br(bv('Pulse\x20Wave\x20Width'), bu(mX(0x3f0)));
                break;
            case mX(0x5d2):
                fG = br(bv(mX(0x6fb)), bu('This\x20instrument\x20can\x20play\x20two\x20identical\x20waves\x20at\x20different\x20frequencies.\x20When\x20two\x20waves\x20play\x20at\x20slightly\x20different\x20frequencies,\x20they\x20move\x20in\x20and\x20out\x20of\x20phase\x20with\x20each\x20other\x20over\x20time\x20as\x20different\x20parts\x20of\x20the\x20waves\x20line\x20up.\x20This\x20creates\x20a\x20dynamic,\x20shifting\x20sound.\x20Pianos\x20are\x20a\x20common\x20example\x20of\x20this\x20kind\x20of\x20sound,\x20because\x20each\x20piano\x20key\x20strikes\x20multiple\x20strings\x20that\x20are\x20tuned\x20to\x20slightly\x20different\x20frequencies.'), bu(mX(0x364)));
                break;
            case mX(0x80a):
                fG = br(bv('Chords'), bu('When\x20multiple\x20different\x20notes\x20occur\x20at\x20the\x20same\x20time,\x20this\x20is\x20called\x20a\x20chord.\x20Chords\x20can\x20be\x20created\x20in\x20BeepBox\x27s\x20pattern\x20editor\x20by\x20adding\x20notes\x20above\x20or\x20below\x20another\x20note.'), bu('This\x20setting\x20determines\x20how\x20chords\x20are\x20played.\x20The\x20standard\x20option\x20is\x20\x22simultaneous\x22\x20which\x20starts\x20playing\x20all\x20of\x20the\x20pitches\x20in\x20a\x20chord\x20at\x20the\x20same\x20instant.\x20The\x20\x22strum\x22\x20option\x20is\x20similar,\x20but\x20plays\x20the\x20notes\x20starting\x20at\x20slightly\x20different\x20times.\x20The\x20\x22arpeggio\x22\x20option\x20is\x20used\x20in\x20\x22chiptune\x22\x20style\x20music\x20and\x20plays\x20a\x20single\x20tone\x20that\x20rapidly\x20alternates\x20between\x20all\x20of\x20the\x20pitches\x20in\x20the\x20chord.'), bu('Some\x20BeepBox\x20instruments\x20have\x20an\x20option\x20called\x20\x22custom\x20interval\x22\x20which\x20uses\x20the\x20chord\x20notes\x20to\x20control\x20the\x20interval\x20between\x20the\x20waves\x20of\x20a\x20single\x20tone.\x20This\x20can\x20create\x20strange\x20sound\x20effects\x20when\x20combined\x20with\x20FM\x20modulators.'));
                break;
            case 'vibrato':
                fG = br(bv(mX(0x5fc)), bu(mX(0x459)));
                break;
            case mX(0x803):
                fG = br(bv(mX(0x34f)), bu('FM\x20Synthesis\x20is\x20a\x20mysterious\x20but\x20powerful\x20technique\x20for\x20crafting\x20sounds,\x20popularized\x20by\x20Yamaha\x20keyboards\x20and\x20the\x20Sega\x20Genesis/Mega\x20Drive.\x20It\x20may\x20seem\x20confusing,\x20but\x20try\x20playing\x20around\x20with\x20the\x20options\x20until\x20you\x20get\x20a\x20feel\x20for\x20it,\x20or\x20check\x20out\x20some\x20of\x20the\x20preset\x20examples!'), bu(mX(0x5b7)), bu(mX(0x764)));
                break;
            case mX(0x3db):
                fG = br(bv(mX(0x2c2)), bu(mX(0x785)));
                break;
            case mX(0x554):
                fG = br(bv(mX(0x73c)), bu(mX(0x3c8)));
                break;
            case mX(0x567):
                fG = br(bv('Operator\x20Frequency'), bu(mX(0x5da)), bu(mX(0x542)));
                break;
            case 'operatorVolume':
                fG = br(bv('Operator\x20Volume'), bu(mX(0x42e)));
                break;
            case 'spectrum':
                fG = br(bv(mX(0x745)), bu('This\x20setting\x20allows\x20you\x20to\x20draw\x20your\x20own\x20noise\x20spectrum!\x20This\x20is\x20good\x20for\x20making\x20drum\x20sounds.'), bu('If\x20you\x20only\x20use\x20certain\x20frequencies\x20and\x20a\x20soft\x20fade\x20in/out,\x20it\x27s\x20also\x20possible\x20to\x20make\x20howling\x20wind\x20sounds\x20or\x20even\x20musical\x20wind\x20instruments.'), bu('The\x20left\x20side\x20of\x20the\x20spectrum\x20editor\x20controls\x20the\x20noise\x20energy\x20at\x20lower\x20frequencies,\x20and\x20the\x20right\x20side\x20controls\x20higher\x20frequencies.'));
                break;
            case mX(0x4bd):
                fG = br(bv(mX(0x595)), bu(mX(0x658)), bu('The\x20left\x20side\x20of\x20the\x20harmonics\x20editor\x20controls\x20the\x20sine\x20wave\x20volumes\x20at\x20lower\x20frequencies,\x20and\x20the\x20right\x20side\x20controls\x20higher\x20frequencies.'));
                break;
            case mX(0x5a9):
                fG = br(bv(mX(0x292)), bu(mX(0x3de)));
                break;
            case mX(0x5c1):
                fG = br(bv('Drumset\x20Envelope'), bu('This\x20drumset\x20comes\x20with\x20a\x20low-pass\x20filter,\x20and\x20this\x20setting\x20can\x20dynamically\x20change\x20the\x20low-pass\x20filter\x20frequency\x20over\x20time.\x20Each\x20row\x20in\x20the\x20pattern\x20editor\x20can\x20have\x20a\x20different\x20envelope\x20shape.'));
                break;
            case 'drumsetSpectrum':
                fG = br(bv(mX(0x6d6)), bu(mX(0x201)), bu('The\x20left\x20side\x20of\x20the\x20spectrum\x20editor\x20controls\x20the\x20noise\x20energy\x20at\x20lower\x20frequencies,\x20and\x20the\x20right\x20side\x20controls\x20higher\x20frequencies.'));
                break;
            case mX(0x215):
                fG = br(bv(mX(0x458)), bu('The\x20chorus\x20effect\x20combines\x20multiple\x20copies\x20of\x20the\x20instrument\x27s\x20sound\x20and\x20adds\x20a\x20bit\x20of\x20vibrato\x20to\x20simulate\x20an\x20ensemble\x20of\x20instruments\x20or\x20voices.\x20Drag\x20the\x20slider\x20to\x20control\x20how\x20much\x20chorus\x20is\x20added.'));
                break;
            case 'echoSustain':
                fG = br(bv('Echo\x20Volume'), bu('The\x20echo\x20effect\x20repeats\x20the\x20instrument\x27s\x20sound\x20after\x20a\x20delay.\x20Each\x20echo\x20is\x20a\x20little\x20bit\x20quieter\x20than\x20the\x20last,\x20and\x20this\x20setting\x20controls\x20how\x20much\x20quieter.'));
                break;
            case 'echoDelay':
                fG = br(bv(mX(0x335)), bu('The\x20echo\x20effect\x20repeats\x20the\x20instrument\x27s\x20sound\x20after\x20a\x20delay,\x20and\x20this\x20setting\x20controls\x20how\x20long\x20the\x20delay\x20is.'));
                break;
            case mX(0x66a):
                fG = br(bv('Pitch\x20Shift'), bu('This\x20setting\x20makes\x20instruments\x20play\x20higher\x20or\x20lower\x20pitches\x20than\x20the\x20ones\x20displayed\x20in\x20the\x20pattern\x20editor.\x20Be\x20careful\x20that\x20you\x20don\x27t\x20confuse\x20yourself!'), bu(mX(0x53e)), bu(mX(0x436)));
                break;
            case 'detune':
                fG = br(bv('Detune'), bu('This\x20setting\x20slightly\x20adjusts\x20the\x20frequency\x20of\x20notes\x20played\x20by\x20the\x20instrument.\x20You\x20can\x20use\x20a\x20little\x20bit\x20to\x20add\x20a\x20pleasing\x20shifting\x20sound\x20similar\x20to\x20the\x20\x22unison\x22\x20feature\x20when\x20combined\x20with\x20other\x20instruments.\x20If\x20you\x20use\x20too\x20much,\x20then\x20the\x20instrument\x20may\x20sound\x20unpleasantly\x20out-of-tune.'));
                break;
            case 'distortion':
                fG = br(bv(mX(0x649)), bu('This\x20is\x20the\x20famous\x20electric\x20guitar\x20effect!\x20However,\x20there\x20are\x20some\x20things\x20to\x20be\x20aware\x20of.'), bu('First,\x20most\x20chords\x20don\x27t\x20sound\x20right\x20when\x20combined\x20with\x20heavy\x20distortion.\x20The\x20only\x20chords\x20commonly\x20used\x20with\x20distorted\x20electric\x20guitars\x20are\x20\x22power\x20chords\x22\x20which\x20consist\x20of\x20a\x20root\x20note,\x20a\x20\x22fifth\x22\x20note\x20above\x20that,\x20and/or\x20any\x20octaves\x20of\x20those\x20two\x20notes.'), bu('Second,\x20the\x20distortion\x20sound\x20depends\x20a\x20lot\x20on\x20filtering.\x20In\x20particular,\x20I\x20recommend\x20enabling\x20the\x20note\x20filter\x20effect,\x20and\x20adding\x20both\x20high-pass\x20and\x20low-pass\x20points\x20to\x20the\x20note\x20filter.\x20(Note\x20filters\x20are\x20applied\x20first,\x20then\x20distortion\x20which\x20transforms\x20the\x20sound\x20based\x20on\x20that\x20filtering,\x20then\x20the\x20EQ\x20filter\x20is\x20applied\x20last.)'), bu(mX(0x767)));
                break;
            case mX(0x41e):
                fG = br(bv('Bitcrusher\x20Quantization'), bu('This\x20effect\x20makes\x20stuff\x20sounds\x20harsher,\x20artificial,\x20and\x20\x22low\x20quality\x22,\x20which\x20is\x20great\x20if\x20that\x27s\x20what\x20you\x27re\x20going\x20for!'));
                break;
            case 'bitcrusherFreq':
                fG = br(bv('Frequency\x20Quantization'), bu(mX(0x367)), bu('Every\x20other\x20notch\x20on\x20this\x20slider\x20is\x20aligned\x20with\x20the\x20currently\x20selected\x20key\x20of\x20the\x20song,\x20and\x20the\x20in-between\x20notches\x20are\x20aligned\x20with\x20the\x20tritones\x20of\x20the\x20key.'));
                break;
            case mX(0x6ac):
                fG = br(bv(mX(0x309)), bu(mX(0x578)), bu(mX(0x717)), bu(mX(0x585)));
                break;
            default:
                throw new Error(mX(0x6fc) + fF);
            }
            this['container'] = br({
                'class': mX(0x3f4),
                'style': 'width:\x20300px;'
            }, fG, this['_']),
            setTimeout( () => this['_']['focus']()),
            this['_']['addEventListener'](mX(0x50e), this['U']);
        }
    }
    class bx {
        constructor() {
            this['V'] = !0x0;
        }
        ['W']() {
            this['V'] = !0x1;
        }
        [jI(0x70f)]() {
            return this['V'];
        }
        [jI(0x4fa)]() {}
    }
    class by extends bx {
        constructor(fE) {
            super(),
            this['j'] = fE,
            this['K'] = !fE;
        }
        ['undo']() {
            this['j'] ? (this['Y'](),
            this['K'] = !0x0) : (this['J'](),
            this['K'] = !0x1);
        }
        [jI(0x734)]() {
            this['j'] ? (this['J'](),
            this['K'] = !0x1) : (this['Y'](),
            this['K'] = !0x0);
        }
        ['X']() {
            return this['K'];
        }
        ['Y']() {
            const mY = jI;
            throw new Error(mY(0x7eb));
        }
        ['J']() {
            throw new Error('Change.doBackwards():\x20Override\x20me.');
        }
    }
    class bz extends bx {
        constructor() {
            super();
        }
        ['append'](fE) {
            fE['isNoop']() || this['W']();
        }
    }
    class bA extends by {
        constructor(fE) {
            const mZ = jI;
            super(!0x1),
            this['Z'] = null == fE ? [] : fE[mZ(0x7dd)]();
        }
        [jI(0x65e)](fE) {
            const n0 = jI;
            fE[n0(0x70f)]() || (this['Z'][this['Z']['length']] = fE,
            this['W']());
        }
        ['Y']() {
            const n1 = jI;
            for (let fE = 0x0; fE < this['Z'][n1(0x57c)]; fE++)
                this['Z'][fE][n1(0x734)]();
        }
        ['J']() {
            const n2 = jI;
            for (let fE = this['Z'][n2(0x57c)] - 0x1; fE >= 0x0; fE--)
                this['Z'][fE]['undo']();
        }
    }
    function bB(fE, fF) {
        const n3 = jI
          , fG = fE[n3(0x532)](fI => -0x1 != fF[n3(0x2fb)](fI))
          , fH = fF['every'](fI => -0x1 != fE[n3(0x2fb)](fI));
        return fG && fH && fF['length'] == fE[n3(0x57c)];
    }
    function bC(fE, fF, fG) {
        const n4 = jI
          , fH = new Set(fE);
        fE['length'] = 0x0,
        fE[n4(0x557)](...fH);
        for (let fI = 0x0; fI < fE[n4(0x57c)]; fI++)
            fE[fI] >= fF['channels'][fG][n4(0x84c)][n4(0x57c)] && (fE[n4(0x712)](fI, 0x1),
            fI--);
        fE['length'] > fF[n4(0x5a8)](fG) && (fE[n4(0x57c)] = fF[n4(0x5a8)](fG)),
        fE['length'] <= 0x0 && (fE[0x0] = 0x0);
    }
    function bD(fE, fF) {
        const n5 = jI;
        for (const fG of fE['notes'])
            for (const fH of fG[n5(0x68d)])
                for (const fI of fG[n5(0x2a6)]) {
                    const fJ = (fH + fI['interval']) % 0xc;
                    fF[fJ] || (fF[fJ] = !0x0);
                }
    }
    function bE(fE) {
        const n6 = jI;
        for (let fF = 0x1; fF < fE[n6(0x57c)] - 0x1; ) {
            const fG = fE[fF - 0x1]
              , fH = fE[fF]
              , fI = fE[fF + 0x1]
              , fJ = fH[n6(0x2e3)] - fG[n6(0x2e3)]
              , fK = fI[n6(0x2e3)] - fH['time'];
            (fH[n6(0x24b)] - fG['interval']) * fK == (fI['interval'] - fH['interval']) * fJ && (fH[n6(0x81f)] - fG['size']) * fK == (fI[n6(0x81f)] - fH['size']) * fJ ? fE[n6(0x712)](fF, 0x1) : fF++;
        }
    }
    function bF(fE, fF, fG, fH, fI) {
        const n7 = jI
          , fJ = new b4(-0x1,fG,fH,a1['noteSizeMax'],!0x1);
        fJ[n7(0x2a6)]['length'] = 0x0,
        fJ['pitches']['length'] = 0x0;
        const fK = fH - fG;
        for (const fN of fE[n7(0x68d)])
            fJ[n7(0x68d)][n7(0x557)](fN);
        for (let fO = 0x0; fO < fE[n7(0x2a6)][n7(0x57c)]; fO++) {
            const fP = fE[n7(0x2a6)][fO]
              , fQ = fP['time'] + fF;
            if (fQ < 0x0) {
                if (fO + 0x1 >= fE['pins'][n7(0x57c)])
                    throw new Error('Error\x20converting\x20pins\x20in\x20note\x20overflow.');
                const fR = fE[n7(0x2a6)][fO + 0x1]
                  , fS = fR['time'] + fF;
                if (fS > 0x0) {
                    const fT = -fQ / (fS - fQ);
                    fJ[n7(0x2a6)]['push'](b3(Math[n7(0x874)](fP['interval'] + fT * (fR[n7(0x24b)] - fP['interval'])), 0x0, Math[n7(0x874)](fP[n7(0x81f)] + fT * (fR[n7(0x81f)] - fP['size']))));
                }
            } else {
                if (fQ <= fK)
                    fJ['pins'][n7(0x557)](b3(fP[n7(0x24b)], fQ, fP[n7(0x81f)]));
                else {
                    if (fO < 0x1)
                        throw new Error('Error\x20converting\x20pins\x20in\x20note\x20overflow.');
                    const fU = fE[n7(0x2a6)][fO - 0x1]
                      , fV = fU['time'] + fF;
                    if (fV < fK) {
                        const fW = (fK - fV) / (fQ - fV);
                        fJ['pins'][n7(0x557)](b3(Math['round'](fU['interval'] + fW * (fP['interval'] - fU[n7(0x24b)])), fK, Math[n7(0x874)](fU['size'] + fW * (fP[n7(0x81f)] - fU[n7(0x81f)]))));
                    }
                }
            }
        }
        const fL = fJ['pins'][0x0]['interval'];
        for (let fX = 0x0; fX < fJ['pitches'][n7(0x57c)]; fX++)
            fJ['pitches'][fX] += fL;
        for (let fY = 0x0; fY < fJ[n7(0x2a6)]['length']; fY++)
            fJ[n7(0x2a6)][fY]['interval'] -= fL;
        let fM = !0x1;
        if (0x0 == fJ[n7(0x1b7)])
            fJ['continuesLastPattern'] = fF < 0x0 || fE[n7(0x790)];
        else {
            if (fJ[n7(0x790)] = !0x1,
            fI['length'] > 0x0 && fE[n7(0x790)]) {
                const fZ = fI[fI['length'] - 0x1];
                if (fZ[n7(0x63e)] == fJ[n7(0x1b7)] && bp['adjacentNotesHaveMatchingPitches'](fZ, fJ)) {
                    fM = !0x0;
                    const g0 = fZ['pins'][fZ[n7(0x2a6)]['length'] - 0x1][n7(0x24b)]
                      , g1 = fZ['end'] - fZ[n7(0x1b7)];
                    for (let g2 = 0x1; g2 < fJ[n7(0x2a6)]['length']; g2++) {
                        const g3 = fJ[n7(0x2a6)][g2]
                          , g4 = b3(g3[n7(0x24b)] + g0, g3[n7(0x2e3)] + g1, g3['size']);
                        fZ['pins'][n7(0x557)](g4),
                        fZ[n7(0x63e)] = fZ[n7(0x1b7)] + g4[n7(0x2e3)];
                    }
                    bE(fZ[n7(0x2a6)]);
                }
            }
        }
        fM || fI['push'](fJ);
    }
    class bG extends bz {
        constructor(fE, fF, fG) {
            const n8 = jI;
            super();
            const fH = []
              , fI = [];
            for (let fJ = 0x0; fJ < fE[n8(0x3c1)][n8(0x777)](); fJ++) {
                const fK = fE[n8(0x3c1)][n8(0x7b3)][fJ]
                  , fL = new bg();
                fJ < fE['song'][n8(0x1c4)] ? fH[n8(0x557)](fL) : fI[n8(0x557)](fL),
                fL['muted'] = fK['muted'],
                fL['octave'] = fK[n8(0x60c)];
                for (const fQ of fK['instruments'])
                    fL['instruments'][n8(0x557)](fQ);
                const fM = a1['partsPerBeat'] * fE[n8(0x3c1)][n8(0x6c9)]
                  , fN = a1['partsPerBeat'] * fF;
                let fO = -0x1
                  , fP = null;
                for (let fR = 0x0; fR < fE['song']['barCount']; fR++) {
                    const fS = fE[n8(0x3c1)]['getPattern'](fJ, fR);
                    if (null != fS) {
                        const fT = fR * fM;
                        for (const fU of fS['notes']) {
                            const fV = fU['start'] + fT + fG
                              , fW = fU[n8(0x63e)] + fT + fG
                              , fX = Math[n8(0x4fb)](fV / fN)
                              , fY = Math[n8(0x600)](fW / fN);
                            for (let fZ = fX; fZ < fY; fZ++) {
                                const g0 = fZ * fN
                                  , g1 = Math['max'](0x0, fV - g0)
                                  , g2 = Math['min'](fN, fW - g0);
                                if (g1 < g2) {
                                    if (fO != fZ || null == fP) {
                                        for (fO++; fO < fZ; )
                                            fL['bars'][fO] = 0x0,
                                            fO++;
                                        fP = new b5(),
                                        fL[n8(0x3cb)][n8(0x557)](fP),
                                        fL[n8(0x81a)][fO] = fL[n8(0x3cb)][n8(0x57c)],
                                        fP[n8(0x84c)][n8(0x57c)] = 0x0,
                                        fP['instruments']['push'](...fS['instruments']);
                                    }
                                    bF(fU, fV - g0 - g1, g1, g2, fP['notes']);
                                }
                            }
                        }
                    }
                }
            }
            cT(fH),
            cT(fI),
            this['append'](new cR(fE,fH,fI));
        }
    }
    class bH extends by {
        constructor(fE, fF) {
            const n9 = jI;
            super(!0x1),
            this['$'] = fE,
            this['tt'] = fF,
            this['et'] = this['tt'][n9(0x1b7)],
            this['it'] = this['tt']['end'],
            this['st'] = this['tt'][n9(0x1b7)],
            this['nt'] = this['tt']['end'],
            this['ot'] = this['tt']['pins'],
            this['rt'] = [],
            this['ht'] = this['tt']['pitches'],
            this['lt'] = [],
            this['ct'] = this['tt']['continuesLastPattern'],
            this['ut'] = this['tt']['continuesLastPattern'];
        }
        ['ft'](fE) {
            const na = jI;
            for (let fH = 0x0; fH < this['rt'][na(0x57c)] - 0x1; )
                this['rt'][fH][na(0x2e3)] >= this['rt'][fH + 0x1]['time'] ? this['rt'][na(0x712)](fH, 0x1) : fH++;
            bE(this['rt']);
            const fF = this['rt'][0x0]['interval']
              , fG = this['rt'][0x0][na(0x2e3)];
            for (let fI = 0x0; fI < this['ht'][na(0x57c)]; fI++)
                this['lt'][fI] = this['ht'][fI] + fF;
            for (let fJ = 0x0; fJ < this['rt']['length']; fJ++)
                this['rt'][fJ]['interval'] -= fF,
                this['rt'][fJ]['time'] -= fG;
            this['st'] = this['et'] + fG,
            this['nt'] = this['st'] + this['rt'][this['rt']['length'] - 0x1][na(0x2e3)],
            null != fE && (this['ut'] = fE),
            0x0 != this['st'] && (this['ut'] = !0x1),
            this['Y'](),
            this['W']();
        }
        ['Y']() {
            const nb = jI;
            this['tt']['pins'] = this['rt'],
            this['tt']['pitches'] = this['lt'],
            this['tt']['start'] = this['st'],
            this['tt']['end'] = this['nt'],
            this['tt']['continuesLastPattern'] = this['ut'],
            null != this['$'] && this['$'][nb(0x7e6)][nb(0x327)]();
        }
        ['J']() {
            const nc = jI;
            this['tt']['pins'] = this['ot'],
            this['tt'][nc(0x68d)] = this['ht'],
            this['tt'][nc(0x1b7)] = this['et'],
            this['tt'][nc(0x63e)] = this['it'],
            this['tt']['continuesLastPattern'] = this['ct'],
            null != this['$'] && this['$']['notifier']['changed']();
        }
    }
    class bI extends bx {
        constructor(fE) {
            const nd = jI;
            super();
            const fF = fE['song']['channels'][fE[nd(0x733)]][nd(0x84c)][fE[nd(0x3fe)]()];
            fF['preset'] != fF[nd(0x7d5)] && (fF[nd(0x760)] = fF['type'],
            fE['notifier']['changed'](),
            this['W']());
        }
    }
    class bJ extends bx {
        constructor(fE, fF) {
            const ne = jI;
            super();
            const fG = fE['song'][ne(0x7b3)][fE[ne(0x733)]]['instruments'][fE[ne(0x3fe)]()];
            if (fG['preset'] != fF) {
                const fH = aq['valueToPreset'](fF);
                if (null != fH) {
                    if (null != fH[ne(0x69f)])
                        fG[ne(0x7d5)] = fH[ne(0x69f)],
                        !a1['instrumentTypeHasSpecialInterval'][fG['type']] && a1[ne(0x80a)][fG['chord']][ne(0x429)] && (fG[ne(0x3e3)] = 0x0),
                        fG[ne(0x232)]();
                    else {
                        if (null != fH['settings']) {
                            const fI = fG[ne(0x7c6)]
                              , fJ = fG['pan']
                              , fK = aj(fG['effects']);
                            fG[ne(0x78a)](fH['settings'], fE['song']['getChannelIsNoise'](fE[ne(0x733)]), 0x1),
                            fG['volume'] = fI,
                            fG['pan'] = fJ,
                            fK && fG['pan'] != a1['panCenter'] && (fG['effects'] = 0x4 | fG['effects']);
                        }
                    }
                }
                fG[ne(0x760)] = fF,
                fE[ne(0x7e6)]['changed'](),
                this['W']();
            }
        }
    }
    class bK extends bx {
        constructor(fE) {
            const nj = jI;
            function fF(fN) {
                const nf = a0b;
                let fO = 0x0;
                for (const fQ of fN)
                    fO += fQ[nf(0x605)];
                let fP = Math[nf(0x50a)]() * fO;
                for (const fR of fN)
                    if (fP -= fR['weight'],
                    fP <= 0x0)
                        return fR['item'];
                return fN[Math[nf(0x50a)]() * fN['length'] | 0x0]['item'];
            }
            function fG(fN, fO, fP, fQ) {
                const ng = a0b
                  , fR = [];
                for (let fS = fN; fS <= fO; fS++)
                    fR['push']({
                        'item': fS,
                        'weight': 0x1 / (Math[ng(0x3b6)]((fS - fP) / fQ, 0x2) + 0x1)
                    });
                return fF(fR);
            }
            super();
            class fH {
                constructor(fN, fO, fP, fQ, fR, fS) {
                    const nh = a0b;
                    this['chance'] = fN,
                    this['type'] = fO,
                    this['minFreq'] = fP,
                    this['maxFreq'] = fQ,
                    this[nh(0x512)] = fR,
                    this['centerGain'] = fS;
                }
            }
            function fI(fN, fO) {
                const ni = a0b;
                fN['reset']();
                const fP = [];
                for (const fQ of fO) {
                    if (Math['random']() > fQ[ni(0x675)])
                        continue;
                    const fR = new bb();
                    fR['type'] = fQ[ni(0x7d5)],
                    fR['freq'] = fG(fQ[ni(0x1fd)], fQ[ni(0x298)], bb[ni(0x518)](fQ['centerHz']), 0x1 / a1[ni(0x56f)]),
                    fR[ni(0x4c8)] = fG(0x0, a1['filterGainRange'] - 0x1, a1['filterGainCenter'] + fQ['centerGain'], 0x2 / a1['filterGainStep']),
                    0x2 == fR['type'] && fR['gain'] == a1[ni(0x749)] || (fP['includes'](fR[ni(0x395)]) || (fP['push'](fR[ni(0x395)]),
                    fN['controlPoints'][fN['controlPointCount']] = fR,
                    fN[ni(0x559)]++));
                }
            }
            const fJ = fE[nj(0x3c1)][nj(0x67a)](fE['channel'])
              , fK = fE[nj(0x3c1)]['channels'][fE[nj(0x733)]]['instruments'][fE[nj(0x3fe)]()];
            fK[nj(0x5a9)] &= 0x4,
            fK[nj(0x863)] = 0x0;
            const fL = bb['getRoundedSettingValueFromHz'](0x2bc)
              , fM = a1[nj(0x564)] - 0x1;
            if (fI(fK[nj(0x7c3)], [new fH(0.8,0x0,fL,fM,0xfa0,-0x1), new fH(0.4,0x1,0x0,fL - 0x1,0xfa,-0x1), new fH(0.5,0x2,0x0,fM,0x7d0,0x0), new fH(0.4,0x2,0x0,fM,0x578,0x0), new fH(0.3,0x2,0x0,fM,0x3e8,0x0), new fH(0.2,0x2,0x0,fM,0x1f4,0x0)]),
            fJ) {
                const fN = fF([{
                    'item': 0x2,
                    'weight': 0x1
                }, {
                    'item': 0x3,
                    'weight': 0x3
                }]);
                function fO(fP) {
                    const nk = nj;
                    let fQ = 0x0;
                    for (const fR of fP)
                        fR > fQ && (fQ = fR);
                    for (let fS = 0x0; fS < fP[nk(0x57c)]; fS++)
                        fP[fS] = a1['harmonicsMax'] * fP[fS] / fQ;
                }
                switch (fK['preset'] = fK[nj(0x7d5)] = fN,
                fK[nj(0x43f)] = Math[nj(0x50a)]() < 0.8 ? 0x0 : fG(0x0, a1['fadeInRange'] - 0x1, 0x0, 0x2),
                fK['fadeOut'] = fG(0x0, a1[nj(0x3f9)][nj(0x57c)] - 0x1, a1[nj(0x645)], 0x2),
                Math['random']() < 0.1 && (fK['effects'] |= 0x400,
                fK['transition'] = a1[nj(0x87b)]['dictionary'][fF([{
                    'item': nj(0x72b),
                    'weight': 0x1e
                }, {
                    'item': nj(0x218),
                    'weight': 0x1
                }, {
                    'item': 'slide',
                    'weight': 0x2
                }])]['index']),
                Math[nj(0x50a)]() < 0.2 && (fK['effects'] |= 0x800,
                fK[nj(0x3e3)] = a1[nj(0x80a)]['dictionary'][fF([{
                    'item': nj(0x861),
                    'weight': 0x2
                }, {
                    'item': nj(0x4f4),
                    'weight': 0x1
                }])][nj(0x2c5)]),
                Math['random']() < 0.1 && (fK['pitchShift'] = fG(0x0, a1[nj(0x759)] - 0x1, a1['pitchShiftCenter'], 0x2),
                fK[nj(0x66a)] != a1['pitchShiftCenter'] && (fK['effects'] |= 0x80,
                fK['addEnvelope'](a1['instrumentAutomationTargets']['dictionary']['pitchShift']['index'], 0x0, a1[nj(0x6ac)][nj(0x64a)][fF([{
                    'item': 'flare\x201',
                    'weight': 0x2
                }, {
                    'item': 'flare\x202',
                    'weight': 0x1
                }, {
                    'item': 'flare\x203',
                    'weight': 0x1
                }, {
                    'item': 'twang\x201',
                    'weight': 0x10
                }, {
                    'item': nj(0x4a8),
                    'weight': 0x8
                }, {
                    'item': nj(0x7b1),
                    'weight': 0x4
                }, {
                    'item': nj(0x765),
                    'weight': 0x1
                }, {
                    'item': nj(0x174),
                    'weight': 0x1
                }, {
                    'item': nj(0x450),
                    'weight': 0x1
                }, {
                    'item': 'decay\x201',
                    'weight': 0x4
                }, {
                    'item': 'decay\x202',
                    'weight': 0x2
                }, {
                    'item': nj(0x781),
                    'weight': 0x1
                }])][nj(0x2c5)]))),
                Math['random']() < 0.1 && (fK[nj(0x5a9)] |= 0x200,
                fK[nj(0x7b2)] = fG(0x0, a1['echoSustainRange'] - 0x1, a1[nj(0x769)] >> 0x1, 0x2),
                fK['vibrato'] = a1[nj(0x639)]['dictionary'][fF([{
                    'item': 'light',
                    'weight': 0x2
                }, {
                    'item': nj(0x471),
                    'weight': 0x2
                }, {
                    'item': nj(0x283),
                    'weight': 0x1
                }, {
                    'item': 'shaky',
                    'weight': 0x2
                }])][nj(0x2c5)]),
                Math[nj(0x50a)]() < 0.8 && (fK['effects'] |= 0x20,
                fI(fK[nj(0x823)], [new fH(0x1,0x0,fL,fM,0x1f40,-0x1)]),
                fK['addEnvelope'](a1[nj(0x45f)]['dictionary'][nj(0x7c5)][nj(0x2c5)], 0x0, a1['envelopes'][nj(0x64a)][fF([{
                    'item': 'punch',
                    'weight': 0x4
                }, {
                    'item': nj(0x561),
                    'weight': 0x2
                }, {
                    'item': nj(0x322),
                    'weight': 0x2
                }, {
                    'item': nj(0x545),
                    'weight': 0x2
                }, {
                    'item': 'twang\x201',
                    'weight': 0x8
                }, {
                    'item': nj(0x4a8),
                    'weight': 0x8
                }, {
                    'item': 'twang\x203',
                    'weight': 0x8
                }, {
                    'item': nj(0x342),
                    'weight': 0x2
                }, {
                    'item': 'swell\x202',
                    'weight': 0x2
                }, {
                    'item': 'swell\x203',
                    'weight': 0x1
                }, {
                    'item': 'tremolo1',
                    'weight': 0x1
                }, {
                    'item': nj(0x174),
                    'weight': 0x1
                }, {
                    'item': nj(0x450),
                    'weight': 0x1
                }, {
                    'item': 'tremolo4',
                    'weight': 0x1
                }, {
                    'item': nj(0x883),
                    'weight': 0x1
                }, {
                    'item': nj(0x230),
                    'weight': 0x1
                }, {
                    'item': 'decay\x201',
                    'weight': 0x4
                }, {
                    'item': nj(0x7ea),
                    'weight': 0x4
                }, {
                    'item': 'decay\x203',
                    'weight': 0x4
                }])]['index'])),
                Math[nj(0x50a)]() < 0.1 && (fK['effects'] |= 0x8,
                fK[nj(0x1ce)] = fG(0x1, a1['distortionRange'] - 0x1, a1['distortionRange'] - 0x1, 0x2)),
                Math[nj(0x50a)]() < 0.1 && (fK['effects'] |= 0x10,
                fK[nj(0x770)] = fG(0x0, a1['bitcrusherFreqRange'] - 0x1, a1['bitcrusherFreqRange'] >> 0x1, 0x2),
                fK['bitcrusherQuantization'] = fG(0x0, a1['bitcrusherQuantizationRange'] - 0x1, a1[nj(0x86b)] >> 0x1, 0x2)),
                Math['random']() < 0.1 && (fK['effects'] |= 0x2,
                fK['chorus'] = fG(0x1, a1[nj(0x31e)] - 0x1, a1['chorusRange'] - 0x1, 0x1)),
                Math[nj(0x50a)]() < 0.1 && (fK['echoSustain'] = fG(0x0, a1[nj(0x769)] - 0x1, a1['echoSustainRange'] >> 0x1, 0x2),
                fK['echoDelay'] = fG(0x0, a1[nj(0x7d9)] - 0x1, a1[nj(0x7d9)] >> 0x1, 0x2),
                0x0 == fK['echoSustain'] && 0x0 == fK[nj(0x6e6)] || (fK[nj(0x5a9)] |= 0x40)),
                Math[nj(0x50a)]() < 0.5 && (fK['effects'] |= 0x1,
                fK[nj(0x76b)] = fG(0x1, a1['reverbRange'] - 0x1, 0x1, 0x1)),
                fN) {
                case 0x2:
                    fK['chipNoise'] = Math['random']() * a1[nj(0x5f0)]['length'] | 0x0;
                    break;
                case 0x3:
                    {
                        const fP = [ () => {
                            const nl = nj
                              , fR = [];
                            for (let fS = 0x0; fS < a1['spectrumControlPoints']; fS++)
                                fR[fS] = Math[nl(0x50a)]() < 0.5 ? Math[nl(0x50a)]() : 0x0;
                            return fR;
                        }
                        , () => {
                            const nm = nj;
                            let fR = 0x1;
                            const fS = [fR];
                            for (let fT = 0x1; fT < a1[nm(0x6e7)]; fT++)
                                fR *= Math['pow'](0x2, Math[nm(0x50a)]() - 0.52),
                                fS[fT] = fR;
                            return fS;
                        }
                        , () => {
                            const nn = nj;
                            let fR = 0x1;
                            const fS = [fR];
                            for (let fT = 0x1; fT < a1[nn(0x6e7)]; fT++)
                                fR *= Math['pow'](0x2, Math['random']() - 0.52),
                                fS[fT] = fR * Math[nn(0x50a)]();
                            return fS;
                        }
                        ]
                          , fQ = (0x0,
                        fP[Math['random']() * fP[nj(0x57c)] | 0x0])();
                        fO(fQ);
                        for (let fR = 0x0; fR < a1['spectrumControlPoints']; fR++)
                            fK['spectrumWave']['spectrum'][fR] = Math['round'](fQ[fR]);
                        fK['spectrumWave']['markCustomWaveDirty']();
                    }
                    break;
                default:
                    throw new Error(nj(0x363));
                }
            } else {
                const fS = fF([{
                    'item': 0x0,
                    'weight': 0x4
                }, {
                    'item': 0x6,
                    'weight': 0x4
                }, {
                    'item': 0x8,
                    'weight': 0x5
                }, {
                    'item': 0x5,
                    'weight': 0x5
                }, {
                    'item': 0x7,
                    'weight': 0x5
                }, {
                    'item': 0x3,
                    'weight': 0x1
                }, {
                    'item': 0x1,
                    'weight': 0x5
                }]);
                function fT(fU) {
                    const no = nj;
                    let fV = 0x0;
                    for (const fW of fU)
                        fW > fV && (fV = fW);
                    for (let fX = 0x0; fX < fU['length']; fX++)
                        fU[fX] = a1[no(0x51f)] * fU[fX] / fV;
                }
                switch (fK['preset'] = fK[nj(0x7d5)] = fS,
                fK['fadeIn'] = Math[nj(0x50a)]() < 0.5 ? 0x0 : fG(0x0, a1[nj(0x5bb)] - 0x1, 0x0, 0x2),
                fK[nj(0x84b)] = fG(0x0, a1[nj(0x3f9)][nj(0x57c)] - 0x1, a1[nj(0x645)], 0x2),
                0x0 != fS && 0x5 != fS && 0x7 != fS || (fK['unison'] = a1[nj(0x285)]['dictionary'][fF([{
                    'item': 'none',
                    'weight': 0xa
                }, {
                    'item': nj(0x808),
                    'weight': 0x5
                }, {
                    'item': nj(0x536),
                    'weight': 0x4
                }, {
                    'item': nj(0x23f),
                    'weight': 0x3
                }, {
                    'item': nj(0x508),
                    'weight': 0x1
                }, {
                    'item': 'fifth',
                    'weight': 0x1
                }, {
                    'item': 'octave',
                    'weight': 0x2
                }, {
                    'item': nj(0x7ce),
                    'weight': 0x2
                }, {
                    'item': nj(0x58a),
                    'weight': 0x5
                }])]['index']),
                Math[nj(0x50a)]() < 0.1 && (fK[nj(0x5a9)] |= 0x400,
                fK[nj(0x83f)] = a1[nj(0x87b)][nj(0x64a)][fF([{
                    'item': nj(0x218),
                    'weight': 0x1
                }, {
                    'item': 'slide',
                    'weight': 0x2
                }])][nj(0x2c5)]),
                Math['random']() < 0.2 && (fK[nj(0x5a9)] |= 0x800,
                fK[nj(0x3e3)] = a1[nj(0x80a)][nj(0x64a)][fF([{
                    'item': nj(0x861),
                    'weight': 0x2
                }, {
                    'item': 'arpeggio',
                    'weight': 0x1
                }])][nj(0x2c5)]),
                Math[nj(0x50a)]() < 0.05 && (fK[nj(0x66a)] = fG(0x0, a1[nj(0x759)] - 0x1, a1[nj(0x800)], 0x1),
                fK['pitchShift'] != a1['pitchShiftCenter'] && (fK['effects'] |= 0x80,
                fK[nj(0x3f7)](a1[nj(0x45f)][nj(0x64a)][nj(0x66a)][nj(0x2c5)], 0x0, a1['envelopes']['dictionary'][fF([{
                    'item': nj(0x561),
                    'weight': 0x2
                }, {
                    'item': 'flare\x202',
                    'weight': 0x1
                }, {
                    'item': nj(0x545),
                    'weight': 0x1
                }, {
                    'item': 'twang\x201',
                    'weight': 0x10
                }, {
                    'item': nj(0x4a8),
                    'weight': 0x8
                }, {
                    'item': 'twang\x203',
                    'weight': 0x4
                }, {
                    'item': 'decay\x201',
                    'weight': 0x4
                }, {
                    'item': nj(0x7ea),
                    'weight': 0x2
                }, {
                    'item': nj(0x781),
                    'weight': 0x1
                }])]['index']))),
                Math[nj(0x50a)]() < 0.25 && (fK[nj(0x5a9)] |= 0x200,
                fK[nj(0x7b2)] = fG(0x0, a1['echoSustainRange'] - 0x1, a1[nj(0x769)] >> 0x1, 0x2),
                fK[nj(0x7b2)] = a1['vibratos'][nj(0x64a)][fF([{
                    'item': nj(0x203),
                    'weight': 0x2
                }, {
                    'item': nj(0x471),
                    'weight': 0x2
                }, {
                    'item': nj(0x283),
                    'weight': 0x1
                }, {
                    'item': nj(0x308),
                    'weight': 0x2
                }])][nj(0x2c5)]),
                Math[nj(0x50a)]() < 0.1 && (fK['effects'] |= 0x8,
                fK[nj(0x1ce)] = fG(0x1, a1[nj(0x2fd)] - 0x1, a1['distortionRange'] - 0x1, 0x2)),
                ag(fK[nj(0x5a9)]) && Math[nj(0x50a)]() < 0.8 ? (fK['effects'] |= 0x20,
                fI(fK[nj(0x823)], [new fH(0x1,0x0,fL,fM,0x7d0,-0x1), new fH(0.9,0x1,0x0,fL - 0x1,0x1f4,-0x1), new fH(0.4,0x2,0x0,fM,0x578,0x0)])) : Math[nj(0x50a)]() < 0.5 && (fK[nj(0x5a9)] |= 0x20,
                fI(fK[nj(0x823)], [new fH(0x1,0x0,fL,fM,0x1f40,-0x1)]),
                fK[nj(0x3f7)](a1[nj(0x45f)][nj(0x64a)][nj(0x7c5)][nj(0x2c5)], 0x0, a1[nj(0x6ac)][nj(0x64a)][fF([{
                    'item': 'punch',
                    'weight': 0x6
                }, {
                    'item': nj(0x561),
                    'weight': 0x2
                }, {
                    'item': nj(0x322),
                    'weight': 0x4
                }, {
                    'item': nj(0x545),
                    'weight': 0x2
                }, {
                    'item': nj(0x570),
                    'weight': 0x2
                }, {
                    'item': 'twang\x202',
                    'weight': 0x4
                }, {
                    'item': 'twang\x203',
                    'weight': 0x4
                }, {
                    'item': nj(0x342),
                    'weight': 0x4
                }, {
                    'item': nj(0x440),
                    'weight': 0x2
                }, {
                    'item': nj(0x287),
                    'weight': 0x1
                }, {
                    'item': nj(0x765),
                    'weight': 0x1
                }, {
                    'item': 'tremolo2',
                    'weight': 0x1
                }, {
                    'item': nj(0x450),
                    'weight': 0x1
                }, {
                    'item': nj(0x41f),
                    'weight': 0x1
                }, {
                    'item': nj(0x883),
                    'weight': 0x1
                }, {
                    'item': nj(0x230),
                    'weight': 0x1
                }, {
                    'item': 'decay\x201',
                    'weight': 0x1
                }, {
                    'item': nj(0x7ea),
                    'weight': 0x2
                }, {
                    'item': nj(0x781),
                    'weight': 0x2
                }])]['index'])),
                Math[nj(0x50a)]() < 0.1 && (fK['effects'] |= 0x10,
                fK[nj(0x770)] = fG(0x0, a1['bitcrusherFreqRange'] - 0x1, 0x0, 0x2),
                fK[nj(0x41e)] = fG(0x0, a1[nj(0x86b)] - 0x1, a1[nj(0x86b)] >> 0x1, 0x2)),
                Math['random']() < 0.1 && (fK[nj(0x5a9)] |= 0x2,
                fK[nj(0x215)] = fG(0x1, a1[nj(0x31e)] - 0x1, a1[nj(0x31e)] - 0x1, 0x1)),
                Math[nj(0x50a)]() < 0.1 && (fK[nj(0x7b6)] = fG(0x0, a1['echoSustainRange'] - 0x1, a1['echoSustainRange'] >> 0x1, 0x2),
                fK['echoDelay'] = fG(0x0, a1[nj(0x7d9)] - 0x1, a1['echoDelayRange'] >> 0x1, 0x2),
                0x0 == fK['echoSustain'] && 0x0 == fK[nj(0x6e6)] || (fK[nj(0x5a9)] |= 0x40)),
                Math[nj(0x50a)]() < 0.5 && (fK['effects'] |= 0x1,
                fK[nj(0x76b)] = fG(0x1, a1['reverbRange'] - 0x1, 0x1, 0x1)),
                fS) {
                case 0x0:
                    fK[nj(0x556)] = Math[nj(0x50a)]() * a1[nj(0x25a)][nj(0x57c)] | 0x0;
                    break;
                case 0x6:
                case 0x8:
                    0x8 == fS && (fK['supersawDynamism'] = fG(0x0, a1['supersawDynamismMax'], a1[nj(0x4bc)], 0x2),
                    fK[nj(0x426)] = fG(0x0, a1['supersawSpreadMax'], Math[nj(0x600)](a1['supersawSpreadMax'] / 0x3), 0x4),
                    fK['supersawShape'] = fG(0x0, a1[nj(0x36f)], 0x0, 0x4)),
                    fK['pulseWidth'] = fG(0x0, a1[nj(0x689)] - 0x1, a1['pulseWidthRange'] - 0x1, 0x2),
                    Math['random']() < 0.6 && fK[nj(0x3f7)](a1[nj(0x45f)]['dictionary'][nj(0x1a7)]['index'], 0x0, a1[nj(0x6ac)][nj(0x64a)][fF([{
                        'item': 'punch',
                        'weight': 0x6
                    }, {
                        'item': nj(0x561),
                        'weight': 0x2
                    }, {
                        'item': nj(0x322),
                        'weight': 0x4
                    }, {
                        'item': 'flare\x203',
                        'weight': 0x2
                    }, {
                        'item': nj(0x570),
                        'weight': 0x2
                    }, {
                        'item': nj(0x4a8),
                        'weight': 0x4
                    }, {
                        'item': nj(0x7b1),
                        'weight': 0x4
                    }, {
                        'item': nj(0x342),
                        'weight': 0x4
                    }, {
                        'item': 'swell\x202',
                        'weight': 0x2
                    }, {
                        'item': nj(0x287),
                        'weight': 0x1
                    }, {
                        'item': 'tremolo1',
                        'weight': 0x1
                    }, {
                        'item': nj(0x174),
                        'weight': 0x1
                    }, {
                        'item': 'tremolo3',
                        'weight': 0x1
                    }, {
                        'item': 'tremolo4',
                        'weight': 0x1
                    }, {
                        'item': nj(0x883),
                        'weight': 0x1
                    }, {
                        'item': 'tremolo6',
                        'weight': 0x1
                    }, {
                        'item': nj(0x37c),
                        'weight': 0x1
                    }, {
                        'item': 'decay\x202',
                        'weight': 0x2
                    }, {
                        'item': 'decay\x203',
                        'weight': 0x2
                    }])]['index']);
                    break;
                case 0x7:
                case 0x5:
                    {
                        0x7 == fS && (fK[nj(0x499)] = Math['random']() * a1[nj(0x240)] | 0x0);
                        const fU = [ () => {
                            const np = nj
                              , fW = [];
                            for (let fX = 0x0; fX < a1[np(0x234)]; fX++)
                                fW[fX] = Math[np(0x50a)]() < 0.4 ? Math[np(0x50a)]() : 0x0;
                            return fW[0x8 * Math[np(0x50a)]() | 0x0] = Math['pow'](Math[np(0x50a)](), 0.25),
                            fW;
                        }
                        , () => {
                            const nq = nj;
                            let fW = 0x1;
                            const fX = [fW];
                            for (let fY = 0x1; fY < a1[nq(0x234)]; fY++)
                                fW *= Math[nq(0x3b6)](0x2, Math['random']() - 0.55),
                                fX[fY] = fW;
                            return fX;
                        }
                        , () => {
                            const nr = nj;
                            let fW = 0x1;
                            const fX = [fW];
                            for (let fY = 0x1; fY < a1['harmonicsControlPoints']; fY++)
                                fW *= Math[nr(0x3b6)](0x2, Math['random']() - 0.55),
                                fX[fY] = fW * Math[nr(0x50a)]();
                            return fX;
                        }
                        ]
                          , fV = (0x0,
                        fU[Math[nj(0x50a)]() * fU['length'] | 0x0])();
                        fT(fV);
                        for (let fW = 0x0; fW < a1['harmonicsControlPoints']; fW++)
                            fK['harmonicsWave']['harmonics'][fW] = Math['round'](fV[fW]);
                        fK[nj(0x3aa)]['markCustomWaveDirty']();
                    }
                    break;
                case 0x3:
                    {
                        const fX = [];
                        for (let fY = 0x0; fY < a1[nj(0x6e7)]; fY++) {
                            const fZ = 0x0 == fY || 0x7 == fY || 0xb == fY || 0xe == fY || 0x10 == fY || 0x12 == fY || 0x15 == fY;
                            fX[fY] = fZ ? Math['pow'](Math['random'](), 0.25) : 0.5 * Math['pow'](Math['random'](), 0x3);
                        }
                        fT(fX);
                        for (let g0 = 0x0; g0 < a1['spectrumControlPoints']; g0++)
                            fK[nj(0x80c)]['spectrum'][g0] = Math[nj(0x874)](fX[g0]);
                        fK[nj(0x80c)][nj(0x77e)]();
                    }
                    break;
                case 0x1:
                    {
                        fK['algorithm'] = Math[nj(0x50a)]() * a1[nj(0x26c)]['length'] | 0x0,
                        fK[nj(0x3db)] = Math['random']() * a1[nj(0x6bb)][nj(0x57c)] | 0x0;
                        const g1 = a1['algorithms'][fK['algorithm']];
                        for (let g2 = 0x0; g2 < g1['carrierCount']; g2++)
                            fK['operators'][g2]['frequency'] = fG(0x0, a1[nj(0x587)]['length'] - 0x1, 0x0, 0x3),
                            fK[nj(0x350)][g2][nj(0x328)] = fG(0x0, a1['operatorAmplitudeMax'], a1[nj(0x826)] - 0x1, 0x2);
                        for (let g3 = g1['carrierCount']; g3 < a1['operatorCount']; g3++)
                            fK['operators'][g3]['frequency'] = fG(0x3, a1[nj(0x587)]['length'] - 0x1, 0x0, 0x3),
                            fK[nj(0x350)][g3]['amplitude'] = Math[nj(0x3b6)](Math['random'](), 0x2) * a1['operatorAmplitudeMax'] | 0x0,
                            fK[nj(0x863)] < a1[nj(0x517)] && Math['random']() < 0.4 && fK[nj(0x3f7)](a1['instrumentAutomationTargets']['dictionary'][nj(0x1f8)][nj(0x2c5)], g3, a1[nj(0x6ac)][nj(0x64a)][fF([{
                                'item': nj(0x4d1),
                                'weight': 0x2
                            }, {
                                'item': 'flare\x201',
                                'weight': 0x2
                            }, {
                                'item': 'flare\x202',
                                'weight': 0x2
                            }, {
                                'item': nj(0x545),
                                'weight': 0x2
                            }, {
                                'item': nj(0x570),
                                'weight': 0x2
                            }, {
                                'item': nj(0x4a8),
                                'weight': 0x2
                            }, {
                                'item': nj(0x7b1),
                                'weight': 0x2
                            }, {
                                'item': 'swell\x201',
                                'weight': 0x2
                            }, {
                                'item': 'swell\x202',
                                'weight': 0x2
                            }, {
                                'item': nj(0x287),
                                'weight': 0x2
                            }, {
                                'item': nj(0x765),
                                'weight': 0x1
                            }, {
                                'item': nj(0x174),
                                'weight': 0x1
                            }, {
                                'item': nj(0x450),
                                'weight': 0x1
                            }, {
                                'item': nj(0x41f),
                                'weight': 0x1
                            }, {
                                'item': 'tremolo5',
                                'weight': 0x1
                            }, {
                                'item': nj(0x230),
                                'weight': 0x1
                            }, {
                                'item': 'decay\x201',
                                'weight': 0x1
                            }, {
                                'item': 'decay\x202',
                                'weight': 0x1
                            }, {
                                'item': nj(0x781),
                                'weight': 0x1
                            }])]['index']),
                            fK[nj(0x863)] < a1['maxEnvelopeCount'] && Math['random']() < 0.05 && fK['addEnvelope'](a1['instrumentAutomationTargets'][nj(0x64a)][nj(0x567)][nj(0x2c5)], g3, a1[nj(0x6ac)][nj(0x64a)][fF([{
                                'item': 'punch',
                                'weight': 0x4
                            }, {
                                'item': nj(0x561),
                                'weight': 0x4
                            }, {
                                'item': 'flare\x202',
                                'weight': 0x2
                            }, {
                                'item': nj(0x545),
                                'weight': 0x1
                            }, {
                                'item': 'twang\x201',
                                'weight': 0x10
                            }, {
                                'item': 'twang\x202',
                                'weight': 0x2
                            }, {
                                'item': 'twang\x203',
                                'weight': 0x1
                            }, {
                                'item': nj(0x342),
                                'weight': 0x4
                            }, {
                                'item': 'swell\x202',
                                'weight': 0x2
                            }, {
                                'item': 'swell\x203',
                                'weight': 0x1
                            }, {
                                'item': 'decay\x201',
                                'weight': 0x2
                            }, {
                                'item': 'decay\x202',
                                'weight': 0x1
                            }, {
                                'item': 'decay\x203',
                                'weight': 0x1
                            }])]['index']);
                        fK['feedbackAmplitude'] = Math['pow'](Math[nj(0x50a)](), 0x3) * a1[nj(0x826)] | 0x0,
                        fK['envelopeCount'] < a1[nj(0x517)] && Math[nj(0x50a)]() < 0.4 && fK['addEnvelope'](a1['instrumentAutomationTargets'][nj(0x64a)][nj(0x31f)][nj(0x2c5)], 0x0, a1['envelopes'][nj(0x64a)][fF([{
                            'item': nj(0x4d1),
                            'weight': 0x2
                        }, {
                            'item': 'flare\x201',
                            'weight': 0x2
                        }, {
                            'item': 'flare\x202',
                            'weight': 0x2
                        }, {
                            'item': nj(0x545),
                            'weight': 0x2
                        }, {
                            'item': nj(0x570),
                            'weight': 0x2
                        }, {
                            'item': nj(0x4a8),
                            'weight': 0x2
                        }, {
                            'item': nj(0x7b1),
                            'weight': 0x2
                        }, {
                            'item': nj(0x342),
                            'weight': 0x2
                        }, {
                            'item': 'swell\x202',
                            'weight': 0x2
                        }, {
                            'item': 'swell\x203',
                            'weight': 0x2
                        }, {
                            'item': 'tremolo1',
                            'weight': 0x1
                        }, {
                            'item': 'tremolo2',
                            'weight': 0x1
                        }, {
                            'item': 'tremolo3',
                            'weight': 0x1
                        }, {
                            'item': 'tremolo4',
                            'weight': 0x1
                        }, {
                            'item': 'tremolo5',
                            'weight': 0x1
                        }, {
                            'item': 'tremolo6',
                            'weight': 0x1
                        }, {
                            'item': nj(0x37c),
                            'weight': 0x1
                        }, {
                            'item': nj(0x7ea),
                            'weight': 0x1
                        }, {
                            'item': 'decay\x203',
                            'weight': 0x1
                        }])]['index']);
                    }
                    break;
                default:
                    throw new Error(nj(0x6a7));
                }
            }
            fE['notifier']['changed'](),
            this['W']();
        }
    }
    class bL extends bx {
        constructor(fE, fF) {
            const ns = jI;
            super();
            const fG = fE['song']['channels'][fE[ns(0x733)]][ns(0x84c)][fE[ns(0x3fe)]()];
            fG['transition'] != fF && (this['W'](),
            fG['transition'] = fF,
            fG['preset'] = fG['type'],
            fE['notifier']['changed']());
        }
    }
    class bM extends bx {
        constructor(fE, fF) {
            const nt = jI;
            super();
            const fG = fE[nt(0x3c1)]['channels'][fE['channel']][nt(0x84c)][fE[nt(0x3fe)]()]
              , fH = fG['effects']
              , fI = 0x0 != (fH & 0x1 << fF)
              , fJ = fI ? fH & ~(0x1 << fF) : fH | 0x1 << fF;
            fG['effects'] = fJ,
            0x2 != fF && (fG[nt(0x760)] = fG[nt(0x7d5)]),
            fI && fG[nt(0x232)](),
            this['W'](),
            fE['notifier']['changed']();
        }
    }
    class bN extends bx {
        constructor(fE, fF, fG, fH, fI, fJ) {
            const nu = jI;
            if (super(),
            fF > fE['song'][nu(0x468)])
                throw new Error('invalid\x20pattern');
            for (let fK = fG; fK < fG + fI; fK++)
                for (let fL = fH; fL < fH + fJ; fL++)
                    fE[nu(0x3c1)]['channels'][fL]['bars'][fK] != fF && (fE['song'][nu(0x7b3)][fL][nu(0x81a)][fK] = fF,
                    this['W']());
            fE[nu(0x7e6)][nu(0x327)]();
        }
    }
    class bO extends bx {
        constructor(fE, fF, fG) {
            const nv = jI;
            if (super(),
            fE[nv(0x3c1)]['barCount'] != fF) {
                for (const fH of fE[nv(0x3c1)][nv(0x7b3)])
                    if (fG) {
                        for (; fH['bars'][nv(0x57c)] < fF; )
                            fH[nv(0x81a)]['unshift'](0x0);
                        fE[nv(0x3c1)]['barCount'] > fF && fH[nv(0x81a)]['splice'](0x0, fE[nv(0x3c1)]['barCount'] - fF);
                    } else {
                        for (; fH['bars'][nv(0x57c)] < fF; )
                            fH['bars']['push'](0x0);
                        fH['bars']['length'] = fF;
                    }
                if (fG) {
                    const fI = fF - fE[nv(0x3c1)]['barCount'];
                    fE[nv(0x6e2)] = Math[nv(0x2f6)](0x0, fE[nv(0x6e2)] + fI),
                    (fI < 0x0 || fE['barScrollPos'] > 0x0) && (fE['barScrollPos'] = Math['max'](0x0, fE['barScrollPos'] + fI)),
                    fE['song'][nv(0x699)] = Math['max'](0x0, fE['song'][nv(0x699)] + fI);
                }
                fE[nv(0x6e2)] = Math[nv(0x4c5)](fE['bar'], fF - 0x1),
                fE[nv(0x3c1)][nv(0x278)] = Math[nv(0x4c5)](fF, fE[nv(0x3c1)][nv(0x278)]),
                fE[nv(0x3c1)]['loopStart'] = Math['min'](fF - fE[nv(0x3c1)][nv(0x278)], fE['song'][nv(0x699)]),
                fE[nv(0x3c1)][nv(0x647)] = fF,
                fE[nv(0x7e6)][nv(0x327)](),
                this['W']();
            }
        }
    }
    class bP extends bx {
        constructor(fE, fF, fG) {
            const nw = jI;
            super();
            const fH = Math['min'](a1[nw(0x80f)], fE[nw(0x3c1)]['barCount'] + fG);
            if (0x0 != (fG = fH - fE[nw(0x3c1)][nw(0x647)])) {
                for (const fI of fE[nw(0x3c1)]['channels'])
                    for (; fI['bars'][nw(0x57c)] < fH; )
                        fI[nw(0x81a)]['splice'](fF, 0x0, 0x0);
                fE[nw(0x3c1)][nw(0x647)] = fH,
                fE[nw(0x6e2)] += fG,
                fE['barScrollPos'] += fG,
                fE['song']['loopStart'] >= fF ? fE['song']['loopStart'] += fG : fE['song'][nw(0x699)] + fE[nw(0x3c1)][nw(0x278)] >= fF && (fE[nw(0x3c1)][nw(0x278)] += fG),
                fE['notifier'][nw(0x327)](),
                this['W']();
            }
        }
    }
    class bQ extends bx {
        constructor(fE, fF, fG) {
            const nx = jI;
            super();
            for (const fH of fE['song']['channels'])
                fH[nx(0x81a)][nx(0x712)](fF, fG),
                0x0 == fH[nx(0x81a)][nx(0x57c)] && fH['bars'][nx(0x557)](0x0);
            fE[nx(0x3c1)][nx(0x647)] = Math['max'](0x1, fE['song']['barCount'] - fG),
            fE['bar'] = Math[nx(0x2f6)](0x0, fE[nx(0x6e2)] - fG),
            fE[nx(0x339)] = Math[nx(0x2f6)](0x0, fE['barScrollPos'] - fG),
            fE[nx(0x3c1)][nx(0x699)] >= fF ? fE['song']['loopStart'] = Math['max'](0x0, fE['song']['loopStart'] - fG) : fE['song'][nx(0x699)] + fE['song'][nx(0x278)] > fF && (fE['song']['loopLength'] -= fG),
            fE[nx(0x3c1)][nx(0x278)] = Math[nx(0x2f6)](0x1, Math[nx(0x4c5)](fE['song']['barCount'] - fE['song']['loopStart'], fE[nx(0x3c1)][nx(0x278)])),
            fE['notifier'][nx(0x327)](),
            this['W']();
        }
    }
    class bR extends bx {
        constructor(fE, fF, fG, fH) {
            const ny = jI;
            super(),
            fE['song'][ny(0x7b3)]['splice'](fF + fH, 0x0, ...fE[ny(0x3c1)]['channels'][ny(0x712)](fF, fG - fF + 0x1)),
            fE['notifier']['changed'](),
            this['W']();
        }
    }
    class bS extends bx {
        constructor(fE, fF, fG) {
            const nz = jI;
            if (super(),
            fE['song'][nz(0x1c4)] != fF || fE['song'][nz(0x3ea)] != fG) {
                const fH = [];
                function fI(fJ, fK, fL, fM, fN, fO) {
                    const nA = nz;
                    for (let fP = 0x0; fP < fJ; fP++) {
                        const fQ = fP + fL
                          , fR = fP + fM;
                        if (fP < fK)
                            fH[fQ] = fE[nA(0x3c1)]['channels'][fR];
                        else {
                            fH[fQ] = new bg(),
                            fH[fQ][nA(0x60c)] = fN;
                            for (let fS = 0x0; fS < a1[nA(0x3ec)]; fS++) {
                                const fT = new bf(fO)
                                  , fU = cN(fO)
                                  , fV = aq['valueToPreset'](fU);
                                fT[nA(0x78a)](fV['settings'], fO),
                                fT[nA(0x760)] = fU,
                                fT[nA(0x7c6)] = 0x1,
                                fH[fQ][nA(0x84c)][fS] = fT;
                            }
                            for (let fW = 0x0; fW < fE[nA(0x3c1)][nA(0x468)]; fW++)
                                fH[fQ][nA(0x3cb)][fW] = new b5();
                            for (let fX = 0x0; fX < fE[nA(0x3c1)]['barCount']; fX++)
                                fH[fQ][nA(0x81a)][fX] = 0x0;
                        }
                    }
                }
                fI(fF, fE['song']['pitchChannelCount'], 0x0, 0x0, 0x3, !0x1),
                fI(fG, fE['song'][nz(0x3ea)], fF, fE['song']['pitchChannelCount'], 0x0, !0x0),
                fE[nz(0x3c1)]['pitchChannelCount'] = fF,
                fE['song'][nz(0x3ea)] = fG;
                for (let fJ = 0x0; fJ < fE[nz(0x3c1)][nz(0x777)](); fJ++)
                    fE[nz(0x3c1)][nz(0x7b3)][fJ] = fH[fJ];
                fE['song'][nz(0x7b3)]['length'] = fE[nz(0x3c1)][nz(0x777)](),
                fE['channel'] = Math['min'](fE['channel'], fF + fG - 0x1),
                fE['notifier'][nz(0x327)](),
                this['W']();
            }
        }
    }
    class bT extends bz {
        constructor(fE, fF, fG) {
            const nB = jI;
            super();
            const fH = fE['song']['pitchChannelCount'] + (fG ? 0x0 : 0x1)
              , fI = fE[nB(0x3c1)][nB(0x3ea)] + (fG ? 0x1 : 0x0);
            if (fH <= a1['pitchChannelCountMax'] && fI <= a1[nB(0x735)]) {
                const fJ = fG ? fE['song']['pitchChannelCount'] + fE['song'][nB(0x3ea)] : fE[nB(0x3c1)]['pitchChannelCount'];
                this[nB(0x65e)](new bS(fE,fH,fI)),
                this[nB(0x65e)](new bR(fE,fF,fJ - 0x1,0x1));
            }
        }
    }
    class bU extends bz {
        constructor(fE, fF, fG) {
            const nC = jI;
            for (super(); fG >= fF; ) {
                const fH = fE[nC(0x3c1)]['getChannelIsNoise'](fG);
                fE['song'][nC(0x7b3)][nC(0x712)](fG, 0x1),
                fH ? fE[nC(0x3c1)]['noiseChannelCount']-- : fE[nC(0x3c1)]['pitchChannelCount']--,
                fG--;
            }
            fE[nC(0x3c1)][nC(0x1c4)] < a1[nC(0x433)] && this['append'](new bS(fE,a1[nC(0x433)],fE['song'][nC(0x3ea)])),
            this[nC(0x65e)](new bV(fE,Math[nC(0x2f6)](0x0, fF - 0x1),fE['bar'])),
            this['W'](),
            fE[nC(0x7e6)][nC(0x327)]();
        }
    }
    class bV extends bx {
        constructor(fE, fF, fG, fH=!0x1) {
            const nD = jI;
            super();
            const fI = fE['channel']
              , fJ = fE['bar'];
            fE['channel'] = fF,
            fE['bar'] = fG,
            fH || fE[nD(0x1c9)]['scrollToSelectedPattern'](),
            fE[nD(0x7e6)]['changed'](),
            fI == fF && fJ == fG || this['W']();
        }
    }
    class bW extends bx {
        constructor(fE, fF) {
            const nE = jI;
            super();
            const fG = fE[nE(0x3c1)][nE(0x7b3)][fE[nE(0x733)]]['instruments'][fE['getCurrentInstrument']()];
            fG[nE(0x5d2)] != fF && (this['W'](),
            fG[nE(0x5d2)] = fF,
            fG[nE(0x760)] = fG[nE(0x7d5)],
            fE['notifier']['changed']());
        }
    }
    class bX extends bx {
        constructor(fE, fF) {
            const nF = jI;
            super();
            const fG = fE[nF(0x3c1)][nF(0x7b3)][fE['channel']]['instruments'][fE['getCurrentInstrument']()];
            fG['chord'] != fF && (this['W'](),
            fG[nF(0x3e3)] = fF,
            fG['preset'] = fG[nF(0x7d5)],
            fE[nF(0x7e6)][nF(0x327)]());
        }
    }
    class bY extends bx {
        constructor(fE, fF) {
            const nG = jI;
            super();
            const fG = fE[nG(0x3c1)]['channels'][fE['channel']]['instruments'][fE['getCurrentInstrument']()];
            fG['vibrato'] != fF && (fG[nG(0x7b2)] = fF,
            fG[nG(0x760)] = fG[nG(0x7d5)],
            fE['notifier'][nG(0x327)](),
            this['W']());
        }
    }
    class bZ extends bx {
        constructor(fE, fF, fG) {
            const nH = jI;
            super(),
            fG['markCustomWaveDirty'](),
            fF['preset'] = fF[nH(0x7d5)],
            fE[nH(0x7e6)]['changed'](),
            this['W']();
        }
    }
    class c0 extends bx {
        constructor(fE, fF, fG) {
            const nI = jI;
            super(),
            fG[nI(0x77e)](),
            fF['preset'] = fF['type'],
            fE[nI(0x7e6)]['changed'](),
            this['W']();
        }
    }
    class c1 extends bx {
        constructor(fE, fF, fG) {
            const nJ = jI;
            super();
            const fH = fE['song'][nJ(0x7b3)][fE[nJ(0x733)]][nJ(0x84c)][fE['getCurrentInstrument']()];
            fH['drumsetEnvelopes'][fF] != fG && (fH['drumsetEnvelopes'][fF] = fG,
            fH[nJ(0x760)] = fH['type'],
            fE['notifier']['changed'](),
            this['W']());
        }
    }
    class c2 extends bx {
        constructor(fE) {
            const nK = jI;
            super(),
            this['$'] = fE,
            this['dt'] = this['$'][nK(0x3c1)][nK(0x7b3)][this['$'][nK(0x733)]]['instruments'][this['$'][nK(0x3fe)]()];
        }
        ['commit']() {
            const nL = jI;
            this[nL(0x70f)]() || (this['dt']['preset'] = this['dt']['type'],
            this['$'][nL(0x7e6)]['changed']());
        }
    }
    class c3 extends c2 {
        constructor(fE, fF, fG) {
            const nM = jI;
            super(fE),
            this['dt'][nM(0x1a7)] = fG,
            fE[nM(0x7e6)]['changed'](),
            fF != fG && this['W']();
        }
    }
    class c4 extends c2 {
        constructor(fE, fF, fG) {
            super(fE),
            this['dt']['supersawDynamism'] = fG,
            fE['notifier']['changed'](),
            fF != fG && this['W']();
        }
    }
    class c5 extends c2 {
        constructor(fE, fF, fG) {
            const nN = jI;
            super(fE),
            this['dt'][nN(0x426)] = fG,
            fE[nN(0x7e6)][nN(0x327)](),
            fF != fG && this['W']();
        }
    }
    class c6 extends c2 {
        constructor(fE, fF, fG) {
            const nO = jI;
            super(fE),
            this['dt']['supersawShape'] = fG,
            fE[nO(0x7e6)]['changed'](),
            fF != fG && this['W']();
        }
    }
    class c7 extends c2 {
        constructor(fE, fF, fG) {
            const nP = jI;
            super(fE),
            this['dt']['pitchShift'] = fG,
            fE['notifier'][nP(0x327)](),
            fF != fG && this['W']();
        }
    }
    class c8 extends c2 {
        constructor(fE, fF, fG) {
            const nQ = jI;
            super(fE),
            this['dt'][nQ(0x84d)] = fG,
            fE[nQ(0x7e6)][nQ(0x327)](),
            fF != fG && this['W']();
        }
    }
    class c9 extends c2 {
        constructor(fE, fF, fG) {
            const nR = jI;
            super(fE),
            this['dt'][nR(0x1ce)] = fG,
            fE[nR(0x7e6)][nR(0x327)](),
            fF != fG && this['W']();
        }
    }
    class ca extends c2 {
        constructor(fE, fF, fG) {
            const nS = jI;
            super(fE),
            this['dt']['bitcrusherFreq'] = fG,
            fE[nS(0x7e6)][nS(0x327)](),
            fF != fG && this['W']();
        }
    }
    class cb extends c2 {
        constructor(fE, fF, fG) {
            const nT = jI;
            super(fE),
            this['dt'][nT(0x41e)] = fG,
            fE['notifier'][nT(0x327)](),
            fF != fG && this['W']();
        }
    }
    class cc extends c2 {
        constructor(fE, fF, fG) {
            const nU = jI;
            super(fE),
            this['dt'][nU(0x499)] = fG,
            fE[nU(0x7e6)][nU(0x327)](),
            fF != fG && this['W']();
        }
    }
    class cd extends bx {
        constructor(fE, fF) {
            const nV = jI;
            super();
            const fG = fE[nV(0x3c1)][nV(0x7b3)][fE[nV(0x733)]]['instruments'][fE[nV(0x3fe)]()];
            fG[nV(0x71d)] != fF && (fG[nV(0x71d)] = fF,
            fG['preset'] = fG['type'],
            fE[nV(0x7e6)][nV(0x327)](),
            this['W']());
        }
    }
    class cf extends by {
        constructor(fE, fF, fG, fH, fI, fJ=!0x1) {
            const nW = jI;
            super(fJ),
            this['yt'] = [],
            this['gt'] = [],
            this['bt'] = [],
            this['wt'] = [],
            this['$'] = fE,
            this['dt'] = this['$']['song'][nW(0x7b3)][this['$'][nW(0x733)]]['instruments'][this['$'][nW(0x3fe)]()],
            this['vt'] = fJ ? this['dt'][nW(0x760)] : this['dt']['type'],
            this['kt'] = fJ ? this['dt']['type'] : this['dt'][nW(0x760)],
            this['Mt'] = fF,
            this['xt'] = fG,
            this['P'] = fH;
            for (let fK = 0x0; fK < this['dt'][nW(0x863)]; fK++) {
                let fL = this['dt'][nW(0x6ac)][fK][nW(0x46a)]
                  , fM = this['dt']['envelopes'][fK][nW(0x2c5)];
                if (this['yt']['push'](fL),
                this['gt'][nW(0x557)](fM),
                fJ) {
                    const fN = a1[nW(0x45f)][fL];
                    fN['isFilter'] && 0x5 == fN[nW(0x47d)] == fI && (fN['maxCount'] == a1['filterMaxPoints'] ? fM == fH ? (fL = a1['instrumentAutomationTargets']['dictionary']['none']['index'],
                    fM = 0x0) : fM > fH && fM-- : fF['controlPointCount'] <= 0x1 && (fL = a1['instrumentAutomationTargets']['dictionary']['none']['index'],
                    fM = 0x0));
                }
                this['bt']['push'](fL),
                this['wt'][nW(0x557)](fM);
            }
            this['W'](),
            this[nW(0x734)]();
        }
        ['Y']() {
            const nX = jI;
            this['Mt']['controlPoints']['splice'](this['P'], 0x0, this['xt']),
            this['Mt'][nX(0x559)]++,
            this['Mt']['controlPoints']['length'] = this['Mt'][nX(0x559)],
            this['dt'][nX(0x760)] = this['vt'];
            for (let fE = 0x0; fE < this['dt']['envelopeCount']; fE++)
                this['dt'][nX(0x6ac)][fE][nX(0x46a)] = this['yt'][fE],
                this['dt']['envelopes'][fE]['index'] = this['gt'][fE];
            this['$']['notifier']['changed']();
        }
        ['J']() {
            const nY = jI;
            this['Mt']['controlPoints'][nY(0x712)](this['P'], 0x1),
            this['Mt']['controlPointCount']--,
            this['Mt']['controlPoints']['length'] = this['Mt'][nY(0x559)],
            this['dt'][nY(0x760)] = this['kt'];
            for (let fE = 0x0; fE < this['dt']['envelopeCount']; fE++)
                this['dt'][nY(0x6ac)][fE][nY(0x46a)] = this['bt'][fE],
                this['dt'][nY(0x6ac)][fE]['index'] = this['wt'][fE];
            this['$']['notifier']['changed']();
        }
    }
    class cg extends by {
        constructor(fE, fF, fG, fH, fI, fJ) {
            const nZ = jI;
            super(!0x1),
            this['$'] = fE,
            this['dt'] = this['$']['song'][nZ(0x7b3)][this['$'][nZ(0x733)]][nZ(0x84c)][this['$'][nZ(0x3fe)]()],
            this['vt'] = this['dt'][nZ(0x7d5)],
            this['kt'] = this['dt'][nZ(0x760)],
            this['xt'] = fF,
            this['St'] = fG,
            this['Ft'] = fH,
            this['Pt'] = fI,
            this['It'] = fJ,
            this['W'](),
            this['redo']();
        }
        ['Y']() {
            const o0 = jI;
            this['xt']['freq'] = this['Ft'],
            this['xt']['gain'] = this['It'],
            this['dt'][o0(0x760)] = this['vt'],
            this['$'][o0(0x7e6)][o0(0x327)]();
        }
        ['J']() {
            const o1 = jI;
            this['xt']['freq'] = this['St'],
            this['xt']['gain'] = this['Pt'],
            this['dt'][o1(0x760)] = this['kt'],
            this['$']['notifier']['changed']();
        }
    }
    class ch extends by {
        constructor(fE, fF, fG) {
            const o2 = jI;
            super(!0x1),
            this['$'] = fE,
            this['dt'] = this['$'][o2(0x3c1)]['channels'][this['$']['channel']]['instruments'][this['$'][o2(0x3fe)]()],
            this['vt'] = this['dt']['type'],
            this['kt'] = this['dt'][o2(0x760)],
            this['qt'] = this['dt']['fadeIn'],
            this['Tt'] = this['dt']['fadeOut'],
            this['Et'] = fF,
            this['Ct'] = fG,
            this['W'](),
            this['redo']();
        }
        ['Y']() {
            const o3 = jI;
            this['dt']['fadeIn'] = this['Et'],
            this['dt']['fadeOut'] = this['Ct'],
            this['dt'][o3(0x760)] = this['vt'],
            this['$'][o3(0x7e6)][o3(0x327)]();
        }
        ['J']() {
            const o4 = jI;
            this['dt']['fadeIn'] = this['qt'],
            this['dt']['fadeOut'] = this['Tt'],
            this['dt']['preset'] = this['kt'],
            this['$'][o4(0x7e6)][o4(0x327)]();
        }
    }
    class cj extends bx {
        constructor(fE, fF) {
            const o5 = jI;
            super();
            const fG = fE[o5(0x3c1)]['channels'][fE['channel']][o5(0x84c)][fE[o5(0x3fe)]()];
            fG[o5(0x803)] != fF && (fG[o5(0x803)] = fF,
            fG[o5(0x760)] = fG[o5(0x7d5)],
            fE['notifier'][o5(0x327)](),
            this['W']());
        }
    }
    class ck extends bx {
        constructor(fE, fF) {
            const o6 = jI;
            super();
            const fG = fE[o6(0x3c1)][o6(0x7b3)][fE[o6(0x733)]][o6(0x84c)][fE[o6(0x3fe)]()];
            fG['feedbackType'] != fF && (fG[o6(0x3db)] = fF,
            fG[o6(0x760)] = fG['type'],
            fE[o6(0x7e6)][o6(0x327)](),
            this['W']());
        }
    }
    class cl extends bx {
        constructor(fE, fF, fG) {
            const o7 = jI;
            super();
            const fH = fE[o7(0x3c1)][o7(0x7b3)][fE[o7(0x733)]][o7(0x84c)][fE['getCurrentInstrument']()];
            fH['operators'][fF][o7(0x353)] != fG && (fH[o7(0x350)][fF]['frequency'] = fG,
            fH['preset'] = fH['type'],
            fE['notifier']['changed'](),
            this['W']());
        }
    }
    class cm extends c2 {
        constructor(fE, fF, fG, fH) {
            const o8 = jI;
            super(fE),
            this['dt']['operators'][fF]['amplitude'] = fH,
            fE['notifier'][o8(0x327)](),
            fG != fH && this['W']();
        }
    }
    class co extends c2 {
        constructor(fE, fF, fG) {
            const o9 = jI;
            super(fE),
            this['dt']['feedbackAmplitude'] = fG,
            fE['notifier'][o9(0x327)](),
            fF != fG && this['W']();
        }
    }
    class cp extends bx {
        constructor(fE) {
            const oa = jI;
            super();
            const fF = fE[oa(0x3c1)][oa(0x7b3)][fE['channel']]
              , fG = fE[oa(0x3c1)][oa(0x67a)](fE[oa(0x733)])
              , fH = fE[oa(0x3c1)]['getMaxInstrumentsPerChannel']();
            if (fF[oa(0x84c)][oa(0x57c)] >= fH)
                return;
            const fI = cN(fG)
              , fJ = aq['valueToPreset'](fI)
              , fK = new bf(fG);
            fK[oa(0x78a)](fJ['settings'], fG, 0x1),
            fK['preset'] = fI,
            fK[oa(0x7c6)] = 0x1,
            fF[oa(0x84c)][oa(0x557)](fK),
            fE['viewedInstrument'][fE['channel']] = fF['instruments']['length'] - 0x1,
            fE[oa(0x7e6)]['changed'](),
            this['W']();
        }
    }
    class cq extends bx {
        constructor(fE) {
            const ob = jI;
            super();
            const fF = fE[ob(0x3c1)][ob(0x7b3)][fE[ob(0x733)]];
            if (fF['instruments']['length'] <= a1[ob(0x3ec)])
                return;
            const fG = fE[ob(0x3a3)][fE['channel']];
            if (fF['instruments']['splice'](fG, 0x1),
            fE[ob(0x3c1)][ob(0x776)])
                for (const fH of fF[ob(0x3cb)]) {
                    for (let fI = 0x0; fI < fH[ob(0x84c)]['length']; fI++)
                        fH['instruments'][fI] == fG ? (fH['instruments'][ob(0x712)](fI, 0x1),
                        fI--) : fH['instruments'][fI] > fG && fH['instruments'][fI]--;
                    fH['instruments']['length'] <= 0x0 && (fH['instruments'][0x0] = 0x0);
                }
            fE['notifier'][ob(0x327)](),
            this['W']();
        }
    }
    class cr extends bx {
        constructor(fE, fF) {
            const oc = jI;
            super(),
            fE['viewedInstrument'][fE['channel']] != fF && (fE['viewedInstrument'][fE[oc(0x733)]] = fF,
            fE['notifier']['changed'](),
            this['W']());
        }
    }
    class cu extends bx {
        constructor(fE, fF, fG) {
            const od = jI;
            super();
            const fH = fE['song']['layeredInstruments']
              , fI = fE[od(0x3c1)][od(0x776)];
            if (fH != fF || fI != fG) {
                fE['song']['layeredInstruments'] = fF,
                fE['song'][od(0x776)] = fG;
                for (let fJ = 0x0; fJ < fE['song']['getChannelCount'](); fJ++) {
                    const fK = fE[od(0x3c1)]['channels'][fJ];
                    fK[od(0x84c)][od(0x57c)] > fE['song'][od(0x5c9)]() && (fK['instruments']['length'] = fE[od(0x3c1)]['getMaxInstrumentsPerChannel']());
                    for (let fL = 0x0; fL < fE['song']['patternsPerChannel']; fL++) {
                        const fM = fK[od(0x3cb)][fL];
                        if (!fI && fG) {
                            for (let fN = 0x0; fN < fK['instruments'][od(0x57c)]; fN++)
                                fM['instruments'][fN] = fN;
                            fM[od(0x84c)]['length'] = fK[od(0x84c)][od(0x57c)];
                        }
                        bC(fM[od(0x84c)], fE['song'], fJ);
                    }
                }
                fE['notifier']['changed'](),
                this['W']();
            }
        }
    }
    class cv extends bx {
        constructor(fE, fF) {
            const oe = jI;
            super(),
            fE[oe(0x3c1)][oe(0x319)] != fF && (fE[oe(0x3c1)][oe(0x319)] = fF,
            fE['notifier']['changed'](),
            this['W']());
        }
    }
    class cw extends bx {
        constructor(fE, fF, fG, fH, fI) {
            const of = jI;
            super(),
            this['$'] = fE,
            this['oldStart'] = fF,
            this[of(0x214)] = fG,
            this[of(0x802)] = fH,
            this[of(0x74c)] = fI,
            this['$'][of(0x3c1)]['loopStart'] = this['newStart'],
            this['$'][of(0x3c1)][of(0x278)] = this['newLength'],
            this['$'][of(0x7e6)][of(0x327)](),
            this[of(0x2ee)] == this[of(0x802)] && this[of(0x214)] == this['newLength'] || this['W']();
        }
    }
    class cx extends by {
        constructor(fE, fF, fG, fH, fI=!0x1) {
            super(fI),
            this['$'] = fE,
            this['tt'] = fF,
            this['Lt'] = fG,
            this['P'] = fH,
            this['W'](),
            this['redo']();
        }
        ['Y']() {
            const og = jI;
            this['tt']['pitches']['splice'](this['P'], 0x0, this['Lt']),
            this['$'][og(0x7e6)][og(0x327)]();
        }
        ['J']() {
            const oh = jI;
            this['tt']['pitches'][oh(0x712)](this['P'], 0x1),
            this['$'][oh(0x7e6)][oh(0x327)]();
        }
    }
    class cy extends bx {
        constructor(fE, fF, fG) {
            const oi = jI;
            super(),
            this['oldValue'] = fF,
            fE['song'][oi(0x7b3)][fE[oi(0x733)]][oi(0x60c)] = fG,
            fE[oi(0x7e6)]['changed'](),
            fF != fG && this['W']();
        }
    }
    class cz extends bz {
        constructor(fE, fF) {
            const oj = jI;
            super(),
            fE[oj(0x3c1)]['rhythm'] != fF && (fE['song']['rhythm'] = fF,
            fE[oj(0x7e6)][oj(0x327)](),
            this['W']());
        }
    }
    class cA extends bz {
        constructor(fE, fF, fG, fH, fI, fJ) {
            const ok = jI;
            super(),
            this['append'](new d1(fE,fF,fH,fI));
            let fK = 0x0;
            for (let fL = 0x0; fL < fF['notes']['length']; fL++)
                if (fF['notes'][fL]['start'] < fH) {
                    if (fF[ok(0x58c)][fL]['end'] > fH)
                        throw new Error();
                    fK = fL + 0x1;
                } else {
                    if (fF['notes'][fL][ok(0x1b7)] < fI)
                        throw new Error();
                }
            for (; fH < fI; ) {
                for (const fM of fG) {
                    const fN = fM['start'] + fH
                      , fO = fM[ok(0x63e)] + fH;
                    if (fN >= fI)
                        break;
                    const fP = new b4(fM[ok(0x68d)][0x0],fN,fO,fM['pins'][0x0][ok(0x81f)],!0x1);
                    fP['pitches'][ok(0x57c)] = 0x0;
                    for (const fQ of fM['pitches'])
                        fP[ok(0x68d)]['push'](fQ);
                    fP['pins']['length'] = 0x0;
                    for (const fR of fM[ok(0x2a6)])
                        fP[ok(0x2a6)][ok(0x557)](b3(fR['interval'], fR[ok(0x2e3)], fR['size']));
                    fP[ok(0x790)] = !0x0 === fM[ok(0x790)] && 0x0 == fP[ok(0x1b7)],
                    fF[ok(0x58c)][ok(0x712)](fK++, 0x0, fP),
                    fP[ok(0x63e)] > fI && this['append'](new d0(fE,fP,fP['start'],fI));
                }
                fH += fJ;
            }
            fE['notifier'][ok(0x327)](),
            this['W']();
        }
    }
    class cB extends bz {
        constructor(fE, fF, fG) {
            const ol = jI;
            super(),
            fF[ol(0x78a)](fG, fG['isDrum']),
            fE['notifier'][ol(0x327)](),
            this['W']();
        }
    }
    class cC extends bx {
        constructor(fE, fF, fG, fH) {
            const om = jI;
            super(),
            bB(fG, fH['instruments']) || (fH['instruments'][om(0x57c)] = 0x0,
            fH['instruments']['push'](...fG),
            bC(fH[om(0x84c)], fE[om(0x3c1)], fF),
            this['W'](),
            fE[om(0x7e6)]['changed']());
        }
    }
    class cD extends bx {
        constructor(fE, fF) {
            const on = jI;
            if (super(),
            fE['song']['patternsPerChannel'] != fF) {
                for (let fG = 0x0; fG < fE['song'][on(0x777)](); fG++) {
                    const fH = fE[on(0x3c1)]['channels'][fG][on(0x81a)]
                      , fI = fE[on(0x3c1)][on(0x7b3)][fG]['patterns'];
                    for (let fJ = 0x0; fJ < fH['length']; fJ++)
                        fH[fJ] > fF && (fH[fJ] = 0x0);
                    for (let fK = fI['length']; fK < fF; fK++)
                        fI[fK] = new b5();
                    fI['length'] = fF;
                }
                fE[on(0x3c1)][on(0x468)] = fF,
                fE[on(0x7e6)][on(0x327)](),
                this['W']();
            }
        }
    }
    class cE extends by {
        constructor(fE, fF, fG) {
            const oo = jI;
            super(!0x1),
            this['zt'] = null,
            this['Dt'] = null;
            const fH = fE['song'];
            if (0x0 != fH['channels'][fF]['bars'][fG])
                return;
            this['$'] = fE,
            this['At'] = fG,
            this['Bt'] = fF,
            this['Ot'] = fH[oo(0x468)],
            this['Nt'] = fH[oo(0x468)],
            this['Rt'] = fE[oo(0x686)][fF][oo(0x7dd)]();
            let fI = null
              , fJ = null;
            for (let fK = 0x1; fK <= fH[oo(0x468)]; fK++) {
                let fL = !0x1;
                for (let fM = 0x0; fM < fH[oo(0x647)]; fM++)
                    if (fH['channels'][fF]['bars'][fM] == fK) {
                        fL = !0x0;
                        break;
                    }
                if (fL)
                    continue;
                null == fJ && (fJ = fK);
                if (0x0 == fH['channels'][fF]['patterns'][fK - 0x1][oo(0x58c)]['length']) {
                    fI = fK;
                    break;
                }
            }
            if (null != fI)
                this['Ht'] = fI,
                this['Dt'] = fH['channels'][fF]['patterns'][fI - 0x1][oo(0x84c)][oo(0x7dd)]();
            else {
                if (fH[oo(0x468)] < fH[oo(0x647)])
                    this['Nt'] = fH['patternsPerChannel'] + 0x1,
                    this['Ht'] = fH['patternsPerChannel'] + 0x1;
                else {
                    if (null == fJ)
                        throw new Error();
                    this['Ht'] = fJ,
                    this['zt'] = fH['channels'][fF]['patterns'][fJ - 0x1]['notes'],
                    this['Dt'] = fH[oo(0x7b3)][fF][oo(0x3cb)][fJ - 0x1][oo(0x84c)]['concat']();
                }
            }
            this['W'](),
            this['Y']();
        }
        ['Y']() {
            const op = jI
              , fE = this['$']['song'];
            for (let fG = fE['patternsPerChannel']; fG < this['Nt']; fG++)
                for (let fH = 0x0; fH < fE[op(0x777)](); fH++)
                    fE['channels'][fH][op(0x3cb)][fG] = new b5();
            fE[op(0x468)] = this['Nt'];
            const fF = fE['channels'][this['Bt']]['patterns'][this['Ht'] - 0x1];
            fF[op(0x58c)] = [],
            fF['instruments'][op(0x57c)] = 0x0,
            fF[op(0x84c)]['push'](...this['Rt']),
            fE[op(0x7b3)][this['Bt']]['bars'][this['At']] = this['Ht'],
            this['$']['notifier']['changed']();
        }
        ['J']() {
            const oq = jI
              , fE = this['$']['song']
              , fF = fE[oq(0x7b3)][this['Bt']]['patterns'][this['Ht'] - 0x1];
            null != this['zt'] && (fF[oq(0x58c)] = this['zt']),
            null != this['Dt'] && (fF[oq(0x84c)]['length'] = 0x0,
            fF['instruments']['push'](...this['Dt'])),
            fE['channels'][this['Bt']][oq(0x81a)][this['At']] = 0x0;
            for (let fG = 0x0; fG < fE[oq(0x777)](); fG++)
                fE['channels'][fG][oq(0x3cb)]['length'] = this['Ot'];
            fE[oq(0x468)] = this['Ot'],
            this['$'][oq(0x7e6)]['changed']();
        }
    }
    class cF extends bH {
        constructor(fE, fF, fG, fH, fI) {
            const or = jI;
            super(fE, fF),
            fH -= this['et'];
            const fJ = this['ot'][fG][or(0x2e3)]
              , fK = Math[or(0x4c5)](fJ, fH)
              , fL = Math['max'](fJ, fH);
            let fM = !0x1;
            for (let fN = 0x0; fN < this['ot']['length']; fN++) {
                const fO = fF['pins'][fN]
                  , fP = fO[or(0x2e3)];
                fP < fK ? this['rt'][or(0x557)](b3(fO[or(0x24b)], fP, fO['size'])) : fP > fL && (fM || (this['rt']['length'] > 0x0 && (fI = fF[or(0x790)]),
                this['rt']['push'](b3(this['ot'][fG][or(0x24b)], fH, this['ot'][fG][or(0x81f)])),
                fM = !0x0),
                this['rt']['push'](b3(fO[or(0x24b)], fP, fO[or(0x81f)])));
            }
            fM || (fI = fF[or(0x790)],
            this['rt']['push'](b3(this['ot'][fG]['interval'], fH, this['ot'][fG]['size']))),
            this['ft'](fI);
        }
    }
    class cG extends bH {
        constructor(fE, fF, fG, fH, fI, fJ) {
            const os = jI;
            super(fE, fF),
            fG -= this['et'],
            fH -= this['et'],
            fI -= fF['pitches'][fJ];
            let fK, fL, fM, fN, fO = !0x1, fP = !0x1, fQ = 0x0, fR = a1[os(0x483)], fS = !0x0;
            for (fH > fG ? (fK = 0x0,
            fL = 0x1,
            fM = fF['pins'][os(0x57c)],
            fN = fT => {
                this['rt']['push'](fT);
            }
            ) : (fK = fF[os(0x2a6)][os(0x57c)] - 0x1,
            fL = -0x1,
            fM = -0x1,
            fN = fT => {
                this['rt']['unshift'](fT);
            }
            ); fK != fM; fK += fL) {
                const fT = fF['pins'][fK]
                  , fU = fT['time'];
                for (; ; )
                    if (fO) {
                        if (fP) {
                            if (fU * fL == fH * fL)
                                break;
                            fT[os(0x24b)] != fQ && (fS = !0x1),
                            fN(b3(fS ? fI : fT['interval'], fU, fT[os(0x81f)]));
                            break;
                        }
                        if (fU * fL <= fH * fL && (fQ = fT['interval'],
                        fR = fT[os(0x81f)]),
                        fU * fL < fH * fL)
                            break;
                        fN(b3(fI, fH, fR)),
                        fP = !0x0;
                    } else {
                        if (fU * fL <= fG * fL && (fQ = fT['interval'],
                        fR = fT['size']),
                        fU * fL < fG * fL) {
                            fN(b3(fT['interval'], fU, fT['size']));
                            break;
                        }
                        fN(b3(fQ, fG, fR)),
                        fO = !0x0;
                    }
            }
            fP || fN(b3(fI, fH, fR)),
            this['ft']();
        }
    }
    class cH extends bA {
        constructor(fE, fF) {
            const ot = jI;
            super();
            const fG = a1[ot(0x58d)] / a1[ot(0x307)][fE['song'][ot(0x237)]]['stepsPerBeat']
              , fH = function(fJ) {
                const ou = ot;
                let fK = a1['rhythms'][fE['song'][ou(0x237)]]['roundUpThresholds'];
                if (null != fK) {
                    const fL = Math['floor'](fJ / a1['partsPerBeat']) * a1['partsPerBeat']
                      , fM = fJ - fL;
                    let fN = fL;
                    for (const fO of fK) {
                        if (!(fM >= fO))
                            break;
                        fN += fG;
                    }
                    return fN;
                }
                return Math['round'](fJ / fG) * fG;
            };
            let fI = 0x0;
            for (; fI < fF['notes']['length']; ) {
                const fJ = fF[ot(0x58c)][fI];
                fH(fJ[ot(0x1b7)]) >= fH(fJ[ot(0x63e)]) ? this[ot(0x65e)](new cZ(fE,fF,fJ,fI,!0x0)) : (this['append'](new cI(fE,fJ,fH)),
                fI++);
            }
        }
    }
    class cI extends bH {
        constructor(fE, fF, fG) {
            const ov = jI;
            super(fE, fF);
            for (const fH of this['ot'])
                this['rt'][ov(0x557)](b3(fH['interval'], fG(fH[ov(0x2e3)] + this['et']) - this['et'], fH['size']));
            this['ft']();
        }
    }
    class cJ extends bz {
        constructor(fE, fF, fG) {
            const ow = jI;
            super();
            let fH = Math['round'](fF % fE[ow(0x3c1)][ow(0x6c9)] * a1['partsPerBeat']);
            if (fH < 0x0 && (fH += fE['song']['beatsPerBar'] * a1['partsPerBeat']),
            0x0 != fH) {
                switch (fG) {
                case 'wrapAround':
                    {
                        const fI = a1['partsPerBeat'] * fE[ow(0x3c1)][ow(0x6c9)];
                        for (const fJ of fE['song'][ow(0x7b3)])
                            for (const fK of fJ['patterns']) {
                                const fL = [];
                                for (let fM = 0x1; fM >= 0x0; fM--) {
                                    const fN = fM * fI;
                                    for (const fO of fK['notes']) {
                                        const fP = fO['start'] + fH
                                          , fQ = fO[ow(0x63e)] + fH
                                          , fR = Math['max'](0x0, fP - fN)
                                          , fS = Math[ow(0x4c5)](fI, fQ - fN);
                                        fR < fS && bF(fO, fP - fN - fR, fR, fS, fL);
                                    }
                                }
                                fK[ow(0x58c)] = fL;
                            }
                    }
                    break;
                case ow(0x4b5):
                    {
                        let fT = fE[ow(0x3c1)][ow(0x647)]
                          , fU = fE['song']['loopStart']
                          , fV = fE['song'][ow(0x278)];
                        if (this['append'](new bG(fE,fE[ow(0x3c1)][ow(0x6c9)],fH)),
                        fF < 0x0) {
                            let fW = !0x0;
                            for (const fX of fE['song'][ow(0x7b3)])
                                0x0 != fX['bars'][0x0] && (fW = !0x1);
                            if (fW) {
                                for (const fY of fE[ow(0x3c1)][ow(0x7b3)])
                                    fY[ow(0x81a)][ow(0x3e7)]();
                                fE['song'][ow(0x647)]--;
                            } else
                                fT++,
                                fU++,
                                fE['bar']++;
                        }
                        for (; fE['song']['barCount'] < fT; ) {
                            for (const fZ of fE[ow(0x3c1)][ow(0x7b3)])
                                fZ[ow(0x81a)]['push'](0x0);
                            fE['song'][ow(0x647)]++;
                        }
                        fE['song']['loopStart'] = fU,
                        fE[ow(0x3c1)]['loopLength'] = fV;
                    }
                    break;
                default:
                    throw new Error(ow(0x4f3));
                }
                fE[ow(0x7e6)]['changed'](),
                this['W']();
            }
        }
    }
    class cK extends bz {
        constructor(fE, fF, fG) {
            const ox = jI;
            if (super(),
            fE['song'][ox(0x6c9)] != fF) {
                switch (fG) {
                case 'splice':
                    if (fE['song'][ox(0x6c9)] > fF) {
                        const fH = new bA();
                        for (let fI = 0x0; fI < fE['song'][ox(0x777)](); fI++)
                            for (let fJ = 0x0; fJ < fE['song'][ox(0x7b3)][fI][ox(0x3cb)][ox(0x57c)]; fJ++)
                                fH['append'](new d1(fE,fE[ox(0x3c1)]['channels'][fI]['patterns'][fJ],fF * a1[ox(0x58d)],fE['song']['beatsPerBar'] * a1['partsPerBeat']));
                    }
                    break;
                case ox(0x266):
                    {
                        const fK = function(fL) {
                            const oy = ox;
                            return Math['round'](fL * fF / fE[oy(0x3c1)]['beatsPerBar']);
                        };
                        for (let fL = 0x0; fL < fE[ox(0x3c1)][ox(0x777)](); fL++)
                            for (let fM = 0x0; fM < fE['song']['channels'][fL]['patterns']['length']; fM++) {
                                const fN = fE[ox(0x3c1)]['channels'][fL][ox(0x3cb)][fM];
                                let fO = 0x0;
                                for (; fO < fN[ox(0x58c)]['length']; ) {
                                    const fP = fN[ox(0x58c)][fO];
                                    fK(fP[ox(0x1b7)]) >= fK(fP['end']) ? this[ox(0x65e)](new cZ(fE,fN,fP,fO,!0x0)) : (this['append'](new cI(fE,fP,fK)),
                                    fO++);
                                }
                            }
                        this[ox(0x65e)](new cU(fE,fE['song']['tempo'],fE[ox(0x3c1)][ox(0x68a)] * fF / fE['song'][ox(0x6c9)]));
                    }
                    break;
                case ox(0x4b5):
                    this[ox(0x65e)](new bG(fE,fF,0x0)),
                    fE[ox(0x3c1)]['loopStart'] = 0x0,
                    fE[ox(0x3c1)][ox(0x278)] = fE[ox(0x3c1)]['barCount'];
                    break;
                default:
                    throw new Error('Unrecognized\x20beats-per-bar\x20conversion\x20strategy.');
                }
                fE[ox(0x3c1)][ox(0x6c9)] = fF,
                fE['notifier']['changed'](),
                this['W']();
            }
        }
    }
    class cL extends bz {
        constructor(fE, fF) {
            const oz = jI;
            super(),
            fE[oz(0x3c1)][oz(0x7ad)] != fF && (fE[oz(0x3c1)][oz(0x7ad)] = fF,
            fE[oz(0x7e6)][oz(0x327)](),
            this['W']());
        }
    }
    class cM extends bz {
        constructor(fE) {
            const oA = jI;
            super();
            const fF = fE['song']
              , fG = a1['keys'][fF['key']][oA(0x2d8)]
              , fH = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];
            for (let fK = 0x0; fK < fF['pitchChannelCount']; fK++)
                for (let fL = 0x0; fL < fF['barCount']; fL++) {
                    const fM = fF[oA(0x4d5)](fK, fL);
                    if (null != fM)
                        for (const fN of fM[oA(0x58c)]) {
                            const fO = fN[oA(0x2a6)][0x0];
                            for (let fP = 0x1; fP < fN['pins'][oA(0x57c)]; fP++) {
                                const fQ = fN['pins'][fP];
                                if (fO['interval'] == fQ['interval']) {
                                    let fR = fQ['time'] - fO[oA(0x2e3)];
                                    fR += Math[oA(0x2f6)](0x0, Math['min'](a1[oA(0x58d)], fQ[oA(0x2e3)] + fN['start']) - (fO[oA(0x2e3)] + fN[oA(0x1b7)])),
                                    fR *= fQ[oA(0x81f)] + fO[oA(0x81f)];
                                    for (const fS of fN[oA(0x68d)]) {
                                        fH[(fG + fO[oA(0x24b)] + fS) % 0xc] += fR;
                                    }
                                }
                            }
                        }
                }
            let fI = 0x0
              , fJ = 0x0;
            for (let fT = 0x0; fT < 0xc; fT++) {
                const fU = fH[fT] * (0x3 * fH[(fT + 0x7) % 0xc] + fH[(fT + 0x4) % 0xc] + fH[(fT + 0x3) % 0xc]);
                fJ < fU && (fJ = fU,
                fI = fT);
            }
            if (fI != fF[oA(0x319)]) {
                const fV = fF[oA(0x319)] - fI
                  , fW = Math[oA(0x216)](fV);
                for (let fX = 0x0; fX < fF[oA(0x1c4)]; fX++)
                    for (const fY of fF[oA(0x7b3)][fX]['patterns'])
                        for (let fZ = 0x0; fZ < fW; fZ++)
                            this['append'](new d4(fE,fX,fY,fV > 0x0,!0x0));
                fF[oA(0x319)] = fI,
                fE['notifier']['changed'](),
                this['W']();
            }
        }
    }
    function cN(fE) {
        const oB = jI
          , fF = [];
        for (let fG = 0x0; fG < aq[oB(0x3e8)]['length']; fG++) {
            const fH = aq['presetCategories'][fG];
            if (oB(0x64c) != fH[oB(0x340)])
                for (let fI = 0x0; fI < fH[oB(0x5e5)]['length']; fI++) {
                    const fJ = fH['presets'][fI];
                    null != fJ[oB(0x681)] && 0x1 == fJ[oB(0x25d)] == fE && fF['push']((fG << 0x6) + fI);
                }
        }
        return fF[Math['random']() * fF[oB(0x57c)] | 0x0];
    }
    function cO(fE) {
        const oC = jI;
        for (let fF = 0x0; fF < fE[oC(0x7b3)]['length']; fF++)
            for (const fG of fE[oC(0x7b3)][fF][oC(0x84c)]) {
                const fH = fE['getChannelIsNoise'](fF)
                  , fI = fF == fE['pitchChannelCount'] ? aq['nameToPresetValue'](Math['random']() > 0.5 ? 'chip\x20noise' : oC(0x17d)) : cN(fH)
                  , fJ = aq['valueToPreset'](fI);
                fG['fromJsonObject'](fJ['settings'], fH, 0x1),
                fG[oC(0x760)] = fI,
                fG[oC(0x7c6)] = 0x1;
            }
    }
    class cP extends bz {
        constructor(fE, fF) {
            const oD = jI;
            if (super(),
            fE[oD(0x3c1)]['fromBase64String'](fF),
            '' == fF) {
                this[oD(0x65e)](new d6(fE,0x0,0x0)),
                fE['selection'][oD(0x730)](),
                cO(fE['song']),
                fE['song'][oD(0x7ad)] = fE['prefs']['defaultScale'];
                for (let fG = 0x0; fG <= fE[oD(0x3c1)]['channels']['length']; fG++)
                    fE[oD(0x3a3)][fG] = 0x0,
                    fE['recentPatternInstruments'][fG] = [0x0];
                fE[oD(0x3a3)]['length'] = fE['song']['channels']['length'];
            } else
                this['append'](new cQ(fE));
            fE['notifier']['changed'](),
            this['W']();
        }
    }
    class cQ extends bx {
        constructor(fE) {
            const oE = jI;
            super();
            const fF = Math[oE(0x4c5)](fE['channel'], fE['song'][oE(0x777)]() - 0x1)
              , fG = Math[oE(0x2f6)](0x0, Math['min'](fE['song'][oE(0x647)] - 0x1, fE['bar']));
            fE[oE(0x733)] == fF && fE['bar'] == fG || (fE[oE(0x6e2)] = fG,
            fE[oE(0x733)] = fF,
            this['W']()),
            fE['selection'][oE(0x338)](),
            fE[oE(0x7e6)][oE(0x327)]();
        }
    }
    class cR extends bz {
        constructor(fE, fF, fG) {
            const oF = jI;
            super();
            const fH = fE[oF(0x3c1)];
            function fI(fK, fL) {
                const oG = oF;
                for (; fK['length'] > fL; ) {
                    let fM = fK[oG(0x57c)] - 0x1
                      , fN = 0x0;
                    for (let fO = 0x0; fO < fK[oG(0x57c)] - 0x1; fO++) {
                        let fP = 0x0;
                        for (const fQ of fK[fO][oG(0x81a)])
                            0x0 == fQ && fP++;
                        fP >= fN && (fM = fO,
                        fN = fP);
                    }
                    fK['splice'](fM, 0x1);
                }
            }
            for (fI(fF, a1[oF(0x2af)]),
            fI(fG, a1['noiseChannelCountMax']); fF[oF(0x57c)] < a1['pitchChannelCountMin']; )
                fF[oF(0x557)](new bg());
            for (; fG['length'] < a1[oF(0x45d)]; )
                fG[oF(0x557)](new bg());
            fH['barCount'] = 0x1,
            fH['patternsPerChannel'] = 0x8;
            const fJ = fF['concat'](fG);
            for (let fK = 0x0; fK < fJ['length']; fK++) {
                const fL = fJ[fK];
                fH['barCount'] = Math['max'](fH[oF(0x647)], fL[oF(0x81a)][oF(0x57c)]),
                fH['patternsPerChannel'] = Math['max'](fH['patternsPerChannel'], fL[oF(0x3cb)]['length']),
                fH[oF(0x7b3)][fK] = fL;
            }
            fH[oF(0x7b3)][oF(0x57c)] = fJ[oF(0x57c)],
            fH[oF(0x1c4)] = fF[oF(0x57c)],
            fH[oF(0x3ea)] = fG['length'],
            fH['barCount'] = Math['min'](a1[oF(0x80f)], fH[oF(0x647)]),
            fH[oF(0x468)] = Math['min'](a1[oF(0x80f)], fH['patternsPerChannel']);
            for (let fM = 0x0; fM < fH[oF(0x7b3)]['length']; fM++) {
                const fN = fH[oF(0x7b3)][fM];
                for (let fO = 0x0; fO < fN['bars']['length']; fO++)
                    (fN[oF(0x81a)][fO] > fH[oF(0x468)] || fN[oF(0x81a)][fO] < 0x0) && (fN[oF(0x81a)][fO] = 0x0);
                for (; fN['bars'][oF(0x57c)] < fH['barCount']; )
                    fN[oF(0x81a)]['push'](0x0);
                fN[oF(0x81a)][oF(0x57c)] = fH['barCount'],
                fN[oF(0x84c)][oF(0x57c)] > fH['getMaxInstrumentsPerChannel']() && (fN['instruments']['length'] = fH['getMaxInstrumentsPerChannel']());
                for (const fP of fN[oF(0x3cb)])
                    bC(fP[oF(0x84c)], fH, fM);
                for (; fN['patterns'][oF(0x57c)] < fH['patternsPerChannel']; )
                    fN[oF(0x3cb)][oF(0x557)](new b5());
                fN['patterns'][oF(0x57c)] = fH[oF(0x468)];
            }
            fH['loopStart'] = Math[oF(0x2f6)](0x0, Math[oF(0x4c5)](fH[oF(0x647)] - 0x1, fH[oF(0x699)])),
            fH[oF(0x278)] = Math['min'](fH['barCount'] - fH[oF(0x699)], fH[oF(0x278)]),
            this[oF(0x65e)](new cQ(fE)),
            fE['notifier'][oF(0x327)](),
            this['W']();
        }
    }
    function cS(fE, fF) {
        const oH = jI;
        if (fE['length'] != fF['length'])
            return !0x1;
        for (let fG = 0x0; fG < fE['length']; fG++) {
            const fH = fE[fG]
              , fI = fF[fG];
            if (fI['start'] != fH[oH(0x1b7)] || fI[oH(0x63e)] != fH[oH(0x63e)] || fI['pitches']['length'] != fH[oH(0x68d)][oH(0x57c)] || fI['pins'][oH(0x57c)] != fH[oH(0x2a6)]['length'])
                return !0x1;
            for (let fJ = 0x0; fJ < fH['pitches'][oH(0x57c)]; fJ++)
                if (fI['pitches'][fJ] != fH['pitches'][fJ])
                    return !0x1;
            for (let fK = 0x0; fK < fH[oH(0x2a6)][oH(0x57c)]; fK++)
                if (fI[oH(0x2a6)][fK][oH(0x24b)] != fH[oH(0x2a6)][fK]['interval'] || fI[oH(0x2a6)][fK][oH(0x2e3)] != fH['pins'][fK]['time'] || fI[oH(0x2a6)][fK]['size'] != fH['pins'][fK][oH(0x81f)])
                    return !0x1;
        }
        return !0x0;
    }
    function cT(fE) {
        const oI = jI;
        for (const fF of fE) {
            const fG = [];
            for (let fH = 0x0; fH < fF['bars'][oI(0x57c)]; fH++) {
                if (0x0 == fF[oI(0x81a)][fH])
                    continue;
                const fI = fF[oI(0x3cb)][fF[oI(0x81a)][fH] - 0x1];
                let fJ = !0x1;
                for (let fK = 0x0; fK < fG[oI(0x57c)]; fK++) {
                    const fL = fG[fK];
                    if (bB(fI[oI(0x84c)], fL[oI(0x84c)]) && fL[oI(0x58c)]['length'] == fI['notes']['length'] && cS(fI[oI(0x58c)], fL['notes'])) {
                        fJ = !0x0,
                        fF['bars'][fH] = fK + 0x1;
                        break;
                    }
                }
                fJ || (fG[oI(0x557)](fI),
                fF['bars'][fH] = fG['length']);
            }
            for (let fM = 0x0; fM < fG[oI(0x57c)]; fM++)
                fF['patterns'][fM] = fG[fM];
            fF[oI(0x3cb)]['length'] = fG['length'];
        }
    }
    class cU extends bx {
        constructor(fE, fF, fG) {
            const oJ = jI;
            super(),
            fE['song'][oJ(0x68a)] = Math[oJ(0x2f6)](a1[oJ(0x550)], Math['min'](a1[oJ(0x2e6)], Math[oJ(0x874)](fG))),
            fE[oJ(0x7e6)]['changed'](),
            fF != fG && this['W']();
        }
    }
    class cV extends c2 {
        constructor(fE, fF, fG) {
            const oK = jI;
            super(fE),
            this['dt']['echoDelay'] = fG,
            fE[oK(0x7e6)][oK(0x327)](),
            fF != fG && this['W']();
        }
    }
    class cW extends c2 {
        constructor(fE, fF, fG) {
            const oL = jI;
            super(fE),
            this['dt'][oL(0x7b6)] = fG,
            fE[oL(0x7e6)]['changed'](),
            fF != fG && this['W']();
        }
    }
    class cX extends c2 {
        constructor(fE, fF, fG) {
            const oM = jI;
            super(fE),
            this['dt'][oM(0x215)] = fG,
            fE['notifier'][oM(0x327)](),
            fF != fG && this['W']();
        }
    }
    class cY extends c2 {
        constructor(fE, fF, fG) {
            super(fE),
            this['dt']['reverb'] = fG,
            fE['notifier']['changed'](),
            fF != fG && this['W']();
        }
    }
    class cZ extends by {
        constructor(fE, fF, fG, fH, fI=!0x1) {
            const oN = jI;
            super(fI),
            this['$'] = fE,
            this['Gt'] = fF,
            this['tt'] = fG,
            this['P'] = fH,
            this['W'](),
            this[oN(0x734)]();
        }
        ['Y']() {
            const oO = jI;
            this['Gt'][oO(0x58c)]['splice'](this['P'], 0x0, this['tt']),
            this['$'][oO(0x7e6)][oO(0x327)]();
        }
        ['J']() {
            const oP = jI;
            this['Gt']['notes']['splice'](this['P'], 0x1),
            this['$'][oP(0x7e6)]['changed']();
        }
    }
    class d0 extends bH {
        constructor(fE, fF, fG, fH) {
            const oQ = jI;
            super(fE, fF);
            const fI = (this['et'] < 0x0 || fF[oQ(0x790)]) && 0x0 == fG;
            fG -= this['et'],
            fH -= this['et'];
            let fJ, fK = !0x1, fL = this['ot'][0x0]['size'], fM = this['ot'][0x0]['interval'], fN = !0x0;
            for (fJ = 0x0; fJ < this['ot'][oQ(0x57c)]; fJ++) {
                const fO = this['ot'][fJ];
                if (fO['time'] < fG)
                    fL = fO[oQ(0x81f)],
                    fM = fO[oQ(0x24b)];
                else {
                    if (fO['time'] > fG && !fK && (this['rt'][oQ(0x557)](b3(fM, fG, fL)),
                    fK = !0x0),
                    !(fO[oQ(0x2e3)] <= fH))
                        break;
                    if (this['rt']['push'](b3(fO['interval'], fO[oQ(0x2e3)], fO[oQ(0x81f)])),
                    fO[oQ(0x2e3)] == fH) {
                        fN = !0x1;
                        break;
                    }
                }
            }
            fN && this['rt'][oQ(0x557)](b3(this['ot'][fJ][oQ(0x24b)], fH, this['ot'][fJ][oQ(0x81f)])),
            this['ft'](fI);
        }
    }
    class d1 extends bA {
        constructor(fE, fF, fG, fH, fI) {
            const oR = jI;
            super();
            let fJ = 0x0;
            for (; fJ < fF['notes']['length']; ) {
                const fK = fF[oR(0x58c)][fJ];
                if (fK == fI && null != fI)
                    fJ++;
                else {
                    if (fK['end'] <= fG)
                        fJ++;
                    else {
                        if (fK['start'] >= fH)
                            break;
                        if (fK['start'] < fG && fK['end'] > fH) {
                            const fL = fK['clone']();
                            this[oR(0x65e)](new d0(fE,fK,fK['start'],fG)),
                            fJ++,
                            this['append'](new cZ(fE,fF,fL,fJ,!0x1)),
                            this['append'](new d0(fE,fL,fH,fL[oR(0x63e)])),
                            fJ++;
                        } else
                            fK['start'] < fG ? (this[oR(0x65e)](new d0(fE,fK,fK['start'],fG)),
                            fJ++) : fK['end'] > fH ? (this['append'](new d0(fE,fK,fH,fK[oR(0x63e)])),
                            fJ++) : this[oR(0x65e)](new cZ(fE,fF,fK,fJ,!0x0));
                    }
                }
            }
        }
    }
    class d2 extends bA {
        constructor(fE, fF) {
            const oS = jI;
            super();
            let fG = 0x0;
            for (; fG < fF[oS(0x58c)][oS(0x57c)]; ) {
                const fH = fF['notes'][fG];
                if (fH['start'] < fE['selection'][oS(0x4b6)] && fE[oS(0x1c9)]['patternSelectionStart'] < fH[oS(0x63e)]) {
                    const fI = fH[oS(0x1b6)]();
                    this[oS(0x65e)](new d0(fE,fH,fH[oS(0x1b7)],fE[oS(0x1c9)]['patternSelectionStart'])),
                    fG++,
                    this[oS(0x65e)](new cZ(fE,fF,fI,fG,!0x1)),
                    this[oS(0x65e)](new d0(fE,fI,fE[oS(0x1c9)][oS(0x4b6)],fI[oS(0x63e)]));
                } else {
                    if (fH['start'] < fE[oS(0x1c9)]['patternSelectionEnd'] && fE[oS(0x1c9)]['patternSelectionEnd'] < fH[oS(0x63e)]) {
                        const fJ = fH[oS(0x1b6)]();
                        this['append'](new d0(fE,fH,fH[oS(0x1b7)],fE['selection']['patternSelectionEnd'])),
                        fG++,
                        this[oS(0x65e)](new cZ(fE,fF,fJ,fG,!0x1)),
                        this[oS(0x65e)](new d0(fE,fJ,fE[oS(0x1c9)][oS(0x4e1)],fJ['end'])),
                        fG++;
                    } else
                        fG++;
                }
            }
        }
    }
    class d3 extends by {
        constructor(fE, fF, fG, fH, fI=!0x1, fJ=!0x1) {
            const oT = jI;
            super(!0x1),
            this['$'] = fE,
            this['tt'] = fG,
            this['ot'] = fG['pins'],
            this['rt'] = [],
            this['ht'] = fG['pitches'],
            this['lt'] = [];
            const fK = fE[oT(0x3c1)]['getChannelIsNoise'](fF);
            if (fK != fE['song']['getChannelIsNoise'](fE[oT(0x733)]))
                return;
            const fL = fK ? a1[oT(0x71e)] - 0x1 : a1[oT(0x181)];
            for (let fO = 0x0; fO < this['ht'][oT(0x57c)]; fO++) {
                let fP = this['ht'][fO];
                if (fJ && !fK)
                    fP = fH ? Math[oT(0x4c5)](fL, fP + 0xc) : Math[oT(0x2f6)](0x0, fP - 0xc);
                else {
                    if (fH) {
                        for (let fR = fP + 0x1; fR <= fL; fR++)
                            if (fK || fI || a1[oT(0x379)][fE['song']['scale']]['flags'][fR % 0xc]) {
                                fP = fR;
                                break;
                            }
                    } else {
                        for (let fS = fP - 0x1; fS >= 0x0; fS--)
                            if (fK || fI || a1[oT(0x379)][fE[oT(0x3c1)]['scale']]['flags'][fS % 0xc]) {
                                fP = fS;
                                break;
                            }
                    }
                }
                let fQ = !0x1;
                for (let fT = 0x0; fT < this['lt']['length']; fT++)
                    if (this['lt'][fT] == fP) {
                        fQ = !0x0;
                        break;
                    }
                fQ || this['lt']['push'](fP);
            }
            let fM = 0x0
              , fN = fL;
            for (let fU = 0x1; fU < this['lt']['length']; fU++) {
                const fV = this['lt'][0x0] - this['lt'][fU];
                fM < fV && (fM = fV),
                fN > fV + fL && (fN = fV + fL);
            }
            for (const fW of this['ot']) {
                let fX = fW[oT(0x24b)] + this['ht'][0x0];
                if (fX < fM && (fX = fM),
                fX > fN && (fX = fN),
                fJ && !fK)
                    fX = fH ? Math[oT(0x4c5)](fN, fX + 0xc) : Math['max'](fM, fX - 0xc);
                else {
                    if (fH) {
                        for (let fY = fX + 0x1; fY <= fN; fY++)
                            if (fK || fI || a1['scales'][fE[oT(0x3c1)][oT(0x7ad)]]['flags'][fY % 0xc]) {
                                fX = fY;
                                break;
                            }
                    } else {
                        for (let fZ = fX - 0x1; fZ >= fM; fZ--)
                            if (fK || fI || a1[oT(0x379)][fE['song']['scale']]['flags'][fZ % 0xc]) {
                                fX = fZ;
                                break;
                            }
                    }
                }
                fX -= this['lt'][0x0],
                this['rt'][oT(0x557)](b3(fX, fW['time'], fW['size']));
            }
            if (0x0 != this['rt'][0x0]['interval'])
                throw new Error(oT(0x375));
            for (let g0 = 0x1; g0 < this['rt']['length'] - 0x1; )
                this['rt'][g0 - 0x1][oT(0x24b)] == this['rt'][g0]['interval'] && this['rt'][g0]['interval'] == this['rt'][g0 + 0x1][oT(0x24b)] && this['rt'][g0 - 0x1]['size'] == this['rt'][g0][oT(0x81f)] && this['rt'][g0][oT(0x81f)] == this['rt'][g0 + 0x1][oT(0x81f)] ? this['rt']['splice'](g0, 0x1) : g0++;
            this['Y'](),
            this['W']();
        }
        ['Y']() {
            const oU = jI;
            this['tt']['pins'] = this['rt'],
            this['tt'][oU(0x68d)] = this['lt'],
            this['$']['notifier']['changed']();
        }
        ['J']() {
            const oV = jI;
            this['tt']['pins'] = this['ot'],
            this['tt']['pitches'] = this['ht'],
            this['$']['notifier'][oV(0x327)]();
        }
    }
    class d4 extends bA {
        constructor(fE, fF, fG, fH, fI=!0x1, fJ=!0x1) {
            const oW = jI;
            super(),
            fE[oW(0x1c9)]['patternSelectionActive'] && this[oW(0x65e)](new d2(fE,fG));
            for (const fK of fG['notes'])
                fE['selection']['patternSelectionActive'] && (fK['end'] <= fE['selection'][oW(0x4b6)] || fK[oW(0x1b7)] >= fE[oW(0x1c9)][oW(0x4e1)]) || this[oW(0x65e)](new d3(fE,fF,fK,fH,fI,fJ));
        }
    }
    class d5 extends bx {
        constructor(fE, fF, fG, fH, fI) {
            const oX = jI;
            super(),
            fE[oX(0x1c9)]['boxSelectionX0'] = fF,
            fE['selection'][oX(0x748)] = fG,
            fE[oX(0x1c9)][oX(0x1e5)] = fH,
            fE[oX(0x1c9)]['boxSelectionY1'] = fI,
            fE['notifier']['changed'](),
            this['W']();
        }
    }
    class d6 extends by {
        constructor(fE, fF, fG) {
            const oY = jI;
            super(!0x1),
            this['$'] = fE,
            this['et'] = fE['selection']['patternSelectionStart'],
            this['it'] = fE[oY(0x1c9)][oY(0x4e1)],
            this['$t'] = fE['selection'][oY(0x3cf)],
            this['st'] = fF,
            this['nt'] = fG,
            this['_t'] = fF < fG,
            this['Y'](),
            this['W']();
        }
        ['Y']() {
            const oZ = jI;
            this['$'][oZ(0x1c9)][oZ(0x4b6)] = this['st'],
            this['$']['selection']['patternSelectionEnd'] = this['nt'],
            this['$'][oZ(0x1c9)][oZ(0x3cf)] = this['_t'],
            this['$'][oZ(0x7e6)]['changed']();
        }
        ['J']() {
            const p0 = jI;
            this['$']['selection'][p0(0x4b6)] = this['et'],
            this['$']['selection'][p0(0x4e1)] = this['it'],
            this['$']['selection'][p0(0x3cf)] = this['$t'],
            this['$']['notifier'][p0(0x327)]();
        }
    }
    class d7 extends bA {
        constructor(fE, fF, fG, fH, fI) {
            const p1 = jI;
            if (super(),
            0x0 == fH && 0x0 == fI)
                return;
            fE['selection']['patternSelectionActive'] && this['append'](new d2(fE,fG));
            const fJ = fE['selection']['patternSelectionStart']
              , fK = fE['selection'][p1(0x4e1)]
              , fL = Math['max'](0x0, Math['min'](fE[p1(0x3c1)][p1(0x6c9)] * a1['partsPerBeat'], fJ + fH))
              , fM = Math[p1(0x2f6)](0x0, Math['min'](fE['song'][p1(0x6c9)] * a1[p1(0x58d)], fK + fH));
            fL == fM ? this['append'](new d1(fE,fG,fJ,fK)) : fH < 0x0 ? this[p1(0x65e)](new d1(fE,fG,fL,Math[p1(0x4c5)](fJ, fM))) : this['append'](new d1(fE,fG,Math['max'](fK, fL),fM)),
            this[p1(0x65e)](new d6(fE,fL,fM));
            const fN = [];
            let fO = 0x0
              , fP = 0x0;
            for (; fP < fG['notes'][p1(0x57c)]; ) {
                const fQ = fG[p1(0x58c)][fP];
                fQ[p1(0x63e)] <= fJ || fQ[p1(0x1b7)] >= fK ? (fP++,
                fQ[p1(0x63e)] <= fL && (fO = fP)) : (fN[p1(0x557)](fQ[p1(0x1b6)]()),
                this['append'](new cZ(fE,fG,fQ,fP,!0x0)));
            }
            for (const fR of fN)
                if (fR['start'] += fH,
                fR[p1(0x63e)] += fH,
                !(fR[p1(0x63e)] <= fL || fR[p1(0x1b7)] >= fM)) {
                    this[p1(0x65e)](new cZ(fE,fG,fR,fO++,!0x1)),
                    this[p1(0x65e)](new d0(fE,fR,Math[p1(0x2f6)](fR[p1(0x1b7)], fL),Math[p1(0x4c5)](fM, fR['end'])));
                    for (let fS = 0x0; fS < Math['abs'](fI); fS++)
                        this[p1(0x65e)](new d3(fE,fF,fR,fI > 0x0,fE[p1(0x7ed)]['notesOutsideScale']));
                }
        }
    }
    class d8 extends bz {
        constructor(fE, fF, fG, fH, fI) {
            const p2 = jI;
            super();
            for (let fJ = fH; fJ < fH + fI; fJ++) {
                const fK = {};
                for (let fL = fF; fL < fF + fG; fL++) {
                    const fM = fE['song']['channels'][fJ][p2(0x81a)][fL];
                    if (0x0 != fM) {
                        if (null == fK[String(fM)]) {
                            let fN = !0x1;
                            for (let fO = 0x0; fO < fE['song'][p2(0x647)]; fO++)
                                if ((fO < fF || fO >= fF + fG) && fE[p2(0x3c1)]['channels'][fJ]['bars'][fO] == fM) {
                                    fN = !0x0;
                                    break;
                                }
                            if (fN) {
                                const fP = fE[p2(0x3c1)][p2(0x4d5)](fJ, fL);
                                this[p2(0x65e)](new bN(fE,0x0,fL,fJ,0x1,0x1)),
                                this[p2(0x65e)](new cE(fE,fJ,fL));
                                const fQ = fE['song']['getPattern'](fJ, fL);
                                if (null == fQ)
                                    throw new Error();
                                this['append'](new cA(fE,fQ,fP['notes'],0x0,a1[p2(0x58d)] * fE[p2(0x3c1)]['beatsPerBar'],a1[p2(0x58d)] * fE[p2(0x3c1)][p2(0x6c9)])),
                                fQ['instruments']['length'] = 0x0,
                                fQ[p2(0x84c)][p2(0x557)](...fP['instruments']),
                                fK[String(fM)] = fE['song']['channels'][fJ]['bars'][fL];
                            } else
                                fK[String(fM)] = fM;
                        }
                        this[p2(0x65e)](new bN(fE,fK[String(fM)],fL,fJ,0x1,0x1));
                    }
                }
            }
        }
    }
    class d9 extends bx {
        constructor(fE, fF, fG) {
            const p3 = jI;
            super(),
            fE[p3(0x1c9)]['patternSelectionActive'] && new d2(fE,fF);
            const fH = a1['maxPitch'];
            for (const fI of fF[p3(0x58c)]) {
                if (fE['selection']['patternSelectionActive'] && (fI[p3(0x63e)] <= fE[p3(0x1c9)]['patternSelectionStart'] || fI[p3(0x1b7)] >= fE['selection']['patternSelectionEnd']))
                    continue;
                const fJ = []
                  , fK = [];
                for (let fN = 0x0; fN < fI['pitches'][p3(0x57c)]; fN++) {
                    const fO = fI[p3(0x68d)][fN]
                      , fP = fG[fO % 0xc] + (fO - fO % 0xc);
                    -0x1 == fJ['indexOf'](fP) && fJ[p3(0x557)](fP);
                }
                let fL = 0x0
                  , fM = fH;
                for (let fQ = 0x1; fQ < fJ['length']; fQ++) {
                    const fR = fJ[0x0] - fJ[fQ];
                    fL < fR && (fL = fR),
                    fM > fR + fH && (fM = fR + fH);
                }
                for (const fS of fI[p3(0x2a6)]) {
                    let fT = fS['interval'] + fI[p3(0x68d)][0x0];
                    fT < fL && (fT = fL),
                    fT > fM && (fT = fM);
                    const fU = fG[fT % 0xc] + (fT - fT % 0xc);
                    fK['push'](b3(fU - fJ[0x0], fS[p3(0x2e3)], fS['size']));
                }
                if (0x0 != fK[0x0][p3(0x24b)])
                    throw new Error(p3(0x375));
                for (let fV = 0x1; fV < fK[p3(0x57c)] - 0x1; )
                    fK[fV - 0x1]['interval'] == fK[fV][p3(0x24b)] && fK[fV]['interval'] == fK[fV + 0x1][p3(0x24b)] && fK[fV - 0x1]['size'] == fK[fV][p3(0x81f)] && fK[fV]['size'] == fK[fV + 0x1]['size'] ? fK[p3(0x712)](fV, 0x1) : fV++;
                fI[p3(0x68d)] = fJ,
                fI[p3(0x2a6)] = fK;
            }
            this['W'](),
            fE['notifier'][p3(0x327)]();
        }
    }
    class da extends bx {
        constructor(fE, fF, fG) {
            const p4 = jI;
            super(),
            fE[p4(0x3c1)]['channels'][fE[p4(0x733)]]['instruments'][fE['getCurrentInstrument']()][p4(0x7c6)] = fG,
            fE[p4(0x7e6)][p4(0x327)](),
            fF != fG && this['W']();
        }
    }
    class db extends bx {
        constructor(fE, fF, fG) {
            const p5 = jI;
            super(),
            fE['song']['channels'][fE[p5(0x733)]]['instruments'][fE['getCurrentInstrument']()]['pan'] = fG,
            fE['notifier']['changed'](),
            fF != fG && this['W']();
        }
    }
    class dc extends by {
        constructor(fE, fF, fG, fH, fI, fJ) {
            const p6 = jI;
            super(!0x1),
            this['$'] = fE,
            this['tt'] = fF,
            this['ot'] = fF['pins'],
            this['rt'] = [];
            let fK = !0x1;
            for (const fL of fF['pins'])
                fL['time'] < fG ? fJ ? this['rt'][p6(0x557)](b3(fL[p6(0x24b)], fL['time'], fH)) : this['rt']['push'](fL) : fL[p6(0x2e3)] == fG ? (this['rt']['push'](b3(fI, fG, fH)),
                fK = !0x0) : (fJ || fK || (this['rt']['push'](b3(fI, fG, fH)),
                fK = !0x0),
                fJ ? this['rt']['push'](b3(fL[p6(0x24b)], fL[p6(0x2e3)], fH)) : this['rt']['push'](fL));
            bE(this['rt']),
            this['Y'](),
            this['W']();
        }
        ['Y']() {
            const p7 = jI;
            this['tt'][p7(0x2a6)] = this['rt'],
            this['$'][p7(0x7e6)]['changed']();
        }
        ['J']() {
            const p8 = jI;
            this['tt']['pins'] = this['ot'],
            this['$'][p8(0x7e6)][p8(0x327)]();
        }
    }
    class dd extends bx {
        constructor(fE, fF) {
            const p9 = jI;
            super();
            const fG = fE[p9(0x3c1)][p9(0x7b3)][fE['channel']][p9(0x84c)][fE[p9(0x3fe)]()];
            fG['chipWave'] != fF && (fG[p9(0x556)] = fF,
            fG['preset'] = fG[p9(0x7d5)],
            fE['notifier'][p9(0x327)](),
            this['W']());
        }
    }
    class df extends bx {
        constructor(fE, fF) {
            const pa = jI;
            super();
            const fG = fE[pa(0x3c1)][pa(0x7b3)][fE[pa(0x733)]][pa(0x84c)][fE[pa(0x3fe)]()];
            fG[pa(0x744)] != fF && (fG['chipNoise'] = fF,
            fG[pa(0x760)] = fG['type'],
            fE[pa(0x7e6)][pa(0x327)](),
            this['W']());
        }
    }
    class dg extends bx {
        constructor(fE) {
            const pb = jI;
            super();
            const fF = fE['song']['channels'][fE['channel']]['instruments'][fE[pb(0x3fe)]()];
            fF['addEnvelope'](0x0, 0x0, 0x0),
            fF[pb(0x760)] = fF[pb(0x7d5)],
            fE['notifier'][pb(0x327)](),
            this['W']();
        }
    }
    class dh extends bx {
        constructor(fE, fF) {
            const pc = jI;
            super();
            const fG = fE['song']['channels'][fE['channel']]['instruments'][fE['getCurrentInstrument']()];
            fG[pc(0x863)]--;
            for (let fH = fF; fH < fG[pc(0x863)]; fH++)
                fG[pc(0x6ac)][fH][pc(0x46a)] = fG[pc(0x6ac)][fH + 0x1][pc(0x46a)],
                fG['envelopes'][fH]['index'] = fG['envelopes'][fH + 0x1][pc(0x2c5)],
                fG['envelopes'][fH]['envelope'] = fG[pc(0x6ac)][fH + 0x1]['envelope'];
            fG['preset'] = fG[pc(0x7d5)],
            fE[pc(0x7e6)]['changed'](),
            this['W']();
        }
    }
    class dj extends bx {
        constructor(fE, fF, fG, fH) {
            const pd = jI;
            super();
            const fI = fE['song']['channels'][fE[pd(0x733)]][pd(0x84c)][fE['getCurrentInstrument']()]
              , fJ = fI['envelopes'][fF]['target']
              , fK = fI[pd(0x6ac)][fF][pd(0x2c5)];
            fJ == fG && fK == fH || (fI[pd(0x6ac)][fF][pd(0x46a)] = fG,
            fI[pd(0x6ac)][fF][pd(0x2c5)] = fH,
            fI[pd(0x760)] = fI['type'],
            fE[pd(0x7e6)]['changed'](),
            this['W']());
        }
    }
    class dk extends bx {
        constructor(fE, fF, fG) {
            const pe = jI;
            super();
            const fH = fE[pe(0x3c1)]['channels'][fE['channel']]['instruments'][fE[pe(0x3fe)]()];
            fH['envelopes'][fF]['envelope'] != fG && (fH['envelopes'][fF]['envelope'] = fG,
            fH[pe(0x760)] = fH['type'],
            fE['notifier']['changed'](),
            this['W']());
        }
    }
    class dl {
        constructor() {
            const pf = jI;
            this['valid'] = !0x1,
            this[pf(0x397)] = null,
            this[pf(0x478)] = null,
            this['nextNote'] = null,
            this['pitch'] = 0x0,
            this[pf(0x407)] = -0x1,
            this['curIndex'] = 0x0,
            this['start'] = 0x0,
            this[pf(0x63e)] = 0x0,
            this['part'] = 0x0,
            this[pf(0x268)] = 0x0,
            this['nearPinIndex'] = 0x0,
            this['pins'] = [];
        }
    }
    class dm {
        constructor(fE, fF, fG) {
            const pg = jI;
            this['$'] = fE,
            this['Ut'] = fF,
            this['Vt'] = fG,
            this['Wt'] = aE['pattern']({
                'id': 'patternEditorNoteBackground' + this['Vt'],
                'x': '0',
                'y': '0',
                'patternUnits': pg(0x822)
            }),
            this['jt'] = aE['pattern']({
                'id': pg(0x4ff) + this['Vt'],
                'x': '0',
                'y': '0',
                'patternUnits': 'userSpaceOnUse'
            }),
            this['Kt'] = aE['rect']({
                'x': '0',
                'y': '0',
                'pointer-events': 'none',
                'fill': 'url(#patternEditorNoteBackground' + this['Vt'] + ')'
            }),
            this['Yt'] = aE[pg(0x3bd)](),
            this['Jt'] = aE['rect']({
                'x': '0',
                'y': '0',
                'width': '4',
                'fill': aL['playhead'],
                'pointer-events': pg(0x3a9)
            }),
            this['Qt'] = aE['rect']({
                'fill': aL[pg(0x424)],
                'stroke': aL[pg(0x709)],
                'stroke-width': 0x2,
                'stroke-dasharray': '5,\x203',
                'pointer-events': 'none',
                'visibility': 'hidden'
            }),
            this['Xt'] = aE[pg(0x388)]({
                'fill': 'none',
                'stroke': aL[pg(0x709)],
                'stroke-width': '2',
                'pointer-events': pg(0x3a9)
            }),
            this['Zt'] = aE[pg(0x3bd)]({
                'style': pg(0x21f) + aL['editorBackground'] + ';\x20touch-action:\x20none;\x20position:\x20absolute;',
                'width': '100%',
                'height': pg(0x1c7)
            }, aE['defs'](this['Wt'], this['jt']), this['Kt'], this['Qt'], this['Yt'], this['Xt'], this['Jt']),
            this['container'] = aD[pg(0x504)]({
                'style': pg(0x787)
            }, this['Zt']),
            this['te'] = [],
            this['ee'] = aE[pg(0x832)](),
            this['ie'] = -0x1,
            this['se'] = 0x0,
            this['ne'] = 0x0,
            this['oe'] = !0x1,
            this['re'] = !0x1,
            this['he'] = !0x1,
            this['ae'] = !0x1,
            this['le'] = !0x1,
            this['ce'] = [],
            this['ue'] = 0x0,
            this['pe'] = 0x0,
            this['fe'] = !0x1,
            this['de'] = !0x1,
            this['me'] = 0x0,
            this['ye'] = !0x1,
            this['ge'] = !0x1,
            this['be'] = !0x1,
            this['we'] = 0x0,
            this['ve'] = 0x0,
            this['ke'] = 0x0,
            this['Me'] = !0x1,
            this['xe'] = null,
            this['Se'] = null,
            this['Fe'] = !0x1,
            this['Pe'] = new dl(),
            this['Gt'] = null,
            this['Ie'] = 0x0,
            this['qe'] = 0x0,
            this['Te'] = -0x1,
            this['Ee'] = -0x1,
            this['Ce'] = -0x1,
            this['Le'] = -0x1,
            this['ze'] = !0x1,
            this['De'] = !0x1,
            this['Ae'] = -0x1,
            this['Be'] = -0x1,
            this['Oe'] = -0x1,
            this['Ne'] = -0x1,
            this['resetCopiedPins'] = () => {
                const ph = pg
                  , fH = this['Re']();
                this['ce']['length'] = this['$']['song'][ph(0x777)]();
                for (let fI = 0x0; fI < this['$'][ph(0x3c1)]['pitchChannelCount']; fI++)
                    this['ce'][fI] = [b3(0x0, 0x0, a1['noteSizeMax']), b3(0x0, fH, a1[ph(0x483)])];
                for (let fJ = this['$']['song'][ph(0x1c4)]; fJ < this['$'][ph(0x3c1)][ph(0x777)](); fJ++)
                    this['ce'][fJ] = [b3(0x0, 0x0, a1['noteSizeMax']), b3(0x0, fH, 0x0)];
            }
            ,
            this['He'] = fH => {
                const pi = pg;
                this['le'] && !this['de'] && !this['he'] && this['oe'] && performance['now']() > this['me'] + 0x3e8 && this['Pe']['valid'] && this['$']['lastChangeWas'](this['xe']) && (this['xe'][pi(0x6b3)](),
                this['de'] = !0x0,
                this['Ge'](),
                this['$'][pi(0x7e6)]['notifyWatchers']());
                const fI = Math[pi(0x4fb)](this['$'][pi(0x3eb)][pi(0x336)]);
                if (this['$'][pi(0x3eb)]['playing'] && (null != this['Gt'] && this['$']['song']['getPattern'](this['$']['channel'], Math[pi(0x4fb)](this['$'][pi(0x3eb)][pi(0x336)])) == this['Gt'] || Math[pi(0x4fb)](this['$']['synth'][pi(0x336)]) == this['$']['bar'] + this['Vt'])) {
                    this['Jt'][pi(0x1d8)]('visibility', 'visible');
                    const fJ = this['$']['synth']['playhead'] - fI;
                    Math['abs'](fJ - this['Ie']) > 0.1 ? this['Ie'] = fJ : this['Ie'] += 0.2 * (fJ - this['Ie']),
                    this['Jt'][pi(0x1d8)]('x', '' + ap(this['Ie'] * this['$e'] - 0x2));
                } else
                    this['Jt'][pi(0x1d8)]('visibility', pi(0x47b));
                this['$'][pi(0x3eb)][pi(0x4b2)] && (this['$']['synth'][pi(0x434)] || this['$']['prefs'][pi(0x513)]) && this['Ne'] != fI && (new bV(this['$'],this['$']['channel'],fI),
                this['$']['notifier'][pi(0x1ba)]()),
                this['Ne'] = fI,
                this['$']['currentPatternIsDirty'] && this['_e'](),
                window['requestAnimationFrame'](this['He']);
            }
            ,
            this['Ue'] = fH => {
                this['re'] || (this['re'] = !0x0,
                this['le'] = !0x1);
            }
            ,
            this['Ve'] = fH => {
                this['re'] && (this['re'] = !0x1);
            }
            ,
            this['We'] = fH => {
                const pj = pg;
                fH[pj(0x1e4)]();
                const fI = this['Zt'][pj(0x26a)]();
                this['se'] = ((fH['clientX'] || fH['pageX']) - fI['left']) * this['$e'] / (fI[pj(0x576)] - fI[pj(0x2bf)]),
                this['ne'] = ((fH['clientY'] || fH[pj(0x710)]) - fI[pj(0x5b6)]) * this['je'] / (fI[pj(0x264)] - fI['top']),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['le'] = !0x1,
                this['fe'] = fH[pj(0x799)] || fH['metaKey'],
                this['de'] = fH['shiftKey'],
                this['Ge']();
            }
            ,
            this['Ke'] = fH => {
                const pk = pg;
                fH[pk(0x1e4)]();
                const fI = this['Zt'][pk(0x26a)]();
                this['se'] = (fH['touches'][0x0][pk(0x430)] - fI[pk(0x2bf)]) * this['$e'] / (fI['right'] - fI['left']),
                this['ne'] = (fH[pk(0x625)][0x0][pk(0x361)] - fI[pk(0x5b6)]) * this['je'] / (fI['bottom'] - fI[pk(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['le'] = !0x0,
                this['fe'] = fH['ctrlKey'] || fH['metaKey'],
                this['de'] = fH['shiftKey'],
                this['me'] = performance[pk(0x23b)](),
                this['Ge']();
            }
            ,
            this['Ye'] = fH => {
                const pl = pg
                  , fI = this['Zt']['getBoundingClientRect']();
                this['se'] = ((fH[pl(0x430)] || fH['pageX']) - fI[pl(0x2bf)]) * this['$e'] / (fI[pl(0x576)] - fI[pl(0x2bf)]),
                this['ne'] = ((fH['clientY'] || fH['pageY']) - fI[pl(0x5b6)]) * this['je'] / (fI[pl(0x264)] - fI[pl(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['le'] = !0x1,
                this['Je']();
            }
            ,
            this['Qe'] = fH => {
                const pm = pg;
                if (!this['oe'])
                    return;
                fH[pm(0x1e4)]();
                const fI = this['Zt'][pm(0x26a)]();
                this['se'] = (fH[pm(0x625)][0x0]['clientX'] - fI['left']) * this['$e'] / (fI['right'] - fI[pm(0x2bf)]),
                this['ne'] = (fH[pm(0x625)][0x0]['clientY'] - fI[pm(0x5b6)]) * this['je'] / (fI[pm(0x264)] - fI[pm(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Je']();
            }
            ,
            this['Xe'] = fH => {
                const pn = pg;
                if (!this['Pe']['valid'])
                    return;
                const fI = this['$']['lastChangeWas'](this['xe']);
                if (this['oe'] && fI && null != this['xe']) {
                    if (this['be'])
                        this['$']['record'](this['xe']),
                        this['xe'] = null;
                    else {
                        if (this['ye'] || this['ge'] || this['de'])
                            this['Ze'](this['xe']),
                            this['xe'] = null;
                        else {
                            if (this['he'] || null == this['Pe'][pn(0x478)] || !this['xe']['isNoop']() || this['ye'] || this['ge'] || this['be'] || this['de'])
                                this['$'][pn(0x235)](this['xe']),
                                this['xe'] = null;
                            else {
                                if (null == this['Gt'])
                                    throw new Error();
                                const fJ = new bA();
                                if (fJ[pn(0x65e)](new d6(this['$'],0x0,0x0)),
                                -0x1 == this['Pe']['pitchIndex']) {
                                    if (this['Pe']['curNote'][pn(0x68d)]['length'] == a1[pn(0x5d4)] && fJ['append'](new cx(this['$'],this['Pe']['curNote'],this['Pe'][pn(0x478)][pn(0x68d)][0x0],0x0,!0x0)),
                                    fJ['append'](new cx(this['$'],this['Pe']['curNote'],this['Pe']['pitch'],this['Pe']['curNote']['pitches']['length'])),
                                    this['ti'](this['Pe']['curNote']),
                                    this['$'][pn(0x7ed)][pn(0x652)] && !this['$']['synth']['playing']) {
                                        const fK = Math['min'](a1[pn(0x58d)], this['Pe']['end'] - this['Pe'][pn(0x1b7)]);
                                        this['$']['performance'][pn(0x2e2)](this['Pe'][pn(0x478)]['pitches'], fK);
                                    }
                                } else
                                    0x1 == this['Pe']['curNote']['pitches'][pn(0x57c)] ? fJ[pn(0x65e)](new cZ(this['$'],this['Gt'],this['Pe'][pn(0x478)],this['Pe']['curIndex'],!0x0)) : fJ[pn(0x65e)](new cx(this['$'],this['Pe'][pn(0x478)],this['Pe']['pitch'],this['Pe'][pn(0x478)][pn(0x68d)][pn(0x2fb)](this['Pe']['pitch']),!0x0));
                                this['$'][pn(0x235)](fJ);
                            }
                        }
                    }
                }
                this['oe'] = !0x1,
                this['he'] = !0x1,
                this['ye'] = !0x1,
                this['ge'] = !0x1,
                this['be'] = !0x1,
                this['Fe'] = !0x1,
                this['ei'](),
                this['ii']();
            }
            ;
            for (let fH = 0x0; fH < a1[pg(0x36d)]; fH++) {
                const fI = aE['rect']();
                fI[pg(0x1d8)]('x', '1'),
                fI[pg(0x1d8)]('fill', 0x0 == fH ? aL['tonic'] : aL[pg(0x444)]),
                this['Wt']['appendChild'](fI),
                this['te'][fH] = fI;
            }
            this['ee']['setAttribute']('x', '1'),
            this['ee'][pg(0x1d8)]('y', '1'),
            this['ee'][pg(0x1d8)]('fill', aL[pg(0x444)]),
            this['jt']['appendChild'](this['ee']),
            this['Ut'] ? (this['ei'](),
            this['ii'](),
            window[pg(0x20e)](this['He']),
            this['Zt'][pg(0x258)]('mousedown', this['We']),
            document['addEventListener']('mousemove', this['Ye']),
            document['addEventListener']('mouseup', this['Xe']),
            this['Zt']['addEventListener'](pg(0x1f3), this['Ue']),
            this['Zt']['addEventListener'](pg(0x82c), this['Ve']),
            this['Zt']['addEventListener'](pg(0x4c7), this['Ke']),
            this['Zt'][pg(0x258)](pg(0x79b), this['Qe']),
            this['Zt']['addEventListener'](pg(0x3d6), this['Xe']),
            this['Zt'][pg(0x258)]('touchcancel', this['Xe'])) : (this['Jt'][pg(0x821)][pg(0x714)] = pg(0x3a9),
            this['Zt']['appendChild'](aE[pg(0x832)]({
                'x': 0x0,
                'y': 0x0,
                'width': 0x2710,
                'height': 0x2710,
                'fill': aL['editorBackground'],
                'style': pg(0x377)
            }))),
            this['resetCopiedPins']();
        }
        ['si']() {
            const po = jI;
            return this['$'][po(0x3c1)]['getChannelIsNoise'](this['$']['channel']) ? a1['drumCount'] - 0x1 : a1['maxPitch'];
        }
        ['Re']() {
            const pp = jI
              , fE = a1['rhythms'][this['$'][pp(0x3c1)][pp(0x237)]][pp(0x4b7)];
            return fE % 0x4 == 0x0 ? a1[pp(0x58d)] / 0x2 : fE % 0x3 == 0x0 ? a1[pp(0x58d)] / 0x3 : fE % 0x2 == 0x0 ? a1[pp(0x58d)] / 0x2 : a1[pp(0x58d)];
        }
        ['ni']() {
            const pq = jI;
            return a1[pq(0x58d)] / a1[pq(0x307)][this['$']['song']['rhythm']]['stepsPerBeat'];
        }
        ['oi'](fE) {
            const fF = this['ni']();
            return Math['floor'](fE / fF) * fF;
        }
        ['ei']() {
            const pr = jI;
            if (this['Pe'] = new dl(),
            this['se'] < 0x0 || this['se'] > this['$e'] || this['ne'] < 0x0 || this['ne'] > this['je'] || this['ie'] <= 0x0)
                return;
            const fE = this['ni']();
            if (this['Pe'][pr(0x268)] = this['se'] / this['ri'],
            this['Pe']['part'] = Math[pr(0x4fb)](Math[pr(0x2f6)](0x0, Math[pr(0x4c5)](this['$']['song'][pr(0x6c9)] * a1['partsPerBeat'] - fE, this['Pe']['exactPart'])) / fE) * fE,
            null != this['Gt']) {
                for (const fG of this['Gt'][pr(0x58c)])
                    if (fG[pr(0x63e)] <= this['Pe'][pr(0x268)])
                        this['Pe']['prevNote'] = fG,
                        this['Pe'][pr(0x371)]++;
                    else {
                        if (fG[pr(0x1b7)] <= this['Pe'][pr(0x268)] && fG[pr(0x63e)] > this['Pe']['exactPart'])
                            this['Pe'][pr(0x478)] = fG;
                        else {
                            if (fG[pr(0x1b7)] > this['Pe']['exactPart']) {
                                this['Pe']['nextNote'] = fG;
                                break;
                            }
                        }
                    }
            }
            let fF = this['hi'](this['ne']);
            if (null != this['Pe']['curNote']) {
                this['Pe'][pr(0x1b7)] = this['Pe'][pr(0x478)]['start'],
                this['Pe']['end'] = this['Pe'][pr(0x478)][pr(0x63e)],
                this['Pe'][pr(0x2a6)] = this['Pe'][pr(0x478)][pr(0x2a6)];
                let fH, fI = 0x0, fJ = 0x0, fK = this['Pe'][pr(0x478)][pr(0x2a6)][0x0];
                for (let fO = 0x1; fO < this['Pe']['curNote']['pins'][pr(0x57c)]; fO++) {
                    fH = fK,
                    fK = this['Pe'][pr(0x478)][pr(0x2a6)][fO];
                    const fP = this['ri'] * (this['Pe'][pr(0x478)][pr(0x1b7)] + fH['time'])
                      , fQ = this['ri'] * (this['Pe']['curNote']['start'] + fK[pr(0x2e3)]);
                    if (this['se'] > fQ)
                        continue;
                    if (this['se'] < fP)
                        throw new Error();
                    const fR = (this['se'] - fP) / (fQ - fP)
                      , fS = Math['sqrt'](0x1 / Math[pr(0x74f)](0x4) - Math[pr(0x3b6)](fR - 0.5, 0x2)) - 0.5
                      , fT = Math[pr(0x216)](fK[pr(0x24b)] - fH[pr(0x24b)]);
                    fI = fH[pr(0x24b)] * (0x1 - fR) + fK[pr(0x24b)] * fR,
                    fJ = fS * fT + 0.95;
                    break;
                }
                let fL = Number['MAX_VALUE']
                  , fM = -Number[pr(0x630)]
                  , fN = Number['MAX_VALUE'];
                for (const fU of this['Pe']['curNote']['pins']) {
                    fL > fU[pr(0x24b)] && (fL = fU['interval']),
                    fM < fU['interval'] && (fM = fU[pr(0x24b)]);
                    const fV = Math[pr(0x216)](this['Pe'][pr(0x478)][pr(0x1b7)] + fU['time'] - this['se'] / this['ri']);
                    fN > fV && (fN = fV,
                    this['Pe'][pr(0x35a)] = this['Pe']['curNote'][pr(0x2a6)]['indexOf'](fU));
                }
                if (fF -= fI,
                this['Pe'][pr(0x403)] = this['ai'](fF, -fL, this['si']() - fM),
                !this['$']['song'][pr(0x67a)](this['$'][pr(0x733)])) {
                    let fW = fJ;
                    for (let fX = 0x0; fX < this['Pe'][pr(0x478)][pr(0x68d)][pr(0x57c)]; fX++) {
                        const fY = Math['abs'](this['Pe']['curNote'][pr(0x68d)][fX] - fF + 0.5);
                        fY > fW || (fW = fY,
                        this['Pe']['pitch'] = this['Pe'][pr(0x478)]['pitches'][fX]);
                    }
                }
                for (let fZ = 0x0; fZ < this['Pe']['curNote'][pr(0x68d)][pr(0x57c)]; fZ++)
                    if (this['Pe']['curNote']['pitches'][fZ] == this['Pe']['pitch']) {
                        this['Pe']['pitchIndex'] = fZ;
                        break;
                    }
            } else {
                this['Pe']['pitch'] = this['ai'](fF, 0x0, this['si']());
                const g0 = this['li'][this['li'][pr(0x57c)] - 0x1]['time']
                  , g1 = Math['floor'](this['Pe'][pr(0x46b)] / a1['partsPerBeat'])
                  , g2 = this['Re']()
                  , g3 = this['Pe']['part'] % a1[pr(0x58d)];
                if (0x1 == g0)
                    this['Pe']['start'] = this['Pe'][pr(0x46b)];
                else {
                    if (g0 > a1[pr(0x58d)])
                        this['Pe'][pr(0x1b7)] = g1 * a1['partsPerBeat'];
                    else {
                        if (g0 == a1['partsPerBeat'])
                            this['Pe']['start'] = g1 * a1['partsPerBeat'],
                            g2 < a1[pr(0x58d)] && g3 > g2 && (this['Pe'][pr(0x1b7)] += Math['floor'](g3 / g2) * g2);
                        else {
                            this['Pe']['start'] = g1 * a1[pr(0x58d)];
                            let g6 = a1['partsPerBeat'] % g0 == 0x0 ? g0 : Math['min'](g0, g2);
                            for (; g6 < g2 && a1[pr(0x58d)] % g6 != 0x0; )
                                g6++;
                            this['Pe']['start'] += Math['floor'](g3 / g6) * g6;
                        }
                    }
                }
                this['Pe']['end'] = this['Pe']['start'] + g0;
                let g4 = 0x0
                  , g5 = this['$'][pr(0x3c1)]['beatsPerBar'] * a1[pr(0x58d)];
                if (null != this['Pe'][pr(0x397)] && (g4 = this['Pe'][pr(0x397)][pr(0x63e)]),
                null != this['Pe'][pr(0x291)] && (g5 = this['Pe'][pr(0x291)][pr(0x1b7)]),
                this['Pe']['start'] < g4 ? (this['Pe'][pr(0x1b7)] = g4,
                this['Pe']['end'] = this['Pe'][pr(0x1b7)] + g0,
                this['Pe'][pr(0x63e)] > g5 && (this['Pe']['end'] = g5)) : this['Pe'][pr(0x63e)] > g5 && (this['Pe']['end'] = g5,
                this['Pe']['start'] = this['Pe'][pr(0x63e)] - g0,
                this['Pe'][pr(0x1b7)] < g4 && (this['Pe'][pr(0x1b7)] = g4)),
                this['Pe'][pr(0x63e)] - this['Pe']['start'] == g0)
                    this['Pe'][pr(0x2a6)] = this['li'];
                else {
                    this['Pe']['pins'] = [];
                    for (const g7 of this['li']) {
                        if (!(g7[pr(0x2e3)] <= this['Pe'][pr(0x63e)] - this['Pe'][pr(0x1b7)])) {
                            this['Pe'][pr(0x2a6)]['push'](b3(0x0, this['Pe']['end'] - this['Pe'][pr(0x1b7)], g7['size']));
                            break;
                        }
                        if (this['Pe'][pr(0x2a6)]['push'](b3(0x0, g7['time'], g7['size'])),
                        g7['time'] == this['Pe'][pr(0x63e)] - this['Pe']['start'])
                            break;
                    }
                }
            }
            this['Pe'][pr(0x37d)] = !0x0;
        }
        ['ci']() {
            const ps = jI;
            return this['Pe'][ps(0x37d)] && this['$'][ps(0x1c9)][ps(0x3cf)] && this['$'][ps(0x1c9)]['patternSelectionStart'] <= this['Pe']['exactPart'] && this['Pe']['exactPart'] <= this['$']['selection']['patternSelectionEnd'];
        }
        ['ui']() {
            const pt = jI;
            return this['Pe']['valid'] && this['$']['selection'][pt(0x3cf)] && -0x1 == this['Pe'][pt(0x407)] && this['$'][pt(0x1c9)][pt(0x4b6)] - 0x3 <= this['Pe'][pt(0x268)] && this['Pe'][pt(0x268)] <= this['$']['selection'][pt(0x4b6)] + 1.25;
        }
        ['pi']() {
            const pu = jI;
            return this['Pe'][pu(0x37d)] && this['$']['selection'][pu(0x3cf)] && -0x1 == this['Pe']['pitchIndex'] && this['$']['selection'][pu(0x4e1)] - 1.25 <= this['Pe']['exactPart'] && this['Pe']['exactPart'] <= this['$'][pu(0x1c9)][pu(0x4e1)] + 0x3;
        }
        ['hi'](fE) {
            const pv = jI;
            return Math[pv(0x2f6)](0x0, Math['min'](this['fi'] - 0x1, this['fi'] - fE / this['ie'])) + this['qe'];
        }
        ['ai'](fE, fF, fG) {
            const pw = jI;
            fE < fF && (fE = fF),
            fE > fG && (fE = fG);
            const fH = this['$']['prefs'][pw(0x4a0)] ? a1['scales'][pw(0x64a)]['expert'][pw(0x58b)] : a1[pw(0x379)][this['$'][pw(0x3c1)]['scale']]['flags'];
            if (fH[Math[pw(0x4fb)](fE) % a1['pitchesPerOctave']] || this['$']['song']['getChannelIsNoise'](this['$'][pw(0x733)]))
                return Math[pw(0x4fb)](fE);
            {
                let fI = Math['floor'](fE) + 0x1
                  , fJ = Math['floor'](fE) - 0x1;
                for (; !fH[fI % a1['pitchesPerOctave']]; )
                    fI++;
                for (; !fH[fJ % a1['pitchesPerOctave']]; )
                    fJ--;
                if (fI > fG)
                    return fJ < fF ? fF : fJ;
                if (fJ < fF)
                    return fI;
                let fK = fI
                  , fL = fJ + 0x1;
                return fI % a1['pitchesPerOctave'] != 0x0 && fI % a1[pw(0x36d)] != 0x7 || (fK -= 0.5),
                fJ % a1[pw(0x36d)] != 0x0 && fJ % a1['pitchesPerOctave'] != 0x7 || (fL += 0.5),
                fE - fL > fK - fE ? fI : fJ;
            }
        }
        ['ti'](fE) {
            const px = jI;
            this['li'] = [];
            for (const fF of fE['pins'])
                this['li']['push'](b3(0x0, fF['time'], fF[px(0x81f)]));
            for (let fG = 0x1; fG < this['li']['length'] - 0x1; )
                this['li'][fG - 0x1]['size'] == this['li'][fG][px(0x81f)] && this['li'][fG]['size'] == this['li'][fG + 0x1][px(0x81f)] ? this['li'][px(0x712)](fG, 0x1) : fG++;
            this['ce'][this['$']['channel']] = this['li'];
        }
        ['movePlayheadToMouse']() {
            const py = jI;
            return !!this['re'] && (this['$'][py(0x3eb)]['playhead'] = this['$']['bar'] + this['Vt'] + this['se'] / this['$e'],
            !0x0);
        }
        ['Ge']() {
            const pz = jI;
            this['$']['prefs']['enableNotePreview'] && this['$'][pz(0x3eb)][pz(0x1ed)](),
            this['oe'] = !0x0,
            this['ue'] = this['se'],
            this['pe'] = this['ne'],
            this['ei'](),
            this['ii']();
            const fE = new bA();
            if (this['xe'] = fE,
            this['Fe'] = this['$']['lastChangeWas'](this['Se']),
            this['$'][pz(0x86f)](this['xe']),
            this['ui']())
                this['ye'] = !0x0;
            else {
                if (this['pi']())
                    this['ge'] = !0x0;
                else {
                    if (this['de']) {
                        if (this['$'][pz(0x1c9)]['patternSelectionActive'] && -0x1 == this['Pe']['pitchIndex'] || this['ci']())
                            fE['append'](new d6(this['$'],0x0,0x0));
                        else {
                            if (null != this['Pe']['curNote'])
                                fE['append'](new d6(this['$'],this['Pe']['curNote'][pz(0x1b7)],this['Pe'][pz(0x478)]['end']));
                            else {
                                const fF = Math[pz(0x2f6)](0x0, Math['min']((this['$'][pz(0x3c1)]['beatsPerBar'] - 0x1) * a1[pz(0x58d)], Math[pz(0x4fb)](this['Pe']['exactPart'] / a1['partsPerBeat']) * a1['partsPerBeat']))
                                  , fG = fF + a1['partsPerBeat'];
                                fE['append'](new d6(this['$'],fF,fG));
                            }
                        }
                    } else {
                        if (this['ci']())
                            this['be'] = !0x0;
                        else {
                            if (this['Pe'][pz(0x37d)] && null == this['Pe'][pz(0x478)]) {
                                fE['append'](new d6(this['$'],0x0,0x0));
                                const fH = new b4(this['Pe'][pz(0x403)],this['Pe'][pz(0x1b7)],this['Pe'][pz(0x63e)],a1[pz(0x483)],this['$']['song'][pz(0x67a)](this['$'][pz(0x733)]));
                                fH['pins'] = [];
                                for (const fJ of this['Pe'][pz(0x2a6)])
                                    fH[pz(0x2a6)][pz(0x557)](b3(0x0, fJ['time'], fJ[pz(0x81f)]));
                                fE[pz(0x65e)](new cE(this['$'],this['$'][pz(0x733)],this['$']['bar']));
                                const fI = this['$'][pz(0x360)](this['Vt']);
                                if (null == fI)
                                    throw new Error();
                                if (fE['append'](new cZ(this['$'],fI,fH,this['Pe']['curIndex'])),
                                this['$']['prefs']['enableNotePreview'] && !this['$'][pz(0x3eb)]['playing']) {
                                    const fK = Math['min'](a1['partsPerBeat'], this['Pe']['end'] - this['Pe'][pz(0x1b7)]);
                                    this['$']['performance']['setTemporaryPitches']([this['Pe'][pz(0x403)]], fK);
                                }
                            }
                        }
                    }
                }
            }
            this['di']();
        }
        ['Je']() {
            const pA = jI;
            this['$'][pA(0x7ed)][pA(0x652)] && this['re'] && this['$'][pA(0x3eb)]['maintainLiveInput']();
            const fE = this['$'][pA(0x25f)](this['xe']);
            if (!this['he'] && this['oe'] && this['Pe']['valid'] && fE) {
                const fF = this['se'] - this['ue']
                  , fG = this['ne'] - this['pe'];
                Math[pA(0x74f)](fF * fF + fG * fG) > 0x5 && (this['he'] = !0x0,
                this['ae'] = Math['abs'](fF) >= Math['abs'](fG));
            }
            if (this['he'] && this['oe'] && this['Pe']['valid'] && fE) {
                this['xe'][pA(0x6b3)]();
                const fH = new bA();
                this['xe'] = fH,
                this['$']['setProspectiveChange'](this['xe']);
                const fI = this['ni']()
                  , fJ = this['oi'](this['se'] / this['ri']);
                if (this['ye'])
                    fH[pA(0x65e)](new d6(this['$'],Math['max'](0x0, Math['min'](this['$']['song']['beatsPerBar'] * a1[pA(0x58d)], fJ)),this['$']['selection']['patternSelectionEnd'])),
                    this['di']();
                else {
                    if (this['ge'])
                        fH[pA(0x65e)](new d6(this['$'],this['$'][pA(0x1c9)]['patternSelectionStart'],Math['max'](0x0, Math['min'](this['$']['song'][pA(0x6c9)] * a1['partsPerBeat'], fJ)))),
                        this['di']();
                    else {
                        if (this['be']) {
                            const fK = this['$'][pA(0x360)](this['Vt']);
                            if (this['he'] && null != fK) {
                                this['xe']['undo']();
                                const fL = new bA();
                                this['xe'] = fL,
                                this['$']['setProspectiveChange'](this['xe']);
                                const fM = a1['scales'][this['$'][pA(0x3c1)][pA(0x7ad)]]['flags']['filter'](fQ => fQ)['length']
                                  , fN = this['$'][pA(0x3c1)]['getChannelIsNoise'](this['$'][pA(0x733)]) ? 0x1 : 0xc / fM
                                  , fO = Math['round']((this['se'] - this['ue']) / (this['ri'] * fI)) * fI
                                  , fP = Math['round']((this['pe'] - this['ne']) / (this['ie'] * fN));
                                fL['append'](new d7(this['$'],this['$'][pA(0x733)],fK,fO,fP));
                            }
                        } else {
                            if (this['de']) {
                                if (this['he']) {
                                    let fQ = Math['max'](0x0, Math[pA(0x4c5)]((this['$'][pA(0x3c1)][pA(0x6c9)] - 0x1) * a1[pA(0x58d)], Math[pA(0x4fb)](this['Pe'][pA(0x268)] / a1['partsPerBeat']) * a1[pA(0x58d)]))
                                      , fR = fQ + a1['partsPerBeat'];
                                    if (null != this['Pe']['curNote'] && (fQ = Math['max'](fQ, this['Pe']['curNote']['start']),
                                    fR = Math[pA(0x4c5)](fR, this['Pe']['curNote']['end'])),
                                    fJ < fQ) {
                                        fQ = 0x0;
                                        const fS = this['$'][pA(0x360)](this['Vt']);
                                        if (null != fS) {
                                            for (let fT = 0x0; fT < fS[pA(0x58c)]['length']; fT++)
                                                fS[pA(0x58c)][fT][pA(0x1b7)] <= fJ && (fQ = fS[pA(0x58c)][fT]['start']),
                                                fS['notes'][fT]['end'] <= fJ && (fQ = fS['notes'][fT]['end']);
                                        }
                                        for (let fU = 0x0; fU <= this['$']['song']['beatsPerBar']; fU++) {
                                            const fV = fU * a1['partsPerBeat'];
                                            fQ <= fV && fV <= fJ && (fQ = fV);
                                        }
                                    }
                                    if (fJ > fR) {
                                        fR = a1['partsPerBeat'] * this['$'][pA(0x3c1)]['beatsPerBar'];
                                        const fW = this['$']['getCurrentPattern'](this['Vt']);
                                        if (null != fW)
                                            for (let fX = 0x0; fX < fW['notes'][pA(0x57c)]; fX++) {
                                                if (fW[pA(0x58c)][fX][pA(0x1b7)] >= fJ) {
                                                    fR = fW['notes'][fX][pA(0x1b7)];
                                                    break;
                                                }
                                                if (fW['notes'][fX][pA(0x63e)] >= fJ) {
                                                    fR = fW['notes'][fX]['end'];
                                                    break;
                                                }
                                            }
                                        for (let fY = 0x0; fY <= this['$']['song']['beatsPerBar']; fY++) {
                                            const fZ = fY * a1[pA(0x58d)];
                                            fJ < fZ && fZ < fR && (fR = fZ);
                                        }
                                    }
                                    fH['append'](new d6(this['$'],fQ,fR)),
                                    this['di']();
                                }
                            } else {
                                if (null == this['Pe'][pA(0x478)]) {
                                    let g0, g1;
                                    fH[pA(0x65e)](new d6(this['$'],0x0,0x0)),
                                    fJ < this['Pe'][pA(0x1b7)] ? (g0 = !0x0,
                                    g1 = this['Pe'][pA(0x1b7)] - fJ) : (g0 = !0x1,
                                    g1 = fJ - this['Pe'][pA(0x1b7)] + fI);
                                    let g2, g3, g4 = fI;
                                    for (let g6 = fI; g6 <= this['$']['song']['beatsPerBar'] * a1['partsPerBeat']; g6 += fI) {
                                        if (0x1 == fI) {
                                            if (g6 < 0x5)
                                                ;
                                            else {
                                                if (g6 <= a1[pA(0x58d)] / 0x2) {
                                                    if (g6 % 0x3 != 0x0 && g6 % 0x4 != 0x0)
                                                        continue;
                                                } else {
                                                    if (g6 <= 1.5 * a1[pA(0x58d)]) {
                                                        if (g6 % 0x6 != 0x0 && g6 % 0x8 != 0x0)
                                                            continue;
                                                    } else {
                                                        if (g6 % a1['partsPerBeat'] != 0x0)
                                                            continue;
                                                    }
                                                }
                                            }
                                        } else {
                                            if (g6 >= 0x5 * fI && g6 % a1[pA(0x58d)] != 0x0 && g6 != 0x3 * a1[pA(0x58d)] / 0x4 && g6 != 0x3 * a1[pA(0x58d)] / 0x2 && g6 != 0x4 * a1[pA(0x58d)] / 0x3)
                                                continue;
                                        }
                                        const g7 = g6;
                                        if (g7 == g1) {
                                            g4 = g7;
                                            break;
                                        }
                                        if (g7 < g1 && (g4 = g7),
                                        g7 > g1) {
                                            g4 < g1 - fI && (g4 = g7);
                                            break;
                                        }
                                    }
                                    g0 ? (g3 = this['Pe'][pA(0x1b7)],
                                    g2 = g3 - g4) : (g2 = this['Pe']['start'],
                                    g3 = g2 + g4);
                                    const g5 = g2 < 0x0;
                                    if (g2 < 0x0 && (g2 = 0x0),
                                    g3 > this['$'][pA(0x3c1)][pA(0x6c9)] * a1['partsPerBeat'] && (g3 = this['$'][pA(0x3c1)][pA(0x6c9)] * a1[pA(0x58d)]),
                                    g2 < g3) {
                                        fH[pA(0x65e)](new cE(this['$'],this['$'][pA(0x733)],this['$'][pA(0x6e2)]));
                                        const g8 = this['$'][pA(0x360)](this['Vt']);
                                        if (null == g8)
                                            throw new Error();
                                        let g9;
                                        for (fH[pA(0x65e)](new d1(this['$'],g8,g2,g3)),
                                        g9 = 0x0; g9 < g8['notes']['length'] && !(g8['notes'][g9]['start'] >= g3); g9++)
                                            ;
                                        const ga = new b4(this['Pe']['pitch'],g2,g3,a1['noteSizeMax'],this['$']['song'][pA(0x67a)](this['$'][pA(0x733)]));
                                        ga[pA(0x790)] = g5,
                                        fH[pA(0x65e)](new cZ(this['$'],g8,ga,g9)),
                                        this['ti'](ga),
                                        this['we'] = g0 ? g2 : g3,
                                        this['ve'] = this['Pe']['pitch'],
                                        this['ke'] = ga['pins'][g0 ? 0x0 : 0x1][pA(0x81f)],
                                        this['Me'] = !0x0;
                                    }
                                    this['Gt'] = this['$'][pA(0x360)](this['Vt']);
                                } else {
                                    if (this['ae']) {
                                        fH[pA(0x65e)](new d6(this['$'],0x0,0x0));
                                        const gb = (this['se'] - this['ue']) / this['ri']
                                          , gc = this['Pe']['curNote']['pins'][this['Pe']['nearPinIndex']];
                                        let gd = Math[pA(0x874)]((this['Pe']['curNote'][pA(0x1b7)] + gc[pA(0x2e3)] + gb) / fI) * fI;
                                        const gf = gd < 0x0;
                                        if (gd < 0x0 && (gd = 0x0),
                                        gd > this['$']['song'][pA(0x6c9)] * a1['partsPerBeat'] && (gd = this['$'][pA(0x3c1)][pA(0x6c9)] * a1['partsPerBeat']),
                                        null == this['Gt'])
                                            throw new Error();
                                        if (gd <= this['Pe']['curNote']['start'] && this['Pe']['nearPinIndex'] == this['Pe'][pA(0x478)][pA(0x2a6)][pA(0x57c)] - 0x1 || gd >= this['Pe'][pA(0x478)]['end'] && 0x0 == this['Pe'][pA(0x35a)])
                                            fH['append'](new cZ(this['$'],this['Gt'],this['Pe'][pA(0x478)],this['Pe']['curIndex'],!0x0)),
                                            this['Me'] = !0x1;
                                        else {
                                            const gg = Math['min'](this['Pe']['curNote']['start'], gd)
                                              , gh = Math['max'](this['Pe']['curNote']['end'], gd);
                                            this['we'] = gd,
                                            this['ve'] = this['Pe'][pA(0x478)][pA(0x68d)][-0x1 == this['Pe']['pitchIndex'] ? 0x0 : this['Pe'][pA(0x407)]] + this['Pe']['curNote']['pins'][this['Pe']['nearPinIndex']]['interval'],
                                            this['ke'] = this['Pe'][pA(0x478)]['pins'][this['Pe']['nearPinIndex']][pA(0x81f)],
                                            this['Me'] = !0x0,
                                            fH['append'](new d1(this['$'],this['Gt'],gg,gh,this['Pe'][pA(0x478)])),
                                            fH['append'](new cF(this['$'],this['Pe'][pA(0x478)],this['Pe']['nearPinIndex'],gd,gf)),
                                            this['ti'](this['Pe']['curNote']);
                                        }
                                    } else {
                                        if (-0x1 == this['Pe'][pA(0x407)]) {
                                            fH[pA(0x65e)](new d6(this['$'],0x0,0x0));
                                            const gj = Math[pA(0x2f6)](this['Pe'][pA(0x478)]['start'], Math[pA(0x4c5)](this['Pe']['curNote'][pA(0x63e)], Math[pA(0x874)](this['se'] / (this['ri'] * fI)) * fI)) - this['Pe']['curNote'][pA(0x1b7)];
                                            let gk, gl = this['Pe'][pA(0x478)]['pins'][0x0], gm = 0x0, go = 0x0;
                                            for (let gp = 0x1; gp < this['Pe'][pA(0x478)]['pins']['length']; gp++) {
                                                if (gk = gl,
                                                gl = this['Pe'][pA(0x478)]['pins'][gp],
                                                gj > gl['time'])
                                                    continue;
                                                if (gj < gk[pA(0x2e3)])
                                                    throw new Error();
                                                const gq = (gj - gk[pA(0x2e3)]) / (gl[pA(0x2e3)] - gk['time']);
                                                gm = Math['round'](gk[pA(0x81f)] * (0x1 - gq) + gl['size'] * gq + (this['pe'] - this['ne']) / (0x4b / a1[pA(0x483)])),
                                                gm < 0x0 && (gm = 0x0),
                                                gm > a1[pA(0x483)] && (gm = a1[pA(0x483)]),
                                                go = this['ai'](Math['round'](gk['interval'] * (0x1 - gq) + gl[pA(0x24b)] * gq + this['Pe'][pA(0x478)][pA(0x68d)][0x0]), 0x0, this['si']()) - this['Pe']['curNote'][pA(0x68d)][0x0];
                                                break;
                                            }
                                            this['we'] = this['Pe'][pA(0x478)][pA(0x1b7)] + gj,
                                            this['ve'] = this['Pe'][pA(0x478)]['pitches'][-0x1 == this['Pe'][pA(0x407)] ? 0x0 : this['Pe']['pitchIndex']] + go,
                                            this['ke'] = gm,
                                            this['Me'] = !0x0,
                                            fH[pA(0x65e)](new dc(this['$'],this['Pe'][pA(0x478)],gj,gm,go,this['fe'])),
                                            this['ti'](this['Pe']['curNote']);
                                        } else {
                                            if (fH[pA(0x65e)](new d6(this['$'],0x0,0x0)),
                                            this['ke'] = this['Pe'][pA(0x478)][pA(0x2a6)][this['Pe'][pA(0x35a)]][pA(0x81f)],
                                            null == this['Gt'])
                                                throw new Error();
                                            let gr, gu;
                                            this['se'] >= this['ue'] ? (gr = Math['max'](this['Pe']['curNote'][pA(0x1b7)], this['Pe'][pA(0x46b)]),
                                            gu = fJ + fI) : (gr = Math['min'](this['Pe']['curNote'][pA(0x63e)], this['Pe']['part'] + fI),
                                            gu = fJ),
                                            gu < 0x0 && (gu = 0x0),
                                            gu > this['$'][pA(0x3c1)][pA(0x6c9)] * a1[pA(0x58d)] && (gu = this['$']['song']['beatsPerBar'] * a1[pA(0x58d)]),
                                            gu > this['Pe'][pA(0x478)]['end'] && fH[pA(0x65e)](new d1(this['$'],this['Gt'],this['Pe']['curNote']['start'],gu,this['Pe'][pA(0x478)])),
                                            gu < this['Pe']['curNote'][pA(0x1b7)] && fH[pA(0x65e)](new d1(this['$'],this['Gt'],gu,this['Pe'][pA(0x478)][pA(0x63e)],this['Pe'][pA(0x478)]));
                                            let gv = Number['MAX_VALUE']
                                              , gw = -Number['MAX_VALUE'];
                                            for (const gy of this['Pe'][pA(0x478)][pA(0x68d)])
                                                gv > gy && (gv = gy),
                                                gw < gy && (gw = gy);
                                            gv -= this['Pe']['curNote'][pA(0x68d)][this['Pe'][pA(0x407)]],
                                            gw -= this['Pe'][pA(0x478)]['pitches'][this['Pe'][pA(0x407)]];
                                            const gx = this['ai'](this['hi'](this['ne']), -gv, this['si']() - gw);
                                            fH[pA(0x65e)](new cG(this['$'],this['Pe']['curNote'],gr,gu,gx,this['Pe']['pitchIndex'])),
                                            this['ti'](this['Pe'][pA(0x478)]),
                                            this['we'] = gu,
                                            this['ve'] = gx,
                                            this['Me'] = !0x0;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this['oe'] && this['Pe'][pA(0x37d)] && fE || (this['ei'](),
            this['ii']());
        }
        ['Ze'](fE) {
            const pB = jI;
            this['Se'] = fE,
            this['$']['hasRedoHistory']() || this['$'][pB(0x235)](this['Se'], this['Fe']);
        }
        ['ii']() {
            const pC = jI;
            if (this['le']) {
                if (!this['oe'] || !this['Pe'][pC(0x37d)] || !this['he'] || !this['Me'] || this['de'] || this['ye'] || this['ge'] || this['be'])
                    this['Xt']['setAttribute'](pC(0x72e), pC(0x47b));
                else {
                    this['Xt']['setAttribute'](pC(0x72e), pC(0x4b8));
                    const fE = this['ri'] * this['we']
                      , fF = this['mi'](this['ve'] - this['qe'])
                      , fG = this['ie'] / 0x2
                      , fH = 0x50
                      , fI = 0x3c;
                    let fJ = '';
                    const fK = a1['noteSizeMax'];
                    fJ += 'M\x20' + ap(fE) + '\x20' + ap(fF - fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'L\x20' + ap(fE) + '\x20' + ap(fF - fG * (this['ke'] / fK) - fI) + '\x20',
                    fJ += 'M\x20' + ap(fE) + '\x20' + ap(fF + fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'L\x20' + ap(fE) + '\x20' + ap(fF + fG * (this['ke'] / fK) + fI) + '\x20',
                    fJ += 'M\x20' + ap(fE) + '\x20' + ap(fF - fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'L\x20' + ap(fE + fH) + '\x20' + ap(fF - fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'M\x20' + ap(fE) + '\x20' + ap(fF + fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'L\x20' + ap(fE + fH) + '\x20' + ap(fF + fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'M\x20' + ap(fE) + '\x20' + ap(fF - fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'L\x20' + ap(fE - fH) + '\x20' + ap(fF - fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'M\x20' + ap(fE) + '\x20' + ap(fF + fG * (this['ke'] / fK)) + '\x20',
                    fJ += 'L\x20' + ap(fE - fH) + '\x20' + ap(fF + fG * (this['ke'] / fK)) + '\x20',
                    this['Xt']['setAttribute']('d', fJ);
                }
            } else {
                if (this['re'] && !this['oe'] && this['Pe'][pC(0x37d)]) {
                    if (this['Xt'][pC(0x1d8)]('visibility', 'visible'),
                    this['ui']()) {
                        const fL = this['ri'] * this['$'][pC(0x1c9)][pC(0x4b6)]
                          , fM = ap(fL - 0x4)
                          , fN = ap(fL + 0x4)
                          , fO = this['mi'](-0.5);
                        this['Xt'][pC(0x1d8)]('d', 'M\x20' + fM + pC(0x818) + fM + '\x20' + fO + '\x20L\x20' + fN + '\x20' + fO + '\x20L\x20' + fN + '\x200\x20z');
                    } else {
                        if (this['pi']()) {
                            const fP = this['ri'] * this['$'][pC(0x1c9)][pC(0x4e1)]
                              , fQ = ap(fP - 0x4)
                              , fR = ap(fP + 0x4)
                              , fS = this['mi'](-0.5);
                            this['Xt'][pC(0x1d8)]('d', 'M\x20' + fQ + '\x200\x20L\x20' + fQ + '\x20' + fS + '\x20L\x20' + fR + '\x20' + fS + '\x20L\x20' + fR + '\x200\x20z');
                        } else {
                            if (this['ci']()) {
                                const fT = ap(this['ri'] * this['$'][pC(0x1c9)][pC(0x4b6)] - 0x2)
                                  , fU = ap(this['ri'] * this['$']['selection']['patternSelectionEnd'] + 0x2)
                                  , fV = this['mi'](-0.5);
                                this['Xt'][pC(0x1d8)]('d', 'M\x20' + fT + '\x200\x20L\x20' + fT + '\x20' + fV + pC(0x76d) + fU + '\x20' + fV + '\x20L\x20' + fU + pC(0x725));
                            } else
                                this['yi'](this['Xt'], this['Pe'][pC(0x403)], this['Pe'][pC(0x1b7)], this['Pe']['pins'], this['ie'] / 0x2 + 0x1, !0x0, this['qe']);
                        }
                    }
                } else
                    this['Xt'][pC(0x1d8)]('visibility', pC(0x47b));
            }
        }
        ['di']() {
            const pD = jI;
            this['$'][pD(0x1c9)][pD(0x3cf)] ? (this['Qt']['setAttribute']('visibility', 'visible'),
            this['Qt']['setAttribute']('x', String(this['ri'] * this['$']['selection'][pD(0x4b6)])),
            this['Qt']['setAttribute']('width', String(this['ri'] * (this['$']['selection']['patternSelectionEnd'] - this['$'][pD(0x1c9)][pD(0x4b6)])))) : this['Qt']['setAttribute'](pD(0x72e), pD(0x47b));
        }
        [jI(0x247)]() {
            const pE = jI
              , fE = this['$']['getCurrentPattern'](this['Vt']);
            this['Gt'] != fE && null != this['Gt'] && (this['xe'] = null,
            this['Xe'](null)),
            this['Gt'] = fE,
            this['$e'] = this[pE(0x593)]['clientWidth'],
            this['je'] = this['container'][pE(0x715)],
            this['ri'] = this['$e'] / (this['$'][pE(0x3c1)]['beatsPerBar'] * a1[pE(0x58d)]),
            this['fi'] = this['$']['song']['getChannelIsNoise'](this['$']['channel']) ? a1['drumCount'] : this['$']['getVisiblePitchCount'](),
            this['ie'] = this['je'] / this['fi'],
            this['qe'] = this['$']['getBaseVisibleOctave'](this['$'][pE(0x733)]) * a1['pitchesPerOctave'],
            this['Ae'] == this['$']['song'][pE(0x237)] && this['Be'] == this['$'][pE(0x3c1)][pE(0x1c4)] && this['Oe'] == this['$']['song']['noiseChannelCount'] || (this['Ae'] = this['$']['song']['rhythm'],
            this['Be'] = this['$']['song']['pitchChannelCount'],
            this['Oe'] = this['$']['song'][pE(0x3ea)],
            this['resetCopiedPins']()),
            this['li'] = this['ce'][this['$']['channel']],
            this['Te'] == this['$e'] && this['Ee'] == this['je'] || (this['Te'] = this['$e'],
            this['Ee'] = this['je'],
            this['Kt'][pE(0x1d8)]('width', '' + this['$e']),
            this['Kt'][pE(0x1d8)]('height', '' + this['je']),
            this['Jt']['setAttribute']('height', '' + this['je']),
            this['Qt']['setAttribute']('y', '0'),
            this['Qt'][pE(0x1d8)](pE(0x33e), '' + this['je']));
            const fF = this['$e'] / this['$'][pE(0x3c1)]['beatsPerBar'];
            if (this['Ce'] != fF || this['Le'] != this['ie']) {
                this['Ce'] = fF,
                this['Le'] = this['ie'],
                this['Wt'][pE(0x1d8)]('width', '' + fF),
                this['Wt']['setAttribute'](pE(0x33e), '' + this['ie'] * a1['pitchesPerOctave']),
                this['jt'][pE(0x1d8)]('width', '' + fF),
                this['jt'][pE(0x1d8)]('height', '' + this['ie']),
                this['ee']['setAttribute'](pE(0x387), '' + (fF - 0x2)),
                this['ee'][pE(0x1d8)]('height', '' + (this['ie'] - 0x2));
                for (let fG = 0x0; fG < a1['pitchesPerOctave']; fG++) {
                    const fH = this['te'][fG]
                      , fI = (a1['pitchesPerOctave'] - fG) % a1['pitchesPerOctave'];
                    fH[pE(0x1d8)](pE(0x387), '' + (fF - 0x2)),
                    fH['setAttribute']('y', '' + (fI * this['ie'] + 0x1)),
                    fH['setAttribute'](pE(0x33e), '' + (this['ie'] - 0x2));
                }
            }
            this['Ut'] && (this['oe'] || this['ei'](),
            this['ii'](),
            this['di']()),
            this['ze'] != this['$'][pE(0x7ed)]['showFifth'] && (this['ze'] = this['$'][pE(0x7ed)]['showFifth'],
            this['te'][0x7][pE(0x1d8)]('fill', this['$'][pE(0x7ed)]['showFifth'] ? aL[pE(0x887)] : aL[pE(0x444)]));
            for (let fJ = 0x0; fJ < a1[pE(0x36d)]; fJ++)
                this['te'][fJ]['style'][pE(0x72e)] = a1[pE(0x379)][this['$'][pE(0x3c1)]['scale']]['flags'][fJ] ? 'visible' : 'hidden';
            this['$'][pE(0x3c1)][pE(0x67a)](this['$']['channel']) ? this['De'] || (this['De'] = !0x0,
            this['Kt']['setAttribute']('fill', 'url(#patternEditorDrumBackground' + this['Vt'] + ')')) : this['De'] && (this['De'] = !0x1,
            this['Kt']['setAttribute']('fill', pE(0x236) + this['Vt'] + ')')),
            this['_e']();
        }
        ['_e']() {
            const pG = jI;
            if (this['Yt'] = function(fE) {
                const pF = a0b
                  , fF = fE['cloneNode'](!0x1);
                return fE['parentNode'][pF(0x806)](fF, fE),
                fF;
            }(this['Yt']),
            this['$']['prefs']['showChannels'])
                for (let fE = this['$']['song'][pG(0x777)]() - 0x1; fE >= 0x0; fE--) {
                    if (fE == this['$']['channel'])
                        continue;
                    if (this['$'][pG(0x3c1)]['getChannelIsNoise'](fE) != this['$'][pG(0x3c1)]['getChannelIsNoise'](this['$']['channel']))
                        continue;
                    const fF = this['$'][pG(0x3c1)]['getPattern'](fE, this['$'][pG(0x6e2)] + this['Vt']);
                    if (null == fF)
                        continue;
                    const fG = this['$'][pG(0x757)](fE) * a1[pG(0x36d)];
                    for (const fH of fF[pG(0x58c)])
                        for (const fI of fH['pitches']) {
                            const fJ = aE['path']();
                            fJ[pG(0x1d8)]('fill', aL['getChannelColor'](this['$'][pG(0x3c1)], fE)[pG(0x378)]),
                            fJ[pG(0x1d8)]('pointer-events', pG(0x3a9)),
                            this['yi'](fJ, fI, fH['start'], fH['pins'], 0.19 * this['ie'], !0x1, fG),
                            this['Yt']['appendChild'](fJ);
                        }
                }
            if (null != this['Gt']) {
                const fK = this['$']['song']['channels'][this['$'][pG(0x733)]][pG(0x84c)][this['$']['getCurrentInstrument']()]
                  , fL = fK[pG(0x1b0)]()
                  , fM = fK['getTransition']()
                  , fN = fL['customInterval'] || fL['arpeggiates'] || fL['strumParts'] > 0x0 || fM['slides'];
                for (const fO of this['Gt'][pG(0x58c)])
                    for (let fP = 0x0; fP < fO['pitches'][pG(0x57c)]; fP++) {
                        const fQ = fO['pitches'][fP];
                        let fR = aE[pG(0x388)]();
                        fR[pG(0x1d8)]('fill', aL['getChannelColor'](this['$']['song'], this['$'][pG(0x733)])['secondaryNote']),
                        fR['setAttribute']('pointer-events', 'none'),
                        this['yi'](fR, fQ, fO['start'], fO['pins'], this['ie'] / 0x2 + 0x1, !0x1, this['qe']),
                        this['Yt'][pG(0x2b8)](fR),
                        fR = aE[pG(0x388)](),
                        fR['setAttribute']('fill', aL['getChannelColor'](this['$'][pG(0x3c1)], this['$'][pG(0x733)])['primaryNote']),
                        fR[pG(0x1d8)](pG(0x2ad), pG(0x3a9)),
                        this['yi'](fR, fQ, fO[pG(0x1b7)], fO[pG(0x2a6)], this['ie'] / 0x2 + 0x1, !0x0, this['qe']),
                        this['Yt']['appendChild'](fR);
                        let fS = 0x2;
                        if (fO[pG(0x790)]) {
                            const fT = Math[pG(0x4c5)](this['ie'], 0x14);
                            let fU;
                            fU = 'M\x20' + ap(this['ri'] * fO['start'] + fS) + '\x20' + ap(this['mi'](fQ - this['qe']) - 0.1 * fT),
                            fU += 'L\x20' + ap(this['ri'] * fO['start'] + fS) + '\x20' + ap(this['mi'](fQ - this['qe']) + 0.1 * fT),
                            fU += 'L\x20' + ap(this['ri'] * fO[pG(0x1b7)] + fS + 0x4) + '\x20' + ap(this['mi'](fQ - this['qe']) + 0.1 * fT),
                            fU += 'L\x20' + ap(this['ri'] * fO[pG(0x1b7)] + fS + 0x4) + '\x20' + ap(this['mi'](fQ - this['qe']) + 0.3 * fT),
                            fU += 'L\x20' + ap(this['ri'] * fO['start'] + fS + 0xc) + '\x20' + ap(this['mi'](fQ - this['qe'])),
                            fU += 'L\x20' + ap(this['ri'] * fO[pG(0x1b7)] + fS + 0x4) + '\x20' + ap(this['mi'](fQ - this['qe']) - 0.3 * fT),
                            fU += 'L\x20' + ap(this['ri'] * fO[pG(0x1b7)] + fS + 0x4) + '\x20' + ap(this['mi'](fQ - this['qe']) - 0.1 * fT);
                            const fV = aE[pG(0x388)]();
                            fV[pG(0x1d8)]('d', fU),
                            fV[pG(0x1d8)](pG(0x88a), aL['invertedText']),
                            this['Yt'][pG(0x2b8)](fV),
                            fS += 0xc;
                        }
                        if (fO[pG(0x68d)]['length'] > 0x1 && fN) {
                            const fW = aE[pG(0x1d2)]();
                            fW[pG(0x1d8)]('x', '' + ap(this['ri'] * fO[pG(0x1b7)] + fS)),
                            fW[pG(0x1d8)]('y', '' + ap(this['mi'](fQ - this['qe']))),
                            fW['setAttribute'](pG(0x387), '30'),
                            fW['setAttribute']('fill', aL[pG(0x4d7)]),
                            fW['setAttribute']('text-anchor', pG(0x1b7)),
                            fW['setAttribute']('dominant-baseline', 'central'),
                            fW[pG(0x1d8)]('pointer-events', pG(0x3a9)),
                            fW[pG(0x40a)] = '' + (fP + 0x1),
                            this['Yt'][pG(0x2b8)](fW);
                        }
                    }
            }
            this['$'][pG(0x7c1)] = !0x1;
        }
        ['yi'](fE, fF, fG, fH, fI, fJ, fK) {
            const pH = jI
              , fL = this['ri'] * (fH[fH['length'] - 0x1]['time'] + fH[0x0]['time'])
              , fM = 0.5 * Math[pH(0x4c5)](0x2, fL - 0x1);
            let fN = fH[0x0]
              , fO = 'M\x20' + ap(this['ri'] * (fG + fN[pH(0x2e3)]) + fM) + '\x20' + ap(this['mi'](fF - fK) + fI * (fJ ? fN['size'] / a1['noteSizeMax'] : 0x1)) + '\x20';
            for (let fP = 0x1; fP < fH['length']; fP++) {
                let fQ = fN;
                fN = fH[fP];
                let fR = this['ri'] * (fG + fQ[pH(0x2e3)]) + (0x1 == fP ? fM : 0x0)
                  , fS = this['ri'] * (fG + fN['time']) - (fP == fH['length'] - 0x1 ? fM : 0x0)
                  , fT = this['mi'](fF + fQ['interval'] - fK)
                  , fU = this['mi'](fF + fN[pH(0x24b)] - fK)
                  , fV = fJ ? fQ[pH(0x81f)] / a1[pH(0x483)] : 0x1
                  , fW = fJ ? fN['size'] / a1[pH(0x483)] : 0x1;
                fO += 'L\x20' + ap(fR) + '\x20' + ap(fT - fI * fV) + '\x20',
                fQ[pH(0x24b)] > fN['interval'] && (fO += 'L\x20' + ap(fR + 0x1) + '\x20' + ap(fT - fI * fV) + '\x20'),
                fQ['interval'] < fN['interval'] && (fO += 'L\x20' + ap(fS - 0x1) + '\x20' + ap(fU - fI * fW) + '\x20'),
                fO += 'L\x20' + ap(fS) + '\x20' + ap(fU - fI * fW) + '\x20';
            }
            for (let fX = fH[pH(0x57c)] - 0x2; fX >= 0x0; fX--) {
                let fY = fN;
                fN = fH[fX];
                let fZ = this['ri'] * (fG + fY['time']) - (fX == fH['length'] - 0x2 ? fM : 0x0)
                  , g0 = this['ri'] * (fG + fN[pH(0x2e3)]) + (0x0 == fX ? fM : 0x0)
                  , g1 = this['mi'](fF + fY['interval'] - fK)
                  , g2 = this['mi'](fF + fN['interval'] - fK)
                  , g3 = fJ ? fY[pH(0x81f)] / a1['noteSizeMax'] : 0x1
                  , g4 = fJ ? fN['size'] / a1['noteSizeMax'] : 0x1;
                fO += 'L\x20' + ap(fZ) + '\x20' + ap(g1 + fI * g3) + '\x20',
                fY[pH(0x24b)] < fN['interval'] && (fO += 'L\x20' + ap(fZ - 0x1) + '\x20' + ap(g1 + fI * g3) + '\x20'),
                fY['interval'] > fN['interval'] && (fO += 'L\x20' + ap(g0 + 0x1) + '\x20' + ap(g2 + fI * g4) + '\x20'),
                fO += 'L\x20' + ap(g0) + '\x20' + ap(g2 + fI * g4) + '\x20';
            }
            fO += 'z',
            fE['setAttribute']('d', fO);
        }
        ['mi'](fE) {
            return this['ie'] * (this['fi'] - fE - 0.5);
        }
    }
    class dp {
        constructor(fE) {
            const pI = jI;
            this['$'] = fE,
            this[pI(0x593)] = aD['div']({
                'class': pI(0x54c)
            }),
            this['gi'] = [],
            this['bi'] = [],
            this['wi'] = [],
            this['vi'] = [],
            this['ki'] = 0x0,
            this['Mi'] = -0x1,
            this['xi'] = -0x1,
            this['Si'] = 0x0,
            this['Fi'] = fF => {
                const pJ = pI
                  , fG = this['bi'][pJ(0x2fb)](fF[pJ(0x46a)])
                  , fH = this['wi'][pJ(0x2fb)](fF['target']);
                if (-0x1 != fG) {
                    const fI = parseInt(this['bi'][fG]['value'])
                      , fJ = fI % a1[pJ(0x45f)][pJ(0x57c)]
                      , fK = fI / a1['instrumentAutomationTargets'][pJ(0x57c)] >>> 0x0;
                    this['$'][pJ(0x235)](new dj(this['$'],fG,fJ,fK));
                } else
                    -0x1 != fH && this['$'][pJ(0x235)](new dk(this['$'],fH,this['wi'][fH][pJ(0x690)]));
            }
            ,
            this['Pi'] = fF => {
                const fG = this['vi']['indexOf'](fF['target']);
                -0x1 != fG && this['$']['record'](new dh(this['$'],fG));
            }
            ,
            this[pI(0x593)]['addEventListener'](pI(0x610), this['Fi']),
            this['container']['addEventListener']('click', this['Pi']);
        }
        ['Ii'](fE, fF) {
            const pK = jI;
            let fG = a1['instrumentAutomationTargets'][fE][pK(0x42c)];
            return a1['instrumentAutomationTargets'][fE][pK(0x64b)] > 0x1 && (-0x1 != fG['indexOf']('#') ? fG = fG['replace']('#', String(fF + 0x1)) : fG += '\x20' + (fF + 0x1)),
            aD['option']({
                'value': fE + fF * a1['instrumentAutomationTargets'][pK(0x57c)]
            }, fG);
        }
        ['qi'](fE, fF) {
            const pL = jI;
            for (let fG = 0x0; fG < fE[pL(0x3e0)]; fG++) {
                const fH = fE[pL(0x7fa)][fG]
                  , fI = parseInt(fH['value'])
                  , fJ = fI % a1[pL(0x45f)][pL(0x57c)]
                  , fK = fI / a1[pL(0x45f)][pL(0x57c)] >>> 0x0;
                fH[pL(0x47b)] = !fF['supportsEnvelopeTarget'](fJ, fK);
            }
        }
        [jI(0x247)]() {
            const pM = jI
              , fE = this['$'][pM(0x3c1)][pM(0x7b3)][this['$'][pM(0x733)]]['instruments'][this['$']['getCurrentInstrument']()];
            if (this['$'][pM(0x7ed)]['alwaysShowSettings'] || fE['preset'] == fE[pM(0x7d5)]) {
                for (let fF = this['gi'][pM(0x57c)]; fF < fE['envelopeCount']; fF++) {
                    const fG = aD['select']();
                    for (let fK = 0x0; fK < a1['instrumentAutomationTargets']['length']; fK++) {
                        const fL = a1[pM(0x45f)][fK]['interleave'];
                        for (let fM = 0x0; fM < a1['instrumentAutomationTargets'][fK][pM(0x64b)]; fM++)
                            fG[pM(0x2b8)](this['Ii'](fK, fM)),
                            fL && fG['appendChild'](this['Ii'](fK + 0x1, fM));
                        fL && fK++;
                    }
                    const fH = aD['select']();
                    for (let fN = 0x0; fN < a1[pM(0x6ac)]['length']; fN++)
                        fH['appendChild'](aD[pM(0x171)]({
                            'value': fN
                        }, a1[pM(0x6ac)][fN][pM(0x340)]));
                    const fI = aD['button']({
                        'type': 'button',
                        'class': 'delete-envelope'
                    })
                      , fJ = aD[pM(0x504)]({
                        'class': 'envelope-row'
                    }, aD[pM(0x504)]({
                        'class': pM(0x841),
                        'style': 'width:\x200;\x20flex:\x201;'
                    }, fG), aD[pM(0x504)]({
                        'class': 'selectContainer',
                        'style': pM(0x77b)
                    }, fH), fI);
                    this['container']['appendChild'](fJ),
                    this['gi'][fF] = fJ,
                    this['bi'][fF] = fG,
                    this['wi'][fF] = fH,
                    this['vi'][fF] = fI;
                }
                for (let fO = this['ki']; fO < fE[pM(0x863)]; fO++)
                    this['gi'][fO]['style'][pM(0x714)] = '',
                    this['qi'](this['bi'][fO], fE);
                for (let fP = fE[pM(0x863)]; fP < this['ki']; fP++)
                    this['gi'][fP][pM(0x821)][pM(0x714)] = pM(0x3a9);
                if (this['Mi'] != fE['eqFilter']['controlPointCount'] || this['xi'] != fE[pM(0x823)]['controlPointCount'] || this['Ti'] != fE['type'] || this['Si'] != fE[pM(0x5a9)]) {
                    for (let fQ = 0x0; fQ < this['ki']; fQ++)
                        this['qi'](this['bi'][fQ], fE);
                }
                for (let fR = 0x0; fR < fE[pM(0x863)]; fR++)
                    this['bi'][fR]['value'] = String(fE['envelopes'][fR][pM(0x46a)] + fE[pM(0x6ac)][fR][pM(0x2c5)] * a1[pM(0x45f)]['length']),
                    this['wi'][fR]['selectedIndex'] = fE[pM(0x6ac)][fR]['envelope'];
                this['ki'] = fE['envelopeCount'],
                this['Mi'] = fE[pM(0x7c3)]['controlPointCount'],
                this['xi'] = fE[pM(0x823)]['controlPointCount'],
                this['Ti'] = fE['type'],
                this['Si'] = fE['effects'];
            }
        }
    }
    class dq {
        constructor(fE) {
            const pN = jI;
            this['$'] = fE,
            this['$e'] = 0x78,
            this['je'] = 0x1a,
            this['Ei'] = aE['path']({
                'fill': aL[pN(0x29d)],
                'pointer-events': 'none'
            }),
            this['Ci'] = aE[pN(0x388)]({
                'fill': pN(0x3a9),
                'stroke': 'currentColor',
                'stroke-width': 0x1,
                'stroke-dasharray': pN(0x3dc),
                'pointer-events': pN(0x3a9)
            }),
            this['Li'] = aE['path']({
                'fill': 'none',
                'stroke': 'currentColor',
                'stroke-width': 0x2,
                'pointer-events': pN(0x3a9)
            }),
            this['Zt'] = aE[pN(0x3bd)]({
                'style': pN(0x21f) + aL['editorBackground'] + ';\x20touch-action:\x20none;\x20cursor:\x20crosshair;',
                'width': pN(0x1c7),
                'height': pN(0x1c7),
                'viewBox': pN(0x2a7) + this['$e'] + '\x20' + this['je'],
                'preserveAspectRatio': 'none'
            }, this['Ei'], this['Ci'], this['Li']),
            this[pN(0x593)] = aD[pN(0x504)]({
                'class': pN(0x193),
                'style': 'height:\x20100%;'
            }, this['Zt']),
            this['se'] = 0x0,
            this['ue'] = 0x0,
            this['oe'] = !0x1,
            this['he'] = !0x1,
            this['zi'] = !0x1,
            this['xe'] = null,
            this['Di'] = -0x1,
            this['Ai'] = -0x1,
            this['We'] = fG => {
                const pO = pN;
                fG[pO(0x1e4)]();
                const fH = this['Zt'][pO(0x26a)]();
                this['se'] = (fG['clientX'] || fG[pO(0x28c)]) - fH['left'],
                this['Ge']();
            }
            ,
            this['Ke'] = fG => {
                const pP = pN;
                fG['preventDefault']();
                const fH = this['Zt']['getBoundingClientRect']();
                this['se'] = fG['touches'][0x0][pP(0x430)] - fH['left'],
                this['Ge']();
            }
            ,
            this['Ye'] = fG => {
                const pQ = pN;
                if (null == this[pQ(0x593)]['offsetParent'])
                    return;
                const fH = this['Zt']['getBoundingClientRect']();
                this['se'] = (fG['clientX'] || fG['pageX']) - fH['left'],
                isNaN(this['se']) && (this['se'] = 0x0),
                this['Je']();
            }
            ,
            this['Qe'] = fG => {
                const pR = pN;
                if (null == this['container'][pR(0x366)])
                    return;
                if (!this['oe'])
                    return;
                fG[pR(0x1e4)]();
                const fH = this['Zt'][pR(0x26a)]();
                this['se'] = fG[pR(0x625)][0x0]['clientX'] - fH[pR(0x2bf)],
                isNaN(this['se']) && (this['se'] = 0x0),
                this['Je']();
            }
            ,
            this['Xe'] = fG => {
                const pS = pN;
                if (null != this['container'][pS(0x366)]) {
                    if (this['oe'] && this['$'][pS(0x25f)](this['xe']) && null != this['xe']) {
                        if (this['he'])
                            this['$'][pS(0x235)](this['xe']);
                        else {
                            const fH = this['$']['song'][pS(0x7b3)][this['$'][pS(0x733)]]['instruments'][this['$']['getCurrentInstrument']()];
                            this['zi'] ? this['$']['record'](new ch(this['$'],this['Bi'](this['se']),fH[pS(0x84b)])) : this['$']['record'](new ch(this['$'],fH['fadeIn'],this['Oi'](this['se'])));
                        }
                    }
                    this['xe'] = null,
                    this['he'] = !0x1,
                    this['oe'] = !0x1;
                }
            }
            ;
            const fF = this['Ni'](a1['fadeOutNeutral']);
            this['Ci']['setAttribute']('d', 'M\x20' + fF + '\x200\x20L\x20' + fF + '\x20' + this['je']),
            this['container']['addEventListener']('mousedown', this['We']),
            document['addEventListener']('mousemove', this['Ye']),
            document['addEventListener'](pN(0x1a9), this['Xe']),
            this[pN(0x593)][pN(0x258)]('touchstart', this['Ke']),
            this[pN(0x593)]['addEventListener'](pN(0x79b), this['Qe']),
            this['container'][pN(0x258)](pN(0x3d6), this['Xe']),
            this[pN(0x593)]['addEventListener'](pN(0x4b1), this['Xe']);
        }
        ['Ri'](fE) {
            return 0x1 + 0.4 * (this['$e'] - 0x2) * fE / (a1['fadeInRange'] - 0x1);
        }
        ['Bi'](fE) {
            const pT = jI;
            return aX(0x0, a1[pT(0x5bb)], Math[pT(0x874)]((fE - 0x1) * (a1[pT(0x5bb)] - 0x1) / (0.4 * this['$e'] - 0x2)));
        }
        ['Ni'](fE) {
            const pU = jI;
            return 0x1 + (this['$e'] - 0x2) * (0.5 + 0.5 * fE / (a1['fadeOutTicks'][pU(0x57c)] - 0x1));
        }
        ['Oi'](fE) {
            const pV = jI;
            return aX(0x0, a1[pV(0x3f9)]['length'], Math[pV(0x874)]((a1['fadeOutTicks']['length'] - 0x1) * ((fE - 0x1) / (this['$e'] - 0x2) - 0.5) / 0.5));
        }
        ['Ge']() {
            const pW = jI;
            isNaN(this['se']) && (this['se'] = 0x0),
            this['ue'] = this['se'],
            this['oe'] = !0x0,
            this['he'] = !0x1;
            const fE = this['$']['song'][pW(0x7b3)][this['$'][pW(0x733)]][pW(0x84c)][this['$']['getCurrentInstrument']()]
              , fF = this['Ri'](fE[pW(0x43f)])
              , fG = this['Ni'](fE[pW(0x84b)]);
            this['zi'] = this['ue'] < (fF + fG) / 0x2,
            this['xe'] = new bA(),
            this['$'][pW(0x86f)](this['xe']);
        }
        ['Je']() {
            const pX = jI;
            if (null != this['xe'] && this['$'][pX(0x25f)](this['xe']) ? this['xe'][pX(0x6b3)]() : this['oe'] = !0x1,
            this['xe'] = null,
            this['oe']) {
                const fE = new bA();
                if (this['xe'] = fE,
                this['$']['setProspectiveChange'](this['xe']),
                Math[pX(0x216)](this['se'] - this['ue']) > 0x4 && (this['he'] = !0x0),
                this['he']) {
                    const fF = this['$']['song']['channels'][this['$']['channel']]['instruments'][this['$']['getCurrentInstrument']()];
                    this['zi'] ? fE[pX(0x65e)](new ch(this['$'],this['Bi'](this['Ri'](fF[pX(0x43f)]) + this['se'] - this['ue']),fF['fadeOut'])) : fE[pX(0x65e)](new ch(this['$'],fF[pX(0x43f)],this['Oi'](this['Ni'](fF[pX(0x84b)]) + this['se'] - this['ue'])));
                }
            }
        }
        ['render']() {
            const pY = jI
              , fE = this['$']['song']['channels'][this['$'][pY(0x733)]][pY(0x84c)][this['$']['getCurrentInstrument']()];
            if (this['Di'] == fE['fadeIn'] && this['Ai'] == fE[pY(0x84b)])
                return;
            const fF = this['Ri'](fE['fadeIn'])
              , fG = this['Ni'](fE['fadeOut']);
            this['Li']['setAttribute']('d', 'M\x20' + fF + '\x200\x20L\x20' + fF + '\x20' + this['je'] + pY(0x73b) + fG + pY(0x818) + fG + '\x20' + this['je']);
            const fH = this['Ni'](a1['fadeOutNeutral']);
            let fI = '';
            fI += pY(0x6a1) + this['je'] + '\x20',
            fI += 'L\x20' + fF + '\x200\x20',
            bp[pY(0x3f6)](fE[pY(0x84b)]) > 0x0 ? (fI += 'L\x20' + fH + '\x200\x20',
            fI += 'L\x20' + fG + '\x20' + this['je'] + '\x20') : (fI += 'L\x20' + fG + '\x200\x20',
            fI += 'L\x20' + fH + '\x20' + this['je'] + '\x20'),
            fI += 'z',
            this['Ei']['setAttribute']('d', fI);
        }
    }
    class dr {
        constructor(fE, fF=!0x1) {
            const pZ = jI;
            this['$'] = fE,
            this['$e'] = 0x78,
            this['je'] = 0x1a,
            this['Hi'] = aE[pZ(0x388)]({
                'fill': aL['uiWidgetBackground'],
                'pointer-events': pZ(0x3a9)
            }),
            this['Gi'] = aE[pZ(0x388)]({
                'fill': pZ(0x1c3),
                'pointer-events': pZ(0x3a9)
            }),
            this['Ci'] = aE[pZ(0x388)]({
                'fill': 'none',
                'stroke': 'currentColor',
                'stroke-width': 0x1,
                'stroke-dasharray': pZ(0x3dc),
                'pointer-events': 'none'
            }),
            this['$i'] = aE['circle']({
                'fill': 'white',
                'stroke': pZ(0x3a9),
                'pointer-events': 'none',
                'r': 0x4
            }),
            this['Zt'] = aE['svg']({
                'style': pZ(0x21f) + aL[pZ(0x187)] + ';\x20touch-action:\x20none;',
                'width': pZ(0x1c7),
                'height': pZ(0x1c7),
                'viewBox': pZ(0x2a7) + this['$e'] + '\x20' + this['je'],
                'preserveAspectRatio': pZ(0x3a9)
            }, this['Hi'], this['Ci'], this['$i'], this['Gi']),
            this['_i'] = aD['div']({
                'style': 'position:\x20absolute;\x20bottom:\x200;\x20left:\x202px;\x20font-size:\x208px;\x20line-height:\x201;\x20pointer-events:\x20none;'
            }),
            this['container'] = aD['div']({
                'class': pZ(0x844),
                'style': pZ(0x2cb)
            }, this['Zt'], this['_i']),
            this['Ui'] = 0x2,
            this['Vi'] = !0x1,
            this['Wi'] = !0x1,
            this['se'] = 0x0,
            this['ne'] = 0x0,
            this['re'] = !0x1,
            this['oe'] = !0x1,
            this['he'] = !0x1,
            this['ji'] = !0x1,
            this['Ki'] = !0x1,
            this['Yi'] = 0x2,
            this['Ji'] = 0x0,
            this['Qi'] = 0x0,
            this['Xi'] = 0x0,
            this['xe'] = null,
            this['Zi'] = -0x1,
            this['ts'] = -0x1,
            this['es'] = -0x1,
            this['ss'] = -0x1,
            this['ns'] = -0x1,
            this['Ue'] = fG => {
                this['re'] = !0x0;
            }
            ,
            this['Ve'] = fG => {
                this['re'] = !0x1,
                this['os']();
            }
            ,
            this['We'] = fG => {
                const q0 = pZ;
                fG[q0(0x1e4)](),
                this['Wi'] = !0x1;
                const fH = this['Zt']['getBoundingClientRect']();
                this['se'] = ((fG['clientX'] || fG[q0(0x28c)]) - fH[q0(0x2bf)]) * this['$e'] / (fH[q0(0x576)] - fH[q0(0x2bf)]),
                this['ne'] = ((fG[q0(0x361)] || fG[q0(0x710)]) - fH[q0(0x5b6)]) * this['je'] / (fH['bottom'] - fH[q0(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Ge']();
            }
            ,
            this['Ke'] = fG => {
                const q1 = pZ;
                fG['preventDefault'](),
                this['Wi'] = !0x0;
                const fH = this['Zt']['getBoundingClientRect']();
                this['se'] = (fG[q1(0x625)][0x0][q1(0x430)] - fH[q1(0x2bf)]) * this['$e'] / (fH[q1(0x576)] - fH['left']),
                this['ne'] = (fG[q1(0x625)][0x0][q1(0x361)] - fH['top']) * this['je'] / (fH[q1(0x264)] - fH[q1(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Ge']();
            }
            ,
            this['Ye'] = fG => {
                const q2 = pZ;
                if (null == this['container'][q2(0x366)])
                    return;
                const fH = this['Zt'][q2(0x26a)]();
                this['se'] = ((fG[q2(0x430)] || fG['pageX']) - fH[q2(0x2bf)]) * this['$e'] / (fH[q2(0x576)] - fH['left']),
                this['ne'] = ((fG[q2(0x361)] || fG['pageY']) - fH['top']) * this['je'] / (fH['bottom'] - fH['top']),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['oe'] || this['rs'](),
                this['Je']();
            }
            ,
            this['Qe'] = fG => {
                const q3 = pZ;
                if (null == this['container']['offsetParent'])
                    return;
                this['oe'] && fG['preventDefault']();
                const fH = this['Zt'][q3(0x26a)]();
                this['se'] = (fG[q3(0x625)][0x0]['clientX'] - fH[q3(0x2bf)]) * this['$e'] / (fH['right'] - fH['left']),
                this['ne'] = (fG[q3(0x625)][0x0][q3(0x361)] - fH[q3(0x5b6)]) * this['je'] / (fH['bottom'] - fH['top']),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['oe'] || this['rs'](),
                this['Je']();
            }
            ,
            this['Xe'] = fG => {
                const q4 = pZ;
                if (null != this[q4(0x593)]['offsetParent']) {
                    if (this['oe'] && this['$']['lastChangeWas'](this['xe']) && null != this['xe']) {
                        if (this['ji'] || this['he'] || this['Wi'])
                            this['$']['record'](this['xe']);
                        else {
                            if (this['Ji'] < this['Mt']['controlPointCount'] && -0x1 != this['Ji']) {
                                const fH = this['Mt']['controlPoints'][this['Ji']];
                                this['$'][q4(0x235)](new cf(this['$'],this['Mt'],fH,this['Ji'],this['Vi'],!0x0));
                            }
                        }
                        this['os']();
                    }
                    this['xe'] = null,
                    this['he'] = !0x1,
                    this['Ki'] = !0x1,
                    this['oe'] = !0x1,
                    this['rs']();
                }
            }
            ,
            this['Vi'] = fF,
            this[pZ(0x593)][pZ(0x258)]('mousedown', this['We']),
            this['container'][pZ(0x258)](pZ(0x1f3), this['Ue']),
            this[pZ(0x593)][pZ(0x258)]('mouseout', this['Ve']),
            document['addEventListener']('mousemove', this['Ye']),
            document['addEventListener']('mouseup', this['Xe']),
            this[pZ(0x593)][pZ(0x258)](pZ(0x4c7), this['Ke']),
            this['container'][pZ(0x258)]('touchmove', this['Qe']),
            this['container']['addEventListener'](pZ(0x3d6), this['Xe']),
            this[pZ(0x593)]['addEventListener']('touchcancel', this['Xe']);
        }
        ['hs'](fE) {
            const q5 = jI;
            return a1[q5(0x564)] * fE / this['$e'] - 0.5;
        }
        ['ls'](fE) {
            return this['$e'] * (fE + 0.5) / a1['filterFreqRange'];
        }
        ['cs'](fE) {
            const q6 = jI;
            return (a1[q6(0x723)] - 0x1) * (0x1 - (fE - 0.5) / (this['je'] - 0x1));
        }
        ['us'](fE) {
            const q7 = jI;
            return (this['je'] - 0x1) * (0x1 - fE / (a1[q7(0x723)] - 0x1)) + 0.5;
        }
        ['Ge']() {
            this['oe'] = !0x0;
            const fE = new bA();
            this['xe'] = fE,
            this['$']['setProspectiveChange'](this['xe']),
            this['rs'](),
            this['Je']();
        }
        ['rs']() {
            const q8 = jI;
            this['Qi'] = this['hs'](this['se']),
            this['Xi'] = this['cs'](this['ne']),
            this['ji'] = !0x0,
            this['Ji'] = -0x1;
            let fE = Number['POSITIVE_INFINITY'];
            for (let fF = 0x0; fF < this['Mt'][q8(0x559)]; fF++) {
                const fG = this['Mt']['controlPoints'][fF]
                  , fH = Math['sqrt'](Math[q8(0x3b6)](this['ls'](fG[q8(0x395)]) - this['se'], 0x2) + Math[q8(0x3b6)](this['us'](fG['gain']) - this['ne'], 0x2));
                (fH <= 0xd || this['Mt'][q8(0x559)] >= a1[q8(0x1af)]) && fH < fE && (fE = fH,
                this['Ji'] = fF,
                this['ji'] = !0x1);
            }
            if (this['ji']) {
                const fI = this['se'] / this['$e'];
                this['Yi'] = fI < 0.2 ? 0x1 : fI < 0.8 ? 0x2 : 0x0;
            }
        }
        ['Je']() {
            const q9 = jI;
            if (null != this['xe'] && this['$'][q9(0x25f)](this['xe']) ? this['xe'][q9(0x6b3)]() : this['oe'] = !0x1,
            this['xe'] = null,
            this['Ki'] = !0x1,
            this['oe']) {
                const fE = new bA();
                if (this['xe'] = fE,
                this['$'][q9(0x86f)](this['xe']),
                this['ji']) {
                    const fF = Math[q9(0x2f6)](0x0, Math[q9(0x4c5)](a1[q9(0x723)] - 0x1, Math['round'](this['cs'](this['ne']))))
                      , fG = this['ps'](this['Mt'], this['hs'](this['se']), -0x1);
                    if (fG >= 0x0 && fG < a1['filterFreqRange']) {
                        const fH = new bb();
                        fH[q9(0x7d5)] = this['Yi'],
                        fH['freq'] = fG,
                        fH['gain'] = fF,
                        fE['append'](new cf(this['$'],this['Mt'],fH,this['Mt']['controlPointCount'],this['Vi']));
                    } else
                        this['Ki'] = !0x0;
                } else {
                    if (this['Ji'] >= this['Mt'][q9(0x559)] || -0x1 == this['Ji'])
                        this['xe'] = null,
                        this['oe'] = !0x1;
                    else {
                        const fI = this['hs'](this['se']) - this['Qi']
                          , fJ = this['cs'](this['ne']) - this['Xi']
                          , fK = this['Mt']['controlPoints'][this['Ji']]
                          , fL = Math['max'](0x0, Math['min'](a1['filterGainRange'] - 0x1, Math[q9(0x874)](fK['gain'] + fJ)))
                          , fM = this['ps'](this['Mt'], fK[q9(0x395)] + fI, this['Ji']);
                        0x0 == Math[q9(0x874)](fI) && 0x0 == Math['round'](fJ) && fM == fK['freq'] && fL == fK['gain'] || (this['he'] = !0x0),
                        fM >= 0x0 && fM < a1[q9(0x564)] ? fE[q9(0x65e)](new cg(this['$'],fK,fK[q9(0x395)],fM,fK['gain'],fL)) : (fE[q9(0x65e)](new cf(this['$'],this['Mt'],fK,this['Ji'],this['Vi'],!0x0)),
                        this['Ki'] = !0x0);
                    }
                }
            }
            (this['oe'] || this['re']) && this['os']();
        }
        ['ps'](fE, fF, fG) {
            const qa = jI
              , fH = Math['round'](fF);
            let fI = fH
              , fJ = fH
              , fK = fH <= fF;
            for (; ; ) {
                let fL = !0x1;
                const fM = fK ? fI : fJ;
                for (let fN = 0x0; fN < fE[qa(0x559)]; fN++)
                    if (fN != fG && fE[qa(0x47a)][fN]['freq'] == fM) {
                        fL = !0x0;
                        break;
                    }
                if (!fL)
                    return fM;
                fK = !fK,
                fK && fI--,
                fK || fJ++;
            }
        }
        static['fs'](fE, fF, fG, fH=!0x1) {
            const qb = jI;
            return 'M\x20' + (fE - fG) + '\x20' + fF + qb(0x878) + fG + '\x20' + fG + qb(0x2a2) + (fH ? 0x1 : 0x0) + '\x20' + 0x2 * fG + qb(0x72f) + fG + '\x20' + fG + qb(0x2a2) + (fH ? 0x1 : 0x0) + '\x20' + 0x2 * -fG + '\x200\x20';
        }
        ['os']() {
            const qc = jI;
            this['$i'][qc(0x821)][qc(0x714)] = qc(0x3a9),
            this['_i'][qc(0x40a)] = '';
            let fE = ''
              , fF = '';
            for (let fJ = 0x0; fJ < this['Mt'][qc(0x559)]; fJ++) {
                const fK = this['Mt'][qc(0x47a)][fJ]
                  , fL = this['ls'](fK['freq'])
                  , fM = this['us'](fK['gain']);
                fE += dr['fs'](fL, fM, this['Ui']),
                0x1 == fK[qc(0x7d5)] ? fF += qc(0x6a1) + fM + qc(0x76d) + fL + '\x20' + fM + '\x20' : 0x0 == fK['type'] && (fF += 'M\x20' + this['$e'] + '\x20' + fM + '\x20L\x20' + fL + '\x20' + fM + '\x20'),
                this['Ji'] == fJ && this['re'] && !this['oe'] && (this['$i'][qc(0x1d8)]('cx', String(fL)),
                this['$i'][qc(0x1d8)]('cy', String(fM)),
                this['$i']['style']['display'] = ''),
                (this['Ji'] == fJ || this['ji'] && this['oe'] && fJ == this['Mt']['controlPointCount'] - 0x1) && (this['re'] || this['oe']) && !this['Ki'] && (this['_i']['textContent'] = fJ + 0x1 + ':\x20' + a1['filterTypeNames'][fK['type']]);
            }
            this['Gi'][qc(0x1d8)]('d', fE),
            this['Ci'][qc(0x1d8)]('d', fF),
            this['ji'] && !this['oe'] && this['re'] && (this['_i']['textContent'] = '+\x20' + a1[qc(0x5f3)][this['Yi']]);
            const fG = [];
            for (let fN = 0x0; fN < this['Mt']['controlPointCount']; fN++) {
                const fO = this['Mt'][qc(0x47a)][fN]
                  , fP = new aS();
                fO[qc(0x44e)](fP, 0xaf00),
                fG['push'](fP);
            }
            const fH = new aT();
            let fI = qc(0x6a1) + this['je'] + '\x20';
            for (let fQ = -0x1; fQ <= a1[qc(0x564)]; fQ++) {
                const fR = bb['getHzFromSettingValue'](fQ)
                  , fS = 0x2 * Math['PI'] * fR / 0xaf00
                  , fT = Math[qc(0x828)](fS)
                  , fU = Math[qc(0x51b)](fS);
                let fV = 0x1;
                for (const fY of fG)
                    fH['analyzeComplex'](fY, fT, fU),
                    fV *= fH[qc(0x7f8)]();
                const fW = Math[qc(0x253)](fV) / a1['filterGainStep'] + a1[qc(0x749)]
                  , fX = this['us'](fW);
                fI += 'L\x20' + ap(this['ls'](fQ)) + '\x20' + ap(fX) + '\x20';
            }
            fI += 'L\x20' + this['$e'] + '\x20' + this['je'] + '\x20L\x200\x20' + this['je'] + '\x20z\x20',
            this['Hi'][qc(0x1d8)]('d', fI);
        }
        ['render']() {
            const qd = jI
              , fE = this['$']['song']['channels'][this['$']['channel']]['instruments'][this['$']['getCurrentInstrument']()]
              , fF = this['Vi'] ? fE['noteFilter'] : fE['eqFilter'];
            this['Mt'] != fF && (this['xe'] = null,
            this['oe'] = !0x1),
            this['Mt'] = fF,
            this['oe'] || this['rs']();
            let fG = 0x0
              , fH = 0x0
              , fI = 0x0;
            for (let fJ = 0x0; fJ < fF[qd(0x559)]; fJ++) {
                const fK = fF['controlPoints'][fJ];
                fG = 0x3 * fG + fK['type'],
                fH = fH * a1['filterFreqRange'] + fK['freq'],
                fI = fI * a1[qd(0x723)] + fK[qd(0x4c8)];
            }
            this['Zi'] == this['Ji'] && this['ts'] == fF['controlPointCount'] && this['es'] == fG && this['ss'] == fH && this['ns'] == fI || (this['Zi'] = this['Ji'],
            this['ts'] = fF[qd(0x559)],
            this['es'] = fG,
            this['ss'] = fH,
            this['ns'] = fI,
            this['os']());
        }
    }
    class du {
        constructor(fE, fF) {
            const qe = jI;
            this['ds'] = document['createTextNode'](''),
            this['_i'] = aD['div']({
                'class': qe(0x780)
            }, this['ds']),
            this['container'] = aD[qe(0x504)]({
                'class': 'channelBox',
                'style': qe(0x604) + (dv['patternHeight'] - 0x2) + 'px;'
            }, this['_i']),
            this['ys'] = -0x1,
            this['container']['style'][qe(0x28f)] = aL[qe(0x29d)],
            this['_i'][qe(0x821)]['color'] = fF;
        }
        ['setWidth'](fE) {
            const qf = jI;
            this[qf(0x593)]['style']['width'] = fE - 0x2 + 'px';
        }
        ['setIndex'](fE, fF, fG) {
            const qg = jI;
            this['ys'] != fE && (this['ys'] = fE,
            this['ds'][qg(0x612)] = String(fE)),
            this['_i']['style'][qg(0x2e7)] = fF ? aL[qg(0x4d7)] : fG,
            this[qg(0x593)]['style']['background'] = fF ? fG : 0x0 == fE ? 'none' : aL[qg(0x29d)];
        }
    }
    class dv {
        constructor(fE, fF) {
            const qh = jI;
            this['$'] = fE,
            this[qh(0x2c5)] = fF,
            this['gs'] = -0x1,
            this['bs'] = [],
            this['container'] = aD[qh(0x504)]({
                'class': 'channelRow'
            });
        }
        ['render']() {
            const qi = jI
              , fE = this['$'][qi(0x1c5)]();
            if (this['bs']['length'] != this['$']['song'][qi(0x647)]) {
                for (let fF = this['bs']['length']; fF < this['$'][qi(0x3c1)]['barCount']; fF++) {
                    const fG = new du(this[qi(0x2c5)],aL[qi(0x1f4)](this['$']['song'], this['index'])['secondaryChannel']);
                    fG[qi(0x3af)](fE),
                    this['container']['appendChild'](fG['container']),
                    this['bs'][fF] = fG;
                }
                for (let fH = this['$'][qi(0x3c1)]['barCount']; fH < this['bs']['length']; fH++)
                    this[qi(0x593)][qi(0x62d)](this['bs'][fH][qi(0x593)]);
                this['bs'][qi(0x57c)] = this['$']['song']['barCount'];
            }
            if (this['gs'] != fE) {
                this['gs'] = fE;
                for (let fI = 0x0; fI < this['bs'][qi(0x57c)]; fI++)
                    this['bs'][fI][qi(0x3af)](fE);
            }
            for (let fJ = 0x0; fJ < this['bs']['length']; fJ++) {
                const fK = this['$']['song'][qi(0x4d5)](this['index'], fJ)
                  , fL = fJ == this['$'][qi(0x6e2)] && this['index'] == this['$'][qi(0x733)]
                  , fM = null == fK || 0x0 == fK['notes'][qi(0x57c)]
                  , fN = this['bs'][fJ];
                if (fJ < this['$']['song']['barCount']) {
                    const fO = aL['getChannelColor'](this['$'][qi(0x3c1)], this['index']);
                    fN[qi(0x196)](this['$'][qi(0x3c1)][qi(0x7b3)][this['index']][qi(0x81a)][fJ], fL, fM && !fL ? fO['secondaryChannel'] : fO['primaryChannel']),
                    fN[qi(0x593)]['style']['visibility'] = 'visible';
                } else
                    fN[qi(0x593)][qi(0x821)][qi(0x72e)] = 'hidden';
            }
        }
    }
    dv[jI(0x48c)] = 0x1c;
    class dw {
        constructor(fE) {
            const qj = jI;
            this['$'] = fE,
            this['ws'] = aD['div']({
                'style': qj(0x36e) + aL[qj(0x187)] + ';\x20position:\x20sticky;\x20bottom:\x200;\x20left:\x200;\x20width:\x2032px;\x20height:\x2030px;'
            }),
            this['container'] = aD['div']({
                'class': 'muteEditor'
            }),
            this['vs'] = [],
            this['Pi'] = fF => {
                const qk = qj
                  , fG = this['vs']['indexOf'](fF[qk(0x46a)]);
                -0x1 != fG && (this['$'][qk(0x3c1)]['channels'][fG][qk(0x3ef)] = !this['$'][qk(0x3c1)][qk(0x7b3)][fG]['muted'],
                this['$'][qk(0x7e6)][qk(0x327)]());
            }
            ,
            this['container']['addEventListener'](qj(0x50e), this['Pi']);
        }
        [jI(0x247)]() {
            const ql = jI;
            if (this['$'][ql(0x7ed)][ql(0x2b5)]) {
                if (this['vs'][ql(0x57c)] != this['$'][ql(0x3c1)][ql(0x777)]()) {
                    for (let fE = this['vs']['length']; fE < this['$'][ql(0x3c1)]['getChannelCount'](); fE++) {
                        const fF = aD[ql(0x5f2)]({
                            'class': 'mute-button',
                            'title': ql(0x6fe),
                            'style': 'height:\x20' + (dv['patternHeight'] - 0x4) + ql(0x79a)
                        });
                        this[ql(0x593)]['appendChild'](fF),
                        this['vs'][fE] = fF;
                    }
                    for (let fG = this['$']['song'][ql(0x777)](); fG < this['vs']['length']; fG++)
                        this['container'][ql(0x62d)](this['vs'][fG]);
                    this['vs']['length'] = this['$']['song'][ql(0x777)](),
                    this[ql(0x593)]['appendChild'](this['ws']);
                }
                for (let fH = 0x0; fH < this['$'][ql(0x3c1)][ql(0x777)](); fH++)
                    this['$'][ql(0x3c1)]['channels'][fH]['muted'] ? this['vs'][fH]['classList']['add']('muted') : this['vs'][fH]['classList'][ql(0x3ee)]('muted');
            }
        }
    }
    class dx {
        constructor(fE) {
            const qm = jI;
            this['$'] = fE,
            this['ks'] = aD['div']({
                'style': qm(0x718)
            }),
            this['Ms'] = aE[qm(0x832)]({
                'fill': aL['playhead'],
                'x': 0x0,
                'y': 0x0,
                'width': 0x4,
                'height': 0x80
            }),
            this['xs'] = aE['rect']({
                'fill': 'none',
                'stroke': aL[qm(0x709)],
                'stroke-width': 0x2,
                'pointer-events': qm(0x3a9),
                'x': 0x1,
                'y': 0x1,
                'width': 0x1e,
                'height': 0x1e
            }),
            this['Ss'] = aE['path']({
                'fill': aL[qm(0x4d7)],
                'stroke': aL['invertedText'],
                'stroke-width': 0x1,
                'pointer-events': qm(0x3a9)
            }),
            this['Fs'] = aE['path']({
                'fill': aL['invertedText'],
                'stroke': aL[qm(0x4d7)],
                'stroke-width': 0x1,
                'pointer-events': 'none'
            }),
            this['Qt'] = aE[qm(0x832)]({
                'fill': aL['boxSelectionFill'],
                'stroke': aL[qm(0x709)],
                'stroke-width': 0x2,
                'stroke-dasharray': qm(0x590),
                'pointer-events': 'none',
                'visibility': 'hidden',
                'x': 0x1,
                'y': 0x1,
                'width': 0x3e,
                'height': 0x3e
            }),
            this['Zt'] = aE[qm(0x3bd)]({
                'style': qm(0x30b)
            }, this['Qt'], this['xs'], this['Ss'], this['Fs'], this['Ms']),
            this['Ps'] = aD['select']({
                'class': qm(0x78b),
                'style': qm(0x463)
            }),
            this['container'] = aD['div']({
                'class': qm(0x5e9),
                'style': qm(0x579)
            }, this['ks'], this['Zt'], this['Ps']),
            this['Is'] = [],
            this['se'] = 0x0,
            this['ne'] = 0x0,
            this['qs'] = 0x0,
            this['Ts'] = 0x0,
            this['Es'] = 0x0,
            this['Cs'] = 0x0,
            this['re'] = !0x1,
            this['Ls'] = !0x1,
            this['he'] = !0x1,
            this['zs'] = 0x20,
            this['Ds'] = -0x1,
            this['As'] = -0x1,
            this['Bs'] = 0x0,
            this['Os'] = -0x1,
            this['Wi'] = ao,
            this['Ns'] = () => {
                const qn = qm;
                this['$'][qn(0x1c9)]['setPattern'](this['Ps'][qn(0x690)]);
            }
            ,
            this['He'] = fG => {
                const qo = qm
                  , fH = this['zs'] * this['$'][qo(0x3eb)][qo(0x336)] - 0x2;
                this['Os'] != fH && (this['Os'] = fH,
                this['Ms'][qo(0x1d8)]('x', '' + fH)),
                window['requestAnimationFrame'](this['He']);
            }
            ,
            this['Rs'] = fG => {
                this['Ls'] = !0x0,
                this['he'] = !0x0,
                this['Hs'](fG),
                this['qs'] = this['Es'],
                this['Ts'] = this['Cs'];
            }
            ,
            this['Gs'] = fG => {
                this['Hs'](fG),
                this['qs'] == this['Es'] && this['Ts'] == this['Cs'] || fG['preventDefault'](),
                this['Ls'] && this['$s'](),
                this['ii']();
            }
            ,
            this['_s'] = fG => {
                this['Ls'] = !0x1,
                this['he'] = !0x1,
                this['ii']();
            }
            ,
            this['Ue'] = fG => {
                this['re'] || (this['re'] = !0x0);
            }
            ,
            this['Ve'] = fG => {
                this['re'] && (this['re'] = !0x1);
            }
            ,
            this['We'] = fG => {
                const qp = qm;
                fG['preventDefault'](),
                this['Ls'] = !0x0,
                this['Us'](fG),
                this['qs'] = this['Es'],
                this['Ts'] = this['Cs'],
                fG[qp(0x873)] ? (this['he'] = !0x0,
                this['$'][qp(0x1c9)][qp(0x3d4)](this['$'][qp(0x1c9)][qp(0x2fc)], this['Es'], this['$'][qp(0x1c9)][qp(0x1e5)], this['Cs']),
                this['$']['selection']['selectionUpdated']()) : (this['he'] = !0x1,
                this['$']['channel'] == this['Cs'] && this['$'][qp(0x6e2)] == this['Es'] || (this['$']['selection'][qp(0x1de)](this['Cs'], this['Es']),
                this['he'] = !0x0),
                this['$']['selection']['resetBoxSelection']());
            }
            ,
            this['Ye'] = fG => {
                this['Us'](fG),
                this['Ls'] && (this['qs'] == this['Es'] && this['Ts'] == this['Cs'] || (this['he'] = !0x0),
                this['$s']()),
                this['ii']();
            }
            ,
            this['Vs'] = fG => {
                const qq = qm;
                if (this['Ls'] && !this['he'] && this['$'][qq(0x733)] == this['Cs'] && this['$']['bar'] == this['Es']) {
                    const fH = this['ne'] % dv[qq(0x48c)] < dv[qq(0x48c)] / 0x2
                      , fI = this['$']['song']['patternsPerChannel'];
                    this['$'][qq(0x1c9)][qq(0x485)]((this['$'][qq(0x3c1)][qq(0x7b3)][this['Cs']]['bars'][this['Es']] + (fH ? 0x1 : fI)) % (fI + 0x1));
                }
                this['Ls'] = !0x1,
                this['he'] = !0x1,
                this['ii']();
            }
            ,
            window['requestAnimationFrame'](this['He']),
            this['Zt'][qm(0x258)](qm(0x49e), this['We']),
            document['addEventListener']('mousemove', this['Ye']),
            document[qm(0x258)]('mouseup', this['Vs']),
            this['Zt']['addEventListener'](qm(0x1f3), this['Ue']),
            this['Zt']['addEventListener'](qm(0x82c), this['Ve']),
            this['Ps'][qm(0x258)](qm(0x610), this['Ns']),
            this['Ps']['addEventListener'](qm(0x4c7), this['Rs']),
            this['Ps']['addEventListener']('touchmove', this['Gs']),
            this['Ps'][qm(0x258)]('touchend', this['_s']),
            this['Ps'][qm(0x258)]('touchcancel', this['_s']);
            let fF = !0x1;
            document[qm(0x258)](qm(0x49e), () => {
                fF || (this['Wi'] = !0x1,
                this['ii']()),
                fF = !0x0;
            }
            , !0x0),
            document[qm(0x258)](qm(0x4c7), () => {
                fF || (this['Wi'] = !0x0,
                this['ii']()),
                fF = !0x0;
            }
            , !0x0);
        }
        ['movePlayheadToMouse']() {
            return !!this['re'] && (this['$']['synth']['playhead'] = this['Es'] + this['se'] % this['zs'] / this['zs'],
            !0x0);
        }
        ['$s']() {
            const qr = jI;
            this['$'][qr(0x1c9)][qr(0x3d4)](this['$']['selection'][qr(0x2fc)], this['Es'], this['$'][qr(0x1c9)]['boxSelectionY0'], this['Cs']),
            this['$']['selection'][qr(0x2f5)]();
        }
        ['Hs'](fE) {
            const qs = jI
              , fF = this['Zt'][qs(0x26a)]();
            this['se'] = fE['touches'][0x0][qs(0x430)] - fF[qs(0x2bf)],
            this['ne'] = fE['touches'][0x0]['clientY'] - fF[qs(0x5b6)],
            isNaN(this['se']) && (this['se'] = 0x0),
            isNaN(this['ne']) && (this['ne'] = 0x0),
            this['Es'] = Math['floor'](Math[qs(0x4c5)](this['$'][qs(0x3c1)]['barCount'] - 0x1, Math[qs(0x2f6)](0x0, this['se'] / this['zs']))),
            this['Cs'] = Math[qs(0x4fb)](Math['min'](this['$'][qs(0x3c1)]['getChannelCount']() - 0x1, Math[qs(0x2f6)](0x0, this['ne'] / dv['patternHeight'])));
        }
        ['Us'](fE) {
            const qt = jI
              , fF = this['Zt'][qt(0x26a)]();
            this['se'] = (fE[qt(0x430)] || fE[qt(0x28c)]) - fF['left'],
            this['ne'] = (fE['clientY'] || fE[qt(0x710)]) - fF['top'],
            this['Es'] = Math[qt(0x4fb)](Math[qt(0x4c5)](this['$']['song'][qt(0x647)] - 0x1, Math[qt(0x2f6)](0x0, this['se'] / this['zs']))),
            this['Cs'] = Math['floor'](Math[qt(0x4c5)](this['$']['song']['getChannelCount']() - 0x1, Math['max'](0x0, this['ne'] / dv['patternHeight'])));
        }
        ['ii']() {
            const qu = jI;
            let fE = this['Cs']
              , fF = this['Es'];
            this['Wi'] && (fF = this['$']['bar'],
            fE = this['$'][qu(0x733)]);
            const fG = fF == this['$']['bar'] && fE == this['$']['channel'];
            if (!this['re'] || this['Ls'] || fG ? this['xs'][qu(0x821)]['visibility'] = 'hidden' : (this['xs'][qu(0x1d8)]('x', '' + (0x1 + this['zs'] * fF)),
            this['xs'][qu(0x1d8)]('y', '' + (0x1 + dv['patternHeight'] * fE)),
            this['xs'][qu(0x1d8)]('height', '' + (dv['patternHeight'] - 0x2)),
            this['xs']['setAttribute'](qu(0x387), '' + (this['zs'] - 0x2)),
            this['xs']['style']['visibility'] = 'visible'),
            (this['re'] || this['Wi']) && fG) {
                const fJ = this['ne'] % dv[qu(0x48c)] < dv[qu(0x48c)] / 0x2
                  , fK = this['zs'] * (fF + 0.8)
                  , fL = dv[qu(0x48c)] * (fE + 0.5)
                  , fM = 0.1 * dv['patternHeight']
                  , fN = 0.4 * dv['patternHeight']
                  , fO = 0.175 * dv['patternHeight'];
                this['Ss']['setAttribute']('fill', fJ && !this['Wi'] ? aL['hoverPreview'] : aL[qu(0x4d7)]),
                this['Fs']['setAttribute'](qu(0x88a), fJ || this['Wi'] ? aL[qu(0x4d7)] : aL['hoverPreview']),
                this['Ss']['setAttribute']('d', 'M\x20' + fK + '\x20' + (fL - fN) + '\x20L\x20' + (fK + fO) + '\x20' + (fL - fM) + qu(0x76d) + (fK - fO) + '\x20' + (fL - fM) + '\x20z'),
                this['Fs'][qu(0x1d8)]('d', 'M\x20' + fK + '\x20' + (fL + fN) + qu(0x76d) + (fK + fO) + '\x20' + (fL + fM) + qu(0x76d) + (fK - fO) + '\x20' + (fL + fM) + '\x20z'),
                this['Ss'][qu(0x821)][qu(0x72e)] = qu(0x4b8),
                this['Fs'][qu(0x821)][qu(0x72e)] = qu(0x4b8);
            } else
                this['Ss']['style']['visibility'] = 'hidden',
                this['Fs'][qu(0x821)][qu(0x72e)] = 'hidden';
            this['Ps'][qu(0x821)]['left'] = this['zs'] * this['$'][qu(0x6e2)] + 'px',
            this['Ps'][qu(0x821)]['width'] = this['zs'] + 'px',
            this['Ps']['style'][qu(0x5b6)] = dv[qu(0x48c)] * this['$'][qu(0x733)] + 'px',
            this['Ps']['style'][qu(0x33e)] = dv['patternHeight'] + 'px';
            const fH = this['$']['song']['patternsPerChannel'] + 0x1;
            for (let fP = this['Bs']; fP < fH; fP++)
                this['Ps'][qu(0x2b8)](aD['option']({
                    'value': fP
                }, fP));
            for (let fQ = fH; fQ < this['Bs']; fQ++)
                this['Ps']['removeChild'](this['Ps'][qu(0x3d9)]);
            this['Bs'] = fH;
            const fI = this['$']['song']['channels'][this['$']['channel']][qu(0x81a)][this['$']['bar']];
            this['Ps']['selectedIndex'] != fI && (this['Ps'][qu(0x690)] = fI);
        }
        ['render']() {
            const qv = jI;
            if (this['zs'] = this['$'][qv(0x1c5)](),
            this['Is']['length'] != this['$'][qv(0x3c1)]['getChannelCount']()) {
                for (let fG = this['Is']['length']; fG < this['$']['song'][qv(0x777)](); fG++) {
                    const fH = new dv(this['$'],fG);
                    this['Is'][fG] = fH,
                    this['ks'][qv(0x2b8)](fH['container']);
                }
                for (let fI = this['$'][qv(0x3c1)][qv(0x777)](); fI < this['Is']['length']; fI++)
                    this['ks']['removeChild'](this['Is'][fI]['container']);
                this['Is']['length'] = this['$'][qv(0x3c1)][qv(0x777)](),
                this['Ls'] = !0x1;
            }
            for (let fJ = 0x0; fJ < this['$']['song'][qv(0x777)](); fJ++)
                this['Is'][fJ][qv(0x247)]();
            const fE = this['zs'] * this['$'][qv(0x3c1)]['barCount'];
            this['Ds'] != fE && (this['Ds'] = fE,
            this['ks']['style']['width'] = fE + 'px',
            this['container']['style'][qv(0x387)] = fE + 'px',
            this['Zt'][qv(0x1d8)]('width', fE + ''),
            this['Ls'] = !0x1);
            const fF = this['$'][qv(0x3c1)]['getChannelCount']() * dv['patternHeight'];
            this['As'] != fF && (this['As'] = fF,
            this['Zt']['setAttribute'](qv(0x33e), '' + fF),
            this['Ms'][qv(0x1d8)]('height', '' + fF),
            this['container'][qv(0x821)][qv(0x33e)] = fF + 'px'),
            this['Ps']['style'][qv(0x714)] = this['Wi'] ? '' : 'none',
            this['$'][qv(0x1c9)]['boxSelectionActive'] ? (this['Qt']['setAttribute']('x', String(this['zs'] * this['$'][qv(0x1c9)][qv(0x341)] + 0x1)),
            this['Qt'][qv(0x1d8)]('y', String(dv[qv(0x48c)] * this['$']['selection'][qv(0x597)] + 0x1)),
            this['Qt']['setAttribute'](qv(0x387), String(this['zs'] * this['$'][qv(0x1c9)][qv(0x300)] - 0x2)),
            this['Qt'][qv(0x1d8)](qv(0x33e), String(dv[qv(0x48c)] * this['$'][qv(0x1c9)][qv(0x496)] - 0x2)),
            this['Qt']['setAttribute']('visibility', qv(0x4b8))) : this['Qt']['setAttribute']('visibility', qv(0x47b)),
            this['ii']();
        }
    }
    const {button: dy, label: dz, div: dA, form: dB, h2: dC, input: dD} = aD;
    class dE {
        constructor(fE) {
            const qw = jI;
            this['$'] = fE,
            this['Ws'] = dD({
                'type': qw(0x6c1),
                'accept': '.json,application/json,.mid,.midi,audio/midi,audio/x-midi'
            }),
            this['js'] = dy({
                'class': qw(0x418),
                'style': qw(0x2f9)
            }, qw(0x519)),
            this['Ks'] = dy({
                'class': qw(0x210)
            }),
            this['Ys'] = dB({
                'style': qw(0x581)
            }, dz({
                'class': qw(0x5ce)
            }, dD({
                'type': 'radio',
                'name': qw(0x24c),
                'value': qw(0x53c)
            }), aE('\x09\x09\x09\x09\x09<svg\x20viewBox=\x22-4\x20-1\x2028\x2022\x22>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x220\x22\x20y=\x220\x22\x20width=\x2220\x22\x20height=\x2220\x22\x20fill=\x22none\x22\x20stroke=\x22currentColor\x22\x20stroke-width=\x221\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x222\x22\x20y=\x222\x22\x20width=\x2211\x22\x20height=\x2210\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x2214\x22\x20y=\x222\x22\x20width=\x224\x22\x20height=\x2216\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x222\x22\x20y=\x2213\x22\x20width=\x2211\x22\x20height=\x225\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09</svg>\x0a\x09\x09\x09\x09'), dA('Small')), dz({
                'class': qw(0x5ce)
            }, dD({
                'type': qw(0x743),
                'name': 'layout',
                'value': 'long'
            }), aE(qw(0x4bb)), dA('Long')), dz({
                'class': 'layout-option'
            }, dD({
                'type': 'radio',
                'name': qw(0x24c),
                'value': 'tall'
            }), aE('\x09\x09\x09\x09\x09<svg\x20viewBox=\x22-1\x20-1\x2028\x2022\x22>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x220\x22\x20y=\x220\x22\x20width=\x2226\x22\x20height=\x2220\x22\x20fill=\x22none\x22\x20stroke=\x22currentColor\x22\x20stroke-width=\x221\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x2211\x22\x20y=\x222\x22\x20width=\x228\x22\x20height=\x2216\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x2220\x22\x20y=\x222\x22\x20width=\x224\x22\x20height=\x2216\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09\x09<rect\x20x=\x222\x22\x20y=\x222\x22\x20width=\x228\x22\x20height=\x2216\x22\x20fill=\x22currentColor\x22/>\x0a\x09\x09\x09\x09\x09</svg>\x0a\x09\x09\x09\x09'), dA(qw(0x2ef)))),
            this['container'] = dA({
                'class': qw(0x6df),
                'style': qw(0x2a9)
            }, dC('Layout'), this['Ys'], dA({
                'style': qw(0x1ad)
            }, this['js']), this['Ks']),
            this['U'] = () => {
                this['$']['undo']();
            }
            ,
            this['cleanUp'] = () => {
                const qx = qw;
                this['js'][qx(0x575)]('click', this['Js']),
                this['Ks'][qx(0x575)]('click', this['U']),
                this['container']['removeEventListener'](qx(0x1df), this['Qs']);
            }
            ,
            this['Qs'] = fF => {
                'BUTTON' != fF['target']['tagName'] && 0xd == fF['keyCode'] && this['Js']();
            }
            ,
            this['Js'] = () => {
                const qy = qw;
                this['$'][qy(0x7ed)][qy(0x24c)] = this['Ys'][qy(0x627)][qy(0x24c)][qy(0x313)],
                this['$']['prefs'][qy(0x4e4)](),
                aN[qy(0x54a)](this['$'][qy(0x7ed)]['layout']),
                this['U']();
            }
            ,
            this['Ws'][qw(0x274)](),
            setTimeout( () => this['Ws']['focus']()),
            this['js']['addEventListener'](qw(0x50e), this['Js']),
            this['Ks'][qw(0x258)](qw(0x50e), this['U']),
            this[qw(0x593)][qw(0x258)](qw(0x1df), this['Qs']),
            this['Ys']['elements'][qw(0x24c)]['value'] = this['$'][qw(0x7ed)][qw(0x24c)];
        }
    }
    class dF {
        constructor(fE) {
            const qz = jI;
            this['$'] = fE,
            this['je'] = 0x14,
            this['Xs'] = 0x0,
            this['Zs'] = 0x1,
            this['tn'] = 0x2,
            this['en'] = aE[qz(0x388)]({
                'fill': qz(0x3a9),
                'stroke': aL[qz(0x2b7)],
                'stroke-width': 0x4
            }),
            this['$i'] = aE['path']({
                'fill': aL[qz(0x709)],
                'pointer-events': 'none'
            }),
            this['Zt'] = aE[qz(0x3bd)]({
                'style': qz(0x51d),
                'height': this['je']
            }, this['en'], this['$i']),
            this['container'] = aD[qz(0x504)]({
                'class': qz(0x637)
            }, this['Zt']),
            this['zs'] = 0x20,
            this['sn'] = null,
            this['Pe'] = {
                'startBar': -0x1,
                'mode': -0x1
            },
            this['se'] = 0x0,
            this['nn'] = 0x0,
            this['on'] = 0x0,
            this['rn'] = !0x1,
            this['hn'] = !0x1,
            this['oe'] = !0x1,
            this['re'] = !0x1,
            this['an'] = -0x1,
            this['ln'] = -0x1,
            this['cn'] = 0x0,
            this['gs'] = -0x1,
            this['Ue'] = fF => {
                this['re'] || (this['re'] = !0x0,
                this['ii']());
            }
            ,
            this['Ve'] = fF => {
                this['re'] && (this['re'] = !0x1,
                this['ii']());
            }
            ,
            this['We'] = fF => {
                const qA = qz;
                fF['preventDefault'](),
                this['oe'] = !0x0;
                const fG = this['Zt'][qA(0x26a)]();
                this['se'] = (fF['clientX'] || fF['pageX']) - fG[qA(0x2bf)],
                this['ei'](),
                this['ii'](),
                this['Ye'](fF);
            }
            ,
            this['Ke'] = fF => {
                const qB = qz;
                this['oe'] = !0x0;
                const fG = this['Zt']['getBoundingClientRect']();
                this['se'] = fF[qB(0x625)][0x0][qB(0x430)] - fG[qB(0x2bf)],
                this['ei'](),
                this['ii'](),
                this['nn'] = fF['touches'][0x0]['clientX'],
                this['on'] = fF['touches'][0x0][qB(0x361)],
                this['hn'] = !0x1,
                this['rn'] = !0x1;
            }
            ,
            this['Ye'] = fF => {
                const qC = qz
                  , fG = this['Zt']['getBoundingClientRect']();
                this['se'] = (fF[qC(0x430)] || fF[qC(0x28c)]) - fG['left'],
                this['Je']();
            }
            ,
            this['Qe'] = fF => {
                const qD = qz;
                if (!this['oe'])
                    return;
                const fG = this['Zt']['getBoundingClientRect']();
                this['se'] = fF[qD(0x625)][0x0]['clientX'] - fG[qD(0x2bf)],
                this['hn'] || this['rn'] || (Math[qD(0x216)](fF[qD(0x625)][0x0][qD(0x361)] - this['on']) > 0xa ? this['rn'] = !0x0 : Math['abs'](fF[qD(0x625)][0x0]['clientX'] - this['nn']) > 0xa && (this['hn'] = !0x0)),
                this['hn'] && (this['Je'](),
                fF['preventDefault']());
            }
            ,
            this['un'] = fF => {
                const qE = qz;
                fF[qE(0x1e4)](),
                this['rn'] || (this['Je'](),
                this['re'] = !0x1,
                this['Xe'](fF),
                this['ii']()),
                this['oe'] = !0x1;
            }
            ,
            this['Xe'] = fF => {
                null != this['sn'] && this['$']['record'](this['sn']),
                this['sn'] = null,
                this['oe'] = !0x1,
                this['ei'](),
                this['pn']();
            }
            ,
            this['fn'] = () => {
                this['pn']();
            }
            ,
            this['ei'](),
            this['pn'](),
            this['$']['notifier'][qz(0x4ed)](this['fn']),
            this['container']['addEventListener']('mousedown', this['We']),
            document['addEventListener']('mousemove', this['Ye']),
            document[qz(0x258)]('mouseup', this['Xe']),
            this['container'][qz(0x258)]('mouseover', this['Ue']),
            this[qz(0x593)]['addEventListener'](qz(0x82c), this['Ve']),
            this[qz(0x593)][qz(0x258)](qz(0x4c7), this['Ke']),
            this['container']['addEventListener'](qz(0x79b), this['Qe']),
            this[qz(0x593)]['addEventListener'](qz(0x3d6), this['un']),
            this['container'][qz(0x258)](qz(0x4b1), this['un']);
        }
        ['ei']() {
            const qF = jI
              , fE = this['se'] / this['zs'];
            this['Pe']['startBar'] = fE,
            fE > this['$']['song']['loopStart'] - 0.25 && fE < this['$'][qF(0x3c1)][qF(0x699)] + this['$'][qF(0x3c1)][qF(0x278)] + 0.25 ? fE - this['$']['song']['loopStart'] < 0.5 * this['$']['song'][qF(0x278)] ? this['Pe']['mode'] = this['Xs'] : this['Pe'][qF(0x32b)] = this['Zs'] : this['Pe'][qF(0x32b)] = this['tn'];
        }
        ['dn'](fE) {
            const qG = jI;
            let fF = Math[qG(0x874)](fE - this['$'][qG(0x3c1)][qG(0x278)] / 0x2)
              , fG = fF + this['$'][qG(0x3c1)]['loopLength'];
            return fF < 0x0 && (fG -= fF,
            fF = 0x0),
            fG > this['$']['song'][qG(0x647)] && (fF -= fG - this['$'][qG(0x3c1)][qG(0x647)],
            fG = this['$']['song']['barCount']),
            {
                'start': fF,
                'length': fG - fF
            };
        }
        ['Je']() {
            const qH = jI;
            if (this['oe']) {
                let fE = this['$']['song']['loopStart']
                  , fF = this['$']['song']['loopStart'] + this['$']['song'][qH(0x278)];
                null != this['sn'] && this['$']['lastChangeWas'](this['sn']) && (fE = this['sn'][qH(0x2ee)],
                fF = fE + this['sn'][qH(0x214)]);
                const fG = this['se'] / this['zs'];
                let fH, fI, fJ;
                if (this['Pe'][qH(0x32b)] == this['Xs'])
                    fH = fE + Math['round'](fG - this['Pe'][qH(0x1a1)]),
                    fI = fF,
                    fH < 0x0 && (fH = 0x0),
                    fH >= this['$']['song']['barCount'] && (fH = this['$'][qH(0x3c1)]['barCount']),
                    fH == fI ? fH = fI - 0x1 : fH > fI && (fJ = fH,
                    fH = fI,
                    fI = fJ),
                    this['sn'] = new cw(this['$'],fE,fF - fE,fH,fI - fH);
                else {
                    if (this['Pe'][qH(0x32b)] == this['Zs'])
                        fH = fE,
                        fI = fF + Math['round'](fG - this['Pe'][qH(0x1a1)]),
                        fI < 0x0 && (fI = 0x0),
                        fI >= this['$']['song']['barCount'] && (fI = this['$'][qH(0x3c1)][qH(0x647)]),
                        fI == fH ? fI = fH + 0x1 : fI < fH && (fJ = fH,
                        fH = fI,
                        fI = fJ),
                        this['sn'] = new cw(this['$'],fE,fF - fE,fH,fI - fH);
                    else {
                        if (this['Pe']['mode'] == this['tn']) {
                            const fK = this['dn'](fG);
                            this['sn'] = new cw(this['$'],fE,fF - fE,fK['start'],fK['length']);
                        }
                    }
                }
                this['$'][qH(0x3eb)][qH(0x6ab)](),
                this['$'][qH(0x7ed)]['autoFollow'] && new bV(this['$'],this['$'][qH(0x733)],Math['floor'](this['$']['synth'][qH(0x336)]),!0x0),
                this['$'][qH(0x86f)](this['sn']);
            } else
                this['ei'](),
                this['ii']();
        }
        ['ii']() {
            const qI = jI
              , fE = this['re'] && !this['oe'];
            if (this['$i'][qI(0x821)]['visibility'] = fE ? 'visible' : 'hidden',
            fE) {
                const fF = this['je'] / 0x2;
                let fG = this['$'][qI(0x3c1)][qI(0x699)] * this['zs']
                  , fH = (this['$']['song']['loopStart'] + this['$']['song']['loopLength']) * this['zs'];
                if (this['Pe'][qI(0x32b)] == this['Xs'])
                    fH = this['$']['song']['loopStart'] * this['zs'] + 0x2 * fF;
                else {
                    if (this['Pe']['mode'] == this['Zs'])
                        fG = (this['$']['song']['loopStart'] + this['$'][qI(0x3c1)]['loopLength']) * this['zs'] - 0x2 * fF;
                    else {
                        const fI = this['dn'](this['Pe']['startBar']);
                        fG = fI['start'] * this['zs'],
                        fH = (fI[qI(0x1b7)] + fI[qI(0x57c)]) * this['zs'];
                    }
                }
                this['$i'][qI(0x1d8)]('d', 'M\x20' + (fG + fF) + qI(0x6a2) + (fH - fF) + '\x204\x20A\x20' + (fF - 0x4) + '\x20' + (fF - 0x4) + qI(0x2ec) + (fH - fF) + '\x20' + (this['je'] - 0x4) + qI(0x76d) + (fG + fF) + '\x20' + (this['je'] - 0x4) + qI(0x867) + (fF - 0x4) + '\x20' + (fF - 0x4) + qI(0x2ec) + (fG + fF) + '\x204\x20z');
            }
        }
        ['pn']() {
            const qJ = jI;
            this['zs'] = this['$']['getBarWidth']();
            const fE = this['je'] / 0x2
              , fF = this['$'][qJ(0x3c1)]['loopStart'] * this['zs']
              , fG = (this['$']['song'][qJ(0x699)] + this['$']['song'][qJ(0x278)]) * this['zs'];
            if (this['cn'] != this['$'][qJ(0x3c1)]['barCount'] || this['gs'] != this['zs']) {
                this['cn'] = this['$']['song']['barCount'],
                this['gs'] = this['zs'];
                const fH = this['zs'] * this['$']['song']['barCount'];
                this[qJ(0x593)]['style'][qJ(0x387)] = fH + 'px',
                this['Zt']['setAttribute'](qJ(0x387), fH + '');
            }
            this['an'] == fF && this['ln'] == fG || (this['an'] = fF,
            this['ln'] = fG,
            this['en'][qJ(0x1d8)]('d', 'M\x20' + (fF + fE) + qJ(0x3c7) + (fG - fE) + '\x202\x20A\x20' + (fE - 0x2) + '\x20' + (fE - 0x2) + '\x200\x200\x201\x20' + (fG - fE) + '\x20' + (this['je'] - 0x2) + '\x20L\x20' + (fF + fE) + '\x20' + (this['je'] - 0x2) + '\x20A\x20' + (fE - 0x2) + '\x20' + (fE - 0x2) + qJ(0x2ec) + (fF + fE) + '\x202\x20z')),
            this['ii']();
        }
    }
    class dG {
        constructor(fE, fF) {
            const qK = jI;
            this['$'] = fE,
            this['mn'] = fF,
            this['$e'] = 0x78,
            this['je'] = 0x1a,
            this['yn'] = aE['path']({
                'fill': aL['uiWidgetBackground'],
                'pointer-events': 'none'
            }),
            this['gn'] = aE[qK(0x3bd)]({
                'pointer-events': qK(0x3a9)
            }),
            this['bn'] = aE['svg']({
                'pointer-events': qK(0x3a9)
            }),
            this['wn'] = aE[qK(0x388)]({
                'fill': 'none',
                'stroke': 'currentColor',
                'stroke-width': 0x2,
                'pointer-events': 'none'
            }),
            this['vn'] = aE['path']({
                'fill': qK(0x1c3),
                'pointer-events': qK(0x3a9)
            }),
            this['Zt'] = aE['svg']({
                'style': qK(0x21f) + aL[qK(0x187)] + qK(0x27e),
                'width': qK(0x1c7),
                'height': qK(0x1c7),
                'viewBox': qK(0x2a7) + this['$e'] + '\x20' + this['je'],
                'preserveAspectRatio': 'none'
            }, this['yn'], this['gn'], this['bn'], this['wn'], this['vn']),
            this[qK(0x593)] = aD[qK(0x504)]({
                'class': qK(0x5ee),
                'style': qK(0x3e9)
            }, this['Zt']),
            this['se'] = 0x0,
            this['ne'] = 0x0,
            this['kn'] = 0x0,
            this['Mn'] = 0x0,
            this['oe'] = !0x1,
            this['sn'] = null,
            this['xn'] = '',
            this['ze'] = !0x0,
            this['We'] = fG => {
                const qL = qK;
                fG['preventDefault'](),
                this['oe'] = !0x0;
                const fH = this['Zt'][qL(0x26a)]();
                this['se'] = ((fG[qL(0x430)] || fG[qL(0x28c)]) - fH[qL(0x2bf)]) * this['$e'] / (fH[qL(0x576)] - fH['left']),
                this['ne'] = ((fG['clientY'] || fG[qL(0x710)]) - fH['top']) * this['je'] / (fH[qL(0x264)] - fH[qL(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['kn'] = this['hs'](this['se']),
                this['Mn'] = this['Sn'](this['ne']),
                this['Je']();
            }
            ,
            this['Ke'] = fG => {
                const qM = qK;
                fG[qM(0x1e4)](),
                this['oe'] = !0x0;
                const fH = this['Zt'][qM(0x26a)]();
                this['se'] = (fG['touches'][0x0]['clientX'] - fH[qM(0x2bf)]) * this['$e'] / (fH[qM(0x576)] - fH[qM(0x2bf)]),
                this['ne'] = (fG['touches'][0x0]['clientY'] - fH['top']) * this['je'] / (fH['bottom'] - fH['top']),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['kn'] = this['hs'](this['se']),
                this['Mn'] = this['Sn'](this['ne']),
                this['Je']();
            }
            ,
            this['Ye'] = fG => {
                const qN = qK;
                if (null == this[qN(0x593)][qN(0x366)])
                    return;
                const fH = this['Zt'][qN(0x26a)]();
                this['se'] = ((fG[qN(0x430)] || fG[qN(0x28c)]) - fH['left']) * this['$e'] / (fH[qN(0x576)] - fH['left']),
                this['ne'] = ((fG[qN(0x361)] || fG['pageY']) - fH[qN(0x5b6)]) * this['je'] / (fH['bottom'] - fH['top']),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Je']();
            }
            ,
            this['Qe'] = fG => {
                const qO = qK;
                if (null == this[qO(0x593)][qO(0x366)])
                    return;
                if (!this['oe'])
                    return;
                fG['preventDefault']();
                const fH = this['Zt']['getBoundingClientRect']();
                this['se'] = (fG[qO(0x625)][0x0]['clientX'] - fH['left']) * this['$e'] / (fH['right'] - fH['left']),
                this['ne'] = (fG[qO(0x625)][0x0][qO(0x361)] - fH[qO(0x5b6)]) * this['je'] / (fH['bottom'] - fH[qO(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Je']();
            }
            ,
            this['Xe'] = fG => {
                this['oe'] && (this['$']['record'](this['sn']),
                this['sn'] = null),
                this['oe'] = !0x1;
            }
            ;
            for (let fG = 0x0; fG < a1['spectrumControlPoints']; fG += a1['spectrumControlPointsPerOctave'])
                this['gn'][qK(0x2b8)](aE[qK(0x832)]({
                    'fill': aL['tonic'],
                    'x': (fG + 0x1) * this['$e'] / (a1['spectrumControlPoints'] + 0x2) - 0x1,
                    'y': 0x0,
                    'width': 0x2,
                    'height': this['je']
                }));
            for (let fH = 0x4; fH <= a1['spectrumControlPoints']; fH += a1['spectrumControlPointsPerOctave'])
                this['bn']['appendChild'](aE['rect']({
                    'fill': aL[qK(0x887)],
                    'x': (fH + 0x1) * this['$e'] / (a1['spectrumControlPoints'] + 0x2) - 0x1,
                    'y': 0x0,
                    'width': 0x2,
                    'height': this['je']
                }));
            this['container']['addEventListener'](qK(0x49e), this['We']),
            document[qK(0x258)]('mousemove', this['Ye']),
            document[qK(0x258)]('mouseup', this['Xe']),
            this[qK(0x593)]['addEventListener'](qK(0x4c7), this['Ke']),
            this['container']['addEventListener']('touchmove', this['Qe']),
            this['container'][qK(0x258)](qK(0x3d6), this['Xe']),
            this['container']['addEventListener'](qK(0x4b1), this['Xe']);
        }
        ['hs'](fE) {
            return (a1['spectrumControlPoints'] + 0x2) * fE / this['$e'] - 0x1;
        }
        ['Sn'](fE) {
            return a1['spectrumMax'] * (0x1 - (fE - 0x1) / (this['je'] - 0x2));
        }
        ['Je']() {
            const qP = jI;
            if (this['oe']) {
                const fE = this['hs'](this['se'])
                  , fF = this['Sn'](this['ne'])
                  , fG = this['$'][qP(0x3c1)][qP(0x7b3)][this['$']['channel']]['instruments'][this['$'][qP(0x3fe)]()]
                  , fH = null == this['mn'] ? fG[qP(0x80c)] : fG[qP(0x526)][this['mn']];
                if (fE != this['kn']) {
                    const fI = (fF - this['Mn']) / (fE - this['kn'])
                      , fJ = this['Mn'] - this['kn'] * fI
                      , fK = Math['ceil'](Math[qP(0x4c5)](this['kn'], fE))
                      , fL = Math[qP(0x4fb)](Math['max'](this['kn'], fE));
                    for (let fM = fK; fM <= fL; fM++)
                        fM < 0x0 || fM >= a1[qP(0x6e7)] || (fH[qP(0x5ee)][fM] = Math[qP(0x2f6)](0x0, Math['min'](a1['spectrumMax'], Math['round'](fM * fI + fJ))));
                }
                fH['spectrum'][Math[qP(0x2f6)](0x0, Math[qP(0x4c5)](a1['spectrumControlPoints'] - 0x1, Math[qP(0x874)](fE)))] = Math['max'](0x0, Math['min'](a1['spectrumMax'], Math[qP(0x874)](fF))),
                this['kn'] = fE,
                this['Mn'] = fF,
                this['sn'] = new bZ(this['$'],fG,fH),
                this['$'][qP(0x86f)](this['sn']);
            }
        }
        [jI(0x247)]() {
            const qQ = jI
              , fE = this['$'][qQ(0x3c1)]['channels'][this['$']['channel']]['instruments'][this['$']['getCurrentInstrument']()]
              , fF = null == this['mn'] ? fE[qQ(0x80c)] : fE[qQ(0x526)][this['mn']]
              , fG = fK => (0x1 - fK / a1['spectrumMax']) * (this['je'] - 0x1) + 0x1;
            let fH = 0x0
              , fI = 'M\x200\x20' + ap(this['je']) + '\x20';
            for (let fK = 0x0; fK < a1['spectrumControlPoints']; fK++) {
                let fL = fF[qQ(0x5ee)][fK];
                fI += 0x0 != fH || 0x0 != fL ? 'L\x20' : 'M\x20',
                fI += ap((fK + 0x1) * this['$e'] / (a1['spectrumControlPoints'] + 0x2)) + '\x20' + ap(fG(fL)) + '\x20',
                fH = fL;
            }
            const fJ = fG(fH);
            fH > 0x0 && (fI += 'L\x20' + (this['$e'] - 0x1) + '\x20' + ap(fJ) + '\x20'),
            this['xn'] != fI && (this['xn'] = fI,
            this['wn']['setAttribute']('d', fI),
            this['yn'][qQ(0x1d8)]('d', fI + 'L\x20' + this['$e'] + '\x20' + ap(fJ) + '\x20L\x20' + this['$e'] + '\x20' + ap(this['je']) + '\x20L\x200\x20' + ap(this['je']) + qQ(0x623)),
            this['vn']['setAttribute']('d', 'M\x20' + this['$e'] + '\x20' + ap(fJ) + '\x20L\x20' + (this['$e'] - 0x4) + '\x20' + ap(fJ - 0x4) + '\x20L\x20' + (this['$e'] - 0x4) + '\x20' + ap(fJ + 0x4) + '\x20z'),
            this['vn'][qQ(0x821)]['display'] = fH > 0x0 ? '' : 'none'),
            this['ze'] != this['$'][qQ(0x7ed)]['showFifth'] && (this['ze'] = this['$']['prefs']['showFifth'],
            this['bn'][qQ(0x821)]['display'] = this['$'][qQ(0x7ed)]['showFifth'] ? '' : qQ(0x3a9));
        }
    }
    class dH {
        constructor(fE) {
            const qR = jI;
            this['$'] = fE,
            this['$e'] = 0x78,
            this['je'] = 0x1a,
            this['gn'] = aE[qR(0x3bd)]({
                'pointer-events': qR(0x3a9)
            }),
            this['bn'] = aE['svg']({
                'pointer-events': qR(0x3a9)
            }),
            this['wn'] = aE[qR(0x388)]({
                'fill': 'none',
                'stroke': 'currentColor',
                'stroke-width': 0x2,
                'pointer-events': qR(0x3a9)
            }),
            this['Fn'] = [],
            this['Pn'] = aE[qR(0x3bd)]({
                'pointer-events': qR(0x3a9)
            }),
            this['Zt'] = aE[qR(0x3bd)]({
                'style': 'background-color:\x20' + aL[qR(0x187)] + ';\x20touch-action:\x20none;\x20cursor:\x20crosshair;',
                'width': '100%',
                'height': qR(0x1c7),
                'viewBox': '0\x200\x20' + this['$e'] + '\x20' + this['je'],
                'preserveAspectRatio': 'none'
            }, this['gn'], this['bn'], this['wn'], this['Pn']),
            this[qR(0x593)] = aD['div']({
                'class': 'harmonics',
                'style': qR(0x3e9)
            }, this['Zt']),
            this['se'] = 0x0,
            this['ne'] = 0x0,
            this['kn'] = 0x0,
            this['Mn'] = 0x0,
            this['oe'] = !0x1,
            this['sn'] = null,
            this['xn'] = '',
            this['ze'] = !0x0,
            this['We'] = fF => {
                const qS = qR;
                fF['preventDefault'](),
                this['oe'] = !0x0;
                const fG = this['Zt'][qS(0x26a)]();
                this['se'] = ((fF['clientX'] || fF[qS(0x28c)]) - fG[qS(0x2bf)]) * this['$e'] / (fG[qS(0x576)] - fG[qS(0x2bf)]),
                this['ne'] = ((fF[qS(0x361)] || fF[qS(0x710)]) - fG[qS(0x5b6)]) * this['je'] / (fG['bottom'] - fG[qS(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['kn'] = this['hs'](this['se']),
                this['Mn'] = this['Sn'](this['ne']),
                this['Je']();
            }
            ,
            this['Ke'] = fF => {
                const qT = qR;
                fF[qT(0x1e4)](),
                this['oe'] = !0x0;
                const fG = this['Zt']['getBoundingClientRect']();
                this['se'] = (fF['touches'][0x0][qT(0x430)] - fG['left']) * this['$e'] / (fG[qT(0x576)] - fG[qT(0x2bf)]),
                this['ne'] = (fF[qT(0x625)][0x0]['clientY'] - fG['top']) * this['je'] / (fG['bottom'] - fG[qT(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['kn'] = this['hs'](this['se']),
                this['Mn'] = this['Sn'](this['ne']),
                this['Je']();
            }
            ,
            this['Ye'] = fF => {
                const qU = qR;
                if (null == this['container'][qU(0x366)])
                    return;
                const fG = this['Zt'][qU(0x26a)]();
                this['se'] = ((fF[qU(0x430)] || fF[qU(0x28c)]) - fG['left']) * this['$e'] / (fG['right'] - fG['left']),
                this['ne'] = ((fF['clientY'] || fF[qU(0x710)]) - fG['top']) * this['je'] / (fG['bottom'] - fG[qU(0x5b6)]),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Je']();
            }
            ,
            this['Qe'] = fF => {
                const qV = qR;
                if (null == this[qV(0x593)]['offsetParent'])
                    return;
                if (!this['oe'])
                    return;
                fF[qV(0x1e4)]();
                const fG = this['Zt']['getBoundingClientRect']();
                this['se'] = (fF[qV(0x625)][0x0]['clientX'] - fG['left']) * this['$e'] / (fG['right'] - fG[qV(0x2bf)]),
                this['ne'] = (fF[qV(0x625)][0x0]['clientY'] - fG['top']) * this['je'] / (fG['bottom'] - fG['top']),
                isNaN(this['se']) && (this['se'] = 0x0),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Je']();
            }
            ,
            this['Xe'] = fF => {
                this['oe'] && (this['$']['record'](this['sn']),
                this['sn'] = null),
                this['oe'] = !0x1;
            }
            ;
            for (let fF = 0x1; fF <= a1['harmonicsControlPoints']; fF *= 0x2)
                this['gn'][qR(0x2b8)](aE['rect']({
                    'fill': aL[qR(0x41a)],
                    'x': (fF - 0.5) * (this['$e'] - 0x8) / (a1['harmonicsControlPoints'] - 0x1) - 0x1,
                    'y': 0x0,
                    'width': 0x2,
                    'height': this['je']
                }));
            for (let fG = 0x3; fG <= a1['harmonicsControlPoints']; fG *= 0x2)
                this['bn']['appendChild'](aE[qR(0x832)]({
                    'fill': aL[qR(0x887)],
                    'x': (fG - 0.5) * (this['$e'] - 0x8) / (a1[qR(0x234)] - 0x1) - 0x1,
                    'y': 0x0,
                    'width': 0x2,
                    'height': this['je']
                }));
            for (let fH = 0x0; fH < 0x4; fH++) {
                const fI = aE['rect']({
                    'fill': qR(0x1c3),
                    'x': this['$e'] - 0x2 * fH - 0x1,
                    'y': 0x0,
                    'width': 0x1,
                    'height': this['je']
                });
                this['Fn']['push'](fI),
                this['Pn']['appendChild'](fI);
            }
            this[qR(0x593)]['addEventListener']('mousedown', this['We']),
            document['addEventListener']('mousemove', this['Ye']),
            document['addEventListener'](qR(0x1a9), this['Xe']),
            this[qR(0x593)][qR(0x258)](qR(0x4c7), this['Ke']),
            this[qR(0x593)]['addEventListener'](qR(0x79b), this['Qe']),
            this['container']['addEventListener'](qR(0x3d6), this['Xe']),
            this['container'][qR(0x258)](qR(0x4b1), this['Xe']);
        }
        ['hs'](fE) {
            const qW = jI;
            return (a1[qW(0x234)] - 0x1) * fE / (this['$e'] - 0x8) - 0.5;
        }
        ['Sn'](fE) {
            return a1['harmonicsMax'] * (0x1 - fE / this['je']);
        }
        ['Je']() {
            const qX = jI;
            if (this['oe']) {
                const fE = this['hs'](this['se'])
                  , fF = this['Sn'](this['ne'])
                  , fG = this['$'][qX(0x3c1)]['channels'][this['$'][qX(0x733)]]['instruments'][this['$']['getCurrentInstrument']()]
                  , fH = fG[qX(0x3aa)];
                if (fE != this['kn']) {
                    const fI = (fF - this['Mn']) / (fE - this['kn'])
                      , fJ = this['Mn'] - this['kn'] * fI
                      , fK = Math[qX(0x600)](Math[qX(0x4c5)](this['kn'], fE))
                      , fL = Math['floor'](Math[qX(0x2f6)](this['kn'], fE));
                    for (let fM = fK; fM <= fL; fM++)
                        fM < 0x0 || fM >= a1[qX(0x234)] || (fH['harmonics'][fM] = Math[qX(0x2f6)](0x0, Math[qX(0x4c5)](a1[qX(0x51f)], Math['round'](fM * fI + fJ))));
                }
                fH[qX(0x4bd)][Math[qX(0x2f6)](0x0, Math[qX(0x4c5)](a1[qX(0x234)] - 0x1, Math['round'](fE)))] = Math[qX(0x2f6)](0x0, Math[qX(0x4c5)](a1['harmonicsMax'], Math[qX(0x874)](fF))),
                this['kn'] = fE,
                this['Mn'] = fF,
                this['sn'] = new c0(this['$'],fG,fH),
                this['$'][qX(0x86f)](this['sn']);
            }
        }
        [jI(0x247)]() {
            const qY = jI
              , fE = this['$']['song'][qY(0x7b3)][this['$'][qY(0x733)]]['instruments'][this['$'][qY(0x3fe)]()]['harmonicsWave']
              , fF = fJ => (0x1 - fJ / a1['harmonicsMax']) * this['je'];
            let fG = ap(this['je'])
              , fH = '';
            for (let fJ = 0x0; fJ < a1['harmonicsControlPoints'] - 0x1; fJ++) {
                if (0x0 == fE[qY(0x4bd)][fJ])
                    continue;
                let fK = ap((fJ + 0.5) * (this['$e'] - 0x8) / (a1['harmonicsControlPoints'] - 0x1));
                fH += 'M\x20' + fK + '\x20' + fG + '\x20',
                fH += 'L\x20' + fK + '\x20' + ap(fF(fE[qY(0x4bd)][fJ])) + '\x20';
            }
            const fI = fF(fE[qY(0x4bd)][a1[qY(0x234)] - 0x1]);
            for (let fL = 0x0; fL < 0x4; fL++) {
                const fM = this['Fn'][fL];
                fM['setAttribute']('y', ap(fI)),
                fM[qY(0x1d8)]('height', ap(this['je'] - fI));
            }
            this['xn'] != fH && (this['xn'] = fH,
            this['wn']['setAttribute']('d', fH)),
            this['ze'] != this['$'][qY(0x7ed)][qY(0x6d0)] && (this['ze'] = this['$']['prefs']['showFifth'],
            this['bn']['style']['display'] = this['$'][qY(0x7ed)]['showFifth'] ? '' : 'none');
        }
    }
    class dI {
        constructor(fE) {
            const qZ = jI;
            this['$'] = fE,
            this['$e'] = 0x200,
            this['je'] = 0x14,
            this['In'] = aE[qZ(0x3bd)]({
                'pointer-events': qZ(0x3a9)
            }),
            this['qn'] = aE[qZ(0x832)]({
                'fill': aL[qZ(0x29d)],
                'x': 0x0,
                'y': 0x2,
                'width': 0xa,
                'height': this['je'] - 0x4
            }),
            this['Tn'] = aE[qZ(0x832)]({
                'fill': 'none',
                'stroke': aL[qZ(0x709)],
                'stroke-width': 0x2,
                'pointer-events': qZ(0x3a9),
                'x': 0x0,
                'y': 0x1,
                'width': 0xa,
                'height': this['je'] - 0x2
            }),
            this['En'] = aE['path']({
                'fill': aL['hoverPreview'],
                'pointer-events': 'none'
            }),
            this['Cn'] = aE['path']({
                'fill': aL['hoverPreview'],
                'pointer-events': 'none'
            }),
            this['Zt'] = aE['svg']({
                'style': qZ(0x21f) + aL[qZ(0x187)] + qZ(0x57f),
                'width': this['$e'],
                'height': this['je']
            }, this['In'], this['qn'], this['Tn'], this['En'], this['Cn']),
            this[qZ(0x593)] = aD['div']({
                'class': 'barScrollBar',
                'style': qZ(0x188)
            }, this['Zt']),
            this['se'] = 0x0,
            this['oe'] = !0x1,
            this['re'] = !0x1,
            this['Ln'] = !0x1,
            this['zn'] = -0x1,
            this['Dn'] = -0x1,
            this['Ue'] = fG => {
                this['re'] || (this['re'] = !0x0,
                this['ii']());
            }
            ,
            this['Ve'] = fG => {
                this['re'] && (this['re'] = !0x1,
                this['ii']());
            }
            ,
            this['We'] = fG => {
                const r0 = qZ;
                fG['preventDefault'](),
                this['oe'] = !0x0;
                const fH = this['Zt'][r0(0x26a)]();
                this['se'] = (fG['clientX'] || fG['pageX']) - fH['left'],
                this['ii'](),
                this['se'] >= this['$'][r0(0x339)] * this['An'] && this['se'] <= (this['$']['barScrollPos'] + this['$'][r0(0x33b)]) * this['An'] && (this['Ln'] = !0x0,
                this['Bn'] = this['se']);
            }
            ,
            this['Ke'] = fG => {
                const r1 = qZ;
                fG['preventDefault'](),
                this['oe'] = !0x0;
                const fH = this['Zt'][r1(0x26a)]();
                this['se'] = fG['touches'][0x0][r1(0x430)] - fH['left'],
                this['ii'](),
                this['se'] >= this['$']['barScrollPos'] * this['An'] && this['se'] <= (this['$']['barScrollPos'] + this['$']['trackVisibleBars']) * this['An'] && (this['Ln'] = !0x0,
                this['Bn'] = this['se']);
            }
            ,
            this['Ye'] = fG => {
                const r2 = qZ
                  , fH = this['Zt']['getBoundingClientRect']();
                this['se'] = (fG[r2(0x430)] || fG['pageX']) - fH[r2(0x2bf)],
                this['Je']();
            }
            ,
            this['Qe'] = fG => {
                const r3 = qZ;
                if (!this['oe'])
                    return;
                fG[r3(0x1e4)]();
                const fH = this['Zt'][r3(0x26a)]();
                this['se'] = fG['touches'][0x0]['clientX'] - fH[r3(0x2bf)],
                this['Je']();
            }
            ,
            this['Xe'] = fG => {
                const r4 = qZ;
                !this['Ln'] && this['oe'] && (this['se'] < (this['$']['barScrollPos'] + 0x8) * this['An'] ? (this['$']['barScrollPos'] > 0x0 && this['$'][r4(0x339)]--,
                this['$']['notifier'][r4(0x327)]()) : (this['$'][r4(0x339)] < this['$']['song']['barCount'] - this['$']['trackVisibleBars'] && this['$']['barScrollPos']++,
                this['$']['notifier'][r4(0x327)]())),
                this['oe'] = !0x1,
                this['Ln'] = !0x1,
                this['ii']();
            }
            ;
            const fF = 0.5 * this['je'];
            this['En']['setAttribute']('d', 'M\x209\x20' + fF + qZ(0x59e) + (fF + 0x6) + qZ(0x59e) + (fF - 0x6) + '\x20z'),
            this['Cn']['setAttribute']('d', 'M\x20' + (this['$e'] - 0x9) + '\x20' + fF + '\x20L\x20' + (this['$e'] - 0x14) + '\x20' + (fF + 0x6) + qZ(0x76d) + (this['$e'] - 0x14) + '\x20' + (fF - 0x6) + '\x20z'),
            this['container']['addEventListener'](qZ(0x49e), this['We']),
            document['addEventListener'](qZ(0x222), this['Ye']),
            document[qZ(0x258)](qZ(0x1a9), this['Xe']),
            this['container']['addEventListener']('mouseover', this['Ue']),
            this[qZ(0x593)]['addEventListener'](qZ(0x82c), this['Ve']),
            this['container']['addEventListener'](qZ(0x4c7), this['Ke']),
            this[qZ(0x593)][qZ(0x258)]('touchmove', this['Qe']),
            this['container']['addEventListener'](qZ(0x3d6), this['Xe']),
            this['container'][qZ(0x258)](qZ(0x4b1), this['Xe']);
        }
        ['Je']() {
            const r5 = jI;
            if (this['Ln']) {
                for (; this['se'] - this['Bn'] < 0.5 * -this['An'] && this['$']['barScrollPos'] > 0x0; )
                    this['$']['barScrollPos']--,
                    this['Bn'] -= this['An'],
                    this['$'][r5(0x7e6)][r5(0x327)]();
                for (; this['se'] - this['Bn'] > 0.5 * this['An'] && this['$'][r5(0x339)] < this['$']['song'][r5(0x647)] - this['$']['trackVisibleBars']; )
                    this['$']['barScrollPos']++,
                    this['Bn'] += this['An'],
                    this['$']['notifier']['changed']();
            }
            this['re'] && this['ii']();
        }
        ['ii']() {
            const r6 = jI;
            let fE = !0x1
              , fF = !0x1
              , fG = !0x1;
            this['re'] && !this['oe'] && (this['se'] < this['$']['barScrollPos'] * this['An'] ? fE = !0x0 : this['se'] > (this['$'][r6(0x339)] + this['$']['trackVisibleBars']) * this['An'] ? fF = !0x0 : fG = !0x0),
            this['En']['style'][r6(0x72e)] = fE ? 'visible' : r6(0x47b),
            this['Cn']['style'][r6(0x72e)] = fF ? 'visible' : r6(0x47b),
            this['Tn'][r6(0x821)]['visibility'] = fG ? 'visible' : r6(0x47b);
        }
        ['render']() {
            const r7 = jI;
            this['An'] = (this['$e'] - 0x1) / Math[r7(0x2f6)](this['$'][r7(0x33b)], this['$'][r7(0x3c1)][r7(0x647)]);
            const fE = this['zn'] != this['$'][r7(0x3c1)][r7(0x647)];
            if (fE) {
                for (this['zn'] = this['$']['song'][r7(0x647)]; this['In']['firstChild']; )
                    this['In'][r7(0x62d)](this['In']['firstChild']);
                for (let fF = 0x0; fF <= this['$'][r7(0x3c1)][r7(0x647)]; fF++) {
                    const fG = fF % 0x10 == 0x0 ? 0x0 : fF % 0x4 == 0x0 ? this['je'] / 0x8 : this['je'] / 0x3;
                    this['In'][r7(0x2b8)](aE[r7(0x832)]({
                        'fill': aL['uiWidgetBackground'],
                        'x': fF * this['An'] - 0x1,
                        'y': fG,
                        'width': 0x2,
                        'height': this['je'] - 0x2 * fG
                    }));
                }
            }
            (fE || this['Dn'] != this['$'][r7(0x339)]) && (this['Dn'] = this['$']['barScrollPos'],
            this['qn'][r7(0x1d8)]('x', String(this['An'] * this['$'][r7(0x339)])),
            this['qn']['setAttribute']('width', String(this['An'] * this['$'][r7(0x33b)])),
            this['Tn']['setAttribute']('x', String(this['An'] * this['$']['barScrollPos'])),
            this['Tn'][r7(0x1d8)](r7(0x387), String(this['An'] * this['$']['trackVisibleBars']))),
            this['ii']();
        }
    }
    class dJ {
        constructor(fE) {
            const r8 = jI;
            this['$'] = fE,
            this['$e'] = 0x14,
            this['je'] = 0x1e1,
            this['On'] = 0x4,
            this['Nn'] = a1['pitchOctaves'],
            this['Rn'] = (this['je'] - this['On']) / this['Nn'],
            this['qn'] = aE[r8(0x832)]({
                'fill': aL['uiWidgetBackground'],
                'x': 0x2,
                'y': 0x0,
                'width': this['$e'] - 0x4
            }),
            this['Tn'] = aE['rect']({
                'fill': 'none',
                'stroke': aL['hoverPreview'],
                'stroke-width': 0x2,
                'pointer-events': 'none',
                'x': 0x1,
                'y': 0x0,
                'width': this['$e'] - 0x2
            }),
            this['Ss'] = aE['path']({
                'fill': aL['hoverPreview'],
                'pointer-events': 'none'
            }),
            this['Fs'] = aE['path']({
                'fill': aL['hoverPreview'],
                'pointer-events': 'none'
            }),
            this['Zt'] = aE[r8(0x3bd)]({
                'style': 'background-color:\x20' + aL[r8(0x187)] + ';\x20touch-action:\x20pan-x;\x20position:\x20absolute;',
                'width': this['$e'],
                'height': r8(0x1c7),
                'viewBox': '0\x200\x2020\x20481',
                'preserveAspectRatio': r8(0x3a9)
            }),
            this[r8(0x593)] = aD['div']({
                'id': r8(0x562),
                'style': 'width:\x2020px;\x20height:\x20100%;\x20overflow:\x20hidden;\x20position:\x20relative;\x20flex-shrink:\x200;'
            }, this['Zt']),
            this['ne'] = 0x0,
            this['oe'] = !0x1,
            this['re'] = !0x1,
            this['Ln'] = !0x1,
            this['Hn'] = -0x1,
            this['Gn'] = -0x1,
            this['sn'] = null,
            this['Ue'] = fG => {
                this['re'] || (this['re'] = !0x0,
                this['ii']());
            }
            ,
            this['Ve'] = fG => {
                this['re'] && (this['re'] = !0x1,
                this['ii']());
            }
            ,
            this['We'] = fG => {
                const r9 = r8;
                fG[r9(0x1e4)](),
                this['oe'] = !0x0;
                const fH = this['Zt']['getBoundingClientRect']();
                this['ne'] = ((fG[r9(0x361)] || fG['pageY']) - fH['top']) * this['je'] / (fH['bottom'] - fH[r9(0x5b6)]),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['$']['song'][r9(0x67a)](this['$'][r9(0x733)]) || (this['ii'](),
                this['ne'] >= this['$n'] - this['_n'] && this['ne'] <= this['$n'] && (this['Ln'] = !0x0,
                this['sn'] = null,
                this['Bn'] = this['ne']));
            }
            ,
            this['Ke'] = fG => {
                const ra = r8;
                fG[ra(0x1e4)](),
                this['oe'] = !0x0;
                const fH = this['Zt']['getBoundingClientRect']();
                this['ne'] = (fG['touches'][0x0]['clientY'] - fH['top']) * this['je'] / (fH['bottom'] - fH['top']),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['$'][ra(0x3c1)]['getChannelIsNoise'](this['$']['channel']) || (this['ii'](),
                this['ne'] >= this['$n'] - this['_n'] && this['ne'] <= this['$n'] && (this['Ln'] = !0x0,
                this['sn'] = null,
                this['Bn'] = this['ne']));
            }
            ,
            this['Ye'] = fG => {
                const rb = r8
                  , fH = this['Zt']['getBoundingClientRect']();
                this['ne'] = ((fG[rb(0x361)] || fG[rb(0x710)]) - fH[rb(0x5b6)]) * this['je'] / (fH['bottom'] - fH['top']),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Je']();
            }
            ,
            this['Qe'] = fG => {
                const rc = r8;
                if (!this['oe'])
                    return;
                fG[rc(0x1e4)]();
                const fH = this['Zt'][rc(0x26a)]();
                this['ne'] = (fG['touches'][0x0]['clientY'] - fH['top']) * this['je'] / (fH[rc(0x264)] - fH[rc(0x5b6)]),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['Je']();
            }
            ,
            this['Xe'] = fG => {
                const rd = r8;
                if (!this['$']['song']['getChannelIsNoise'](this['$'][rd(0x733)]) && this['oe']) {
                    if (this['Ln'])
                        null != this['sn'] && this['$']['record'](this['sn']);
                    else {
                        const fH = this['$'][rd(0x7f6)]()
                          , fI = a1['pitchOctaves'] - fH
                          , fJ = this['$']['lastChangeWas'](this['sn'])
                          , fK = fJ ? this['sn'][rd(0x50b)] : this['$'][rd(0x3c1)][rd(0x7b3)][this['$'][rd(0x733)]]['octave']
                          , fL = this['$']['getBaseVisibleOctave'](this['$']['channel']);
                        this['ne'] < this['$n'] - 0.5 * this['_n'] ? fL < fI && (this['sn'] = new cy(this['$'],fK,Math['floor'](fL + 0x1 + 0.5 * fH)),
                        this['$']['record'](this['sn'], fJ)) : fL > 0x0 && (this['sn'] = new cy(this['$'],fK,Math['floor'](fL - 0x1 + 0.5 * fH)),
                        this['$'][rd(0x235)](this['sn'], fJ));
                    }
                }
                this['oe'] = !0x1,
                this['Ln'] = !0x1,
                this['ii']();
            }
            ,
            this['fn'] = () => {
                const re = r8;
                this['$n'] = this['je'] - this['Rn'] * this['$']['getBaseVisibleOctave'](this['$'][re(0x733)]),
                this['Zt']['style']['visibility'] = this['$'][re(0x3c1)][re(0x67a)](this['$']['channel']) ? 'hidden' : 'visible';
                const fG = this['$']['getVisibleOctaveCount']();
                this['Hn'] == this['$n'] && this['Gn'] == fG || (this['Hn'] = this['$n'],
                this['Gn'] = fG,
                this['_n'] = this['Rn'] * fG + this['On'],
                this['qn'][re(0x1d8)]('height', String(this['_n'])),
                this['Tn'][re(0x1d8)]('height', String(this['_n'])),
                this['qn'][re(0x1d8)]('y', String(this['$n'] - this['_n'])),
                this['Tn'][re(0x1d8)]('y', String(this['$n'] - this['_n']))),
                this['ii']();
            }
            ,
            this['$'][r8(0x7e6)]['watch'](this['fn']),
            this['fn'](),
            this['Zt'][r8(0x2b8)](this['qn']);
            for (let fG = 0x0; fG <= this['Nn']; fG++)
                this['Zt'][r8(0x2b8)](aE['rect']({
                    'fill': aL['tonic'],
                    'x': 0x0,
                    'y': fG * this['Rn'],
                    'width': this['$e'],
                    'height': this['On']
                }));
            this['Zt'][r8(0x2b8)](this['Tn']),
            this['Zt'][r8(0x2b8)](this['Ss']),
            this['Zt']['appendChild'](this['Fs']);
            const fF = 0.5 * this['$e'];
            this['Ss'][r8(0x1d8)]('d', 'M\x20' + fF + r8(0x1ee) + (fF + 0x6) + r8(0x18e) + (fF - 0x6) + '\x2020\x20z'),
            this['Fs']['setAttribute']('d', 'M\x20' + fF + '\x20' + (this['je'] - 0x9) + r8(0x76d) + (fF + 0x6) + '\x20' + (this['je'] - 0x14) + r8(0x76d) + (fF - 0x6) + '\x20' + (this['je'] - 0x14) + '\x20z'),
            this[r8(0x593)][r8(0x258)](r8(0x49e), this['We']),
            document[r8(0x258)]('mousemove', this['Ye']),
            document['addEventListener']('mouseup', this['Xe']),
            this[r8(0x593)]['addEventListener'](r8(0x1f3), this['Ue']),
            this['container']['addEventListener'](r8(0x82c), this['Ve']),
            this[r8(0x593)]['addEventListener']('touchstart', this['Ke']),
            this['container']['addEventListener']('touchmove', this['Qe']),
            this['container']['addEventListener'](r8(0x3d6), this['Xe']),
            this[r8(0x593)][r8(0x258)]('touchcancel', this['Xe']);
        }
        ['Je']() {
            const rf = jI;
            if (!this['$'][rf(0x3c1)]['getChannelIsNoise'](this['$'][rf(0x733)])) {
                if (this['Ln']) {
                    const fE = this['$'][rf(0x7f6)]()
                      , fF = a1['pitchOctaves'] - fE
                      , fG = this['$'][rf(0x25f)](this['sn']) ? this['sn']['oldValue'] : this['$'][rf(0x3c1)]['channels'][this['$'][rf(0x733)]]['octave'];
                    let fH = this['$']['getBaseVisibleOctave'](this['$'][rf(0x733)]);
                    for (; this['ne'] - this['Bn'] < 0.5 * -this['Rn'] && fH < fF; )
                        fH++,
                        this['Bn'] -= this['Rn'];
                    for (; this['ne'] - this['Bn'] > 0.5 * this['Rn'] && fH > 0x0; )
                        fH--,
                        this['Bn'] += this['Rn'];
                    this['sn'] = new cy(this['$'],fG,Math[rf(0x4fb)](fH + 0.5 * fE)),
                    this['$'][rf(0x86f)](this['sn']);
                }
                this['re'] && this['ii']();
            }
        }
        ['ii']() {
            const rg = jI;
            let fE = !0x1
              , fF = !0x1
              , fG = !0x1;
            this['re'] && !this['oe'] && (this['ne'] < this['$n'] - this['_n'] ? fE = !0x0 : this['ne'] > this['$n'] ? fF = !0x0 : fG = !0x0),
            this['Ss'][rg(0x821)][rg(0x72e)] = fE ? rg(0x38c) : rg(0x47b),
            this['Fs'][rg(0x821)][rg(0x72e)] = fF ? 'inherit' : 'hidden',
            this['Tn']['style']['visibility'] = fG ? rg(0x38c) : 'hidden';
        }
    }
    const dK = 0x2000
      , dL = {
        0x23: {
            'frequency': 0x0,
            'duration': 0x2,
            'volume': 0x3
        },
        0x24: {
            'frequency': 0x0,
            'duration': 0x2,
            'volume': 0x3
        },
        0x25: {
            'frequency': 0x5,
            'duration': 0x1,
            'volume': 0x3
        },
        0x26: {
            'frequency': 0x4,
            'duration': 0x2,
            'volume': 0x3
        },
        0x27: {
            'frequency': 0x5,
            'duration': 0x2,
            'volume': 0x3
        },
        0x28: {
            'frequency': 0x4,
            'duration': 0x2,
            'volume': 0x3
        },
        0x29: {
            'frequency': 0x1,
            'duration': 0x2,
            'volume': 0x3
        },
        0x2a: {
            'frequency': 0x8,
            'duration': 0x1,
            'volume': 0x3
        },
        0x2b: {
            'frequency': 0x1,
            'duration': 0x2,
            'volume': 0x3
        },
        0x2c: {
            'frequency': 0x8,
            'duration': 0x1,
            'volume': 0x2
        },
        0x2d: {
            'frequency': 0x2,
            'duration': 0x2,
            'volume': 0x3
        },
        0x2e: {
            'frequency': 0x8,
            'duration': 0x4,
            'volume': 0x3
        },
        0x2f: {
            'frequency': 0x2,
            'duration': 0x2,
            'volume': 0x3
        },
        0x30: {
            'frequency': 0x3,
            'duration': 0x2,
            'volume': 0x3
        },
        0x31: {
            'frequency': 0x7,
            'duration': 0x4,
            'volume': 0x3
        },
        0x32: {
            'frequency': 0x3,
            'duration': 0x2,
            'volume': 0x3
        },
        0x33: {
            'frequency': 0x6,
            'duration': 0x4,
            'volume': 0x2
        },
        0x34: {
            'frequency': 0x7,
            'duration': 0x4,
            'volume': 0x3
        },
        0x35: {
            'frequency': 0x6,
            'duration': 0x2,
            'volume': 0x3
        },
        0x36: {
            'frequency': 0xb,
            'duration': 0x2,
            'volume': 0x3
        },
        0x37: {
            'frequency': 0x9,
            'duration': 0x4,
            'volume': 0x3
        },
        0x38: {
            'frequency': 0x7,
            'duration': 0x1,
            'volume': 0x2
        },
        0x39: {
            'frequency': 0x7,
            'duration': 0x4,
            'volume': 0x3
        },
        0x3a: {
            'frequency': 0xa,
            'duration': 0x2,
            'volume': 0x2
        },
        0x3b: {
            'frequency': 0x6,
            'duration': 0x4,
            'volume': 0x3
        },
        0x45: {
            'frequency': 0xa,
            'duration': 0x2,
            'volume': 0x3
        },
        0x46: {
            'frequency': 0xa,
            'duration': 0x2,
            'volume': 0x3
        },
        0x49: {
            'frequency': 0xa,
            'duration': 0x1,
            'volume': 0x2
        },
        0x4a: {
            'frequency': 0xa,
            'duration': 0x2,
            'volume': 0x2
        }
    };
    var dM = a0 && a0['Un'] || function(fE, fF, fG, fH) {
        return new (fG || (fG = Promise))(function(fI, fJ) {
            const rj = a0b;
            function fK(fN) {
                try {
                    fM(fH['next'](fN));
                } catch (fO) {
                    fJ(fO);
                }
            }
            function fL(fN) {
                const rh = a0b;
                try {
                    fM(fH[rh(0x22b)](fN));
                } catch (fO) {
                    fJ(fO);
                }
            }
            function fM(fN) {
                const ri = a0b;
                var fO;
                fN['done'] ? fI(fN[ri(0x313)]) : (fO = fN['value'],
                fO instanceof fG ? fO : new fG(function(fP) {
                    fP(fO);
                }
                ))[ri(0x1f0)](fK, fL);
            }
            fM((fH = fH[rj(0x73e)](fE, fF || []))[rj(0x492)]());
        }
        );
    }
    ;
    const dN = (0xffffffff * Math['random']() >>> 0x0)['toString'](0x10);
    class dO {
        constructor(fE) {
            const ro = jI;
            this['$'] = fE,
            this['Vn'] = fF => {
                const rk = a0b;
                localStorage[rk(0x2d6)]('midiHandlerId', dN);
            }
            ,
            this['Wn'] = fF => {
                const rl = a0b;
                if ('input' === fF[rl(0x44a)]['type'])
                    switch (fF['port'][rl(0x584)]) {
                    case rl(0x640):
                        this['jn'](fF['port']);
                        break;
                    case rl(0x35d):
                        this['Kn'](fF['port']);
                    }
            }
            ,
            this['jn'] = fF => {
                fF['addEventListener']('midimessage', this['Yn']);
            }
            ,
            this['Kn'] = fF => {
                const rm = a0b;
                fF[rm(0x575)](rm(0x79d), this['Yn']),
                this['$'][rm(0x6cb)][rm(0x4eb)]();
            }
            ,
            this['Yn'] = fF => {
                const rn = a0b;
                if (!this['$'][rn(0x7ed)]['enableMidi'] || localStorage[rn(0x1a3)](rn(0x704)) != dN)
                    return;
                const fG = this['$'][rn(0x3c1)][rn(0x67a)](this['$'][rn(0x733)]);
                let[fH,fI,fJ] = fF['data'];
                if (fH &= 0xf0,
                fG) {
                    const fK = dL[fI];
                    if (null == fK)
                        return;
                    fI = fK['frequency'];
                } else {
                    if (fI -= a1[rn(0x7af)][this['$']['song'][rn(0x319)]]['basePitch'],
                    fI < 0x0 || fI > a1[rn(0x181)])
                        return;
                }
                switch (0x90 == fH && 0x0 == fJ && (fH = 0x80),
                fH) {
                case 0x90:
                    this['$'][rn(0x3eb)][rn(0x7a0)] = !0x0,
                    this['$'][rn(0x6cb)][rn(0x29f)](fI);
                    break;
                case 0x80:
                    this['$']['performance'][rn(0x82b)](fI);
                }
            }
            ,
            this[ro(0x6fa)]();
        }
        [jI(0x6fa)]() {
            return dM(this, void 0x0, void 0x0, function*() {
                const rp = a0b;
                if (null != navigator[rp(0x337)])
                    try {
                        const fE = yield navigator[rp(0x337)]();
                        fE[rp(0x72a)]['forEach'](this['jn']),
                        fE['addEventListener']('statechange', this['Wn']),
                        this['Vn'](),
                        window[rp(0x258)](rp(0x571), this['Vn']);
                    } catch (fF) {
                        console[rp(0x1fe)]('Failed\x20to\x20get\x20MIDI\x20access', fF);
                    }
            });
        }
    }
    class dP {
        constructor(fE) {
            const rr = jI;
            this['$'] = fE,
            this['Jn'] = !0x1,
            this['Qn'] = fF => {
                const rq = a0b;
                this['Jn'] && (this['$']['performance'][rq(0x4eb)](),
                this['Jn'] = !0x1);
            }
            ,
            window['addEventListener'](rr(0x7a4), this['Qn']);
        }
        static[jI(0x415)](fE, fF, fG, fH) {
            const rs = jI;
            let fI = null
              , fJ = null;
            switch (fH) {
            case 'wickiHayden':
                fI = 0x5 * fG + 0x2 * fF - 0x2;
                break;
            case rs(0x460):
                const fN = a1[rs(0x379)][fE[rs(0x3c1)]['scale']][rs(0x58b)][rs(0x422)]( (fO, fP) => fO ? fP : null)['filter'](fO => null != fO);
                fI = (fG - 0x1 + Math[rs(0x4fb)](fF / fN['length'])) * a1[rs(0x36d)] + fN[(fF + fN['length']) % fN[rs(0x57c)]];
                break;
            case rs(0x795):
                fI = dP['Xn'][fG][fF],
                fJ = a1[rs(0x7af)][rs(0x64a)]['C']['basePitch'];
                break;
            case rs(0x286):
                fI = dP['Zn'][fG][fF],
                fJ = a1[rs(0x7af)][rs(0x64a)]['A'][rs(0x2d8)];
                break;
            case 'pianoTransposingC':
                fI = dP['Xn'][fG][fF];
                break;
            case rs(0x373):
                fI = dP['Zn'][fG][fF];
            }
            if (null == fI)
                return null;
            const fK = Math[rs(0x2f6)](0x0, fE['song'][rs(0x7b3)][fE['channel']]['octave'] - 0x1) * a1['pitchesPerOctave'];
            let fL = 0x0;
            null != fJ && (fL = (fJ - a1['keys'][fE['song'][rs(0x319)]]['basePitch'] + 0x90) % 0xc);
            const fM = fK + fL + fI;
            return fM < 0x0 || fM > a1['maxPitch'] ? null : fM;
        }
        [jI(0x490)](fE, fF) {
            const rt = jI;
            switch (fE[rt(0x6b4)]) {
            case rt(0x76e):
                this[rt(0x4ad)](-0x1, 0x3, fF);
                break;
            case 'Digit1':
                this[rt(0x4ad)](0x0, 0x3, fF);
                break;
            case rt(0x412):
                this['handleKey'](0x1, 0x3, fF);
                break;
            case 'Digit3':
                this['handleKey'](0x2, 0x3, fF);
                break;
            case rt(0x754):
                this[rt(0x4ad)](0x3, 0x3, fF);
                break;
            case rt(0x40e):
                this['handleKey'](0x4, 0x3, fF);
                break;
            case 'Digit6':
                this[rt(0x4ad)](0x5, 0x3, fF);
                break;
            case rt(0x819):
                this['handleKey'](0x6, 0x3, fF);
                break;
            case 'Digit8':
                this[rt(0x4ad)](0x7, 0x3, fF);
                break;
            case rt(0x73f):
                this[rt(0x4ad)](0x8, 0x3, fF);
                break;
            case rt(0x301):
                this[rt(0x4ad)](0x9, 0x3, fF);
                break;
            case rt(0x1ec):
                this['handleKey'](0xa, 0x3, fF);
                break;
            case 'Equal':
                this['handleKey'](0xb, 0x3, fF);
                break;
            case 'IntlYen':
                this[rt(0x4ad)](0xc, 0x3, fF);
                break;
            case rt(0x875):
                this[rt(0x4ad)](0x0, 0x2, fF);
                break;
            case 'KeyW':
                this[rt(0x4ad)](0x1, 0x2, fF);
                break;
            case rt(0x4a9):
                this[rt(0x4ad)](0x2, 0x2, fF);
                break;
            case 'KeyR':
                this[rt(0x4ad)](0x3, 0x2, fF);
                break;
            case 'KeyT':
                this[rt(0x4ad)](0x4, 0x2, fF);
                break;
            case rt(0x51a):
                this[rt(0x4ad)](0x5, 0x2, fF);
                break;
            case 'KeyU':
                this[rt(0x4ad)](0x6, 0x2, fF);
                break;
            case rt(0x39a):
                this['handleKey'](0x7, 0x2, fF);
                break;
            case 'KeyO':
                this['handleKey'](0x8, 0x2, fF);
                break;
            case 'KeyP':
                this[rt(0x4ad)](0x9, 0x2, fF);
                break;
            case rt(0x3cd):
                this['handleKey'](0xa, 0x2, fF);
                break;
            case rt(0x6c3):
                this['handleKey'](0xb, 0x2, fF);
                break;
            case rt(0x1d9):
                '\x5c' == fE['key'] || '|' == fE[rt(0x319)] ? this['handleKey'](0xc, 0x2, fF) : this['handleKey'](0xb, 0x1, fF);
                break;
            case rt(0x5be):
                this['handleKey'](0x0, 0x1, fF);
                break;
            case rt(0x5b9):
                this[rt(0x4ad)](0x1, 0x1, fF);
                break;
            case rt(0x879):
                this[rt(0x4ad)](0x2, 0x1, fF);
                break;
            case 'KeyF':
                this[rt(0x4ad)](0x3, 0x1, fF);
                break;
            case 'KeyG':
                this['handleKey'](0x4, 0x1, fF);
                break;
            case 'KeyH':
                this['handleKey'](0x5, 0x1, fF);
                break;
            case rt(0x850):
                this[rt(0x4ad)](0x6, 0x1, fF);
                break;
            case rt(0x1ae):
                this['handleKey'](0x7, 0x1, fF);
                break;
            case 'KeyL':
                this['handleKey'](0x8, 0x1, fF);
                break;
            case 'Semicolon':
                this['handleKey'](0x9, 0x1, fF);
                break;
            case 'Quote':
                this['handleKey'](0xa, 0x1, fF);
                break;
            case 'IntlHash':
                this['handleKey'](0xb, 0x1, fF);
                break;
            case rt(0x67c):
                this['handleKey'](-0x1, 0x0, fF);
                break;
            case rt(0x31c):
                this['handleKey'](0x0, 0x0, fF);
                break;
            case rt(0x862):
                this['handleKey'](0x1, 0x0, fF);
                break;
            case rt(0x40f):
                this['handleKey'](0x2, 0x0, fF);
                break;
            case rt(0x7df):
                this[rt(0x4ad)](0x3, 0x0, fF);
                break;
            case 'KeyB':
                this['handleKey'](0x4, 0x0, fF);
                break;
            case 'KeyN':
                this[rt(0x4ad)](0x5, 0x0, fF);
                break;
            case 'KeyM':
                this[rt(0x4ad)](0x6, 0x0, fF);
                break;
            case rt(0x365):
                this[rt(0x4ad)](0x7, 0x0, fF);
                break;
            case rt(0x772):
                this[rt(0x4ad)](0x8, 0x0, fF);
                break;
            case 'Slash':
                this['handleKey'](0x9, 0x0, fF);
                break;
            case rt(0x255):
                this[rt(0x4ad)](0xa, 0x0, fF);
                break;
            default:
                return;
            }
            fE['preventDefault']();
        }
        ['handleKey'](fE, fF, fG) {
            const ru = jI;
            if (this['$']['song']['getChannelIsNoise'](this['$']['channel']))
                return void (fE >= 0x0 && fE < a1[ru(0x71e)] && (fG ? (this['$']['synth']['preferLowerLatency'] = !0x0,
                this['$']['performance']['addPerformedPitch'](fE),
                this['Jn'] = !0x0) : this['$']['performance'][ru(0x82b)](fE)));
            const fH = dP[ru(0x415)](this['$'], fE, fF, this['$']['prefs']['keyboardLayout']);
            null != fH && (fG ? (this['$']['synth']['preferLowerLatency'] = !0x0,
            this['$'][ru(0x6cb)][ru(0x29f)](fH),
            this['Jn'] = !0x0) : this['$'][ru(0x6cb)]['removePerformedPitch'](fH));
        }
    }
    dP['Xn'] = [[0x0, 0x2, 0x4, 0x5, 0x7, 0x9, 0xb, 0xc, 0xe, 0x10, 0x11], [null, 0x1, 0x3, null, 0x6, 0x8, 0xa, null, 0xd, 0xf, null, 0x12], [0xc, 0xe, 0x10, 0x11, 0x13, 0x15, 0x17, 0x18, 0x1a, 0x1c, 0x1d, 0x1f, 0x21], [null, 0xd, 0xf, null, 0x12, 0x14, 0x16, null, 0x19, 0x1b, null, 0x1e, 0x20]],
    dP['Zn'] = [[0x0, 0x2, 0x3, 0x5, 0x7, 0x8, 0xa, 0xc, 0xe, 0xf, 0x11], [-0x1, 0x1, null, 0x4, 0x6, null, 0x9, 0xb, 0xd, null, 0x10, 0x12], [0xc, 0xe, 0xf, 0x11, 0x13, 0x14, 0x16, 0x18, 0x1a, 0x1b, 0x1d, 0x1f, 0x20], [0xb, 0xd, null, 0x10, 0x12, null, 0x15, 0x17, 0x19, null, 0x1c, 0x1e, null]];
    class dQ {
        constructor(fE) {
            const rv = jI;
            this['$'] = fE,
            this['eo'] = aD[rv(0x504)]({
                'style': 'width:\x20100%;\x20height:\x20100%;\x20display:\x20flex;\x20flex-direction:\x20column-reverse;\x20align-items:\x20stretch;'
            }),
            this['io'] = aD[rv(0x504)]({
                'style': rv(0x5d8)
            }),
            this['so'] = aD['div']({
                'style': 'width:\x20100%;\x20height:\x2040px;\x20border:\x202px\x20solid\x20' + aL['primaryText'] + ';\x20position:\x20absolute;\x20box-sizing:\x20border-box;\x20pointer-events:\x20none;'
            }),
            this['container'] = aD[rv(0x504)]({
                'style': rv(0x3fb)
            }, this['eo'], this['io'], this['so']),
            this['je'] = 0x1e1,
            this['no'] = [],
            this['oo'] = [],
            this['ne'] = 0x0,
            this['oe'] = !0x1,
            this['re'] = !0x1,
            this['ro'] = -0x1,
            this['ho'] = -0x1,
            this['De'] = !0x1,
            this['ao'] = -0x1,
            this['lo'] = -0x1,
            this['co'] = [],
            this['Ue'] = fF => {
                this['re'] || (this['re'] = !0x0,
                this['ii']());
            }
            ,
            this['Ve'] = fF => {
                this['re'] && (this['re'] = !0x1,
                this['ii']());
            }
            ,
            this['We'] = fF => {
                const rw = rv;
                fF[rw(0x1e4)](),
                this['$'][rw(0x3eb)][rw(0x1ed)](),
                this['oe'] = !0x0;
                const fG = this[rw(0x593)]['getBoundingClientRect']();
                this['ne'] = ((fF['clientY'] || fF[rw(0x710)]) - fG['top']) * this['je'] / (fG['bottom'] - fG['top']),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['uo'](),
                this['po'](),
                this['ii']();
            }
            ,
            this['Ye'] = fF => {
                const rx = rv;
                (this['oe'] || this['re']) && this['$']['synth']['maintainLiveInput']();
                const fG = this['container'][rx(0x26a)]();
                this['ne'] = ((fF['clientY'] || fF['pageY']) - fG['top']) * this['je'] / (fG[rx(0x264)] - fG['top']),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['uo'](),
                this['oe'] && this['po'](),
                this['ii']();
            }
            ,
            this['Vs'] = fF => {
                this['oe'] && this['fo'](),
                this['oe'] = !0x1,
                this['ii']();
            }
            ,
            this['Ke'] = fF => {
                const ry = rv;
                fF['preventDefault'](),
                this['$']['synth']['maintainLiveInput'](),
                this['oe'] = !0x0;
                const fG = this['container'][ry(0x26a)]();
                this['ne'] = (fF['touches'][0x0]['clientY'] - fG[ry(0x5b6)]) * this['je'] / (fG[ry(0x264)] - fG[ry(0x5b6)]),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['uo'](),
                this['po']();
            }
            ,
            this['Qe'] = fF => {
                const rz = rv;
                fF[rz(0x1e4)](),
                this['$'][rz(0x3eb)][rz(0x1ed)]();
                const fG = this[rz(0x593)][rz(0x26a)]();
                this['ne'] = (fF['touches'][0x0][rz(0x361)] - fG[rz(0x5b6)]) * this['je'] / (fG['bottom'] - fG['top']),
                isNaN(this['ne']) && (this['ne'] = 0x0),
                this['uo'](),
                this['oe'] && this['po']();
            }
            ,
            this['un'] = fF => {
                const rA = rv;
                fF[rA(0x1e4)](),
                this['oe'] = !0x1,
                this['fo']();
            }
            ,
            this['do'] = () => {
                const rB = rv;
                window['requestAnimationFrame'](this['do']);
                let fF = !0x1;
                const fG = this['$'][rB(0x6cb)][rB(0x7d3)]() ? 0x0 : this['$']['synth']['liveInputPitches']['length'];
                this['co'][rB(0x57c)] != fG && (fF = !0x0);
                for (let fH = 0x0; fH < fG; fH++)
                    this['co'][fH] != this['$'][rB(0x3eb)]['liveInputPitches'][fH] && (this['co'][fH] = this['$'][rB(0x3eb)]['liveInputPitches'][fH],
                    fF = !0x0);
                this['co'][rB(0x57c)] = fG,
                fF && this['ii']();
            }
            ,
            this['fn'] = () => {
                const rC = rv
                  , fF = this['$'][rC(0x3c1)]['getChannelIsNoise'](this['$']['channel']);
                if (this['fi'] = fF ? a1['drumCount'] : this['$']['getVisiblePitchCount'](),
                this['ie'] = this['je'] / this['fi'],
                this['uo'](),
                this['oe'] && this['po'](),
                this['$'][rC(0x7ed)]['showLetters'] && (this['ho'] != this['$']['song'][rC(0x7ad)] || this['ao'] != this['$']['song'][rC(0x319)] || this['De'] != fF || this['lo'] != this['fi'])) {
                    if (this['ho'] = this['$'][rC(0x3c1)]['scale'],
                    this['ao'] = this['$'][rC(0x3c1)][rC(0x319)],
                    this['De'] = fF,
                    this['eo']['style'][rC(0x714)] = fF ? 'none' : 'flex',
                    this['io']['style']['display'] = fF ? rC(0x249) : 'none',
                    !fF) {
                        if (this['lo'] != this['fi']) {
                            this['eo']['innerHTML'] = '';
                            for (let fG = 0x0; fG < this['fi']; fG++) {
                                const fH = aD[rC(0x504)]({
                                    'class': rC(0x5b3),
                                    'style': rC(0x38e)
                                })
                                  , fI = aD[rC(0x504)]({
                                    'class': rC(0x66f),
                                    'style': 'background:\x20gray;'
                                }, fH);
                                this['eo']['appendChild'](fI),
                                this['oo'][fG] = fH,
                                this['no'][fG] = fI;
                            }
                            this['oo'][rC(0x57c)] = this['fi'],
                            this['no'][rC(0x57c)] = this['fi'],
                            this['lo'] = this['fi'];
                        }
                        for (let fJ = 0x0; fJ < this['fi']; fJ++) {
                            const fK = (fJ + a1[rC(0x7af)][this['$']['song']['key']][rC(0x2d8)]) % a1['pitchesPerOctave']
                              , fL = a1[rC(0x7af)][fK][rC(0x71f)];
                            if (this['no'][fJ]['style']['background'] = fL ? aL[rC(0x1eb)] : aL[rC(0x69d)],
                            a1['scales'][this['$']['song'][rC(0x7ad)]]['flags'][fJ % a1[rC(0x36d)]]) {
                                this['no'][fJ]['classList'][rC(0x3ee)]('disabled'),
                                this['oo'][fJ][rC(0x821)][rC(0x714)] = '';
                                const fM = this['oo'][fJ];
                                fM['style'][rC(0x2e7)] = a1['keys'][fK][rC(0x71f)] ? 'black' : rC(0x80d),
                                fM[rC(0x40a)] = dQ[rC(0x624)](fK, fJ);
                            } else
                                this['no'][fJ][rC(0x4e5)][rC(0x54d)](rC(0x324)),
                                this['oo'][fJ]['style'][rC(0x714)] = rC(0x3a9);
                        }
                    }
                    this['ii']();
                }
            }
            ;
            for (let fF = 0x0; fF < a1[rv(0x71e)]; fF++) {
                const fG = 0x64 * (0x1 - fF / a1['drumCount'] * 0.35);
                this['io'][rv(0x2b8)](aD['div']({
                    'class': 'drum-button',
                    'style': 'background-size:\x20' + fG + '%\x20' + fG + '%;'
                }));
            }
            this['container']['addEventListener']('mousedown', this['We']),
            document[rv(0x258)](rv(0x222), this['Ye']),
            document[rv(0x258)]('mouseup', this['Vs']),
            this[rv(0x593)][rv(0x258)](rv(0x1f3), this['Ue']),
            this[rv(0x593)]['addEventListener'](rv(0x82c), this['Ve']),
            this['container']['addEventListener'](rv(0x4c7), this['Ke']),
            this[rv(0x593)]['addEventListener']('touchmove', this['Qe']),
            this['container'][rv(0x258)]('touchend', this['un']),
            this['container']['addEventListener']('touchcancel', this['un']),
            this['$'][rv(0x7e6)]['watch'](this['fn']),
            this['fn'](),
            window[rv(0x20e)](this['do']);
        }
        ['uo']() {
            const rD = jI
              , fE = a1[rD(0x379)][this['$']['song'][rD(0x7ad)]]['flags']
              , fF = Math[rD(0x2f6)](0x0, Math['min'](this['fi'] - 0x1, this['fi'] - this['ne'] / this['ie']));
            if (fE[Math['floor'](fF) % a1['pitchesPerOctave']] || this['$']['song']['getChannelIsNoise'](this['$'][rD(0x733)]))
                this['mo'] = Math[rD(0x4fb)](fF);
            else {
                let fG = Math[rD(0x4fb)](fF) + 0x1
                  , fH = Math[rD(0x4fb)](fF) - 0x1;
                for (; !fE[fG % a1[rD(0x36d)]]; )
                    fG++;
                for (; !fE[fH % a1['pitchesPerOctave']]; )
                    fH--;
                let fI = fG
                  , fJ = fH + 0x1;
                fG % a1['pitchesPerOctave'] != 0x0 && fG % a1[rD(0x36d)] != 0x7 || (fI -= 0.5),
                fH % a1['pitchesPerOctave'] != 0x0 && fH % a1[rD(0x36d)] != 0x7 || (fJ += 0.5),
                this['mo'] = fF - fJ > fI - fF ? fG : fH;
            }
        }
        ['po']() {
            const rE = jI
              , fE = this['$']['getBaseVisibleOctave'](this['$'][rE(0x733)]) * a1[rE(0x36d)]
              , fF = this['mo'] + fE;
            this['ro'] != fF && (this['$']['performance'][rE(0x82b)](this['ro']),
            this['ro'] = fF,
            this['$']['performance']['addPerformedPitch'](fF));
        }
        ['fo']() {
            const rF = jI;
            this['$']['performance'][rF(0x82b)](this['ro']),
            this['ro'] = -0x1;
        }
        ['ii']() {
            const rG = jI;
            if (this['so'][rG(0x821)][rG(0x72e)] = !this['re'] || this['oe'] ? 'hidden' : rG(0x4b8),
            this['re'] && !this['oe']) {
                const fG = this['container'][rG(0x26a)]()
                  , fH = this['ie'] / (this['je'] / (fG['bottom'] - fG['top']));
                this['so'][rG(0x821)]['left'] = '0px',
                this['so'][rG(0x821)][rG(0x5b6)] = fH * (this['fi'] - this['mo'] - 0x1) + 'px',
                this['so']['style'][rG(0x33e)] = fH + 'px';
            }
            const fE = this['$'][rG(0x757)](this['$']['channel']) * a1['pitchesPerOctave']
              , fF = (this['$']['song']['getChannelIsNoise'](this['$'][rG(0x733)]) ? this['io'] : this['eo'])['children'];
            for (let fI = 0x0; fI < fF[rG(0x57c)]; fI++) {
                const fJ = fF[fI];
                -0x1 == this['co'][rG(0x2fb)](fI + fE) ? fJ['classList']['remove'](rG(0x4d8)) : fJ['classList'][rG(0x54d)](rG(0x4d8));
            }
        }
        static['getPitchName'](fE, fF) {
            const rH = jI;
            let fG;
            if (a1[rH(0x7af)][fE][rH(0x71f)])
                fG = a1['keys'][fE]['name'];
            else {
                const fH = a1[rH(0x5e2)][fF % a1[rH(0x36d)]];
                fG = a1['keys'][(fE + a1[rH(0x36d)] + fH) % a1['pitchesPerOctave']]['name'],
                0x1 == fH ? fG += '♭' : -0x1 == fH && (fG += '♯');
            }
            return fG;
        }
    }
    const {button: dR, div: dS, span: dT, h2: dU, input: dV, br: dW, select: dX, option: dY} = aD;
    class dZ {
        constructor(fE) {
            const rI = jI;
            this['$'] = fE,
            this['yo'] = dV({
                'style': 'width:\x203em;\x20margin-left:\x201em;',
                'type': rI(0x503),
                'step': '1'
            }),
            this['bo'] = dX({
                'style': 'width:\x20100%;'
            }, dY({
                'value': 'splice'
            }, rI(0x731)), dY({
                'value': rI(0x266)
            }, rI(0x568)), dY({
                'value': rI(0x4b5)
            }, rI(0x417))),
            this['Ks'] = dR({
                'class': 'cancelButton'
            }),
            this['js'] = dR({
                'class': 'okayButton',
                'style': rI(0x2f9)
            }, rI(0x519)),
            this[rI(0x593)] = dS({
                'class': 'prompt\x20noSelection',
                'style': rI(0x7b0)
            }, dU(rI(0x2d5)), dS({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, dS({
                'style': rI(0x3e1)
            }, 'Beats\x20per\x20bar:', dW(), dT({
                'style': 'font-size:\x20smaller;\x20color:\x20' + aL[rI(0x1e6)] + ';'
            }, '(Multiples\x20of\x203\x20or\x204\x20are\x20recommended)')), this['yo']), dS({
                'style': rI(0x3f1)
            }, dS({
                'class': rI(0x841),
                'style': 'width:\x20100%;'
            }, this['bo'])), dS({
                'style': rI(0x1ad)
            }, this['js']), this['Ks']),
            this['U'] = () => {
                this['$']['undo']();
            }
            ,
            this['cleanUp'] = () => {
                const rJ = rI;
                this['js'][rJ(0x575)]('click', this['wo']),
                this['Ks'][rJ(0x575)]('click', this['U']),
                this['yo'][rJ(0x575)](rJ(0x48a), dZ['vo']),
                this['yo'][rJ(0x575)]('blur', dZ['ko']),
                this[rJ(0x593)]['removeEventListener'](rJ(0x1df), this['Qs']);
            }
            ,
            this['Qs'] = fG => {
                const rK = rI;
                'BUTTON' != fG['target'][rK(0x7c7)] && 0xd == fG['keyCode'] && this['wo']();
            }
            ,
            this['wo'] = () => {
                const rL = rI;
                window['localStorage']['setItem'](rL(0x65f), this['bo']['value']),
                this['$']['prompt'] = null,
                this['$']['record'](new cK(this['$'],dZ['Mo'](this['yo']),this['bo']['value']), !0x0);
            }
            ,
            this['yo'][rI(0x313)] = this['$']['song'][rI(0x6c9)] + '',
            this['yo']['min'] = a1[rI(0x3d7)] + '',
            this['yo']['max'] = a1[rI(0x5bd)] + '';
            const fF = window['localStorage']['getItem'](rI(0x65f));
            null != fF && (this['bo'][rI(0x313)] = fF),
            this['yo']['select'](),
            setTimeout( () => this['yo']['focus']()),
            this['js']['addEventListener'](rI(0x50e), this['wo']),
            this['Ks']['addEventListener'](rI(0x50e), this['U']),
            this['yo']['addEventListener']('keypress', dZ['vo']),
            this['yo'][rI(0x258)](rI(0x7a4), dZ['ko']),
            this['container'][rI(0x258)](rI(0x1df), this['Qs']);
        }
        static['vo'](fE) {
            const rM = jI
              , fF = fE['which'] ? fE[rM(0x6ff)] : fE[rM(0x7a8)];
            return 0x2e != fF && fF > 0x1f && (fF < 0x30 || fF > 0x39) && (fE['preventDefault'](),
            !0x0);
        }
        static['ko'](fE) {
            const fF = fE['target'];
            fF['value'] = String(dZ['Mo'](fF));
        }
        static['Mo'](fE) {
            const rN = jI;
            return Math[rN(0x4fb)](Math['max'](Number(fE[rN(0x4c5)]), Math['min'](Number(fE[rN(0x2f6)]), Number(fE['value']))));
        }
    }
    const {button: e0, div: e1, span: e2, h2: e3, input: e4, br: e5, select: e6, option: e7} = aD;
    class e8 {
        constructor(fE) {
            const rO = jI;
            this['$'] = fE,
            this['yo'] = e4({
                'style': 'width:\x203em;\x20margin-left:\x201em;',
                'type': rO(0x503),
                'step': rO(0x5d1),
                'value': '0'
            }),
            this['bo'] = e6({
                'style': rO(0x4c2)
            }, e7({
                'value': 'overflow'
            }, 'Overflow\x20notes\x20across\x20bars.'), e7({
                'value': rO(0x719)
            }, rO(0x44c))),
            this['Ks'] = e0({
                'class': rO(0x210)
            }),
            this['js'] = e0({
                'class': rO(0x418),
                'style': 'width:45%;'
            }, rO(0x519)),
            this['container'] = e1({
                'class': 'prompt\x20noSelection',
                'style': 'width:\x20250px;'
            }, e3(rO(0x87d)), e1({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, e1({
                'style': 'text-align:\x20right;'
            }, rO(0x2a1), e5(), e2({
                'style': rO(0x55e) + aL['secondaryText'] + ';'
            }, '(Negative\x20is\x20left,\x20positive\x20is\x20right)')), this['yo']), e1({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, e1({
                'class': 'selectContainer',
                'style': rO(0x4c2)
            }, this['bo'])), e1({
                'style': rO(0x1ad)
            }, this['js']), this['Ks']),
            this['U'] = () => {
                this['$']['undo']();
            }
            ,
            this[rO(0x21d)] = () => {
                const rP = rO;
                this['js'][rP(0x575)]('click', this['wo']),
                this['Ks']['removeEventListener'](rP(0x50e), this['U']),
                this['yo']['removeEventListener']('blur', e8['ko']),
                this[rP(0x593)]['removeEventListener']('keydown', this['Qs']);
            }
            ,
            this['Qs'] = fG => {
                const rQ = rO;
                'BUTTON' != fG['target'][rQ(0x7c7)] && 0xd == fG[rQ(0x7a8)] && this['wo']();
            }
            ,
            this['wo'] = () => {
                const rR = rO;
                window[rR(0x75c)]['setItem']('moveNotesSidewaysStrategy', this['bo'][rR(0x313)]),
                this['$'][rR(0x3f4)] = null,
                this['$']['record'](new cJ(this['$'],+this['yo'][rR(0x313)],this['bo'][rR(0x313)]), !0x0);
            }
            ,
            this['yo'][rO(0x4c5)] = -this['$']['song']['beatsPerBar'] + '',
            this['yo'][rO(0x2f6)] = this['$'][rO(0x3c1)][rO(0x6c9)] + '';
            const fF = window[rO(0x75c)]['getItem'](rO(0x4c6));
            null != fF && (this['bo'][rO(0x313)] = fF),
            this['yo']['select'](),
            setTimeout( () => this['yo'][rO(0x571)]()),
            this['js']['addEventListener'](rO(0x50e), this['wo']),
            this['Ks']['addEventListener'](rO(0x50e), this['U']),
            this['yo'][rO(0x258)]('blur', e8['ko']),
            this[rO(0x593)][rO(0x258)]('keydown', this['Qs']);
        }
        static['ko'](fE) {
            const rS = jI
              , fF = fE['target'];
            let fG = +fF[rS(0x313)];
            fG = Math[rS(0x874)](fG * a1[rS(0x58d)]) / a1['partsPerBeat'],
            fG = Math[rS(0x874)](0x64 * fG) / 0x64,
            fF[rS(0x313)] = Math[rS(0x2f6)](+fF[rS(0x4c5)], Math[rS(0x4c5)](+fF['max'], fG)) + '';
        }
    }
    const {button: e9, div: ea, span: eb, h2: ec, input: ed, br: ef, select: eg, option: eh} = aD;
    class ej {
        constructor(fE) {
            const rT = jI;
            this['$'] = fE,
            this['xo'] = ed({
                'style': 'width:\x203em;\x20margin-left:\x201em;',
                'type': 'number',
                'step': '1'
            }),
            this['So'] = eg({
                'style': 'width:\x20100%;'
            }, eh({
                'value': rT(0x63e)
            }, rT(0x180)), eh({
                'value': rT(0x28e)
            }, rT(0x168))),
            this['Ks'] = e9({
                'class': rT(0x210)
            }),
            this['js'] = e9({
                'class': 'okayButton',
                'style': 'width:45%;'
            }, rT(0x519)),
            this['container'] = ea({
                'class': 'prompt\x20noSelection',
                'style': 'width:\x20250px;'
            }, ec('Song\x20Length'), ea({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, ea({
                'style': 'display:\x20inline-block;\x20text-align:\x20right;'
            }, rT(0x700), ef(), eb({
                'style': rT(0x55e) + aL['secondaryText'] + ';'
            }, rT(0x515))), this['xo']), ea({
                'style': rT(0x3f1)
            }, ea({
                'class': rT(0x841),
                'style': rT(0x4c2)
            }, this['So'])), ea({
                'style': 'display:\x20flex;\x20flex-direction:\x20row-reverse;\x20justify-content:\x20space-between;'
            }, this['js']), this['Ks']),
            this['U'] = () => {
                const rU = rT;
                this['$'][rU(0x6b3)]();
            }
            ,
            this['cleanUp'] = () => {
                const rV = rT;
                this['js'][rV(0x575)]('click', this['wo']),
                this['Ks'][rV(0x575)](rV(0x50e), this['U']),
                this['xo'][rV(0x575)]('keypress', ej['vo']),
                this['xo'][rV(0x575)]('blur', ej['ko']),
                this['container'][rV(0x575)](rV(0x1df), this['Qs']);
            }
            ,
            this['Qs'] = fG => {
                const rW = rT;
                'BUTTON' != fG[rW(0x46a)][rW(0x7c7)] && 0xd == fG[rW(0x7a8)] && this['wo']();
            }
            ,
            this['wo'] = () => {
                const rX = rT;
                window['localStorage'][rX(0x2d6)]('barCountPosition', this['So']['value']);
                const fG = new bz();
                fG[rX(0x65e)](new bO(this['$'],ej['Mo'](this['xo']),rX(0x28e) == this['So']['value'])),
                this['$']['prompt'] = null,
                this['$']['record'](fG, !0x0);
            }
            ,
            this['xo']['value'] = this['$']['song']['barCount'] + '',
            this['xo']['min'] = a1[rT(0x231)] + '',
            this['xo']['max'] = a1[rT(0x80f)] + '';
            const fF = window['localStorage'][rT(0x1a3)](rT(0x6d4));
            null != fF && (this['So'][rT(0x313)] = fF),
            this['xo']['select'](),
            setTimeout( () => this['xo'][rT(0x571)]()),
            this['js'][rT(0x258)](rT(0x50e), this['wo']),
            this['Ks'][rT(0x258)](rT(0x50e), this['U']),
            this['xo'][rT(0x258)](rT(0x48a), ej['vo']),
            this['xo']['addEventListener']('blur', ej['ko']),
            this[rT(0x593)]['addEventListener']('keydown', this['Qs']);
        }
        static['vo'](fE) {
            const rY = jI
              , fF = fE[rY(0x6ff)] ? fE[rY(0x6ff)] : fE['keyCode'];
            return 0x2e != fF && fF > 0x1f && (fF < 0x30 || fF > 0x39) && (fE[rY(0x1e4)](),
            !0x0);
        }
        static['ko'](fE) {
            const fF = fE['target'];
            fF['value'] = String(ej['Mo'](fF));
        }
        static['Mo'](fE) {
            const rZ = jI;
            return Math['floor'](Math[rZ(0x2f6)](Number(fE['min']), Math['min'](Number(fE['max']), Number(fE[rZ(0x313)]))));
        }
    }
    const {button: ek, div: el, h2: em, p: eo, select: ep, option: eq} = aD;
    class er {
        constructor(fE) {
            const s0 = jI;
            this['$'] = fE,
            this['Fo'] = ep({
                'style': s0(0x4c2)
            }, eq({
                'value': 'acoustic'
            }, '(A)\x20Acoustic'), eq({
                'value': s0(0x2c0)
            }, '(B)\x20Bright')),
            this['Ks'] = ek({
                'class': 'cancelButton'
            }),
            this['js'] = ek({
                'class': 'okayButton',
                'style': s0(0x2f9)
            }, 'Okay'),
            this['container'] = el({
                'class': 'prompt',
                'style': s0(0x2a9)
            }, el(em(s0(0x213)), eo('This\x20setting\x20controls\x20how\x20quickly\x20the\x20picked\x20string\x20vibration\x20decays.'), eo(s0(0x40b))), el({
                'style': {
                    'display': a1['enableAcousticSustain'] ? void 0x0 : s0(0x3a9)
                }
            }, eo('BeepBox\x20comes\x20with\x20two\x20slightly\x20different\x20sustain\x20designs.\x20You\x20can\x20select\x20one\x20here\x20and\x20press\x20\x22Okay\x22\x20to\x20confirm\x20it.'), el({
                'class': 'selectContainer',
                'style': s0(0x4c2)
            }, this['Fo'])), el({
                'style': {
                    'display': a1[s0(0x40c)] ? 'flex' : 'none',
                    'flex-direction': 'row-reverse',
                    'justify-content': 'space-between'
                }
            }, this['js']), this['Ks']),
            this['U'] = () => {
                const s1 = s0;
                this['$'][s1(0x6b3)]();
            }
            ,
            this[s0(0x21d)] = () => {
                const s2 = s0;
                this['js']['removeEventListener'](s2(0x50e), this['wo']),
                this['Ks'][s2(0x575)](s2(0x50e), this['U']),
                this['container']['removeEventListener']('keydown', this['Qs']);
            }
            ,
            this['Qs'] = fG => {
                const s3 = s0;
                s3(0x85d) != fG[s3(0x46a)]['tagName'] && 0xd == fG['keyCode'] && this['wo']();
            }
            ,
            this['wo'] = () => {
                const s4 = s0;
                if (a1[s4(0x40c)]) {
                    const fG = new bz();
                    fG['append'](new cd(this['$'],a1['sustainTypeNames'][s4(0x2fb)](this['Fo'][s4(0x313)]))),
                    this['$'][s4(0x3f4)] = null,
                    this['$']['record'](fG, !0x0);
                } else
                    this['U']();
            }
            ;
            const fF = this['$'][s0(0x3c1)][s0(0x7b3)][this['$']['channel']][s0(0x84c)][this['$']['getCurrentInstrument']()];
            this['Fo']['value'] = a1[s0(0x414)][fF[s0(0x71d)]],
            setTimeout( () => this['Ks'][s0(0x571)]()),
            this['js'][s0(0x258)](s0(0x50e), this['wo']),
            this['Ks']['addEventListener'](s0(0x50e), this['U']),
            this[s0(0x593)]['addEventListener'](s0(0x1df), this['Qs']);
        }
    }
    const {button: eu, div: ev, label: ew, br: ex, h2: ey, input: ez} = aD;
    class eA {
        constructor(fE) {
            const s5 = jI;
            this['$'] = fE,
            this['Po'] = ez({
                'style': 'width:\x203em;\x20margin-left:\x201em;',
                'type': 'number',
                'step': '1'
            }),
            this['Io'] = ez({
                'style': s5(0x3d8),
                'type': 'number',
                'step': '1'
            }),
            this['qo'] = ez({
                'style': s5(0x3d8),
                'type': 'number',
                'step': '1'
            }),
            this['To'] = ez({
                'style': s5(0x3d8),
                'type': 'checkbox'
            }),
            this['Eo'] = ez({
                'style': s5(0x3d8),
                'type': s5(0x641)
            }),
            this['Ks'] = eu({
                'class': s5(0x210)
            }),
            this['js'] = eu({
                'class': 'okayButton',
                'style': s5(0x2f9)
            }, s5(0x519)),
            this['container'] = ev({
                'class': 'prompt\x20noSelection',
                'style': 'width:\x20250px;\x20text-align:\x20right;'
            }, ey('Channel\x20Settings'), ew({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, s5(0x761), this['Io']), ew({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, 'Drum\x20channels:', this['qo']), ew({
                'style': s5(0x3f1)
            }, s5(0x72c), this['Po']), ew({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, s5(0x7e3), ex(), s5(0x87e), this['To']), ew({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, s5(0x49c), ex(), s5(0x178), this['Eo']), ev({
                'style': 'display:\x20flex;\x20flex-direction:\x20row-reverse;\x20justify-content:\x20space-between;'
            }, this['js']), this['Ks']),
            this['U'] = () => {
                this['$']['undo']();
            }
            ,
            this[s5(0x21d)] = () => {
                const s6 = s5;
                this['js'][s6(0x575)]('click', this['wo']),
                this['Ks'][s6(0x575)](s6(0x50e), this['U']),
                this['Po']['removeEventListener']('keypress', eA['vo']),
                this['Io'][s6(0x575)](s6(0x48a), eA['vo']),
                this['qo'][s6(0x575)]('keypress', eA['vo']),
                this['Po']['removeEventListener']('blur', this['ko']),
                this['Io']['removeEventListener']('blur', this['ko']),
                this['qo']['removeEventListener']('blur', this['ko']),
                this['container'][s6(0x575)]('keydown', this['Qs']);
            }
            ,
            this['Qs'] = fF => {
                const s7 = s5;
                s7(0x85d) != fF[s7(0x46a)]['tagName'] && 0xd == fF[s7(0x7a8)] && this['wo']();
            }
            ,
            this['ko'] = fF => {
                const fG = fF['target'];
                fG['value'] = String(eA['Mo'](fG));
            }
            ,
            this['wo'] = () => {
                const s8 = s5
                  , fF = new bz();
                fF['append'](new cu(this['$'],this['To']['checked'],this['Eo'][s8(0x634)])),
                fF[s8(0x65e)](new cD(this['$'],eA['Mo'](this['Po']))),
                fF['append'](new bS(this['$'],eA['Mo'](this['Io']),eA['Mo'](this['qo']))),
                this['$'][s8(0x3f4)] = null,
                this['$'][s8(0x235)](fF, !0x0);
            }
            ,
            this['Po']['value'] = this['$']['song'][s5(0x468)] + '',
            this['Po'][s5(0x4c5)] = '1',
            this['Po']['max'] = a1[s5(0x80f)] + '',
            this['Io']['value'] = this['$']['song']['pitchChannelCount'] + '',
            this['Io']['min'] = a1['pitchChannelCountMin'] + '',
            this['Io']['max'] = a1[s5(0x2af)] + '',
            this['qo'][s5(0x313)] = this['$']['song'][s5(0x3ea)] + '',
            this['qo']['min'] = a1['noiseChannelCountMin'] + '',
            this['qo']['max'] = a1[s5(0x735)] + '',
            this['To'][s5(0x634)] = this['$']['song'][s5(0x394)],
            this['Eo']['checked'] = this['$']['song'][s5(0x776)],
            this['Io']['select'](),
            setTimeout( () => this['Io'][s5(0x571)]()),
            this['js']['addEventListener'](s5(0x50e), this['wo']),
            this['Ks'][s5(0x258)](s5(0x50e), this['U']),
            this['Po'][s5(0x258)]('keypress', eA['vo']),
            this['Io']['addEventListener']('keypress', eA['vo']),
            this['qo']['addEventListener'](s5(0x48a), eA['vo']),
            this['Po'][s5(0x258)]('blur', this['ko']),
            this['Io']['addEventListener']('blur', this['ko']),
            this['qo']['addEventListener'](s5(0x7a4), this['ko']),
            this[s5(0x593)]['addEventListener'](s5(0x1df), this['Qs']);
        }
        static['vo'](fE) {
            const s9 = jI
              , fF = fE[s9(0x6ff)] ? fE[s9(0x6ff)] : fE['keyCode'];
            return 0x2e != fF && fF > 0x1f && (fF < 0x30 || fF > 0x39) && (fE[s9(0x1e4)](),
            !0x0);
        }
        static['Mo'](fE) {
            const sa = jI;
            return Math[sa(0x4fb)](Math['max'](Number(fE['min']), Math['min'](Number(fE['max']), Number(fE[sa(0x313)]))));
        }
    }
    function eB(fE, fF) {
        const sb = jI
          , fG = new ArrayBuffer(fF);
        let fH = 0x0
          , fI = Math[sb(0x4c5)](fE[sb(0x3a5)], fG['byteLength']);
        const fJ = [0x8, 0x4, 0x2, 0x1];
        for (const fL of fJ)
            if (fI >= fL) {
                const fM = fK(fL, fE, fG, fH, fI);
                fH = fM['nextOffset'],
                fI = fM['leftBytes'];
            }
        return fG;
        function fK(fN, fO, fP, fQ, fR) {
            const sc = sb;
            let fS = Uint8Array;
            switch (fN) {
            case 0x8:
                fS = Float64Array;
                break;
            case 0x4:
                fS = Float32Array;
                break;
            case 0x2:
                fS = Uint16Array;
                break;
            default:
                fS = Uint8Array;
            }
            const fT = new fS(fO,fQ,fR / fN | 0x0)
              , fU = new fS(fP,fQ,fR / fN | 0x0);
            for (let fV = 0x0; fV < fU[sc(0x57c)]; fV++)
                fU[fV] = fT[fV];
            return {
                'nextOffset': fT[sc(0x83c)] + fT['byteLength'],
                'leftBytes': fR - fU['length'] * fN
            };
        }
    }
    class eC {
        constructor(fE) {
            this['Co'] = 0x0,
            this['Lo'] = 0x0,
            this['zo'] = new ArrayBuffer(fE),
            this['Do'] = new DataView(this['zo']);
        }
        ['Ao'](fE) {
            const sd = jI;
            this['Lo'] += fE,
            this['Lo'] > this['zo'][sd(0x3a5)] && (this['zo'] = eB(this['zo'], Math['max'](0x2 * this['zo']['byteLength'], this['Lo'])),
            this['Do'] = new DataView(this['zo']));
        }
        [jI(0x2a3)]() {
            return this['Co'];
        }
        [jI(0x4cf)](fE, fF) {
            const se = jI;
            this['Do'][se(0x5f8)](fE, fF >>> 0x0, !0x1);
        }
        ['writeUint32'](fE) {
            fE >>>= 0x0,
            this['Ao'](0x4),
            this['Do']['setUint32'](this['Co'], fE, !0x1),
            this['Co'] = this['Lo'];
        }
        ['writeUint24'](fE) {
            const sf = jI;
            fE >>>= 0x0,
            this['Ao'](0x3),
            this['Do'][sf(0x70a)](this['Co'], fE >> 0x10 & 0xff),
            this['Do'][sf(0x70a)](this['Co'] + 0x1, fE >> 0x8 & 0xff),
            this['Do'][sf(0x70a)](this['Co'] + 0x2, 0xff & fE),
            this['Co'] = this['Lo'];
        }
        [jI(0x523)](fE) {
            const sg = jI;
            fE >>>= 0x0,
            this['Ao'](0x2),
            this['Do'][sg(0x825)](this['Co'], fE, !0x1),
            this['Co'] = this['Lo'];
        }
        ['writeUint8'](fE) {
            fE >>>= 0x0,
            this['Ao'](0x1),
            this['Do']['setUint8'](this['Co'], fE),
            this['Co'] = this['Lo'];
        }
        ['writeInt8'](fE) {
            fE |= 0x0,
            this['Ao'](0x1),
            this['Do']['setInt8'](this['Co'], fE),
            this['Co'] = this['Lo'];
        }
        [jI(0x2e9)](fE) {
            if ((fE >>>= 0x0) >= 0x80)
                throw new Error('7\x20bit\x20value\x20contained\x208th\x20bit!');
            this['Ao'](0x1),
            this['Do']['setUint8'](this['Co'], fE),
            this['Co'] = this['Lo'];
        }
        ['writeMidiVariableLength'](fE) {
            if ((fE >>>= 0x0) > 0xfffffff)
                throw new Error('writeVariableLength\x20value\x20too\x20big.');
            let fF = !0x1;
            for (let fG = 0x0; fG < 0x4; fG++) {
                const fH = fE >>> 0x15 - 0x7 * fG & 0x7f;
                0x0 == fH && 0x3 != fG || (fF = !0x0),
                fF && this['writeUint8']((0x3 == fG ? 0x0 : 0x80) | fH);
            }
        }
        [jI(0x19e)](fE) {
            const sh = jI;
            this['writeMidiVariableLength'](fE['length']);
            for (let fF = 0x0; fF < fE['length']; fF++) {
                const fG = fE['charCodeAt'](fF);
                if (fG > 0x7f)
                    throw new Error('Trying\x20to\x20write\x20unicode\x20character\x20as\x20ascii.');
                this[sh(0x45b)](fG);
            }
        }
        [jI(0x437)]() {
            return eB(this['zo'], this['Lo']);
        }
    }
    const {button: eD, div: eE, h2: eF, input: eG, select: eH, option: eI} = aD;
    function eJ(fE, fF, fG) {
        return fE + fG * (fF - fE);
    }
    function eK(fE, fF) {
        const si = jI;
        if (navigator[si(0x5de)])
            return void navigator[si(0x5de)](fE, fF);
        const fG = document[si(0x5d9)]('a');
        if (null != fG[si(0x46f)]) {
            const fH = URL['createObjectURL'](fE);
            setTimeout(function() {
                const sj = si;
                URL[sj(0x737)](fH);
            }, 0xea60),
            fG[si(0x62e)] = fH,
            fG['download'] = fF,
            setTimeout(function() {
                fG['dispatchEvent'](new MouseEvent('click'));
            }, 0x0);
        } else {
            const fI = URL[si(0x7aa)](fE);
            setTimeout(function() {
                URL['revokeObjectURL'](fI);
            }, 0xea60),
            window[si(0x18d)](fI, '_blank') || (window[si(0x543)][si(0x62e)] = fI);
        }
    }
    class eL {
        constructor(fE) {
            const sk = jI;
            this['$'] = fE,
            this['Bo'] = eG({
                'type': sk(0x1d2),
                'style': 'width:\x2010em;',
                'value': 'BeepBox-Song',
                'maxlength': 0xfa,
                'autofocus': sk(0x7f1)
            }),
            this['Oo'] = eG({
                'type': 'checkbox'
            }),
            this['No'] = eG({
                'style': sk(0x7c2),
                'type': sk(0x503),
                'min': '1',
                'max': '4',
                'step': '1'
            }),
            this['Ro'] = eG({
                'type': sk(0x641)
            }),
            this['Ho'] = eH({
                'style': sk(0x4c2)
            }, eI({
                'value': 'wav'
            }, '.wav'), eI({
                'value': sk(0x481)
            }, '.mp3'), eI({
                'value': sk(0x455)
            }, sk(0x788)), eI({
                'value': 'json'
            }, sk(0x260)), eI({
                'value': 'html'
            }, '.html\x20(opens\x20BeepBox)')),
            this['Ks'] = eD({
                'class': 'cancelButton'
            }),
            this['Go'] = eD({
                'class': sk(0x5a1),
                'style': sk(0x2f9)
            }, 'Export'),
            this['container'] = eE({
                'class': sk(0x6df),
                'style': sk(0x396)
            }, eF(sk(0x1bd)), eE({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20justify-content:\x20space-between;'
            }, sk(0x384), this['Bo']), eE({
                'style': sk(0x891)
            }, eE({
                'style': sk(0x4c1)
            }, eE({
                'style': 'display:\x20table-cell;'
            }, sk(0x482)), eE({
                'style': sk(0x270)
            }, 'Loop\x20Count:'), eE({
                'style': 'display:\x20table-cell;'
            }, 'Outro:')), eE({
                'style': 'display:\x20table-row;'
            }, eE({
                'style': 'display:\x20table-cell;\x20vertical-align:\x20middle;'
            }, this['Oo']), eE({
                'style': sk(0x317)
            }, this['No']), eE({
                'style': 'display:\x20table-cell;\x20vertical-align:\x20middle;'
            }, this['Ro']))), eE({
                'style': 'text-align:\x20left;'
            }, 'File\x20Type:'), eE({
                'class': sk(0x841),
                'style': sk(0x4c2)
            }, this['Ho']), eE({
                'style': sk(0x81d)
            }, sk(0x1dd)), eE({
                'style': sk(0x1ad)
            }, this['Go']), this['Ks']),
            this['U'] = () => {
                const sl = sk;
                this['$'][sl(0x6b3)]();
            }
            ,
            this[sk(0x21d)] = () => {
                const sm = sk;
                this['Bo']['removeEventListener']('input', eL['$o']),
                this['No'][sm(0x575)](sm(0x7a4), eL['ko']),
                this['Go'][sm(0x575)]('click', this['_o']),
                this['Ks'][sm(0x575)](sm(0x50e), this['U']),
                this[sm(0x593)]['removeEventListener']('keydown', this['Qs']);
            }
            ,
            this['Qs'] = fG => {
                const sn = sk;
                sn(0x85d) != fG[sn(0x46a)][sn(0x7c7)] && 0xd == fG[sn(0x7a8)] && this['_o']();
            }
            ,
            this['_o'] = () => {
                const so = sk;
                switch (window['localStorage'][so(0x2d6)](so(0x2a5), this['Ho'][so(0x313)]),
                this['Ho'][so(0x313)]) {
                case 'wav':
                    this['Uo']();
                    break;
                case so(0x481):
                    this['Vo']();
                    break;
                case 'midi':
                    this['Wo']();
                    break;
                case so(0x441):
                    this['jo']();
                    break;
                case 'html':
                    this['Ko']();
                    break;
                default:
                    throw new Error('Unhandled\x20file\x20export\x20type.');
                }
            }
            ,
            this['No']['value'] = '1',
            0x0 == this['$']['song']['loopStart'] ? (this['Oo']['checked'] = !0x1,
            this['Oo'][sk(0x324)] = !0x0) : (this['Oo']['checked'] = !0x0,
            this['Oo'][sk(0x324)] = !0x1),
            this['$']['song']['loopStart'] + this['$']['song']['loopLength'] == this['$']['song']['barCount'] ? (this['Ro'][sk(0x634)] = !0x1,
            this['Ro']['disabled'] = !0x0) : (this['Ro'][sk(0x634)] = !0x0,
            this['Ro']['disabled'] = !0x1);
            const fF = window['localStorage'][sk(0x1a3)](sk(0x2a5));
            null != fF && (this['Ho'][sk(0x313)] = fF),
            this['Bo'][sk(0x274)](),
            setTimeout( () => this['Bo'][sk(0x571)]()),
            this['Bo'][sk(0x258)]('input', eL['$o']),
            this['No'][sk(0x258)]('blur', eL['ko']),
            this['Go'][sk(0x258)](sk(0x50e), this['_o']),
            this['Ks'][sk(0x258)](sk(0x50e), this['U']),
            this['container']['addEventListener'](sk(0x1df), this['Qs']);
        }
        static['$o'](fE) {
            const sp = jI
              , fF = fE[sp(0x46a)]
              , fG = /[\+\*\$\?\|\{\}\\\/<>#%!`&'"=:@]/gi;
            if (fG[sp(0x78d)](fF[sp(0x313)])) {
                let fH = fF[sp(0x6c7)];
                fF[sp(0x313)] = fF[sp(0x313)][sp(0x81c)](fG, ''),
                fH--,
                fF[sp(0x20a)](fH, fH);
            }
        }
        static['ko'](fE) {
            const sq = jI
              , fF = fE['target'];
            fF['value'] = Math[sq(0x4fb)](Math[sq(0x2f6)](Number(fF[sq(0x4c5)]), Math['min'](Number(fF['max']), Number(fF['value'])))) + '';
        }
        ['Yo'](fE) {
            const sr = jI
              , fF = new bp(this['$'][sr(0x3c1)]);
            if (fF[sr(0x6a5)] = fE,
            fF[sr(0x315)] = Number(this['No'][sr(0x313)]) - 0x1,
            !this['Oo'][sr(0x634)]) {
                for (let fJ = 0x0; fJ < this['$']['song'][sr(0x699)]; fJ++)
                    fF['goToNextBar']();
            }
            const fG = Math['ceil'](fF[sr(0x511)]() * fF[sr(0x703)](this['Oo'][sr(0x634)], this['Ro']['checked']))
              , fH = new Float32Array(fG)
              , fI = new Float32Array(fG);
            return fF[sr(0x3e2)](fH, fI, fG),
            {
                'recordedSamplesL': fH,
                'recordedSamplesR': fI
            };
        }
        ['Uo']() {
            const ss = jI
              , fE = 0xbb80
              , {recordedSamplesL: fF, recordedSamplesR: fG} = this['Yo'](fE)
              , fH = fF['length']
              , fI = 0x2 * fH;
            let fJ = 0x0;
            const fK = new ArrayBuffer(0x2c + 0x2 * fI)
              , fL = new DataView(fK);
            fL[ss(0x5f8)](fJ, 0x52494646, !0x1),
            fJ += 0x4,
            fL[ss(0x5f8)](fJ, 0x24 + 0x2 * fI, !0x0),
            fJ += 0x4,
            fL[ss(0x5f8)](fJ, 0x57415645, !0x1),
            fJ += 0x4,
            fL[ss(0x5f8)](fJ, 0x666d7420, !0x1),
            fJ += 0x4,
            fL[ss(0x5f8)](fJ, 0x10, !0x0),
            fJ += 0x4,
            fL['setUint16'](fJ, 0x1, !0x0),
            fJ += 0x2,
            fL['setUint16'](fJ, 0x2, !0x0),
            fJ += 0x2,
            fL['setUint32'](fJ, fE, !0x0),
            fJ += 0x4,
            fL['setUint32'](fJ, 0x2ee00, !0x0),
            fJ += 0x4,
            fL[ss(0x825)](fJ, 0x4, !0x0),
            fJ += 0x2,
            fL['setUint16'](fJ, 0x10, !0x0),
            fJ += 0x2,
            fL['setUint32'](fJ, 0x64617461, !0x1),
            fJ += 0x4,
            fL['setUint32'](fJ, 0x2 * fI, !0x0),
            fJ += 0x4;
            {
                const fM = 0x7fff;
                for (let fN = 0x0; fN < fH; fN++) {
                    let fO = Math['floor'](Math['max'](-0x1, Math[ss(0x4c5)](0x1, fF[fN])) * fM)
                      , fP = Math[ss(0x4fb)](Math[ss(0x2f6)](-0x1, Math[ss(0x4c5)](0x1, fG[fN])) * fM);
                    fL[ss(0x1ab)](fJ, fO, !0x0),
                    fJ += 0x2,
                    fL['setInt16'](fJ, fP, !0x0),
                    fJ += 0x2;
                }
            }
            eK(new Blob([fK],{
                'type': 'audio/wav'
            }), this['Bo'][ss(0x313)]['trim']() + '.wav'),
            this['U']();
        }
        ['Vo']() {
            const su = jI
              , fE = () => {
                const st = a0b
                  , {recordedSamplesL: fG, recordedSamplesR: fH} = this['Yo'](0xac44)
                  , fI = 0x480
                  , fJ = new window[(st(0x68f))]['Mp3Encoder'](0x2,0xac44,0xc0)
                  , fK = []
                  , fL = new Int16Array(fG['length'])
                  , fM = new Int16Array(fH[st(0x57c)]);
                for (let fO = 0x0; fO < fG['length']; fO++)
                    fL[fO] = Math[st(0x4fb)](0x7fff * Math['max'](-0x1, Math['min'](0x1, fG[fO]))),
                    fM[fO] = Math[st(0x4fb)](0x7fff * Math[st(0x2f6)](-0x1, Math['min'](0x1, fH[fO])));
                for (let fP = 0x0; fP < fL[st(0x57c)]; fP += fI) {
                    const fQ = fL[st(0x758)](fP, fP + fI)
                      , fR = fM[st(0x758)](fP, fP + fI)
                      , fS = fJ[st(0x506)](fQ, fR);
                    fS[st(0x57c)] > 0x0 && fK[st(0x557)](fS);
                }
                const fN = fJ['flush']();
                fN[st(0x57c)] > 0x0 && fK['push'](fN),
                (eK(new Blob(fK,{
                    'type': st(0x41d)
                }), this['Bo'][st(0x313)][st(0x410)]() + st(0x25e)),
                this['U']());
            }
            ;
            if ('lamejs'in window)
                fE();
            else {
                var fF = document['createElement'](su(0x24a));
                fF[su(0x75f)] = 'https://cdn.jsdelivr.net/npm/lamejs@1.2.0/lame.min.js',
                fF[su(0x872)] = fE,
                document[su(0x314)][su(0x2b8)](fF);
            }
        }
        ['Wo']() {
            const sv = jI
              , fE = this['$'][sv(0x3c1)]
              , fF = 0x2 * a1[sv(0x696)] * a1[sv(0x58d)]
              , fG = 0x2 * a1['ticksPerPart']
              , fH = fE[sv(0x6b5)]()
              , fI = Math['round'](0x3938700 / fH)
              , fJ = fF * fE[sv(0x6c9)]
              , fK = 0x18
              , fL = [];
            if (this['Oo'][sv(0x634)]) {
                for (let fR = 0x0; fR < fE['loopStart']; fR++)
                    fL['push'](fR);
            }
            for (let fS = 0x0; fS < Number(this['No']['value']); fS++)
                for (let fT = fE[sv(0x699)]; fT < fE[sv(0x699)] + fE['loopLength']; fT++)
                    fL[sv(0x557)](fT);
            if (this['Ro']['checked']) {
                for (let fU = fE[sv(0x699)] + fE['loopLength']; fU < fE['barCount']; fU++)
                    fL[sv(0x557)](fU);
            }
            const fM = [{
                'isMeta': !0x0,
                'channel': -0x1,
                'midiChannel': -0x1,
                'isNoise': !0x1,
                'isDrumset': !0x1
            }];
            let fN = 0x0
              , fO = !0x1;
            for (let fV = 0x0; fV < this['$'][sv(0x3c1)]['getChannelCount'](); fV++)
                if (fO || 0x4 != this['$'][sv(0x3c1)][sv(0x7b3)][fV][sv(0x84c)][0x0]['type']) {
                    if (fN >= 0x10)
                        continue;
                    fM['push']({
                        'isMeta': !0x1,
                        'channel': fV,
                        'midiChannel': fN++,
                        'isNoise': this['$'][sv(0x3c1)]['getChannelIsNoise'](fV),
                        'isDrumset': !0x1
                    }),
                    0x9 == fN && fN++;
                } else
                    fM[sv(0x557)]({
                        'isMeta': !0x1,
                        'channel': fV,
                        'midiChannel': 0x9,
                        'isNoise': !0x0,
                        'isDrumset': !0x0
                    }),
                    fO = !0x0;
            const fP = new eC(0x400);
            fP['writeUint32'](0x4d546864),
            fP[sv(0x4b3)](0x6),
            fP[sv(0x523)](0x1),
            fP[sv(0x523)](fM[sv(0x57c)]),
            fP[sv(0x523)](fF);
            for (const fW of fM) {
                fP['writeUint32'](0x4d54726b);
                const {isMeta: fX, channel: fY, midiChannel: fZ, isNoise: g0, isDrumset: g1} = fW
                  , g2 = fP[sv(0x2a3)]();
                fP[sv(0x4b3)](0x0);
                let g3 = 0x0
                  , g4 = 0x0;
                const g5 = function(g7) {
                    const sw = sv;
                    if (g7 < g3)
                        throw new Error(sw(0x5db));
                    fP['writeMidiVariableLength'](g7 - g3),
                    g3 = g7;
                }
                  , g6 = function(g7, g8) {
                    const sx = sv;
                    if (!(g8 >= 0x0 && g8 <= 0x7f))
                        throw new Error(sx(0x7f7) + g8);
                    fP['writeUint8'](0xb0 | fZ),
                    fP[sx(0x2e9)](g7),
                    fP['writeMidi7Bits'](0x0 | g8);
                };
                if (fX) {
                    g5(0x0),
                    fP['writeUint8'](0xff),
                    fP[sv(0x2e9)](0x1),
                    fP[sv(0x19e)]('Composed\x20with\x20https://www.beepbox.co'),
                    g5(0x0),
                    fP[sv(0x45b)](0xff),
                    fP[sv(0x2e9)](0x51),
                    fP[sv(0x838)](0x3),
                    fP['writeUint24'](fI),
                    g5(0x0),
                    fP['writeUint8'](0xff),
                    fP[sv(0x2e9)](0x58),
                    fP['writeMidiVariableLength'](0x4),
                    fP['writeUint8'](fE[sv(0x6c9)]),
                    fP['writeUint8'](0x2),
                    fP[sv(0x45b)](0x18),
                    fP['writeUint8'](0x8);
                    const g7 = a1['scales'][fE['scale']][sv(0x58b)][0x3] && !a1[sv(0x379)][fE[sv(0x7ad)]][sv(0x58b)][0x4]
                      , g8 = fE[sv(0x319)];
                    let g9 = g8;
                    for (0x1 == (0x1 & g8) && (g9 += 0x6),
                    g7 && (g9 += 0x9); g9 > 0x6; )
                        g9 -= 0xc;
                    g5(0x0),
                    fP['writeUint8'](0xff),
                    fP['writeMidi7Bits'](0x59),
                    fP[sv(0x838)](0x2),
                    fP[sv(0x5a7)](g9),
                    fP[sv(0x45b)](g7 ? 0x1 : 0x0),
                    this['Oo'][sv(0x634)] && (g4 += fJ * fE[sv(0x699)]),
                    g5(g4),
                    fP[sv(0x45b)](0xff),
                    fP[sv(0x2e9)](0x6),
                    fP[sv(0x19e)](sv(0x49b));
                    for (let ga = 0x0; ga < parseInt(this['No']['value']); ga++)
                        g4 += fJ * fE['loopLength'],
                        g5(g4),
                        fP['writeUint8'](0xff),
                        fP['writeMidi7Bits'](0x6),
                        fP['writeMidiAscii'](ga < Number(this['No']['value']) - 0x1 ? 'Loop\x20Repeat' : 'Loop\x20End');
                    if (this['Ro'][sv(0x634)] && (g4 += fJ * (fE['barCount'] - fE['loopStart'] - fE['loopLength'])),
                    g4 != fJ * fL['length'])
                        throw new Error(sv(0x566));
                } else {
                    let gb = aL[sv(0x1f4)](fE, fY)['name'] + sv(0x3bc);
                    g5(0x0),
                    fP[sv(0x45b)](0xff),
                    fP[sv(0x2e9)](0x3),
                    fP[sv(0x19e)](gb),
                    g5(0x0),
                    g6(0x65, 0x0),
                    g5(0x0),
                    g6(0x64, 0x0),
                    g5(0x0),
                    g6(0x6, fK),
                    g5(0x0),
                    g6(0x26, 0x0),
                    g5(0x0),
                    g6(0x65, 0x7f),
                    g5(0x0),
                    g6(0x64, 0x7f);
                    let gc = -0x1;
                    function gd(gl) {
                        const sy = sv
                          , gm = fE['channels'][fY]['instruments'][gl]
                          , go = aq[sy(0x849)](gm['preset']);
                        if (gc != gl) {
                            if (gc = gl,
                            g5(g4),
                            fP[sy(0x45b)](0xff),
                            fP['writeMidi7Bits'](0x4),
                            fP['writeMidiAscii'](sy(0x6ae) + (gl + 0x1)),
                            !g1) {
                                let gu = 0x51;
                                if (null != go && null != go['midiProgram'])
                                    gu = go['midiProgram'];
                                else {
                                    if (0x4 == gm[sy(0x7d5)])
                                        gu = 0x74;
                                    else {
                                        if (0x2 == gm[sy(0x7d5)] || 0x3 == gm['type'])
                                            gu = g0 ? 0x74 : 0x4b;
                                        else {
                                            if (0x0 == gm[sy(0x7d5)])
                                                eL['midiChipInstruments']['length'] > gm['chipWave'] && (gu = eL['midiChipInstruments'][gm[sy(0x556)]]);
                                            else {
                                                if (0x6 == gm[sy(0x7d5)] || 0x1 == gm['type'] || 0x5 == gm[sy(0x7d5)] || 0x8 == gm[sy(0x7d5)])
                                                    gu = 0x51;
                                                else {
                                                    if (0x7 != gm[sy(0x7d5)])
                                                        throw new Error('Unrecognized\x20instrument\x20type.');
                                                    gu = 0x19;
                                                }
                                            }
                                        }
                                    }
                                }
                                g5(g4),
                                fP['writeUint8'](0xc0 | fZ),
                                fP[sy(0x2e9)](gu);
                            }
                            g5(g4);
                            let gq = (gp = bp['instrumentVolumeToVolumeMult'](gm[sy(0x7c6)]),
                            0x7f * Math[sy(0x3b6)](0.3844015376046128 * gp, 0.25));
                            g6(0x7, Math[sy(0x4c5)](0x7f, Math['round'](gq))),
                            g5(g4);
                            let gr = 0x3f * (gm['pan'] / a1['panCenter'] - 0x1) + 0x40;
                            g6(0xa, Math['min'](0x7f, Math['round'](gr)));
                        }
                        var gp;
                    }
                    null == fE['getPattern'](fY, 0x0) && gd(0x0);
                    let gf = dK
                      , gg = 0x7f
                      , gh = !0x1;
                    const gj = g0 ? a1['spectrumBasePitch'] : a1[sv(0x7af)][fE[sv(0x319)]][sv(0x2d8)]
                      , gk = g0 ? a1['noiseInterval'] : 0x1;
                    for (const gl of fL) {
                        const gm = fE[sv(0x4d5)](fY, gl);
                        if (null != gm) {
                            const go = gm[sv(0x84c)][0x0]
                              , gp = fE[sv(0x7b3)][fY]['instruments'][go]
                              , gq = aq[sv(0x849)](gp['preset']);
                            gd(go);
                            let gr = gp['getChord']()['arpeggiates']
                              , gu = gr ? 0x1 : a1[sv(0x5d4)];
                            gp[sv(0x1b0)]()[sv(0x429)] && (0x0 == gp[sv(0x7d5)] || 0x5 == gp[sv(0x7d5)] ? (gu = 0x2,
                            gr = !0x0) : 0x1 == gp[sv(0x7d5)] ? gu = a1['operatorCount'] : console[sv(0x1fe)]('Unrecognized\x20instrument\x20type\x20for\x20harmonizing\x20arpeggio:\x20' + gp[sv(0x7d5)]));
                            for (let gv = 0x0; gv < gm[sv(0x58c)]['length']; gv++) {
                                const gw = gm['notes'][gv]
                                  , gx = g4 + gw[sv(0x1b7)] * fG;
                                let gy = gx
                                  , gz = gw['pins'][0x0][sv(0x81f)]
                                  , gA = gw[sv(0x2a6)][0x0][sv(0x24b)];
                                const gB = [-0x1, -0x1, -0x1, -0x1]
                                  , gC = [-0x1, -0x1, -0x1, -0x1]
                                  , gD = Math[sv(0x4c5)](gu, gw['pitches'][sv(0x57c)])
                                  , gE = g1 ? Math['max'](0x1, Math['round'](0x5a * gw[sv(0x2a6)][0x0][sv(0x81f)] / a1['noteSizeMax'])) : 0x5a;
                                let gF = gw['pickMainInterval']()
                                  , gG = gF * gk;
                                if (!g1) {
                                    let gI = fK
                                      , gJ = -0x18;
                                    for (let gK = 0x1; gK < gw['pins']['length']; gK++) {
                                        const gL = gw['pins'][gK][sv(0x24b)] * gk;
                                        gI = Math['min'](gI, gL + fK),
                                        gJ = Math[sv(0x2f6)](gJ, gL - fK);
                                    }
                                    gG = Math['min'](gI, Math[sv(0x2f6)](gJ, gG));
                                }
                                for (let gM = 0x1; gM < gw['pins'][sv(0x57c)]; gM++) {
                                    const gN = gx + gw['pins'][gM]['time'] * fG
                                      , gO = gw[sv(0x2a6)][gM][sv(0x81f)]
                                      , gP = gw['pins'][gM][sv(0x24b)]
                                      , gQ = gN - gy;
                                    for (let gR = 0x0; gR < gQ; gR++) {
                                        const gS = gy + gR
                                          , gT = eJ(gz, gO, gR / gQ)
                                          , gU = eJ(gA, gP, gR / gQ) * gk - gG
                                          , gV = Math[sv(0x2f6)](0x0, Math[sv(0x4c5)](0x3fff, Math[sv(0x874)](0x2000 * (0x1 + gU / fK))))
                                          , gW = Math['min'](0x7f, Math[sv(0x874)]((fQ = bp[sv(0x62c)](gT),
                                        0x7f * Math[sv(0x3b6)](fQ, 0.25))));
                                        gV != gf && (g5(gS),
                                        fP[sv(0x45b)](0xe0 | fZ),
                                        fP[sv(0x2e9)](0x7f & gV),
                                        fP[sv(0x2e9)](gV >> 0x7 & 0x7f),
                                        gf = gV),
                                        gW == gg || g1 || (g5(gS),
                                        g6(0xb, gW),
                                        gg = gW);
                                        const gX = gS == gx;
                                        for (let gY = 0x0; gY < gD; gY++) {
                                            let gZ = gw['pitches'][gY];
                                            if (g1) {
                                                gZ += gF;
                                                const h0 = [0x24, 0x29, 0x2d, 0x30, 0x28, 0x27, 0x3b, 0x31, 0x2e, 0x37, 0x45, 0x36];
                                                if (gZ < 0x0 || gZ >= h0[sv(0x57c)])
                                                    throw new Error('Could\x20not\x20find\x20corresponding\x20drumset\x20pitch.\x20' + gZ);
                                                gZ = h0[gZ];
                                            } else {
                                                if (gr && gw['pitches'][sv(0x57c)] > gY + 0x1 && gY == gD - 0x1) {
                                                    const h1 = (gS - g4) % fF
                                                      , h2 = a1['rhythms'][fE[sv(0x237)]]['ticksPerArpeggio'] * fG / a1[sv(0x696)]
                                                      , h3 = Math['floor'](h1 / h2);
                                                    gZ = gw['pitches'][gY + a7(gw['pitches'][sv(0x57c)] - gY, fE[sv(0x237)], h3)];
                                                }
                                                gZ = gj + gZ * gk + gG,
                                                null != gq && null != gq['midiSubharmonicOctaves'] ? gZ += 0xc * gq['midiSubharmonicOctaves'] : g0 && (gZ += 0xc * +aq['presetCategories'][sv(0x64a)]['Drum\x20Presets']['presets'][sv(0x64a)]['taiko\x20drum'][sv(0x842)]),
                                                g0 && (gZ *= 0x2);
                                            }
                                            gZ = Math['max'](0x0, Math[sv(0x4c5)](0x7f, gZ)),
                                            gC[gY] = gZ,
                                            gX || gB[gY] == gC[gY] || (g5(gS),
                                            fP[sv(0x45b)](0x80 | fZ),
                                            fP['writeMidi7Bits'](gB[gY]),
                                            fP[sv(0x2e9)](gE));
                                        }
                                        for (let h4 = 0x0; h4 < gD; h4++)
                                            (gX || gB[h4] != gC[h4]) && (g5(gS),
                                            fP['writeUint8'](0x90 | fZ),
                                            fP['writeMidi7Bits'](gC[h4]),
                                            fP[sv(0x2e9)](gE),
                                            gB[h4] = gC[h4]);
                                    }
                                    gy = gN,
                                    gz = gO,
                                    gA = gP;
                                }
                                const gH = g4 + gw[sv(0x63e)] * fG;
                                for (let h5 = 0x0; h5 < gD; h5++)
                                    g5(gH),
                                    fP[sv(0x45b)](0x80 | fZ),
                                    fP['writeMidi7Bits'](gB[h5]),
                                    fP['writeMidi7Bits'](gE);
                                gh = !0x0;
                            }
                        } else
                            gh && (gh = !0x1,
                            0x7f != gg && (gg = 0x7f,
                            g5(g4),
                            g6(0xb, gg)),
                            gf != dK && (gf = dK,
                            g5(g4),
                            fP['writeUint8'](0xe0 | fZ),
                            fP[sv(0x2e9)](0x7f & gf),
                            fP[sv(0x2e9)](gf >> 0x7 & 0x7f)));
                        g4 += fJ;
                    }
                }
                g5(g4),
                fP[sv(0x45b)](0xff),
                fP[sv(0x2e9)](0x2f),
                fP['writeMidiVariableLength'](0x0),
                fP[sv(0x4cf)](g2, fP['getWriteIndex']() - g2 - 0x4);
            }
            var fQ;
            eK(new Blob([fP['toCompactArrayBuffer']()],{
                'type': sv(0x886)
            }), this['Bo']['value']['trim']() + sv(0x788)),
            this['U']();
        }
        ['jo']() {
            const sz = jI
              , fE = this['$']['song']['toJsonObject'](this['Oo']['checked'], Number(this['No']['value']), this['Ro']['checked'])
              , fF = JSON[sz(0x423)](fE, null, '\x09');
            eK(new Blob([fF],{
                'type': sz(0x63f)
            }), this['Bo']['value'][sz(0x410)]() + '.json'),
            this['U']();
        }
        ['Ko']() {
            const sA = jI
              , fE = sA(0x3f3) + new URL('#' + this['$']['song'][sA(0x17e)](),location[sA(0x62e)])[sA(0x62e)] + '\x22></a>\x0a\x0a<style>\x0a\x09:root\x20{\x0a\x09\x09color:\x20white;\x0a\x09\x09background:\x20black;\x0a\x09\x09font-family:\x0a\x09\x09sans-serif;\x0a\x09}\x0a\x09a\x20{\x0a\x09\x09color:\x20#98f;\x0a\x09}\x0a\x09a[href]::before\x20{\x0a\x09\x09content:\x20attr(href);\x0a\x09}\x0a</style>\x0a\x0a<script>\x0a\x09location.assign(document.querySelector(\x22a#destination\x22).href);\x0a</script>\x0a';
            eK(new Blob([fE],{
                'type': 'text/html'
            }), this['Bo'][sA(0x313)]['trim']() + sA(0x824)),
            this['U']();
        }
    }
    eL['midiChipInstruments'] = [0x4a, 0x47, 0x50, 0x46, 0x44, 0x51, 0x51, 0x51, 0x51];
    const eM = jI(0x31a);
    function eN(fE) {
        return JSON['parse'](fE['substring'](eM['length']));
    }
    function eO(fE) {
        const sB = jI;
        return eM + JSON[sB(0x423)](fE);
    }
    function eP() {
        const sC = jI;
        return (Math[sC(0x50a)]() * (-0x1 >>> 0x0) >>> 0x0)['toString'](0x20);
    }
    function eQ(fE) {
        const sD = jI;
        console['warn'](fE),
        window[sD(0x580)]('Whoops,\x20the\x20song\x20data\x20appears\x20to\x20have\x20been\x20corrupted!\x20Please\x20try\x20to\x20recover\x20the\x20last\x20working\x20version\x20of\x20the\x20song\x20from\x20the\x20\x22Recover\x20Recent\x20Song...\x22\x20option\x20in\x20BeepBox\x27s\x20\x22File\x22\x20menu.');
    }
    function eR(fE, fF) {
        const sE = jI;
        return fF['versions'][0x0][sE(0x2e3)] - fE[sE(0x606)][0x0]['time'];
    }
    function eS(fE, fF) {
        const sF = jI;
        return fF[sF(0x2e3)] - fE['time'];
    }
    class eT {
        constructor() {
            this['Jo'] = new bh();
        }
        static[jI(0x2bd)]() {
            const sG = jI
              , fE = []
              , fF = {};
            for (let fG = 0x0; fG < localStorage[sG(0x57c)]; fG++) {
                const fH = localStorage['key'](fG);
                if (0x0 == fH['indexOf'](eM)) {
                    const fI = eN(fH);
                    let fJ = fF[fI[sG(0x1a5)]];
                    null == fJ && (fJ = {
                        'versions': []
                    },
                    fF[fI['uid']] = fJ,
                    fE[sG(0x557)](fJ)),
                    fJ[sG(0x606)][sG(0x557)](fI);
                }
            }
            for (const fK of fE)
                fK[sG(0x606)][sG(0x71c)](eS);
            return fE[sG(0x71c)](eR),
            fE;
        }
        [jI(0x3a4)](fE, fF) {
            const fG = Math['round'](Date['now']());
            clearTimeout(this['Qo']),
            this['Qo'] = setTimeout( () => {
                const sH = a0b;
                try {
                    this['Jo']['fromBase64String'](fF);
                } catch (fQ) {
                    return void eQ(fQ);
                }
                const fH = eT['getAllRecoveredSongs']();
                let fI = null;
                for (const fR of fH)
                    fR['versions'][0x0]['uid'] == fE && (fI = fR);
                null == fI && (fI = {
                    'versions': []
                },
                fH['unshift'](fI));
                let fJ = fI['versions']
                  , fK = 0x3e8;
                if (fJ[sH(0x57c)] > 0x0) {
                    const fS = fJ[0x0][sH(0x2e3)];
                    fK = fJ[0x0]['work'] + Math[sH(0x4c5)](0x2bf20, fG - fS);
                }
                const fL = {
                    'uid': fE,
                    'time': fG,
                    'work': fK
                }
                  , fM = eO(fL);
                fJ['unshift'](fL),
                localStorage[sH(0x2d6)](fM, fF);
                let fN = 0xea60;
                const fO = Math[sH(0x3b6)](0x2, 0.5);
                for (var fP = 0x1; fP < fJ[sH(0x57c)]; fP++) {
                    if (fJ[fP][sH(0x197)] - (fP == fJ['length'] - 0x1 ? 0x0 : fJ[fP + 0x1]['work']) < fN) {
                        let fT = fP;
                        if (fP < fJ['length'] - 0x1) {
                            const fU = fJ[fP][sH(0x2e3)]
                              , fV = fJ[fP - 0x1]['time'];
                            fU - fJ[fP + 0x1]['time'] < 0.5 * (fV - fU) && (fT = fP + 0x1);
                        }
                        localStorage[sH(0x7c0)](eO(fJ[fT]));
                        break;
                    }
                    fN *= fO;
                }
                for (; fH[sH(0x57c)] > 0x8; ) {
                    let fW = null
                      , fX = Number['POSITIVE_INFINITY'];
                    for (let fY = Math['round'](0x4); fY < fH['length']; fY++) {
                        const fZ = fH[fY]
                          , g0 = 0x1 / ((fG - fZ['versions'][0x0]['time']) / 0x2932e00 + 0x1)
                          , g1 = (fZ['versions'][0x0][sH(0x197)] + 0x493e0) * g0;
                        fX > g1 && (fX = g1,
                        fW = fZ);
                    }
                    for (const g2 of fW['versions'])
                        localStorage[sH(0x7c0)](eO(g2));
                    fH[sH(0x712)](fH[sH(0x2fb)](fW), 0x1);
                }
            }
            , 0x2ee);
        }
    }
    const {button: eU, div: eV, h2: eW, p: eX, select: eY, option: eZ, iframe: f0} = aD;
    class f1 {
        constructor(fE) {
            const sI = jI;
            this['$'] = fE,
            this['Xo'] = eV(),
            this['Ks'] = eU({
                'class': sI(0x210)
            }),
            this['container'] = eV({
                'class': sI(0x3f4),
                'style': 'width:\x20300px;'
            }, eW('Song\x20Recovery'), eV({
                'style': 'max-height:\x20385px;\x20overflow-y:\x20auto;'
            }, eX(sI(0x616)), this['Xo'], eX('(If\x20\x22Display\x20Song\x20Data\x20in\x20URL\x22\x20is\x20enabled\x20in\x20your\x20preferences,\x20then\x20you\x20may\x20also\x20be\x20able\x20to\x20find\x20song\x20versions\x20in\x20your\x20browser\x20history.\x20However,\x20song\x20recovery\x20won\x27t\x20work\x20if\x20you\x20were\x20browsing\x20in\x20private/incognito\x20mode.)')), this['Ks']),
            this['U'] = () => {
                const sJ = sI;
                this['$'][sJ(0x6b3)]();
            }
            ,
            this[sI(0x21d)] = () => {
                this['Ks']['removeEventListener']('click', this['U']);
            }
            ,
            this['Ks']['addEventListener']('click', this['U']);
            const fF = eT['getAllRecoveredSongs']();
            0x0 == fF['length'] && this['Xo']['appendChild'](eX('There\x20are\x20no\x20recovered\x20songs\x20available\x20yet.\x20Try\x20making\x20a\x20song!'));
            for (const fG of fF) {
                const fH = eY({
                    'style': 'width:\x20100%;'
                });
                for (const fK of fG[sI(0x606)])
                    fH['appendChild'](eZ({
                        'value': fK[sI(0x2e3)]
                    }, new Date(fK[sI(0x2e3)])[sI(0x242)]()));
                const fI = f0({
                    'style': sI(0x27c)
                });
                fI[sI(0x75f)] = sI(0x1bf) + window['localStorage']['getItem'](eO(fG['versions'][0x0]));
                const fJ = eV({
                    'style': 'margin:\x204px\x200;'
                }, eV({
                    'class': sI(0x841),
                    'style': 'width:\x20100%;\x20margin:\x202px\x200;'
                }, fH), fI);
                this['Xo'][sI(0x2b8)](fJ),
                fH['addEventListener']('change', () => {
                    const sK = sI
                      , fL = fG[sK(0x606)][fH[sK(0x690)]];
                    fI[sK(0x4f6)]['location']['replace'](sK(0x1bf) + window['localStorage'][sK(0x1a3)](eO(fL))),
                    fI['contentWindow']['dispatchEvent'](new Event(sK(0x4f7)));
                }
                );
            }
        }
    }
    const {button: f2, label: f3, div: f4, p: f5, a: f6, h2: f7, input: f8, select: f9, option: fa} = aD;
    class fb {
        constructor(fE) {
            const sL = jI;
            this['$'] = fE,
            this['Zo'] = f9({
                'style': sL(0x4c2)
            }, fa({
                'value': sL(0x656)
            }, 'simple\x20shortcuts,\x20use\x20caps\x20lock\x20to\x20play\x20notes'), fa({
                'value': 'pressControlForShortcuts'
            }, 'simple\x20notes,\x20press\x20' + aq['ctrlName'] + sL(0x47e))),
            this['tr'] = f9({
                'style': 'width:\x20100%;'
            }, fa({
                'value': 'wickiHayden'
            }, sL(0x5c7)), fa({
                'value': 'songScale'
            }, sL(0x18b)), fa({
                'value': sL(0x795)
            }, sL(0x6c4)), fa({
                'value': sL(0x286)
            }, 'piano\x20starting\x20at\x20A\x20:('), fa({
                'value': sL(0x7a7)
            }, sL(0x263)), fa({
                'value': sL(0x373)
            }, 'piano\x20transposing\x20A\x20:(\x20to\x20song\x20key')),
            this['er'] = f4({
                'style': 'display:\x20grid;\x20row-gap:\x204px;\x20margin:\x204px\x20auto;\x20font-size:\x2010px;'
            }),
            this['ir'] = f8({
                'style': 'width:\x202em;\x20margin-left:\x201em;',
                'type': sL(0x641)
            }),
            this['sr'] = f8({
                'style': 'width:\x202em;\x20margin-left:\x201em;',
                'type': 'checkbox'
            }),
            this['nr'] = f8({
                'style': sL(0x1a0),
                'type': 'checkbox'
            }),
            this['rr'] = f8({
                'style': 'width:\x202em;\x20margin-left:\x201em;',
                'type': 'checkbox'
            }),
            this['hr'] = f8({
                'style': 'width:\x202em;\x20margin-left:\x201em;',
                'type': 'checkbox'
            }),
            this['ar'] = f8({
                'style': sL(0x1a0),
                'type': 'checkbox'
            }),
            this['js'] = f2({
                'class': 'okayButton',
                'style': sL(0x2f9)
            }, 'Okay'),
            this['Ks'] = f2({
                'class': sL(0x210)
            }),
            this[sL(0x593)] = f4({
                'class': sL(0x820),
                'style': 'width:\x20333px;\x20text-align:\x20right;\x20max-height:\x2090%;'
            }, f7('Note\x20Recording\x20Setup'), f4({
                'style': 'display:\x20grid;\x20overflow-y:\x20auto;\x20overflow-x:\x20hidden;\x20flex-shrink:\x201;'
            }, f5('BeepBox\x20can\x20record\x20notes\x20as\x20you\x20perform\x20them.\x20You\x20can\x20start\x20recording\x20by\x20pressing\x20Ctrl+Space\x20(or\x20' + aq[sL(0x3b9)] + 'P).'), f3({
                'style': sL(0x3f1)
            }, sL(0x32e), this['sr']), f3({
                'style': sL(0x3f1)
            }, 'Snap\x20recorded\x20notes\x20to\x20the\x20song\x27s\x20rhythm:', this['nr']), f3({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, sL(0x57b), this['rr']), f5('While\x20recording,\x20you\x20can\x20perform\x20notes\x20on\x20your\x20keyboard!'), f3({
                'style': sL(0x3f1)
            }, sL(0x398), f4({
                'class': sL(0x841),
                'style': 'width:\x2065%;\x20margin-left:\x201em;'
            }, this['tr'])), this['er'], f5(sL(0x21a)), f3({
                'style': sL(0x3f1)
            }, f4({
                'class': 'selectContainer',
                'style': 'width:\x20100%;'
            }, this['Zo'])), f5('Performing\x20music\x20takes\x20practice!\x20Try\x20slowing\x20the\x20tempo\x20and\x20using\x20this\x20metronome\x20to\x20help\x20you\x20keep\x20a\x20rhythm.'), f3({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, 'Hear\x20metronome\x20while\x20recording:', this['ar']), f3({
                'style': sL(0x3f1)
            }, sL(0x467), this['hr']), f5('If\x20you\x20have\x20a\x20', f6({
                'href': sL(0x893),
                'target': '_blank'
            }, sL(0x6bc)), '\x20on\x20a\x20device\x20connected\x20to\x20a\x20MIDI\x20keyboard,\x20you\x20can\x20use\x20it\x20to\x20perform\x20notes\x20in\x20BeepBox!\x20(Or\x20you\x20could\x20buy\x20', f6({
                'href': sL(0x195),
                'target': '_blank'
            }, 'Imitone'), '\x20or\x20', f6({
                'href': 'https://vochlea.com/',
                'target': '_blank'
            }, sL(0x3d1)), '\x20to\x20hum\x20notes\x20into\x20a\x20microphone\x20while\x20wearing\x20headphones!)'), f3({
                'style': 'display:\x20flex;\x20flex-direction:\x20row;\x20align-items:\x20center;\x20height:\x202em;\x20justify-content:\x20flex-end;'
            }, sL(0x177), this['ir']), f5('The\x20range\x20of\x20pitches\x20available\x20to\x20play\x20via\x20your\x20computer\x20keyboard\x20is\x20affected\x20by\x20the\x20octave\x20scrollbar\x20of\x20the\x20currently\x20selected\x20channel.'), f5('Recorded\x20notes\x20often\x20overlap\x20such\x20that\x20one\x20note\x20ends\x20after\x20the\x20next\x20note\x20already\x20started.\x20In\x20BeepBox,\x20these\x20notes\x20get\x20split\x20into\x20multiple\x20notes\x20which\x20may\x20sound\x20different\x20when\x20re-played\x20than\x20they\x20did\x20when\x20you\x20were\x20recording.\x20To\x20fix\x20the\x20sound,\x20you\x20can\x20either\x20manually\x20clean\x20up\x20the\x20notes\x20in\x20the\x20pattern\x20editor,\x20or\x20you\x20could\x20try\x20enabling\x20the\x20\x22transition\x20type\x22\x20effect\x20on\x20the\x20instrument\x20and\x20setting\x20it\x20to\x20\x22continue\x22.'), f4({
                'style': 'width:\x20100%;\x20height:\x2080px;\x20background:\x20linear-gradient(rgba(0,0,0,0),\x20' + aL['editorBackground'] + ');\x20position:\x20sticky;\x20bottom:\x200;\x20pointer-events:\x20none;'
            })), f4({
                'style': sL(0x1ad)
            }, this['js']), this['Ks']),
            this['U'] = () => {
                this['$']['undo']();
            }
            ,
            this[sL(0x21d)] = () => {
                const sM = sL;
                this['js'][sM(0x575)]('click', this['Js']),
                this['Ks'][sM(0x575)](sM(0x50e), this['U']),
                this['container'][sM(0x575)]('keydown', this['Qs']);
            }
            ,
            this['Qs'] = fF => {
                const sN = sL;
                sN(0x85d) != fF['target']['tagName'] && 0xd == fF['keyCode'] && this['Js']();
            }
            ,
            this['Js'] = () => {
                const sO = sL;
                this['$'][sO(0x7ed)][sO(0x5cb)] = 'pressControlForShortcuts' == this['Zo']['value'],
                this['$']['prefs']['keyboardLayout'] = this['tr'][sO(0x313)],
                this['$'][sO(0x7ed)]['enableMidi'] = this['ir']['checked'],
                this['$'][sO(0x7ed)]['showRecordButton'] = this['sr'][sO(0x634)],
                this['$']['prefs'][sO(0x3a1)] = this['nr'][sO(0x634)],
                this['$'][sO(0x7ed)]['ignorePerformedNotesNotInScale'] = this['rr'][sO(0x634)],
                this['$']['prefs'][sO(0x28d)] = this['hr'][sO(0x634)],
                this['$']['prefs'][sO(0x65b)] = this['ar']['checked'],
                this['$']['prefs']['save'](),
                this['U']();
            }
            ,
            this['lr'] = () => {
                const sP = sL;
                for (; this['er'][sP(0x646)]; )
                    this['er']['removeChild'](this['er']['firstChild']);
                const fF = [0xc, 0xc, 0xb, 0xa]
                  , fG = a1[sP(0x379)][this['$'][sP(0x3c1)][sP(0x7ad)]][sP(0x58b)];
                for (let fH = 0x0; fH < 0x4; fH++) {
                    const fI = f4({
                        'style': sP(0x83a)
                    });
                    this['er']['appendChild'](fI);
                    const fJ = f4({
                        'style': 'width:\x20' + 0xc * fH + sP(0x791)
                    });
                    fI['appendChild'](fJ);
                    for (let fK = 0x0; fK < fF[fH]; fK++) {
                        const fL = f4({
                            'style': sP(0x5ab)
                        });
                        fI['appendChild'](fL);
                        const fM = dP[sP(0x415)](this['$'], fK, 0x3 - fH, this['tr'][sP(0x313)]);
                        if (null != fM) {
                            const fN = fM % 0xc;
                            fG[fN] ? 0x0 == fN ? fL[sP(0x821)]['background'] = aL[sP(0x41a)] : 0x7 == fN && this['$']['prefs']['showFifth'] ? fL['style'][sP(0x28f)] = aL['fifthNote'] : fL['style']['background'] = aL['pitchBackground'] : fL[sP(0x821)]['border'] = '2px\x20solid\x20' + aL['pitchBackground'];
                            const fO = (fN + a1[sP(0x7af)][this['$']['song'][sP(0x319)]]['basePitch']) % a1[sP(0x36d)];
                            fL[sP(0x40a)] = dQ[sP(0x624)](fO, fN);
                        }
                    }
                }
            }
            ,
            this['Zo'][sL(0x313)] = this['$']['prefs'][sL(0x5cb)] ? sL(0x5cb) : 'useCapsLockForNotes',
            this['tr'][sL(0x313)] = this['$']['prefs']['keyboardLayout'],
            this['ir'][sL(0x634)] = this['$'][sL(0x7ed)]['enableMidi'],
            this['sr'][sL(0x634)] = this['$']['prefs'][sL(0x4ef)],
            this['nr']['checked'] = this['$'][sL(0x7ed)][sL(0x3a1)],
            this['rr'][sL(0x634)] = this['$']['prefs'][sL(0x589)],
            this['hr']['checked'] = this['$'][sL(0x7ed)][sL(0x28d)],
            this['ar'][sL(0x634)] = this['$']['prefs'][sL(0x65b)],
            setTimeout( () => this['sr']['focus']()),
            this['js']['addEventListener'](sL(0x50e), this['Js']),
            this['Ks'][sL(0x258)]('click', this['U']),
            this[sL(0x593)][sL(0x258)](sL(0x1df), this['Qs']),
            this['lr'](),
            this['tr'][sL(0x258)]('change', this['lr']);
        }
    }
    const {a: fc, button: fd, div: ff, input: fg, select: fh, span: fj, optgroup: fk, option: fl} = aD;
    function fm(fE, fF) {
        for (let fG = 0x0; fG < fF['length']; fG++)
            fE['appendChild'](fl({
                'value': fG
            }, fF[fG]));
        return fE;
    }
    function fo(fE) {
        const sQ = jI
          , fF = fh();
        fF['appendChild'](fk({
            'label': sQ(0x480)
        }, fl({
            'value': sQ(0x5e4)
        }, 'Copy\x20Instrument\x20(⇧C)'), fl({
            'value': sQ(0x20d)
        }, 'Paste\x20Instrument\x20(⇧V)'), fl({
            'value': sQ(0x51e)
        }, sQ(0x7a6)), fl({
            'value': 'randomGenerated'
        }, sQ(0x2f1))));
        const fG = fk({
            'label': aq['presetCategories'][0x0]['name']
        });
        fE ? (fG['appendChild'](fl({
            'value': 0x2
        }, aq['valueToPreset'](0x2)['name'])),
        fG[sQ(0x2b8)](fl({
            'value': 0x3
        }, aq[sQ(0x849)](0x3)['name'])),
        fG['appendChild'](fl({
            'value': 0x4
        }, aq[sQ(0x849)](0x4)[sQ(0x340)]))) : (fG[sQ(0x2b8)](fl({
            'value': 0x0
        }, aq[sQ(0x849)](0x0)[sQ(0x340)])),
        fG['appendChild'](fl({
            'value': 0x6
        }, aq['valueToPreset'](0x6)['name'])),
        fG[sQ(0x2b8)](fl({
            'value': 0x8
        }, aq['valueToPreset'](0x8)['name'])),
        fG[sQ(0x2b8)](fl({
            'value': 0x5
        }, aq['valueToPreset'](0x5)[sQ(0x340)])),
        fG[sQ(0x2b8)](fl({
            'value': 0x7
        }, aq[sQ(0x849)](0x7)['name'])),
        fG[sQ(0x2b8)](fl({
            'value': 0x3
        }, aq[sQ(0x849)](0x3)['name'])),
        fG['appendChild'](fl({
            'value': 0x1
        }, aq['valueToPreset'](0x1)['name']))),
        fF['appendChild'](fG);
        for (let fH = 0x1; fH < aq[sQ(0x3e8)]['length']; fH++) {
            const fI = aq[sQ(0x3e8)][fH]
              , fJ = fk({
                'label': fI[sQ(0x340)]
            });
            let fK = !0x1;
            for (let fL = 0x0; fL < fI[sQ(0x5e5)]['length']; fL++) {
                const fM = fI[sQ(0x5e5)][fL];
                0x1 == fM['isNoise'] == fE && (fJ['appendChild'](fl({
                    'value': (fH << 0x6) + fL
                }, fM[sQ(0x340)])),
                fK = !0x0);
            }
            fK && fF['appendChild'](fJ);
        }
        return fF;
    }
    function fp(fE, fF) {
        const sR = jI
          , fG = fF[sR(0x5a6)]();
        fE['value'] != fG && (fE[sR(0x313)] = fG);
    }
    class fq {
        constructor(fE, fF, fG) {
            const sS = jI;
            this[sS(0x39f)] = fE,
            this['$'] = fF,
            this['cr'] = fG,
            this['sn'] = null,
            this['ur'] = 0x0,
            this['pr'] = 0x0,
            this['dr'] = () => {
                const sT = sS;
                this['$'][sT(0x25f)](this['sn']) || (this['pr'] = this['ur']),
                this['sn'] = this['cr'](this['pr'], parseInt(this['input'][sT(0x313)])),
                this['$'][sT(0x86f)](this['sn']);
            }
            ,
            this['mr'] = () => {
                const sU = sS;
                this['$'][sU(0x235)](this['sn']),
                this['sn'] = null;
            }
            ,
            fE['addEventListener']('input', this['dr']),
            fE['addEventListener']('change', this['mr']);
        }
        [jI(0x5dd)](fE) {
            this['ur'] = fE,
            this['input']['value'] = String(fE);
        }
    }
    class fr {
        constructor(fE) {
            const sV = jI;
            this['$'] = fE,
            this[sV(0x3f4)] = null,
            this['tr'] = new dP(this['$']),
            this['yr'] = new dm(this['$'],!0x1,-0x1),
            this['gr'] = new dm(this['$'],!0x0,0x0),
            this['wr'] = new dm(this['$'],!0x1,0x1),
            this['vr'] = new dw(this['$']),
            this['kr'] = new dx(this['$']),
            this['Mr'] = new dF(this['$']),
            this['Sr'] = new dJ(this['$']),
            this['Fr'] = new dQ(this['$']),
            this['Pr'] = fd({
                'class': sV(0x7cc),
                'type': 'button',
                'title': sV(0x3c2)
            }, fj(sV(0x892))),
            this['Ir'] = fd({
                'class': 'pauseButton',
                'style': 'display:\x20none;',
                'type': sV(0x5f2),
                'title': 'Pause\x20(Space)'
            }, 'Pause'),
            this['qr'] = fd({
                'class': 'recordButton',
                'style': sV(0x7bd),
                'type': sV(0x5f2),
                'title': 'Record\x20(Ctrl+Space)'
            }, fj('Record')),
            this['Tr'] = fd({
                'class': 'stopButton',
                'style': sV(0x7bd),
                'type': 'button',
                'title': 'Stop\x20Recording\x20(Space)'
            }, 'Stop\x20Recording'),
            this['Er'] = fd({
                'class': sV(0x577),
                'type': sV(0x5f2),
                'title': sV(0x2c1)
            }),
            this['Cr'] = fd({
                'class': sV(0x3b2),
                'type': 'button',
                'title': 'Next\x20Bar\x20(right\x20bracket)'
            }),
            this['Lr'] = fg({
                'title': 'main\x20volume',
                'style': 'width:\x205em;\x20flex-grow:\x201;\x20margin:\x200;',
                'type': sV(0x643),
                'min': '0',
                'max': '75',
                'value': '50',
                'step': '1'
            }),
            this['zr'] = fh({
                'style': sV(0x4c2)
            }, fl({
                'selected': !0x0,
                'disabled': !0x0,
                'hidden': !0x1
            }, sV(0x86a)), fl({
                'value': sV(0x680)
            }, '+\x20New\x20Blank\x20Song'), fl({
                'value': 'export'
            }, '↓\x20Export\x20Song...\x20(' + aq[sV(0x3b9)] + 'S)'), fl({
                'value': sV(0x3b0)
            }, '⎘\x20Copy\x20Song\x20URL'), fl({
                'value': sV(0x22c)
            }, sV(0x549)), fl({
                'value': 'shortenUrl'
            }, '…\x20Shorten\x20Song\x20URL'), fl({
                'value': sV(0x528)
            }, '▶\x20View\x20in\x20Song\x20Player'), fl({
                'value': 'copyEmbed'
            }, '⎘\x20Copy\x20HTML\x20Embed\x20Code'), fl({
                'value': 'songRecovery'
            }, '⚠\x20Recover\x20Recent\x20Song...')),
            this['Dr'] = fh({
                'style': sV(0x4c2)
            }, fl({
                'selected': !0x0,
                'disabled': !0x0,
                'hidden': !0x1
            }, 'Edit'), fl({
                'value': 'undo'
            }, 'Undo\x20(Z)'), fl({
                'value': sV(0x734)
            }, sV(0x449)), fl({
                'value': 'copy'
            }, 'Copy\x20Pattern\x20(C)'), fl({
                'value': sV(0x4df)
            }, sV(0x6c0)), fl({
                'value': 'pasteNumbers'
            }, 'Paste\x20Pattern\x20Numbers\x20(' + aq[sV(0x3b9)] + '⇧V)'), fl({
                'value': 'insertBars'
            }, sV(0x454)), fl({
                'value': 'deleteBars'
            }, sV(0x445)), fl({
                'value': sV(0x53d)
            }, sV(0x751) + aq[sV(0x3b9)] + '⏎)'), fl({
                'value': 'deleteChannel'
            }, 'Delete\x20Selected\x20Channels\x20(' + aq['ctrlSymbol'] + '⌫)'), fl({
                'value': 'selectAll'
            }, sV(0x2dd)), fl({
                'value': 'selectChannel'
            }, sV(0x30e)), fl({
                'value': 'duplicatePatterns'
            }, sV(0x35b)), fl({
                'value': sV(0x4a2)
            }, sV(0x228)), fl({
                'value': 'transposeDown'
            }, sV(0x691)), fl({
                'value': sV(0x57e)
            }, 'Move\x20All\x20Notes\x20Sideways...'), fl({
                'value': sV(0x6c9)
            }, sV(0x2de)), fl({
                'value': 'barCount'
            }, 'Change\x20Song\x20Length...'), fl({
                'value': 'channelSettings'
            }, sV(0x648))),
            this['Ar'] = fh({
                'style': 'width:\x20100%;'
            }, fl({
                'selected': !0x0,
                'disabled': !0x0,
                'hidden': !0x1
            }, sV(0x2e4)), fl({
                'value': 'autoPlay'
            }, sV(0x370)), fl({
                'value': 'autoFollow'
            }, sV(0x47f)), fl({
                'value': sV(0x652)
            }, 'Hear\x20Preview\x20of\x20Added\x20Notes'), fl({
                'value': 'showLetters'
            }, 'Show\x20Piano\x20Keys'), fl({
                'value': 'showFifth'
            }, 'Highlight\x20\x22Fifth\x22\x20of\x20Song\x20Key'), fl({
                'value': sV(0x4a0)
            }, sV(0x843)), fl({
                'value': sV(0x1d5)
            }, sV(0x31d)), fl({
                'value': sV(0x2e5)
            }, 'Show\x20Notes\x20From\x20All\x20Channels'), fl({
                'value': 'showScrollBar'
            }, sV(0x1e1)), fl({
                'value': 'alwaysShowSettings'
            }, 'Customize\x20All\x20Instruments'), fl({
                'value': 'instrumentCopyPaste'
            }, 'Instrument\x20Copy/Paste\x20Buttons'), fl({
                'value': sV(0x2b5)
            }, 'Enable\x20Channel\x20Muting'), fl({
                'value': sV(0x2c3)
            }, sV(0x2c4)), fl({
                'value': 'layout'
            }, sV(0x516)), fl({
                'value': sV(0x49d)
            }, 'Light\x20Theme'), fl({
                'value': 'recordingSetup'
            }, 'Set\x20Up\x20Note\x20Recording...')),
            this['Br'] = fm(fh(), a1['scales']['map'](fF => fF[sV(0x340)])),
            this['Or'] = fm(fh(), a1['keys']['map'](fF => fF[sV(0x340)])['reverse']()),
            this['Nr'] = new fq(fg({
                'style': sV(0x81e),
                'type': sV(0x643),
                'min': '0',
                'max': '14',
                'value': '7',
                'step': '1'
            }),this['$'], (fF, fG) => new cU(this['$'],fF,Math['round'](0x78 * Math['pow'](0x2, (-0x4 + fG) / 0x9)))),
            this['Rr'] = fg({
                'style': sV(0x18c),
                'type': 'number',
                'step': '1'
            }),
            this['Hr'] = new fq(fg({
                'style': sV(0x464),
                'type': 'range',
                'min': '0',
                'max': a1[sV(0x31e)] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new cX(this['$'],fF,fG)),
            this['Gr'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r']('chorus')
            }, 'Chorus:'), this['Hr']['input']),
            this['_r'] = new fq(fg({
                'style': 'margin:\x200;',
                'type': sV(0x643),
                'min': '0',
                'max': a1['reverbRange'] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new cY(this['$'],fF,fG)),
            this['Ur'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('reverb')
            }, 'Reverb:'), this['_r']['input']),
            this['Vr'] = new fq(fg({
                'style': 'margin:\x200;',
                'type': 'range',
                'min': '0',
                'max': a1['echoSustainRange'] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new cW(this['$'],fF,fG)),
            this['Wr'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x7b6))
            }, 'Echo:'), this['Vr']['input']),
            this['jr'] = new fq(fg({
                'style': sV(0x464),
                'type': 'range',
                'min': '0',
                'max': a1['echoDelayRange'] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new cV(this['$'],fF,fG)),
            this['Kr'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('echoDelay')
            }, sV(0x401)), this['jr']['input']),
            this['Yr'] = fm(fh(), a1[sV(0x307)]['map'](fF => fF[sV(0x340)])),
            this['Jr'] = fo(!0x1),
            this['Qr'] = fo(!0x0),
            this['Xr'] = fm(fh(), a1['algorithms']['map'](fF => fF['name'])),
            this['Zr'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r'](sV(0x803))
            }, 'Algorithm:'), ff({
                'class': sV(0x841)
            }, this['Xr'])),
            this['th'] = [],
            this['eh'] = fd({
                'type': 'button',
                'class': 'add-instrument\x20last-button'
            }),
            this['ih'] = fd({
                'type': sV(0x5f2),
                'class': sV(0x323)
            }),
            this['sh'] = ff({
                'class': sV(0x702)
            }, this['ih'], this['eh']),
            this['nh'] = ff({
                'class': 'selectRow',
                'style': sV(0x7bd)
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r']('instrumentIndex')
            }, sV(0x607)), this['sh']),
            this['oh'] = fd({
                'type': sV(0x5f2),
                'class': sV(0x45e),
                'title': sV(0x3be)
            }, sV(0x6ec)),
            this['rh'] = fd({
                'type': 'button',
                'class': sV(0x23d),
                'title': sV(0x837)
            }, sV(0x866)),
            this['hh'] = ff({
                'class': 'instrumentCopyPasteRow',
                'style': sV(0x7bd)
            }, this['oh'], this['rh']),
            this['ah'] = new fq(fg({
                'style': sV(0x464),
                'type': sV(0x643),
                'min': -(a1[sV(0x853)] - 0x1),
                'max': '0',
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new da(this['$'],fF,-fG)),
            this['lh'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('instrumentVolume')
            }, sV(0x238)), this['ah'][sV(0x39f)]),
            this['uh'] = new fq(fg({
                'style': sV(0x464),
                'type': 'range',
                'min': '0',
                'max': a1[sV(0x368)],
                'value': a1[sV(0x374)],
                'step': '1'
            }),this['$'], (fF, fG) => new db(this['$'],fF,fG)),
            this['ph'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r']('pan')
            }, 'Panning:'), this['uh'][sV(0x39f)]),
            this['fh'] = fm(fh(), a1[sV(0x25a)]['map'](fF => fF[sV(0x340)])),
            this['dh'] = fm(fh(), a1[sV(0x5f0)]['map'](fF => fF[sV(0x340)])),
            this['mh'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x556))
            }, sV(0x48f)), ff({
                'class': 'selectContainer'
            }, this['fh'])),
            this['yh'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('chipNoise')
            }, 'Noise:'), ff({
                'class': 'selectContainer'
            }, this['dh'])),
            this['gh'] = new dq(this['$']),
            this['bh'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x193))
            }, 'Fade\x20In/Out:'), this['gh']['container']),
            this['wh'] = fm(fh(), a1[sV(0x87b)][sV(0x422)](fF => fF['name'])),
            this['kh'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('transition')
            }, sV(0x22a)), ff({
                'class': sV(0x841)
            }, this['wh'])),
            this['Mh'] = fh(fl({
                'selected': !0x0,
                'disabled': !0x0,
                'hidden': !0x1
            })),
            this['xh'] = new dr(this['$']),
            this['Sh'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x7c3))
            }, sV(0x267)), this['xh'][sV(0x593)]),
            this['Fh'] = new dr(this['$'],!0x0),
            this['Ph'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x823))
            }, 'Note\x20Filter:'), this['Fh'][sV(0x593)]),
            this['Ih'] = new fq(fg({
                'style': sV(0x464),
                'type': 'range',
                'min': '0',
                'max': a1['supersawDynamismMax'],
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new c4(this['$'],fF,fG)),
            this['qh'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r']('supersawDynamism')
            }, 'Dynamism:'), this['Ih'][sV(0x39f)]),
            this['Th'] = new fq(fg({
                'style': sV(0x464),
                'type': 'range',
                'min': '0',
                'max': a1['supersawSpreadMax'],
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new c5(this['$'],fF,fG)),
            this['Eh'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r'](sV(0x426))
            }, 'Spread:'), this['Th'][sV(0x39f)]),
            this['Ch'] = new fq(fg({
                'style': 'margin:\x200;',
                'type': 'range',
                'min': '0',
                'max': a1['supersawShapeMax'],
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new c6(this['$'],fF,fG)),
            this['Lh'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('supersawShape')
            }, 'Saw↔Pulse:'), this['Ch'][sV(0x39f)]),
            this['zh'] = new fq(fg({
                'style': sV(0x464),
                'type': 'range',
                'min': '0',
                'max': a1['pulseWidthRange'] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new c3(this['$'],fF,fG)),
            this['Dh'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('pulseWidth')
            }, 'Pulse\x20Width:'), this['zh']['input']),
            this['Ah'] = new fq(fg({
                'style': sV(0x464),
                'type': sV(0x643),
                'min': '0',
                'max': a1['pitchShiftRange'] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new c7(this['$'],fF,fG)),
            this['Bh'] = [ff({
                'class': 'pitchShiftMarker',
                'style': {
                    'color': aL[sV(0x41a)]
                }
            }), ff({
                'class': 'pitchShiftMarker',
                'style': {
                    'color': aL['tonic'],
                    'left': '50%'
                }
            }), ff({
                'class': sV(0x5cf),
                'style': {
                    'color': aL[sV(0x41a)],
                    'left': '100%'
                }
            })],
            this['Oh'] = [ff({
                'class': sV(0x5cf),
                'style': {
                    'color': aL[sV(0x887)],
                    'left': 0x2bc / 0x18 + '%'
                }
            }), ff({
                'class': 'pitchShiftMarker',
                'style': {
                    'color': aL[sV(0x887)],
                    'left': 0x76c / 0x18 + '%'
                }
            })],
            this['Nh'] = ff({
                'style': 'display:\x20flex;\x20position:\x20relative;'
            }, this['Ah'][sV(0x39f)], ff({
                'class': 'pitchShiftMarkerContainer'
            }, this['Bh'], this['Oh'])),
            this['Rh'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x66a))
            }, 'Pitch\x20Shift:'), this['Nh']),
            this['Hh'] = new fq(fg({
                'style': sV(0x464),
                'type': sV(0x643),
                'min': '0',
                'max': a1['detuneMax'],
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new c8(this['$'],fF,fG)),
            this['Gh'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x84d))
            }, sV(0x3fd)), this['Hh']['input']),
            this['$h'] = new fq(fg({
                'style': sV(0x464),
                'type': 'range',
                'min': '0',
                'max': a1[sV(0x2fd)] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new c9(this['$'],fF,fG)),
            this['_h'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x1ce))
            }, sV(0x642)), this['$h'][sV(0x39f)]),
            this['Uh'] = new fq(fg({
                'style': 'margin:\x200;',
                'type': 'range',
                'min': '0',
                'max': a1['bitcrusherQuantizationRange'] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new cb(this['$'],fF,fG)),
            this['Vh'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r']('bitcrusherQuantization')
            }, 'Bit\x20Crush:'), this['Uh']['input']),
            this['Wh'] = new fq(fg({
                'style': sV(0x464),
                'type': 'range',
                'min': '0',
                'max': a1[sV(0x448)] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new ca(this['$'],fF,fG)),
            this['jh'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('bitcrusherFreq')
            }, sV(0x4ab)), this['Wh']['input']),
            this['Kh'] = new fq(fg({
                'style': 'margin:\x200;',
                'type': sV(0x643),
                'min': '0',
                'max': a1['stringSustainRange'] - 0x1,
                'value': '0',
                'step': '1'
            }),this['$'], (fF, fG) => new cc(this['$'],fF,fG)),
            this['Yh'] = fj({
                'class': sV(0x330),
                'onclick': () => this['$r']('stringSustain')
            }, sV(0x707)),
            this['Jh'] = ff({
                'class': sV(0x1f1)
            }, this['Yh'], this['Kh']['input']),
            this['Qh'] = fm(fh(), a1[sV(0x285)][sV(0x422)](fF => fF['name'])),
            this['Xh'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('unison')
            }, 'Unison:'), ff({
                'class': 'selectContainer'
            }, this['Qh'])),
            this['Zh'] = fm(fh(), a1[sV(0x80a)][sV(0x422)](fF => fF['name'])),
            this['ta'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x80a))
            }, 'Chords:'), ff({
                'class': 'selectContainer'
            }, this['Zh'])),
            this['ea'] = fm(fh(), a1[sV(0x639)]['map'](fF => fF[sV(0x340)])),
            this['ia'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x7b2))
            }, sV(0x220)), ff({
                'class': sV(0x841)
            }, this['ea'])),
            this['sa'] = ff({
                'class': 'editor-controls'
            }),
            this['na'] = fm(fh(), a1['feedbacks'][sV(0x422)](fF => fF[sV(0x340)])),
            this['oa'] = ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('feedbackType')
            }, 'Feedback:'), ff({
                'class': sV(0x841)
            }, this['na'])),
            this['ra'] = new dG(this['$'],null),
            this['ha'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x5ee))
            }, 'Spectrum:'), this['ra']['container']),
            this['aa'] = new dH(this['$']),
            this['la'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r'](sV(0x4bd))
            }, sV(0x5f9)), this['aa']['container']),
            this['ca'] = new dp(this['$']),
            this['ua'] = ff({
                'class': sV(0x810)
            }),
            this['pa'] = new fq(fg({
                'type': sV(0x643),
                'min': '0',
                'max': a1[sV(0x826)],
                'value': '0',
                'step': '1',
                'title': 'Feedback\x20Amplitude'
            }),this['$'], (fF, fG) => new co(this['$'],fF,fG)),
            this['fa'] = ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x554))
            }, sV(0x318)), this['pa'][sV(0x39f)]),
            this['da'] = fd({
                'type': 'button',
                'class': 'customize-instrument'
            }, sV(0x5f1)),
            this['ma'] = fd({
                'type': sV(0x5f2),
                'class': sV(0x720)
            }),
            this['ya'] = ff({
                'class': 'editor-controls'
            }, this['Sh'], this['bh'], this['mh'], this['yh'], this['Zr'], this['sa'], this['oa'], this['fa'], this['ha'], this['la'], this['ua'], this['qh'], this['Eh'], this['Lh'], this['Dh'], this['Jh'], this['Xh'], ff({
                'style': sV(0x7f3)
            }, fj({
                'style': 'flex-grow:\x201;\x20text-align:\x20center;'
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r'](sV(0x5a9))
            }, sV(0x292))), ff({
                'class': sV(0x2b0)
            }, this['Mh'])), this['kh'], this['ta'], this['Rh'], this['Gh'], this['ia'], this['Ph'], this['_h'], this['Vh'], this['jh'], this['ph'], this['Gr'], this['Wr'], this['Kr'], this['Ur'], ff({
                'style': 'margin:\x202px\x200;\x20margin-left:\x202em;\x20display:\x20flex;\x20align-items:\x20center;'
            }, fj({
                'style': 'flex-grow:\x201;\x20text-align:\x20center;'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x6ac))
            }, 'Envelopes')), this['ma']), this['ca']['container']),
            this['ga'] = ff({
                'class': sV(0x810)
            }, ff({
                'style': 'margin:\x203px\x200;\x20text-align:\x20center;\x20color:\x20' + aL['secondaryText'] + ';'
            }, sV(0x3c9)), this['nh'], this['hh'], this['lh'], ff({
                'class': 'selectRow'
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r'](sV(0x59a))
            }, 'Type:'), ff({
                'class': sV(0x841)
            }, this['Jr'], this['Qr'])), this['da'], this['ya']),
            this['ba'] = ff({
                'class': 'promptContainer',
                'style': sV(0x7bd)
            }),
            this['wa'] = fd({
                'class': sV(0x65c),
                'type': 'button',
                'title': sV(0x827)
            }),
            this['va'] = fd({
                'class': sV(0x1e9),
                'type': 'button',
                'title': 'Zoom\x20Out'
            }),
            this['ka'] = ff({
                'style': 'flex:\x201;\x20height:\x20100%;\x20display:\x20flex;\x20overflow:\x20hidden;\x20justify-content:\x20center;'
            }, this['yr']['container'], this['gr']['container'], this['wr'][sV(0x593)]),
            this['Ma'] = ff({
                'class': 'pattern-area'
            }, this['Fr'][sV(0x593)], this['ka'], this['Sr'][sV(0x593)], this['wa'], this['va']),
            this['xa'] = ff({
                'class': sV(0x56a)
            }, this['kr']['container'], this['Mr'][sV(0x593)]),
            this['Sa'] = ff({
                'style': sV(0x3b3)
            }),
            this['Fa'] = ff({
                'class': 'trackAndMuteContainer'
            }, this['vr'][sV(0x593)], this['xa'], this['Sa']),
            this['Pa'] = new dI(this['$']),
            this['Ia'] = ff({
                'class': sV(0x473)
            }, this['Fa'], this['Pa']['container']),
            this['qa'] = ff({
                'class': 'menu-area'
            }, ff({
                'class': 'selectContainer\x20menu\x20file'
            }, this['zr']), ff({
                'class': sV(0x43e)
            }, this['Dr']), ff({
                'class': sV(0x1a2)
            }, this['Ar'])),
            this['Ta'] = ff({
                'class': 'song-settings-area'
            }, ff({
                'class': sV(0x810)
            }, ff({
                'style': sV(0x75d) + aL[sV(0x1e6)] + ';'
            }, sV(0x63b)), ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('scale')
            }, 'Scale:'), ff({
                'class': sV(0x841)
            }, this['Br'])), ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x319))
            }, sV(0x52a)), ff({
                'class': sV(0x841)
            }, this['Or'])), ff({
                'class': 'selectRow'
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r']('tempo')
            }, 'Tempo:'), fj({
                'style': sV(0x83a)
            }, this['Nr'][sV(0x39f)], this['Rr'])), ff({
                'class': sV(0x1f1)
            }, fj({
                'class': 'tip',
                'onclick': () => this['$r'](sV(0x237))
            }, sV(0x40d)), ff({
                'class': sV(0x841)
            }, this['Yr'])))),
            this['Ea'] = ff({
                'class': 'instrument-settings-area'
            }, this['ga']),
            this['Ca'] = ff({
                'class': sV(0x811)
            }, ff({
                'class': 'version-area'
            }, ff({
                'style': sV(0x621) + aL[sV(0x1e6)] + ';'
            }, aq['versionDisplayName'], '\x20', fc({
                'class': sV(0x330),
                'target': sV(0x37f),
                'href': aq[sV(0x527)]
            }, aq['version']))), ff({
                'class': sV(0x87c)
            }, ff({
                'class': sV(0x3ff)
            }, this['Pr'], this['Ir'], this['qr'], this['Tr'], this['Er'], this['Cr']), ff({
                'class': 'playback-volume-controls'
            }, fj({
                'class': 'volume-speaker'
            }), this['Lr'])), this['qa'], this['Ta'], this['Ea']),
            this['mainLayer'] = ff({
                'class': sV(0x66c),
                'tabIndex': '0'
            }, this['Ma'], this['Ia'], this['Ca'], this['ba']),
            this['La'] = !0x1,
            this['za'] = null,
            this['Da'] = -0x1,
            this['Aa'] = 0x0,
            this['Ba'] = !0x1,
            this['Oa'] = !0x1,
            this['Na'] = !0x1,
            this['Ra'] = !0x1,
            this['fe'] = !0x1,
            this['Ha'] = !0x1,
            this['Ga'] = [],
            this['$a'] = [],
            this['_a'] = [],
            this['Ua'] = [],
            this['Va'] = [],
            this['Wa'] = () => {
                const sW = sV;
                this[sW(0x2d2)]['focus']({
                    'preventScroll': !0x0
                });
            }
            ,
            this['ja'] = fF => {
                const sX = sV;
                this['$'][sX(0x3eb)]['recording'] && fF[sX(0x46a)] != this['mainLayer'] && fF['target'] != this['Tr'] && fF[sX(0x46a)] != this['Lr'] && this['Wa']();
            }
            ,
            this[sV(0x2b4)] = () => {
                const sY = sV
                  , fF = this['$']['prefs'];
                this['vr'][sY(0x593)][sY(0x821)]['display'] = fF[sY(0x2b5)] ? '' : sY(0x3a9);
                const fG = this['Sa'][sY(0x26a)]();
                if (this['$'][sY(0x33b)] = Math[sY(0x4fb)]((fG[sY(0x576)] - fG[sY(0x2bf)] - (fF['enableChannelMuting'] ? 0x20 : 0x0)) / this['$'][sY(0x1c5)]()),
                this['$']['trackVisibleChannels'] = Math['floor']((fG['bottom'] - fG['top'] - 0x1e) / dv['patternHeight']),
                this['Pa'][sY(0x247)](),
                this['vr']['render'](),
                this['kr'][sY(0x247)](),
                this['Fa']['scrollLeft'] = this['$'][sY(0x339)] * this['$'][sY(0x1c5)](),
                this['Fa']['scrollTop'] = this['$'][sY(0x47c)] * dv['patternHeight'],
                this['Fr']['container'][sY(0x821)][sY(0x714)] = fF[sY(0x3a0)] ? '' : sY(0x3a9),
                this['Sr']['container']['style']['display'] = fF['showScrollBar'] ? '' : sY(0x3a9),
                this['Pa']['container'][sY(0x821)]['display'] = this['$'][sY(0x3c1)][sY(0x647)] > this['$'][sY(0x33b)] ? '' : 'none',
                this['$']['getFullScreen']()) {
                    const fO = 0x5 * (this['ka'][sY(0x715)] / this['$']['getVisiblePitchCount']())
                      , fP = this['ka']['clientWidth'] / (0x3 * this['$']['song'][sY(0x6c9)])
                      , fQ = this['ka'][sY(0x2ac)] / (this['$']['song']['beatsPerBar'] + 0x2)
                      , fR = Math[sY(0x2f6)](fP, Math['min'](fQ, fO)) * this['$']['song']['beatsPerBar'];
                    this['yr']['container'][sY(0x821)]['width'] = fR + 'px',
                    this['gr'][sY(0x593)][sY(0x821)][sY(0x387)] = fR + 'px',
                    this['wr'][sY(0x593)]['style'][sY(0x387)] = fR + 'px',
                    this['yr'][sY(0x593)]['style'][sY(0x1ea)] = '0',
                    this['gr'][sY(0x593)]['style'][sY(0x1ea)] = '0',
                    this['wr'][sY(0x593)][sY(0x821)][sY(0x1ea)] = '0',
                    this['yr']['container'][sY(0x821)]['display'] = '',
                    this['wr'][sY(0x593)][sY(0x821)][sY(0x714)] = '',
                    this['yr'][sY(0x247)](),
                    this['wr']['render'](),
                    this['wa'][sY(0x821)]['display'] = '',
                    this['va'][sY(0x821)]['display'] = '',
                    this['wa']['style'][sY(0x576)] = fF['showScrollBar'] ? sY(0x6f4) : sY(0x494),
                    this['va']['style']['right'] = fF[sY(0x6d2)] ? sY(0x6f4) : sY(0x494);
                } else
                    this['gr']['container']['style'][sY(0x387)] = '',
                    this['gr']['container'][sY(0x821)]['flexShrink'] = '',
                    this['yr']['container'][sY(0x821)]['display'] = sY(0x3a9),
                    this['wr']['container']['style']['display'] = 'none',
                    this['wa'][sY(0x821)][sY(0x714)] = 'none',
                    this['va'][sY(0x821)]['display'] = 'none';
                this['gr'][sY(0x247)]();
                const fH = [(fF['autoPlay'] ? '✓\x20' : '\u3000') + 'Auto\x20Play\x20on\x20Load', (fF[sY(0x513)] ? '✓\x20' : '\u3000') + 'Show\x20And\x20Play\x20The\x20Same\x20Bar', (fF['enableNotePreview'] ? '✓\x20' : '\u3000') + 'Hear\x20Preview\x20of\x20Added\x20Notes', (fF[sY(0x3a0)] ? '✓\x20' : '\u3000') + 'Show\x20Piano\x20Keys', (fF['showFifth'] ? '✓\x20' : '\u3000') + sY(0x599), (fF['notesOutsideScale'] ? '✓\x20' : '\u3000') + 'Allow\x20Adding\x20Notes\x20Not\x20in\x20Scale', (fF['defaultScale'] == this['$']['song']['scale'] ? '✓\x20' : '\u3000') + 'Use\x20Current\x20Scale\x20as\x20Default', (fF[sY(0x2e5)] ? '✓\x20' : '\u3000') + sY(0x49a), (fF[sY(0x6d2)] ? '✓\x20' : '\u3000') + sY(0x1e1), (fF[sY(0x816)] ? '✓\x20' : '\u3000') + 'Customize\x20All\x20Instruments', (fF['instrumentCopyPaste'] ? '✓\x20' : '\u3000') + sY(0x70c), (fF['enableChannelMuting'] ? '✓\x20' : '\u3000') + sY(0x75a), (fF['displayBrowserUrl'] ? '✓\x20' : '\u3000') + sY(0x2c4), sY(0x794), ('light\x20classic' == fF[sY(0x49d)] ? '✓\x20' : '\u3000') + 'Light\x20Theme', sY(0x5cc)];
                for (let fS = 0x0; fS < fH['length']; fS++) {
                    const fT = this['Ar']['children'][fS + 0x1];
                    fT['textContent'] != fH[fS] && (fT['textContent'] = fH[fS]);
                }
                const fI = this['$']['song']['channels'][this['$'][sY(0x733)]]
                  , fJ = this['$']['getCurrentInstrument']()
                  , fK = fI['instruments'][fJ]
                  , fL = this['mainLayer'][sY(0x392)](document[sY(0x71a)])
                  , fM = document[sY(0x71a)]
                  , fN = aL['getChannelColor'](this['$']['song'], this['$'][sY(0x733)]);
                for (let fU = this['Mh']['childElementCount'] - 0x1; fU < a1['effectOrder']['length']; fU++)
                    this['Mh'][sY(0x2b8)](fl({
                        'value': fU
                    }));
                this['Mh']['selectedIndex'] = 0x0;
                for (let fV = 0x0; fV < a1['effectOrder'][sY(0x57c)]; fV++) {
                    let fW = a1['effectOrder'][fV];
                    const fX = (0x0 != (fK['effects'] & 0x1 << fW) ? '✓\x20' : '\u3000') + a1['effectNames'][fW]
                      , fY = this['Mh'][sY(0x7fa)][fV + 0x1];
                    fY[sY(0x40a)] != fX && (fY['textContent'] = fX);
                }
                if (fp(this['Br'], this['$']['song'][sY(0x7ad)]),
                this['Br']['title'] = a1[sY(0x379)][this['$'][sY(0x3c1)]['scale']][sY(0x786)],
                fp(this['Or'], a1['keys']['length'] - 0x1 - this['$']['song'][sY(0x319)]),
                this['Nr']['updateValue'](Math['max'](0x0, Math[sY(0x4c5)](0x1c, Math[sY(0x874)](0x4 + 0x9 * Math['log2'](this['$']['song']['tempo'] / 0x78))))),
                this['Rr']['value'] = this['$'][sY(0x3c1)]['tempo']['toString'](),
                fp(this['Yr'], this['$']['song'][sY(0x237)]),
                this['$'][sY(0x3c1)][sY(0x67a)](this['$']['channel']) ? (this['Jr'][sY(0x821)][sY(0x714)] = 'none',
                this['Qr'][sY(0x821)]['display'] = '',
                fp(this['Qr'], fK['preset'])) : (this['Jr'][sY(0x821)][sY(0x714)] = '',
                this['Qr']['style']['display'] = 'none',
                fp(this['Jr'], fK['preset'])),
                fF['instrumentCopyPaste'] ? this['hh']['style']['display'] = '' : this['hh'][sY(0x821)]['display'] = sY(0x3a9),
                fF[sY(0x816)] || fK[sY(0x760)] == fK[sY(0x7d5)]) {
                    if (this['da'][sY(0x821)]['display'] = sY(0x3a9),
                    this['ya'][sY(0x821)][sY(0x714)] = '',
                    0x2 == fK[sY(0x7d5)] ? (this['yh'][sY(0x821)][sY(0x714)] = '',
                    fp(this['dh'], fK['chipNoise'])) : this['yh']['style']['display'] = sY(0x3a9),
                    0x3 == fK['type'] ? (this['ha'][sY(0x821)]['display'] = '',
                    this['ra'][sY(0x247)]()) : this['ha'][sY(0x821)][sY(0x714)] = 'none',
                    0x5 == fK['type'] || 0x7 == fK[sY(0x7d5)] ? (this['la'][sY(0x821)][sY(0x714)] = '',
                    this['aa'][sY(0x247)]()) : this['la'][sY(0x821)][sY(0x714)] = 'none',
                    0x7 == fK['type'] ? (this['Jh']['style'][sY(0x714)] = '',
                    this['Kh']['updateValue'](fK['stringSustain']),
                    this['Yh'][sY(0x40a)] = a1[sY(0x40c)] ? sY(0x332) + a1['sustainTypeNames'][fK[sY(0x71d)]][sY(0x1d4)](0x0, 0x1)[sY(0x36c)]() + '):' : sY(0x707)) : this['Jh'][sY(0x821)]['display'] = sY(0x3a9),
                    0x4 == fK[sY(0x7d5)]) {
                        this['ua'][sY(0x821)][sY(0x714)] = '',
                        this['bh']['style'][sY(0x714)] = sY(0x3a9);
                        for (let fZ = 0x0; fZ < a1[sY(0x71e)]; fZ++)
                            fp(this['Va'][fZ], fK[sY(0x4be)][fZ]),
                            this['Ua'][fZ][sY(0x247)]();
                    } else
                        this['ua']['style']['display'] = sY(0x3a9),
                        this['bh']['style'][sY(0x714)] = '',
                        this['gh'][sY(0x247)]();
                    if (0x0 == fK[sY(0x7d5)] ? (this['mh'][sY(0x821)]['display'] = '',
                    fp(this['fh'], fK['chipWave'])) : this['mh']['style'][sY(0x714)] = 'none',
                    0x1 == fK[sY(0x7d5)]) {
                        this['Zr'][sY(0x821)]['display'] = '',
                        this['sa'][sY(0x821)]['display'] = '',
                        this['oa'][sY(0x821)][sY(0x714)] = '',
                        this['fa']['style'][sY(0x714)] = '',
                        fp(this['Xr'], fK[sY(0x803)]),
                        fp(this['na'], fK['feedbackType']),
                        this['pa'][sY(0x5dd)](fK[sY(0x31f)]);
                        for (let g0 = 0x0; g0 < a1['operatorCount']; g0++) {
                            const g1 = g0 < a1[sY(0x26c)][fK['algorithm']]['carrierCount'];
                            this['Ga'][g0][sY(0x821)][sY(0x2e7)] = g1 ? aL[sY(0x305)] : '',
                            fp(this['_a'][g0], fK[sY(0x350)][g0]['frequency']),
                            this['$a'][g0][sY(0x5dd)](fK['operators'][g0]['amplitude']);
                            const g2 = (g1 ? 'Voice\x20' : sY(0x55b)) + (g0 + 0x1);
                            this['_a'][g0][sY(0x20f)] = g2 + sY(0x3ed),
                            this['$a'][g0][sY(0x39f)]['title'] = g2 + (g1 ? '\x20Volume' : '\x20Amplitude');
                        }
                    } else
                        this['Zr'][sY(0x821)]['display'] = sY(0x3a9),
                        this['sa'][sY(0x821)]['display'] = sY(0x3a9),
                        this['oa'][sY(0x821)][sY(0x714)] = 'none',
                        this['fa']['style'][sY(0x714)] = 'none';
                    if (0x8 == fK[sY(0x7d5)] ? (this['qh']['style']['display'] = '',
                    this['Eh'][sY(0x821)][sY(0x714)] = '',
                    this['Lh'][sY(0x821)][sY(0x714)] = '',
                    this['Ih']['updateValue'](fK[sY(0x555)]),
                    this['Th'][sY(0x5dd)](fK[sY(0x426)]),
                    this['Ch']['updateValue'](fK['supersawShape'])) : (this['qh'][sY(0x821)][sY(0x714)] = 'none',
                    this['Eh'][sY(0x821)][sY(0x714)] = 'none',
                    this['Lh']['style']['display'] = sY(0x3a9)),
                    0x6 == fK['type'] || 0x8 == fK[sY(0x7d5)] ? (this['Dh']['style'][sY(0x714)] = '',
                    this['zh']['input']['title'] = ap(0x64 * a4(fK['pulseWidth'])) + '%',
                    this['zh']['updateValue'](fK['pulseWidth'])) : this['Dh'][sY(0x821)]['display'] = 'none',
                    a9(fK['effects']) ? (this['kh']['style']['display'] = '',
                    fp(this['wh'], fK[sY(0x83f)])) : this['kh']['style']['display'] = 'none',
                    aa(fK[sY(0x5a9)]) ? (this['ta']['style'][sY(0x714)] = '',
                    fp(this['Zh'], fK[sY(0x3e3)])) : this['ta']['style'][sY(0x714)] = sY(0x3a9),
                    ab(fK['effects'])) {
                        this['Rh'][sY(0x821)][sY(0x714)] = '',
                        this['Ah']['updateValue'](fK[sY(0x66a)]),
                        this['Ah'][sY(0x39f)][sY(0x20f)] = fK['pitchShift'] - a1['pitchShiftCenter'] + sY(0x217);
                        for (const g3 of this['Oh'])
                            g3[sY(0x821)]['display'] = fF[sY(0x6d0)] ? '' : sY(0x3a9);
                    } else
                        this['Rh']['style']['display'] = sY(0x3a9);
                    ac(fK[sY(0x5a9)]) ? (this['Gh'][sY(0x821)][sY(0x714)] = '',
                    this['Hh'][sY(0x5dd)](fK[sY(0x84d)]),
                    this['Hh'][sY(0x39f)]['title'] = bp[sY(0x5d6)](fK[sY(0x84d)] - a1[sY(0x439)]) + '\x20cent(s)') : this['Gh'][sY(0x821)]['display'] = 'none',
                    ad(fK['effects']) ? (this['ia'][sY(0x821)]['display'] = '',
                    fp(this['ea'], fK[sY(0x7b2)])) : this['ia']['style']['display'] = 'none',
                    af(fK[sY(0x5a9)]) ? (this['Ph']['style'][sY(0x714)] = '',
                    this['Fh'][sY(0x247)]()) : this['Ph'][sY(0x821)]['display'] = 'none',
                    ag(fK['effects']) ? (this['_h']['style']['display'] = '',
                    this['$h']['updateValue'](fK[sY(0x1ce)])) : this['_h']['style']['display'] = 'none',
                    ah(fK[sY(0x5a9)]) ? (this['Vh'][sY(0x821)][sY(0x714)] = '',
                    this['jh']['style']['display'] = '',
                    this['Uh'][sY(0x5dd)](fK[sY(0x41e)]),
                    this['Wh'][sY(0x5dd)](fK['bitcrusherFreq'])) : (this['Vh']['style'][sY(0x714)] = 'none',
                    this['jh'][sY(0x821)][sY(0x714)] = sY(0x3a9)),
                    aj(fK[sY(0x5a9)]) ? (this['ph']['style'][sY(0x714)] = '',
                    this['uh']['updateValue'](fK['pan'])) : this['ph'][sY(0x821)][sY(0x714)] = 'none',
                    ak(fK['effects']) ? (this['Gr'][sY(0x821)]['display'] = '',
                    this['Hr'][sY(0x5dd)](fK['chorus'])) : this['Gr']['style'][sY(0x714)] = 'none',
                    al(fK['effects']) ? (this['Wr']['style']['display'] = '',
                    this['Vr'][sY(0x5dd)](fK[sY(0x7b6)]),
                    this['Kr']['style']['display'] = '',
                    this['jr']['updateValue'](fK[sY(0x6e6)]),
                    this['jr'][sY(0x39f)][sY(0x20f)] = Math['round']((fK[sY(0x6e6)] + 0x1) * a1['echoDelayStepTicks'] / (a1['ticksPerPart'] * a1['partsPerBeat']) * 0x3e8) / 0x3e8 + '\x20beat(s)') : (this['Wr'][sY(0x821)][sY(0x714)] = sY(0x3a9),
                    this['Kr']['style'][sY(0x714)] = sY(0x3a9)),
                    am(fK['effects']) ? (this['Ur'][sY(0x821)]['display'] = '',
                    this['_r']['updateValue'](fK[sY(0x76b)])) : this['Ur']['style'][sY(0x714)] = sY(0x3a9),
                    0x0 == fK['type'] || 0x5 == fK[sY(0x7d5)] || 0x7 == fK['type'] ? (this['Xh']['style']['display'] = '',
                    fp(this['Qh'], fK[sY(0x5d2)])) : this['Xh'][sY(0x821)][sY(0x714)] = sY(0x3a9),
                    this['ca'][sY(0x247)]();
                } else
                    this['da']['style'][sY(0x714)] = '',
                    this['ya'][sY(0x821)][sY(0x714)] = sY(0x3a9);
                for (let g4 = 0x0; g4 < a1['chords'][sY(0x57c)]; g4++) {
                    let g5 = !a1[sY(0x7e5)][fK['type']] && a1[sY(0x80a)][g4][sY(0x429)];
                    const g6 = this['Zh'][sY(0x7fa)][g4];
                    g5 ? g6[sY(0x71b)]('hidden') || g6[sY(0x1d8)](sY(0x47b), '') : g6[sY(0x2bc)](sY(0x47b));
                }
                if (this['$'][sY(0x3c1)]['layeredInstruments'] || this['$'][sY(0x3c1)][sY(0x776)]) {
                    this['nh']['style'][sY(0x714)] = '',
                    this['sh']['style'][sY(0x254)]('--text-color-lit', fN['primaryNote']),
                    this['sh'][sY(0x821)][sY(0x254)](sY(0x792), fN['secondaryNote']),
                    this['sh']['style'][sY(0x254)]('--background-color-lit', fN[sY(0x7a9)]),
                    this['sh'][sY(0x821)]['setProperty'](sY(0x756), fN[sY(0x3d3)]);
                    const g7 = this['$']['song']['getMaxInstrumentsPerChannel']();
                    for (; this['th']['length'] < fI[sY(0x84c)]['length']; ) {
                        const g8 = fd(String(this['th'][sY(0x57c)] + 0x1));
                        this['th']['push'](g8),
                        this['sh']['insertBefore'](g8, this['ih']);
                    }
                    for (let g9 = this['Aa']; g9 < fI['instruments']['length']; g9++)
                        this['th'][g9][sY(0x821)][sY(0x714)] = '';
                    for (let ga = fI['instruments'][sY(0x57c)]; ga < this['Aa']; ga++)
                        this['th'][ga]['style']['display'] = sY(0x3a9);
                    for (this['Aa'] = fI['instruments']['length']; this['th']['length'] > g7; )
                        this['sh'][sY(0x62d)](this['th']['pop']());
                    if (this['ih']['style'][sY(0x714)] = fI['instruments']['length'] > a1[sY(0x3ec)] ? '' : sY(0x3a9),
                    this['eh']['style']['display'] = fI['instruments']['length'] < g7 ? '' : 'none',
                    fI[sY(0x84c)][sY(0x57c)] < g7 ? this['ih'][sY(0x4e5)][sY(0x3ee)]('last-button') : this['ih'][sY(0x4e5)]['add'](sY(0x4f5)),
                    fI[sY(0x84c)][sY(0x57c)] > 0x1) {
                        if (this['Da'] != fJ) {
                            const gb = this['th'][this['Da']];
                            null != gb && gb['classList'][sY(0x3ee)](sY(0x3c0)),
                            (this['th'][fJ]['classList']['add'](sY(0x3c0)),
                            this['Da'] = fJ);
                        }
                    } else {
                        const gc = this['th'][this['Da']];
                        null != gc && gc[sY(0x4e5)][sY(0x3ee)]('selected-instrument'),
                        this['Da'] = -0x1;
                    }
                    if (this['$'][sY(0x3c1)][sY(0x394)] && this['$']['song']['patternInstruments']) {
                        for (let gd = 0x0; gd < fI['instruments'][sY(0x57c)]; gd++)
                            -0x1 != this['$'][sY(0x686)][this['$']['channel']][sY(0x2fb)](gd) ? this['th'][gd][sY(0x4e5)]['remove']('deactivated') : this['th'][gd][sY(0x4e5)][sY(0x54d)]('deactivated');
                        this['Ha'] = !0x0;
                    } else {
                        if (this['Ha']) {
                            for (let gf = 0x0; gf < fI['instruments'][sY(0x57c)]; gf++)
                                this['th'][gf][sY(0x4e5)]['remove'](sY(0x5ca));
                            this['Ha'] = !0x1;
                        }
                    }
                } else
                    this['nh']['style'][sY(0x714)] = 'none';
                if (this['ga'][sY(0x821)]['color'] = fN[sY(0x591)],
                this['xh']['render'](),
                this['ah'][sY(0x5dd)](-fK['volume']),
                this['ma']['disabled'] = fK['envelopeCount'] >= a1[sY(0x517)],
                this['Lr'][sY(0x313)] = String(fF[sY(0x7c6)]),
                fL && null != fM && 0x0 == fM[sY(0x2ac)] && this['Wa'](),
                this['Ka'](this['$']['prompt']),
                fF['autoFollow'] && !this['$']['synth'][sY(0x4b2)] && this['$'][sY(0x3eb)]['goToBar'](this['$']['bar']),
                this['$'][sY(0x739)]) {
                    const gg = this['ma']['getBoundingClientRect']()
                      , gh = this['Ea']['getBoundingClientRect']()
                      , gj = this['Ca']['getBoundingClientRect']();
                    this['Ea'][sY(0x29c)] += Math['max'](0x0, gg['top'] - (gh[sY(0x5b6)] + gh[sY(0x33e)])),
                    this['Ca']['scrollTop'] += Math[sY(0x2f6)](0x0, gg[sY(0x5b6)] - (gj[sY(0x5b6)] + gj['height'])),
                    this['$'][sY(0x739)] = !0x1;
                }
                this['$']['addedEnvelope'] && (this['Ea']['scrollTop'] = this['Ea'][sY(0x3c6)],
                this['Ca']['scrollTop'] = this['Ca'][sY(0x3c6)],
                this['$'][sY(0x805)] = !0x1);
            }
            ,
            this[sV(0x653)] = () => {
                const sZ = sV;
                this['Ba'] == this['$'][sZ(0x3eb)]['playing'] && this['Oa'] == this['$']['synth']['recording'] && this['Na'] == this['$'][sZ(0x7ed)]['showRecordButton'] && this['Ra'] == this['fe'] || (this['Ba'] = this['$']['synth'][sZ(0x4b2)],
                this['Oa'] = this['$'][sZ(0x3eb)][sZ(0x434)],
                this['Na'] = this['$'][sZ(0x7ed)][sZ(0x4ef)],
                this['Ra'] = this['fe'],
                document[sZ(0x71a)] != this['Pr'] && document[sZ(0x71a)] != this['Ir'] && document[sZ(0x71a)] != this['qr'] && document[sZ(0x71a)] != this['Tr'] || this['Wa'](),
                this['Pr'][sZ(0x821)]['display'] = sZ(0x3a9),
                this['Ir']['style'][sZ(0x714)] = 'none',
                this['qr']['style'][sZ(0x714)] = 'none',
                this['Tr']['style'][sZ(0x714)] = sZ(0x3a9),
                this['Er']['style']['display'] = '',
                this['Cr'][sZ(0x821)]['display'] = '',
                this['Pr'][sZ(0x4e5)]['remove']('shrunk'),
                this['qr']['classList']['remove']('shrunk'),
                this['ka'][sZ(0x821)]['pointerEvents'] = '',
                this['Sr'][sZ(0x593)]['style'][sZ(0x665)] = '',
                this['Sr'][sZ(0x593)]['style']['opacity'] = '',
                this['xa'][sZ(0x821)][sZ(0x665)] = '',
                this['Mr']['container'][sZ(0x821)]['opacity'] = '',
                this['Ea'][sZ(0x821)][sZ(0x665)] = '',
                this['Ea'][sZ(0x821)][sZ(0x4d2)] = '',
                this['qa'][sZ(0x821)][sZ(0x665)] = '',
                this['qa'][sZ(0x821)]['opacity'] = '',
                this['Ta']['style'][sZ(0x665)] = '',
                this['Ta']['style']['opacity'] = '',
                this['$'][sZ(0x3eb)][sZ(0x434)] ? (this['Tr']['style'][sZ(0x714)] = '',
                this['Er'][sZ(0x821)][sZ(0x714)] = 'none',
                this['Cr'][sZ(0x821)]['display'] = 'none',
                this['ka']['style'][sZ(0x665)] = sZ(0x3a9),
                this['Sr']['container'][sZ(0x821)][sZ(0x665)] = sZ(0x3a9),
                this['Sr'][sZ(0x593)]['style'][sZ(0x4d2)] = sZ(0x61e),
                this['xa'][sZ(0x821)][sZ(0x665)] = sZ(0x3a9),
                this['Mr']['container'][sZ(0x821)]['opacity'] = sZ(0x61e),
                this['Ea']['style'][sZ(0x665)] = 'none',
                this['Ea'][sZ(0x821)]['opacity'] = '0.5',
                this['qa']['style'][sZ(0x665)] = sZ(0x3a9),
                this['qa']['style'][sZ(0x4d2)] = sZ(0x61e),
                this['Ta']['style'][sZ(0x665)] = 'none',
                this['Ta']['style']['opacity'] = sZ(0x61e)) : this['$']['synth'][sZ(0x4b2)] ? this['Ir'][sZ(0x821)][sZ(0x714)] = '' : this['$'][sZ(0x7ed)][sZ(0x4ef)] ? (this['Pr'][sZ(0x821)]['display'] = '',
                this['qr']['style']['display'] = '',
                this['Pr']['classList'][sZ(0x54d)]('shrunk'),
                this['qr']['classList']['add']('shrunk')) : this['fe'] ? this['qr'][sZ(0x821)]['display'] = '' : this['Pr']['style']['display'] = ''),
                window[sZ(0x20e)](this['updatePlayButton']);
            }
            ,
            this['Ya'] = fF => {
                const t0 = sV;
                this['$'][t0(0x339)] = this['Fa']['scrollLeft'] / this['$']['getBarWidth']();
            }
            ,
            this['Ja'] = fF => !fF['ctrlKey'] || (fF[sV(0x1e4)](),
            !0x1),
            this['Qa'] = fF => {
                switch (fF['keyCode']) {
                case 0x8:
                case 0xd:
                case 0x26:
                case 0x28:
                case 0x25:
                case 0x27:
                case 0x30:
                case 0x31:
                case 0x32:
                case 0x33:
                case 0x34:
                case 0x35:
                case 0x36:
                case 0x37:
                case 0x38:
                case 0x39:
                    fF['stopPropagation']();
                }
            }
            ,
            this['Qs'] = fF => {
                const t1 = sV;
                if (this['fe'] = fF['ctrlKey'],
                this[t1(0x3f4)])
                    return void (0x1b == fF[t1(0x7a8)] && this['$']['undo']());
                if (this['$']['synth'][t1(0x434)])
                    return fF[t1(0x799)] || fF['metaKey'] || this['tr']['handleKeyEvent'](fF, !0x0),
                    void ((0x20 == fF[t1(0x7a8)] || 0x50 == fF[t1(0x7a8)] && (fF['ctrlKey'] || fF[t1(0x43b)])) && (this['Xa'](),
                    fF['preventDefault'](),
                    this['Wa']()));
                const fG = this['$'][t1(0x7ed)][t1(0x5cb)] != fF['getModifierState']('CapsLock')
                  , fH = !fF[t1(0x799)] && !fF[t1(0x43b)] && fG;
                switch (fH && this['tr'][t1(0x490)](fF, !0x0),
                fF[t1(0x7a8)]) {
                case 0x1b:
                    fF['ctrlKey'] || fF[t1(0x43b)] || (new d6(this['$'],0x0,0x0),
                    this['$']['selection']['resetBoxSelection']());
                    break;
                case 0x20:
                    fF[t1(0x799)] ? this['Xa']() : fF['shiftKey'] ? (this['kr']['movePlayheadToMouse']() || this['gr']['movePlayheadToMouse']()) && (this['$'][t1(0x3eb)]['playing'] || this['$'][t1(0x6cb)]['play']()) : this['Za'](),
                    fF['preventDefault'](),
                    this['Wa']();
                    break;
                case 0x50:
                    if (fH)
                        break;
                    (fF[t1(0x799)] || fF[t1(0x43b)]) && (this['Xa'](),
                    fF['preventDefault'](),
                    this['Wa']());
                    break;
                case 0x5a:
                    if (fH)
                        break;
                    fF['shiftKey'] ? this['$'][t1(0x734)]() : this['$']['undo'](),
                    fF['preventDefault']();
                    break;
                case 0x59:
                    if (fH)
                        break;
                    this['$']['redo'](),
                    fF[t1(0x1e4)]();
                    break;
                case 0x43:
                    if (fH)
                        break;
                    fF['shiftKey'] ? this['tl']() : this['$']['selection'][t1(0x684)](),
                    fF['preventDefault']();
                    break;
                case 0xd:
                    fF['ctrlKey'] || fF[t1(0x43b)] ? this['$'][t1(0x1c9)][t1(0x53d)]() : this['$'][t1(0x1c9)][t1(0x1f5)](),
                    fF['preventDefault']();
                    break;
                case 0x8:
                    fF['ctrlKey'] || fF[t1(0x43b)] ? this['$']['selection'][t1(0x69a)]() : this['$']['selection'][t1(0x1f7)](),
                    fF['preventDefault']();
                    break;
                case 0x41:
                    if (fH)
                        break;
                    fF[t1(0x873)] ? this['$'][t1(0x1c9)][t1(0x46e)]() : this['$'][t1(0x1c9)]['selectAll'](),
                    fF['preventDefault']();
                    break;
                case 0x44:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF[t1(0x43b)]) && (this['$']['selection']['duplicatePatterns'](),
                    fF['preventDefault']());
                    break;
                case 0x46:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF[t1(0x43b)]) && (this['$']['synth']['snapToStart'](),
                    this['$'][t1(0x7ed)][t1(0x513)] && this['$'][t1(0x1c9)]['setChannelBar'](this['$']['channel'], Math['floor'](this['$'][t1(0x3eb)][t1(0x336)])),
                    fF[t1(0x1e4)]());
                    break;
                case 0x48:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF[t1(0x43b)]) && (this['$']['synth'][t1(0x6cd)](this['$']['bar']),
                    this['$'][t1(0x3eb)]['snapToBar'](),
                    this['$'][t1(0x7ed)]['autoFollow'] && this['$']['selection'][t1(0x1de)](this['$']['channel'], Math[t1(0x4fb)](this['$']['synth']['playhead'])),
                    fF['preventDefault']());
                    break;
                case 0x4d:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF['metaKey']) && this['$'][t1(0x7ed)][t1(0x2b5)] && (this['$'][t1(0x1c9)]['muteChannels'](fF[t1(0x873)]),
                    fF['preventDefault']());
                    break;
                case 0x51:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF['metaKey']) && (this['$r'](t1(0x4ac)),
                    fF['preventDefault']());
                    break;
                case 0x53:
                    if (fH)
                        break;
                    fF['ctrlKey'] || fF['metaKey'] ? (this['$r']('export'),
                    fF[t1(0x1e4)]()) : this['$']['prefs'][t1(0x2b5)] && (this['$']['selection']['soloChannels'](fF['shiftKey']),
                    fF[t1(0x1e4)]());
                    break;
                case 0x56:
                    if (fH)
                        break;
                    (fF[t1(0x799)] || fF[t1(0x43b)]) && fF[t1(0x873)] && !fG ? this['$'][t1(0x1c9)][t1(0x740)]() : fF['shiftKey'] ? this['el']() : this['$']['selection']['pasteNotes'](),
                    fF[t1(0x1e4)]();
                    break;
                case 0x49:
                    if (fH)
                        break;
                    if (fG == (fF['ctrlKey'] || fF['metaKey']) && fF['shiftKey']) {
                        const fI = this['$']['song']['channels'][this['$'][t1(0x733)]]['instruments'][this['$'][t1(0x3fe)]()]['toJsonObject']();
                        delete fI['preset'],
                        delete fI[t1(0x7c6)],
                        delete fI['pan'];
                        const fJ = fI['effects'][t1(0x2fb)](a1['effectNames'][0x2]);
                        -0x1 != fJ && fI[t1(0x5a9)]['splice'](fJ, 0x1);
                        for (let fK = 0x0; fK < fI['envelopes']['length']; fK++) {
                            const fL = fI['envelopes'][fK];
                            'panning' != fL[t1(0x46a)] && 'none' != fL['target'] && t1(0x3a9) != fL[t1(0x1cf)] || (fI[t1(0x6ac)]['splice'](fK, 0x1),
                            fK--);
                        }
                        this['il'](JSON[t1(0x423)](fI)),
                        fF['preventDefault']();
                    }
                    break;
                case 0x52:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF['metaKey']) && (fF[t1(0x873)] ? this['sl']() : this['nl'](),
                    fF[t1(0x1e4)]());
                    break;
                case 0xdb:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF['metaKey']) && (this['$'][t1(0x3eb)]['goToPrevBar'](),
                    this['$'][t1(0x7ed)][t1(0x513)] && this['$'][t1(0x1c9)][t1(0x1de)](this['$'][t1(0x733)], Math[t1(0x4fb)](this['$']['synth']['playhead'])),
                    fF[t1(0x1e4)]());
                    break;
                case 0xdd:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF['metaKey']) && (this['$']['synth'][t1(0x44d)](),
                    this['$'][t1(0x7ed)][t1(0x513)] && this['$'][t1(0x1c9)]['setChannelBar'](this['$'][t1(0x733)], Math[t1(0x4fb)](this['$'][t1(0x3eb)]['playhead'])),
                    fF['preventDefault']());
                    break;
                case 0xbd:
                case 0xad:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF['metaKey']) && (this['$']['selection'][t1(0x650)](!0x1, fF[t1(0x873)]),
                    fF['preventDefault']());
                    break;
                case 0xbb:
                case 0x3d:
                case 0xab:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF['metaKey']) && (this['$']['selection']['transpose'](!0x0, fF[t1(0x873)]),
                    fF['preventDefault']());
                    break;
                case 0x26:
                    fF[t1(0x799)] || fF['metaKey'] ? this['$'][t1(0x1c9)]['swapChannels'](-0x1) : fF['shiftKey'] ? (this['$']['selection'][t1(0x189)] = Math['max'](0x0, this['$']['selection'][t1(0x189)] - 0x1),
                    this['$'][t1(0x1c9)][t1(0x173)](),
                    this['$'][t1(0x1c9)]['selectionUpdated']()) : (this['$'][t1(0x1c9)][t1(0x1de)]((this['$'][t1(0x733)] - 0x1 + this['$']['song'][t1(0x777)]()) % this['$']['song'][t1(0x777)](), this['$']['bar']),
                    this['$']['selection']['resetBoxSelection']()),
                    fF[t1(0x1e4)]();
                    break;
                case 0x28:
                    fF[t1(0x799)] || fF['metaKey'] ? this['$']['selection'][t1(0x88e)](0x1) : fF['shiftKey'] ? (this['$'][t1(0x1c9)][t1(0x189)] = Math['min'](this['$']['song'][t1(0x777)]() - 0x1, this['$']['selection']['boxSelectionY1'] + 0x1),
                    this['$'][t1(0x1c9)]['scrollToEndOfSelection'](),
                    this['$']['selection']['selectionUpdated']()) : (this['$'][t1(0x1c9)][t1(0x1de)]((this['$'][t1(0x733)] + 0x1) % this['$'][t1(0x3c1)]['getChannelCount'](), this['$']['bar']),
                    this['$']['selection']['resetBoxSelection']()),
                    fF[t1(0x1e4)]();
                    break;
                case 0x25:
                    fF[t1(0x873)] ? (this['$'][t1(0x1c9)][t1(0x748)] = Math[t1(0x2f6)](0x0, this['$'][t1(0x1c9)][t1(0x748)] - 0x1),
                    this['$'][t1(0x1c9)][t1(0x173)](),
                    this['$'][t1(0x1c9)][t1(0x2f5)]()) : (this['$'][t1(0x1c9)]['setChannelBar'](this['$'][t1(0x733)], (this['$'][t1(0x6e2)] + this['$']['song'][t1(0x647)] - 0x1) % this['$']['song']['barCount']),
                    this['$']['selection']['resetBoxSelection']()),
                    fF[t1(0x1e4)]();
                    break;
                case 0x27:
                    fF['shiftKey'] ? (this['$'][t1(0x1c9)]['boxSelectionX1'] = Math[t1(0x4c5)](this['$'][t1(0x3c1)]['barCount'] - 0x1, this['$'][t1(0x1c9)]['boxSelectionX1'] + 0x1),
                    this['$'][t1(0x1c9)][t1(0x173)](),
                    this['$']['selection']['selectionUpdated']()) : (this['$'][t1(0x1c9)]['setChannelBar'](this['$']['channel'], (this['$']['bar'] + 0x1) % this['$'][t1(0x3c1)][t1(0x647)]),
                    this['$']['selection']['resetBoxSelection']()),
                    fF['preventDefault']();
                    break;
                case 0x30:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF[t1(0x43b)]) && (this['$'][t1(0x1c9)]['nextDigit']('0', fF['shiftKey']),
                    fF[t1(0x1e4)]());
                    break;
                case 0x31:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF['metaKey']) && (this['$']['selection'][t1(0x7cb)]('1', fF['shiftKey']),
                    fF['preventDefault']());
                    break;
                case 0x32:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF['metaKey']) && (this['$'][t1(0x1c9)]['nextDigit']('2', fF['shiftKey']),
                    fF[t1(0x1e4)]());
                    break;
                case 0x33:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF['metaKey']) && (this['$'][t1(0x1c9)][t1(0x7cb)]('3', fF[t1(0x873)]),
                    fF['preventDefault']());
                    break;
                case 0x34:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF[t1(0x43b)]) && (this['$'][t1(0x1c9)]['nextDigit']('4', fF['shiftKey']),
                    fF[t1(0x1e4)]());
                    break;
                case 0x35:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF['metaKey']) && (this['$'][t1(0x1c9)][t1(0x7cb)]('5', fF[t1(0x873)]),
                    fF[t1(0x1e4)]());
                    break;
                case 0x36:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF[t1(0x43b)]) && (this['$']['selection'][t1(0x7cb)]('6', fF[t1(0x873)]),
                    fF[t1(0x1e4)]());
                    break;
                case 0x37:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF['metaKey']) && (this['$']['selection'][t1(0x7cb)]('7', fF['shiftKey']),
                    fF[t1(0x1e4)]());
                    break;
                case 0x38:
                    if (fH)
                        break;
                    fG == (fF[t1(0x799)] || fF[t1(0x43b)]) && (this['$']['selection']['nextDigit']('8', fF[t1(0x873)]),
                    fF[t1(0x1e4)]());
                    break;
                case 0x39:
                    if (fH)
                        break;
                    fG == (fF['ctrlKey'] || fF[t1(0x43b)]) && (this['$'][t1(0x1c9)]['nextDigit']('9', fF['shiftKey']),
                    fF['preventDefault']());
                    break;
                default:
                    this['$']['selection']['digits'] = '',
                    this['$']['selection']['instrumentDigits'] = '';
                }
                fH && (this['$'][t1(0x1c9)]['digits'] = '',
                this['$']['selection']['instrumentDigits'] = '');
            }
            ,
            this['ol'] = fF => {
                const t2 = sV;
                this['fe'] = fF['ctrlKey'],
                this['tr'][t2(0x490)](fF, !0x1);
            }
            ,
            this['rl'] = () => {
                const t3 = sV;
                this['$'][t3(0x3eb)][t3(0x41b)]();
            }
            ,
            this['hl'] = () => {
                this['$']['synth']['goToNextBar']();
            }
            ,
            this['Za'] = () => {
                const t4 = sV;
                this['$']['synth'][t4(0x4b2)] ? this['$']['performance'][t4(0x67f)]() : (this['$'][t4(0x3eb)][t4(0x476)](),
                this['$']['performance'][t4(0x311)]());
            }
            ,
            this['Xa'] = () => {
                const t5 = sV;
                this['$']['synth']['playing'] ? this['$'][t5(0x6cb)]['pause']() : this['$'][t5(0x6cb)]['record']();
            }
            ,
            this['al'] = () => {
                const t6 = sV;
                this['$'][t6(0x43a)](Number(this['Lr'][t6(0x313)]));
            }
            ,
            this['tl'] = () => {
                const t7 = sV
                  , fF = this['$'][t7(0x3c1)]['channels'][this['$'][t7(0x733)]][t7(0x84c)][this['$']['getCurrentInstrument']()][t7(0x87a)]();
                fF['isDrum'] = this['$'][t7(0x3c1)]['getChannelIsNoise'](this['$']['channel']),
                window[t7(0x75c)][t7(0x2d6)]('0bef', this['ll'](JSON[t7(0x423)](fF))),
                this['Wa']();
            }
            ,
            this['el'] = () => {
                const t8 = sV
                  , fF = this['$'][t8(0x3c1)][t8(0x7b3)][this['$'][t8(0x733)]]['instruments'][this['$'][t8(0x3fe)]()]
                  , fG = JSON[t8(0x632)](this['cl'](String(window['localStorage']['getItem']('0bef'))));
                null != fG && fG['isDrum'] == this['$'][t8(0x3c1)][t8(0x67a)](this['$'][t8(0x733)]) && this['$'][t8(0x235)](new cB(this['$'],fF,fG)),
                this['Wa']();
            }
            ,
            this['ul'] = () => {
                this['$']['record'](new cU(this['$'],-0x1,0x0 | parseInt(this['Rr']['value'])));
            }
            ,
            this['pl'] = () => {
                const t9 = sV;
                if (isNaN(this['Br']['value'])) {
                    if (t9(0x3c3) === this['Br']['value'])
                        this['$']['selection']['forceScale']();
                    this['$'][t9(0x7e6)]['changed']();
                } else
                    this['$'][t9(0x235)](new cL(this['$'],this['Br']['selectedIndex']));
            }
            ,
            this['fl'] = () => {
                const ta = sV;
                if (isNaN(this['Or'][ta(0x313)])) {
                    if (ta(0x4dc) === this['Or']['value'])
                        this['$']['record'](new cM(this['$']));
                    this['$'][ta(0x7e6)]['changed']();
                } else
                    this['$']['record'](new cv(this['$'],a1[ta(0x7af)][ta(0x57c)] - 0x1 - this['Or']['selectedIndex']));
            }
            ,
            this['dl'] = () => {
                const tb = sV;
                if (isNaN(this['Yr']['value'])) {
                    if ('forceRhythm' === this['Yr'][tb(0x313)])
                        this['$']['selection']['forceRhythm']();
                    this['$'][tb(0x7e6)][tb(0x327)]();
                } else
                    this['$'][tb(0x235)](new cz(this['$'],this['Yr'][tb(0x690)]));
            }
            ,
            this['ml'] = () => {
                const tc = sV;
                this['yl'](this['Jr'][tc(0x313)]);
            }
            ,
            this['gl'] = () => {
                this['yl'](this['Qr']['value']);
            }
            ,
            this['bl'] = () => {
                const td = sV;
                this['$']['record'](new ck(this['$'],this['na'][td(0x690)]));
            }
            ,
            this['wl'] = () => {
                this['$']['record'](new cj(this['$'],this['Xr']['selectedIndex']));
            }
            ,
            this['vl'] = fF => {
                const te = sV;
                if (fF[te(0x46a)] == this['eh'])
                    this['$'][te(0x235)](new cp(this['$']));
                else {
                    if (fF['target'] == this['ih'])
                        this['$'][te(0x235)](new cq(this['$']));
                    else {
                        const fG = this['th'][te(0x2fb)](fF[te(0x46a)]);
                        -0x1 != fG && this['$']['selection'][te(0x27a)](fG);
                    }
                }
                this['Wa']();
            }
            ,
            this['kl'] = () => {
                const tf = sV;
                this['$'][tf(0x235)](new bI(this['$']));
            }
            ,
            this['Ml'] = () => {
                const tg = sV;
                this['$'][tg(0x235)](new dd(this['$'],this['fh']['selectedIndex']));
            }
            ,
            this['xl'] = () => {
                this['$']['record'](new df(this['$'],this['dh']['selectedIndex']));
            }
            ,
            this['Sl'] = () => {
                const th = sV;
                this['$'][th(0x235)](new bL(this['$'],this['wh']['selectedIndex']));
            }
            ,
            this['Fl'] = () => {
                const ti = sV
                  , fF = this['$']['song']['channels'][this['$']['channel']]['instruments'][this['$'][ti(0x3fe)]()]
                  , fG = fF['effects']
                  , fH = a1[ti(0x62b)][this['Mh'][ti(0x690)] - 0x1];
                this['$']['record'](new bM(this['$'],fH)),
                this['Mh'][ti(0x690)] = 0x0,
                fF['effects'] > fG && (this['$'][ti(0x739)] = !0x0);
            }
            ,
            this['Pl'] = () => {
                const tj = sV;
                this['$'][tj(0x235)](new bY(this['$'],this['ea']['selectedIndex']));
            }
            ,
            this['Il'] = () => {
                const tk = sV;
                this['$'][tk(0x235)](new bW(this['$'],this['Qh'][tk(0x690)]));
            }
            ,
            this['ql'] = () => {
                const tl = sV;
                this['$'][tl(0x235)](new bX(this['$'],this['Zh']['selectedIndex']));
            }
            ,
            this['Tl'] = () => {
                const tm = sV;
                this['$']['record'](new dg(this['$'])),
                this['Wa'](),
                this['$'][tm(0x805)] = !0x0;
            }
            ,
            this['El'] = () => {
                const tn = sV;
                this['$'][tn(0x7ed)][tn(0x446)] = Math['max'](0x1, this['$'][tn(0x7ed)][tn(0x446)] - 0x1),
                this['$']['prefs']['save'](),
                this['$'][tn(0x7e6)][tn(0x327)](),
                this['Wa']();
            }
            ,
            this['Cl'] = () => {
                const to = sV;
                this['$'][to(0x7ed)]['visibleOctaves'] = Math['min'](a1[to(0x530)], this['$']['prefs']['visibleOctaves'] + 0x1),
                this['$'][to(0x7ed)][to(0x4e4)](),
                this['$']['notifier']['changed'](),
                this['Wa']();
            }
            ,
            this['Ll'] = fF => {
                const tp = sV;
                switch (this['zr']['value']) {
                case 'new':
                    this['$']['goBackToStart']();
                    for (const fG of this['$']['song'][tp(0x7b3)])
                        fG['muted'] = !0x1;
                    this['$'][tp(0x235)](new cP(this['$'],''), !0x1, !0x0);
                    break;
                case tp(0x83e):
                    this['$r'](tp(0x83e));
                    break;
                case tp(0x3b0):
                    this['il'](new URL('#' + this['$'][tp(0x3c1)]['toBase64String'](),location['href'])[tp(0x62e)]);
                    break;
                case 'shareUrl':
                    navigator['share']({
                        'url': new URL('#' + this['$']['song'][tp(0x17e)](),location[tp(0x62e)])[tp(0x62e)]
                    });
                    break;
                case 'shortenUrl':
                    window['open']('https://tinyurl.com/api-create.php?url=' + encodeURIComponent(new URL('#' + this['$'][tp(0x3c1)]['toBase64String'](),location['href'])['href']));
                    break;
                case tp(0x528):
                    location['href'] = 'player/#song=' + this['$'][tp(0x3c1)]['toBase64String']();
                    break;
                case 'copyEmbed':
                    this['il'](tp(0x763) + new URL('player/#song=' + this['$']['song']['toBase64String'](),location[tp(0x62e)])[tp(0x62e)] + tp(0x63c));
                    break;
                case tp(0x857):
                    this['$r']('songRecovery');
                }
                this['zr']['selectedIndex'] = 0x0;
            }
            ,
            this['zl'] = fF => {
                const tq = sV;
                switch (this['Dr'][tq(0x313)]) {
                case tq(0x6b3):
                    this['$']['undo']();
                    break;
                case tq(0x734):
                    this['$'][tq(0x734)]();
                    break;
                case 'copy':
                    this['$'][tq(0x1c9)][tq(0x684)]();
                    break;
                case tq(0x1f5):
                    this['$'][tq(0x1c9)][tq(0x1f5)]();
                    break;
                case tq(0x1f7):
                    this['$']['selection'][tq(0x1f7)]();
                    break;
                case tq(0x53d):
                    this['$']['selection']['insertChannel']();
                    break;
                case 'deleteChannel':
                    this['$'][tq(0x1c9)][tq(0x69a)]();
                    break;
                case 'pasteNotes':
                    this['$'][tq(0x1c9)][tq(0x4df)]();
                    break;
                case tq(0x740):
                    this['$'][tq(0x1c9)][tq(0x740)]();
                    break;
                case tq(0x4a2):
                    this['$']['selection'][tq(0x650)](!0x0, !0x1);
                    break;
                case tq(0x411):
                    this['$']['selection']['transpose'](!0x1, !0x1);
                    break;
                case tq(0x484):
                    this['$']['selection']['selectAll']();
                    break;
                case tq(0x46e):
                    this['$']['selection']['selectChannel']();
                    break;
                case 'duplicatePatterns':
                    this['$'][tq(0x1c9)]['duplicatePatterns']();
                    break;
                case 'barCount':
                    this['$r']('barCount');
                    break;
                case tq(0x6c9):
                    this['$r'](tq(0x6c9));
                    break;
                case 'moveNotesSideways':
                    this['$r'](tq(0x57e));
                    break;
                case tq(0x4ac):
                    this['$r']('channelSettings');
                }
                this['Dr']['selectedIndex'] = 0x0;
            }
            ,
            this['Dl'] = fF => {
                const tr = sV;
                switch (this['Ar'][tr(0x313)]) {
                case tr(0x452):
                    this['$'][tr(0x7ed)]['autoPlay'] = !this['$'][tr(0x7ed)][tr(0x452)];
                    break;
                case tr(0x513):
                    this['$']['prefs']['autoFollow'] = !this['$']['prefs'][tr(0x513)];
                    break;
                case 'enableNotePreview':
                    this['$'][tr(0x7ed)]['enableNotePreview'] = !this['$']['prefs']['enableNotePreview'];
                    break;
                case 'showLetters':
                    this['$']['prefs']['showLetters'] = !this['$'][tr(0x7ed)][tr(0x3a0)];
                    break;
                case 'showFifth':
                    this['$']['prefs']['showFifth'] = !this['$'][tr(0x7ed)][tr(0x6d0)];
                    break;
                case 'notesOutsideScale':
                    this['$']['prefs']['notesOutsideScale'] = !this['$'][tr(0x7ed)]['notesOutsideScale'];
                    break;
                case 'setDefaultScale':
                    this['$'][tr(0x7ed)][tr(0x64f)] = this['$'][tr(0x3c1)]['scale'];
                    break;
                case tr(0x2e5):
                    this['$']['prefs'][tr(0x2e5)] = !this['$'][tr(0x7ed)][tr(0x2e5)];
                    break;
                case 'showScrollBar':
                    this['$'][tr(0x7ed)]['showScrollBar'] = !this['$']['prefs'][tr(0x6d2)];
                    break;
                case 'alwaysShowSettings':
                    this['$']['prefs']['alwaysShowSettings'] = !this['$']['prefs']['alwaysShowSettings'];
                    break;
                case 'instrumentCopyPaste':
                    this['$']['prefs']['instrumentCopyPaste'] = !this['$']['prefs']['instrumentCopyPaste'];
                    break;
                case 'enableChannelMuting':
                    this['$'][tr(0x7ed)][tr(0x2b5)] = !this['$'][tr(0x7ed)]['enableChannelMuting'];
                    for (const fG of this['$'][tr(0x3c1)][tr(0x7b3)])
                        fG['muted'] = !0x1;
                    break;
                case 'displayBrowserUrl':
                    this['$']['toggleDisplayBrowserUrl']();
                    break;
                case tr(0x24c):
                    this['$r']('layout');
                    break;
                case 'colorTheme':
                    this['$'][tr(0x7ed)][tr(0x49d)] = 'light\x20classic' == this['$']['prefs']['colorTheme'] ? tr(0x356) : 'light\x20classic',
                    aL[tr(0x16b)](this['$']['prefs']['colorTheme']);
                    break;
                case 'recordingSetup':
                    this['$r'](tr(0x529));
                }
                this['Ar']['selectedIndex'] = 0x0,
                this['$']['notifier'][tr(0x327)](),
                this['$'][tr(0x7ed)]['save']();
            }
            ,
            this['$']['notifier']['watch'](this[sV(0x2b4)]),
            new dO(this['$']),
            window[sV(0x258)](sV(0x288), this[sV(0x2b4)]),
            window[sV(0x20e)](this[sV(0x653)]),
            'share'in navigator || this['zr']['removeChild'](this['zr']['querySelector'](sV(0x2b2))),
            this['Br']['appendChild'](fk({
                'label': sV(0x480)
            }, fl({
                'value': sV(0x3c3)
            }, 'Snap\x20Notes\x20To\x20Scale'))),
            this['Or'][sV(0x2b8)](fk({
                'label': sV(0x480)
            }, fl({
                'value': sV(0x4dc)
            }, 'Detect\x20Key'))),
            this['Yr']['appendChild'](fk({
                'label': 'Edit'
            }, fl({
                'value': sV(0x835)
            }, 'Snap\x20Notes\x20To\x20Rhythm'))),
            this['sa'][sV(0x2b8)](ff({
                'class': 'selectRow',
                'style': 'color:\x20' + aL['secondaryText'] + ';\x20height:\x201em;\x20margin-top:\x200.5em;'
            }, ff({
                'style': 'margin-right:\x20.1em;\x20visibility:\x20hidden;'
            }, '1.'), ff({
                'style': 'width:\x203em;\x20margin-right:\x20.3em;',
                'class': sV(0x330),
                'onclick': () => this['$r']('operatorFrequency')
            }, 'Freq:'), ff({
                'class': 'tip',
                'onclick': () => this['$r']('operatorVolume')
            }, sV(0x238))));
            for (let fF = 0x0; fF < a1[sV(0x5b2)]; fF++) {
                const fG = fF
                  , fH = ff({
                    'style': sV(0x4b9) + aL['secondaryText'] + ';'
                }, fF + 0x1 + '.')
                  , fI = fm(fh({
                    'style': sV(0x4c2),
                    'title': sV(0x257)
                }), a1['operatorFrequencies'][sV(0x422)](fL => fL[sV(0x340)]))
                  , fJ = new fq(fg({
                    'type': 'range',
                    'min': '0',
                    'max': a1[sV(0x826)],
                    'value': '0',
                    'step': '1',
                    'title': sV(0x329)
                }),this['$'], (fL, fM) => new cm(this['$'],fG,fL,fM))
                  , fK = ff({
                    'class': sV(0x1f1)
                }, fH, ff({
                    'class': sV(0x841),
                    'style': 'width:\x203em;\x20margin-right:\x20.3em;'
                }, fI), fJ['input']);
                this['sa'][sV(0x2b8)](fK),
                this['Ga'][fF] = fK,
                this['$a'][fF] = fJ,
                this['_a'][fF] = fI,
                fI['addEventListener'](sV(0x610), () => {
                    const ts = sV;
                    this['$'][ts(0x235)](new cl(this['$'],fG,fI['selectedIndex']));
                }
                );
            }
            this['ua'][sV(0x2b8)](ff({
                'class': 'selectRow'
            }, fj({
                'class': sV(0x330),
                'onclick': () => this['$r'](sV(0x5c1))
            }, 'Envelope:'), fj({
                'class': sV(0x330),
                'onclick': () => this['$r'](sV(0x56e))
            }, 'Spectrum:')));
            for (let fL = a1['drumCount'] - 0x1; fL >= 0x0; fL--) {
                const fM = fL
                  , fN = new dG(this['$'],fM);
                fN['container']['addEventListener'](sV(0x49e), this['Wa']),
                this['Ua'][fL] = fN;
                const fO = fm(fh({
                    'style': 'width:\x20100%;',
                    'title': sV(0x389)
                }), a1['envelopes'][sV(0x422)](fQ => fQ['name']));
                this['Va'][fL] = fO,
                fO[sV(0x258)]('change', () => {
                    const tt = sV;
                    this['$'][tt(0x235)](new c1(this['$'],fM,fO[tt(0x690)]));
                }
                );
                const fP = ff({
                    'class': 'selectRow'
                }, ff({
                    'class': sV(0x841),
                    'style': 'width:\x205em;\x20margin-right:\x20.3em;'
                }, fO), this['Ua'][fL][sV(0x593)]);
                this['ua']['appendChild'](fP);
            }
            if (this['zr'][sV(0x258)](sV(0x610), this['Ll']),
            this['Dr'][sV(0x258)](sV(0x610), this['zl']),
            this['Ar'][sV(0x258)](sV(0x610), this['Dl']),
            this['Rr']['addEventListener'](sV(0x610), this['ul']),
            this['Br'][sV(0x258)]('change', this['pl']),
            this['Or'][sV(0x258)](sV(0x610), this['fl']),
            this['Yr']['addEventListener'](sV(0x610), this['dl']),
            this['Jr'][sV(0x258)]('change', this['ml']),
            this['Qr'][sV(0x258)]('change', this['gl']),
            this['Xr']['addEventListener'](sV(0x610), this['wl']),
            this['sh']['addEventListener']('click', this['vl']),
            this['oh'][sV(0x258)]('click', this['tl']),
            this['rh'][sV(0x258)](sV(0x50e), this['el']),
            this['da'][sV(0x258)]('click', this['kl']),
            this['na'][sV(0x258)]('change', this['bl']),
            this['fh']['addEventListener'](sV(0x610), this['Ml']),
            this['dh'][sV(0x258)](sV(0x610), this['xl']),
            this['wh']['addEventListener'](sV(0x610), this['Sl']),
            this['Mh'][sV(0x258)](sV(0x610), this['Fl']),
            this['Qh']['addEventListener']('change', this['Il']),
            this['Zh'][sV(0x258)]('change', this['ql']),
            this['ea']['addEventListener']('change', this['Pl']),
            this['Pr'][sV(0x258)](sV(0x50e), this['Za']),
            this['Ir'][sV(0x258)]('click', this['Za']),
            this['qr'][sV(0x258)](sV(0x50e), this['Xa']),
            this['Tr']['addEventListener']('click', this['Xa']),
            this['qr'][sV(0x258)]('contextmenu', fQ => {
                const tu = sV;
                fQ['ctrlKey'] && (fQ[tu(0x1e4)](),
                this['Xa']());
            }
            ),
            this['Tr']['addEventListener'](sV(0x199), fQ => {
                fQ['ctrlKey'] && (fQ['preventDefault'](),
                this['Xa']());
            }
            ),
            this['Er']['addEventListener']('click', this['rl']),
            this['Cr']['addEventListener']('click', this['hl']),
            this['Lr'][sV(0x258)]('input', this['al']),
            this['wa'][sV(0x258)]('click', this['El']),
            this['va']['addEventListener']('click', this['Cl']),
            this['Ma']['addEventListener'](sV(0x49e), this['Wa']),
            this['Ia'][sV(0x258)](sV(0x49e), this['Wa']),
            this['gh'][sV(0x593)]['addEventListener'](sV(0x49e), this['Wa']),
            this['ra'][sV(0x593)]['addEventListener'](sV(0x49e), this['Wa']),
            this['xh']['container']['addEventListener'](sV(0x49e), this['Wa']),
            this['Fh']['container'][sV(0x258)]('mousedown', this['Wa']),
            this['aa']['container']['addEventListener'](sV(0x49e), this['Wa']),
            this['Rr']['addEventListener']('keydown', this['Qa'], !0x1),
            this['ma']['addEventListener']('click', this['Tl']),
            this['Ma'][sV(0x258)]('contextmenu', this['Ja']),
            this['Ia']['addEventListener'](sV(0x199), this['Ja']),
            this['mainLayer']['addEventListener'](sV(0x1df), this['Qs']),
            this[sV(0x2d2)]['addEventListener'](sV(0x565), this['ol']),
            this['mainLayer'][sV(0x258)]('focusin', this['ja']),
            this['ba'][sV(0x258)]('click', fQ => {
                const tv = sV;
                fQ[tv(0x46a)] == this['ba'] && this['$']['undo']();
            }
            ),
            this['Fa'][sV(0x258)](sV(0x815), this['Ya'], {
                'capture': !0x1,
                'passive': !0x0
            }),
            ao) {
                const fQ = this['Ar']['querySelector'](sV(0x5fb));
                fQ['disabled'] = !0x0,
                fQ[sV(0x1d8)]('hidden', '');
            }
            if (window['screen'][sV(0x4e9)] < 0x2c6 || window['screen']['availHeight'] < 0x2c6) {
                const fR = this['Ar'][sV(0x4a3)](sV(0x223));
                fR[sV(0x324)] = !0x0,
                fR['setAttribute'](sV(0x47b), '');
            }
        }
        ['$r'](fE) {
            this['$']['openPrompt'](fE),
            this['Ka'](fE);
        }
        ['Ka'](fE) {
            const tw = jI;
            if (this['za'] != fE && (this['za'] = fE,
            this['prompt'] && (this['La'] && !(this['prompt']instanceof bw || this[tw(0x3f4)]instanceof er) && this['$'][tw(0x6cb)][tw(0x311)](),
            this['La'] = !0x1,
            this['ba']['style']['display'] = tw(0x3a9),
            this['ba'][tw(0x62d)](this['prompt']['container']),
            this[tw(0x3f4)][tw(0x21d)](),
            this[tw(0x3f4)] = null,
            this['Wa']()),
            fE)) {
                switch (fE) {
                case 'export':
                    this[tw(0x3f4)] = new eL(this['$']);
                    break;
                case 'songRecovery':
                    this[tw(0x3f4)] = new f1(this['$']);
                    break;
                case tw(0x647):
                    this['prompt'] = new ej(this['$']);
                    break;
                case tw(0x6c9):
                    this[tw(0x3f4)] = new dZ(this['$']);
                    break;
                case tw(0x57e):
                    this['prompt'] = new e8(this['$']);
                    break;
                case tw(0x4ac):
                    this[tw(0x3f4)] = new eA(this['$']);
                    break;
                case tw(0x24c):
                    this['prompt'] = new dE(this['$']);
                    break;
                case 'recordingSetup':
                    this['prompt'] = new fb(this['$']);
                    break;
                case tw(0x499):
                    this[tw(0x3f4)] = new er(this['$']);
                    break;
                default:
                    this[tw(0x3f4)] = new bw(this['$'],fE);
                }
                this[tw(0x3f4)] && (this[tw(0x3f4)]instanceof bw || this[tw(0x3f4)]instanceof er || (this['La'] = this['$']['synth'][tw(0x4b2)],
                this['$'][tw(0x6cb)]['pause']()),
                this['ba']['style'][tw(0x714)] = '',
                this['ba'][tw(0x2b8)](this[tw(0x3f4)][tw(0x593)]));
            }
        }
        ['il'](fE) {
            const tx = jI;
            if (navigator[tx(0x3ce)] && navigator[tx(0x3ce)]['writeText'])
                return void navigator['clipboard']['writeText'](fE)[tx(0x7ab)]( () => {
                    const ty = tx;
                    window[ty(0x3f4)]('Copy\x20to\x20clipboard:', fE);
                }
                );
            const fF = document['createElement']('textarea');
            fF['textContent'] = fE,
            document['body'][tx(0x2b8)](fF),
            fF[tx(0x274)]();
            const fG = document[tx(0x4e6)]('copy');
            fF[tx(0x3ee)](),
            this['Wa'](),
            fG || window['prompt']('Copy\x20this:', fE);
        }
        ['ll'](fE) {
            const tz = jI;
            let fF = 0x0;
            return btoa(unescape(encodeURIComponent(fE)))[tz(0x75e)]('')[tz(0x422)](fG => String[tz(0x23e)](0xff & fF++ ^ fG['charCodeAt'](0x0)))['join']('');
        }
        ['cl'](fE) {
            const tA = jI;
            let fF = 0x0;
            return decodeURIComponent(escape(atob(fE[tA(0x75e)]('')[tA(0x422)](fG => String['fromCharCode'](0xff & fF++ ^ fG['charCodeAt'](0x0)))[tA(0x50c)](''))));
        }
        ['nl']() {
            const tB = jI
              , fE = this['$']['song'][tB(0x67a)](this['$'][tB(0x733)]);
            this['$']['record'](new bJ(this['$'],cN(fE)));
        }
        ['sl']() {
            const tC = jI;
            this['$'][tC(0x235)](new bK(this['$']));
        }
        ['yl'](fE) {
            const tD = jI;
            if (isNaN(fE)) {
                switch (fE) {
                case tD(0x5e4):
                    this['tl']();
                    break;
                case tD(0x20d):
                    this['el']();
                    break;
                case 'randomPreset':
                    this['nl']();
                    break;
                case tD(0x5e3):
                    this['sl']();
                }
                this['$']['notifier']['changed']();
            } else
                this['$'][tD(0x235)](new bJ(this['$'],parseInt(fE)));
        }
    }
    class fu {
        constructor(fE) {
            const tG = jI;
            this['$'] = fE,
            this['Al'] = !0x1,
            this['Bl'] = -0x1,
            this['Ol'] = -0x1,
            this['Nl'] = !0x1,
            this['Rl'] = [],
            this['Hl'] = -0x1,
            this['Gl'] = -0x1,
            this['$l'] = null,
            this['_l'] = !0x1,
            this['Ul'] = null,
            this['Vl'] = null,
            this['do'] = () => {
                const tE = a0b;
                (window['requestAnimationFrame'](this['do']),
                this['$']['synth']['recording']) && (this['Wl']() && this['$']['notifier'][tE(0x1ba)]());
            }
            ,
            this['fn'] = () => {
                const tF = a0b
                  , fF = this['$'][tF(0x3c1)][tF(0x67a)](this['$']['channel'])
                  , fG = this['$'][tF(0x3c1)]['channels'][this['$'][tF(0x733)]]['octave'];
                this['$'][tF(0x3eb)]['liveInputChannel'] == this['$'][tF(0x733)] && this['Al'] == fF && this['Bl'] == fG && this['Ol'] == this['$']['song'][tF(0x319)] || (this['$'][tF(0x3eb)]['liveInputChannel'] = this['$'][tF(0x733)],
                this['Al'] = fF,
                this['Bl'] = fG,
                this['Ol'] = this['$'][tF(0x3c1)]['key'],
                this['clearAllPitches']()),
                this['$'][tF(0x3eb)]['liveInputInstruments'] = this['$'][tF(0x686)][this['$']['channel']];
            }
            ,
            this['$']['notifier'][tG(0x4ed)](this['fn']),
            this['fn'](),
            window['requestAnimationFrame'](this['do']);
        }
        [jI(0x311)]() {
            const tH = jI;
            this['$']['synth'][tH(0x311)](),
            this['$'][tH(0x3eb)][tH(0x295)] = !0x1,
            this['$'][tH(0x3eb)]['countInMetronome'] = !0x1,
            this['$'][tH(0x3eb)][tH(0x1ed)]();
        }
        [jI(0x67f)]() {
            const tI = jI;
            this['clearAllPitches'](),
            null != this['Vl'] && (this['$']['song'][tI(0x647)] > this['Hl'] && !this['jl']() && (new bQ(this['$'],this['$']['song'][tI(0x647)] - 0x1,0x1),
            new bV(this['$'],this['$']['channel'],this['$'][tI(0x3c1)][tI(0x647)] - 0x1)),
            this['Vl'][tI(0x70f)]() || (this['$']['record'](this['Vl']),
            this['Vl'] = null),
            this['Ul'] = null),
            this['$']['synth']['pause'](),
            this['$']['synth'][tI(0x553)](),
            this['$']['synth']['enableMetronome'] = !0x1,
            this['$']['synth'][tI(0x4ee)] = !0x1,
            this['$'][tI(0x7ed)]['autoFollow'] && this['$']['synth'][tI(0x6cd)](this['$']['bar']),
            this['$'][tI(0x3eb)][tI(0x476)]();
        }
        [jI(0x235)]() {
            const tJ = jI;
            this['$']['synth']['snapToBar']();
            const fE = Math['floor'](this['$'][tJ(0x3eb)][tJ(0x336)]);
            fE != this['$']['bar'] && new bV(this['$'],this['$']['channel'],fE),
            this['Nl'] && (this[tJ(0x4eb)](),
            this['Nl'] = !0x1),
            this['$'][tJ(0x3eb)]['enableMetronome'] = this['$']['prefs'][tJ(0x65b)],
            this['$']['synth'][tJ(0x4ee)] = this['$'][tJ(0x7ed)][tJ(0x28d)],
            this['$']['synth'][tJ(0x6f1)](),
            this['$']['synth']['maintainLiveInput'](),
            this['Hl'] = this['$']['song']['barCount'],
            this['Gl'] = this['Kl'](),
            this['$l'] = null,
            this['_l'] = !0x1,
            this['Ul'] = null,
            this['Rl'][tJ(0x57c)] = 0x0,
            this['Vl'] = new bz(),
            this['$'][tJ(0x86f)](this['Vl']);
        }
        ['abortRecording']() {
            this['Vl'] = null,
            this['pause']();
        }
        ['pitchesAreTemporary']() {
            return this['Nl'];
        }
        ['ni']() {
            const tK = jI;
            return this['$']['prefs']['snapRecordedNotesToRhythm'] ? a1['partsPerBeat'] / a1['rhythms'][this['$']['song'][tK(0x237)]]['stepsPerBeat'] : 0x1;
        }
        ['Kl']() {
            const tL = jI
              , fE = this['$']['synth']['playhead'] * this['$']['song']['beatsPerBar'] * a1[tL(0x58d)];
            if (this['$']['prefs'][tL(0x3a1)]) {
                const fF = this['ni']();
                return Math['round'](fE / fF) * fF;
            }
            return Math['round'](fE);
        }
        ['jl']() {
            const tM = jI;
            for (let fE = 0x0; fE < this['$']['song'][tM(0x777)](); fE++)
                if (0x0 != this['$'][tM(0x3c1)][tM(0x7b3)][fE][tM(0x81a)][this['$']['song'][tM(0x647)] - 0x1])
                    return !0x0;
            return !0x1;
        }
        ['Wl']() {
            const tN = jI;
            if (null == this['Vl'])
                return !0x1;
            if (!this['$']['lastChangeWas'](this['Vl']))
                return this[tN(0x22d)](),
                !0x1;
            if (this['$'][tN(0x3eb)]['countInMetronome'])
                return this['Rl']['length'] = 0x0,
                this['_l'] = !0x1,
                !0x1;
            const fE = this['$']['song']['beatsPerBar'] * a1[tN(0x58d)]
              , fF = this['Gl'] % fE
              , fG = Math[tN(0x4fb)](this['Gl'] / fE)
              , fH = this['Gl'];
            this['Gl'] = this['Kl']();
            const fI = this['Gl'] % fE
              , fJ = Math[tN(0x4fb)](this['Gl'] / fE);
            if (fF == fI && fG == fJ)
                return !0x1;
            if (this['Gl'] < fH)
                return this['Ul'] = null,
                this['$l'] = null,
                !0x1;
            let fK = !0x1;
            for (let fL = fG; fL <= fJ; fL++) {
                fL != fG && (this['$l'] = null);
                const fM = fL == fG ? fF : 0x0
                  , fN = fL == fJ ? fI : fE;
                if (fM == fN)
                    break;
                if (null != this['Ul'] && !this['_l'] && fM > 0x0 && this['$'][tN(0x3eb)][tN(0x35e)]['length'] > 0x0)
                    this['Vl'][tN(0x65e)](new cF(this['$'],this['Ul'],0x1,fN,this['Ul']['continuesLastPattern'])),
                    this['$'][tN(0x7c1)] = !0x0;
                else {
                    null != this['Ul'] && (this['Ul'] = null);
                    let fO = fM
                      , fP = fN;
                    for (; fO < fN; ) {
                        let fQ = !0x1;
                        if (this['Rl'][tN(0x57c)] > 0x0 || this['$']['synth']['liveInputPitches']['length'] > 0x0) {
                            if (null == this['$l'] && (this['$']['selection'][tN(0x35c)](this['Vl'], this['$'][tN(0x3eb)][tN(0x61b)], fL),
                            this['Vl']['append'](new cE(this['$'],this['$'][tN(0x3eb)]['liveInputChannel'],fL)),
                            this['$l'] = this['$']['song']['getPattern'](this['$'][tN(0x3eb)][tN(0x61b)], fL)),
                            null == this['$l'])
                                throw new Error();
                            for (this['Ul'] = new b4(-0x1,fO,fP,a1['noteSizeMax'],this['$'][tN(0x3c1)]['getChannelIsNoise'](this['$'][tN(0x3eb)][tN(0x61b)])),
                            this['Ul'][tN(0x790)] = 0x0 == fO && !this['_l'],
                            this['Ul']['pitches'][tN(0x57c)] = 0x0; this['Rl']['length'] > 0x0 && !(this['Ul'][tN(0x68d)]['length'] >= a1[tN(0x5d4)]); ) {
                                const fR = this['Rl'][tN(0x3e7)]();
                                -0x1 == this['$']['synth']['liveInputPitches']['indexOf'](fR) && (this['Ul']['pitches']['push'](fR),
                                fQ = !0x0);
                            }
                            for (let fS = 0x0; fS < this['$']['synth']['liveInputPitches'][tN(0x57c)] && !(this['Ul'][tN(0x68d)][tN(0x57c)] >= a1['maxChordSize']); fS++)
                                this['Ul']['pitches'][tN(0x557)](this['$']['synth']['liveInputPitches'][fS]);
                            this['Vl'][tN(0x65e)](new cZ(this['$'],this['$l'],this['Ul'],this['$l']['notes']['length'])),
                            fQ && (fP = fO + this['ni'](),
                            new d0(this['$'],this['Ul'],this['Ul'][tN(0x1b7)],fP),
                            this['Ul'] = null),
                            fK = !0x0;
                        }
                        this['_l'] = fQ,
                        fO = fP,
                        fP = fN;
                    }
                }
                fL == this['$']['song'][tN(0x647)] - 0x1 && this['jl']() && (new bP(this['$'],this['$'][tN(0x3c1)]['barCount'],0x1),
                this['$']['bar']--,
                fK = !0x0);
            }
            return fK;
        }
        [jI(0x2e2)](fE, fF) {
            const tO = jI;
            this['Wl']();
            for (let fG = 0x0; fG < fE['length']; fG++)
                this['$']['synth']['liveInputPitches'][fG] = fE[fG];
            this['$'][tO(0x3eb)]['liveInputPitches']['length'] = Math['min'](fE[tO(0x57c)], a1['maxChordSize']),
            this['$'][tO(0x3eb)]['liveInputDuration'] = fF,
            this['$'][tO(0x3eb)]['liveInputStarted'] = !0x0,
            this['Nl'] = !0x0,
            this['_l'] = !0x0;
        }
        ['addPerformedPitch'](fE) {
            const tP = jI;
            if (this['$'][tP(0x3eb)][tP(0x1ed)](),
            this['Wl'](),
            this['Nl'] && (this['clearAllPitches'](),
            this['Nl'] = !0x1),
            (!this['$'][tP(0x7ed)][tP(0x589)] || a1['scales'][this['$'][tP(0x3c1)]['scale']]['flags'][fE % a1['pitchesPerOctave']]) && -0x1 == this['$'][tP(0x3eb)][tP(0x35e)][tP(0x2fb)](fE)) {
                for (this['$']['synth'][tP(0x35e)]['push'](fE),
                this['_l'] = !0x0; this['$'][tP(0x3eb)]['liveInputPitches'][tP(0x57c)] > a1[tP(0x5d4)]; )
                    this['$']['synth']['liveInputPitches'][tP(0x3e7)]();
                if (this['$'][tP(0x3eb)]['liveInputDuration'] = Number[tP(0x736)],
                null != this['Vl']) {
                    const fF = this['Rl']['indexOf'](fE);
                    for (-0x1 != fF && this['Rl'][tP(0x712)](fF, 0x1),
                    this['Rl']['push'](fE); this['Rl'][tP(0x57c)] > 0x4 * a1['maxChordSize']; )
                        this['Rl']['shift']();
                }
            }
        }
        [jI(0x82b)](fE) {
            const tQ = jI;
            this['Wl']();
            for (let fF = 0x0; fF < this['$'][tQ(0x3eb)]['liveInputPitches']['length']; fF++)
                this['$'][tQ(0x3eb)]['liveInputPitches'][fF] == fE && (this['$']['synth']['liveInputPitches']['splice'](fF, 0x1),
                this['_l'] = !0x0,
                fF--);
        }
        [jI(0x4eb)]() {
            const tR = jI;
            this['Wl'](),
            this['$']['synth']['liveInputPitches'][tR(0x57c)] = 0x0,
            this['_l'] = !0x0;
        }
    }
    let fv = null;
    class fw {
        constructor(fE) {
            const tS = jI;
            this['$'] = fE,
            this[tS(0x2fc)] = 0x0,
            this[tS(0x1e5)] = 0x0,
            this[tS(0x748)] = 0x0,
            this['boxSelectionY1'] = 0x0,
            this[tS(0x688)] = '',
            this['instrumentDigits'] = '',
            this[tS(0x4b6)] = 0x0,
            this[tS(0x4e1)] = 0x0,
            this[tS(0x3cf)] = !0x1,
            this['Yl'] = null,
            this['Jl'] = null,
            this['Ql'] = null,
            this['Xl'] = null;
        }
        ['toJSON']() {
            const tT = jI;
            return {
                'x0': this['boxSelectionX0'],
                'x1': this['boxSelectionX1'],
                'y0': this['boxSelectionY0'],
                'y1': this['boxSelectionY1'],
                'start': this['patternSelectionStart'],
                'end': this[tT(0x4e1)]
            };
        }
        ['fromJSON'](fE) {
            const tU = jI;
            null != fE && (this[tU(0x2fc)] = +fE['x0'],
            this['boxSelectionX1'] = +fE['x1'],
            this[tU(0x1e5)] = +fE['y0'],
            this['boxSelectionY1'] = +fE['y1'],
            this['patternSelectionStart'] = +fE[tU(0x1b7)],
            this[tU(0x4e1)] = +fE[tU(0x63e)],
            this[tU(0x688)] = '',
            this[tU(0x750)] = '',
            this['patternSelectionActive'] = this['patternSelectionStart'] < this[tU(0x4e1)]);
        }
        [jI(0x2f5)]() {
            const tV = jI;
            this['$']['notifier']['changed'](),
            this[tV(0x688)] = '',
            this[tV(0x750)] = '';
        }
        get['boxSelectionBar']() {
            return Math['min'](this['boxSelectionX0'], this['boxSelectionX1']);
        }
        get[jI(0x597)]() {
            const tW = jI;
            return Math[tW(0x4c5)](this['boxSelectionY0'], this['boxSelectionY1']);
        }
        get[jI(0x300)]() {
            const tX = jI;
            return Math['abs'](this[tX(0x2fc)] - this['boxSelectionX1']) + 0x1;
        }
        get['boxSelectionHeight']() {
            const tY = jI;
            return Math[tY(0x216)](this[tY(0x1e5)] - this[tY(0x189)]) + 0x1;
        }
        get[jI(0x858)]() {
            const tZ = jI;
            return this[tZ(0x300)] > 0x1 || this['boxSelectionHeight'] > 0x1;
        }
        ['scrollToSelectedPattern']() {
            const u0 = jI;
            this['$']['barScrollPos'] = Math[u0(0x4c5)](this['$']['bar'], Math['max'](this['$'][u0(0x6e2)] - (this['$'][u0(0x33b)] - 0x1), this['$']['barScrollPos'])),
            this['$'][u0(0x47c)] = Math[u0(0x4c5)](this['$'][u0(0x733)], Math[u0(0x2f6)](this['$'][u0(0x733)] - (this['$']['trackVisibleChannels'] - 0x1), this['$']['channelScrollPos']));
        }
        ['scrollToEndOfSelection']() {
            const u1 = jI;
            this['$'][u1(0x339)] = Math[u1(0x4c5)](this[u1(0x748)], Math[u1(0x2f6)](this['boxSelectionX1'] - (this['$'][u1(0x33b)] - 0x1), this['$'][u1(0x339)])),
            this['$'][u1(0x47c)] = Math[u1(0x4c5)](this[u1(0x189)], Math['max'](this[u1(0x189)] - (this['$']['trackVisibleChannels'] - 0x1), this['$'][u1(0x47c)]));
        }
        [jI(0x1de)](fE, fF) {
            const u2 = jI;
            if (fE == this['$'][u2(0x733)] && fF == this['$']['bar'])
                return;
            const fG = this['$']['lastChangeWas'](this['Ql']);
            this['Ql'] = new bz(),
            this['Ql'][u2(0x65e)](new bV(this['$'],fE,fF));
            const fH = this['$']['getCurrentPattern'](0x0);
            null != fH && this['$'][u2(0x3c1)]['patternInstruments'] && -0x1 == fH['instruments'][u2(0x2fb)](this['$'][u2(0x3a3)][this['$']['channel']]) && (this['$']['viewedInstrument'][this['$']['channel']] = fH[u2(0x84c)][0x0]),
            this['$'][u2(0x2d1)]() || this['$']['record'](this['Ql'], fG),
            this[u2(0x2f5)]();
        }
        ['setPattern'](fE) {
            const u3 = jI;
            this['$'][u3(0x235)](new bN(this['$'],fE,this[u3(0x341)],this['boxSelectionChannel'],this[u3(0x300)],this['boxSelectionHeight']));
        }
        [jI(0x7cb)](fE, fF) {
            const u4 = jI
              , fG = this['$'][u4(0x3c1)]['channels'][this['$'][u4(0x733)]];
            if (fF) {
                '0' == fE && (fE = '10'),
                this[u4(0x750)] += fE;
                var fH = parseInt(this[u4(0x750)]);
                if (0x0 != fH && fH <= fG['instruments'][u4(0x57c)])
                    return void this['selectInstrument'](fH - 0x1);
                if (this['instrumentDigits'] = fE,
                0x0 != (fH = parseInt(this['instrumentDigits'])) && fH <= fG['instruments']['length'])
                    return void this[u4(0x27a)](fH - 0x1);
                this['instrumentDigits'] = '';
            } else {
                this[u4(0x688)]['length'] > 0x0 && this['digits'] != String(fG[u4(0x81a)][this['boxSelectionBar']]) && (this['digits'] = ''),
                this[u4(0x688)] += fE;
                let fI = parseInt(this[u4(0x688)]);
                if (fI <= this['$'][u4(0x3c1)]['patternsPerChannel'])
                    return void this[u4(0x485)](fI);
                if (this[u4(0x688)] = fE,
                fI = parseInt(this['digits']),
                fI <= this['$'][u4(0x3c1)][u4(0x468)])
                    return void this[u4(0x485)](fI);
                this['digits'] = '';
            }
        }
        ['insertBars']() {
            const u5 = jI;
            this['$']['record'](new bP(this['$'],this['boxSelectionBar'] + this[u5(0x300)],this[u5(0x300)]));
            const fE = this[u5(0x300)];
            this[u5(0x2fc)] += fE,
            this[u5(0x748)] += fE;
        }
        [jI(0x53d)]() {
            const u6 = jI
              , fE = new bz()
              , fF = this['boxSelectionChannel'] + this['boxSelectionHeight']
              , fG = this['$']['song']['getChannelIsNoise'](fF - 0x1);
            fE[u6(0x65e)](new bT(this['$'],fF,fG)),
            fE['isNoop']() || (this[u6(0x1e5)] = this['boxSelectionY1'] = fF,
            fE[u6(0x65e)](new bV(this['$'],fF,this['$'][u6(0x6e2)])),
            this['$'][u6(0x235)](fE));
        }
        [jI(0x1f7)]() {
            const u7 = jI
              , fE = new bz();
            if (this['$'][u7(0x1c9)]['patternSelectionActive']) {
                this['boxSelectionActive'] && fE[u7(0x65e)](new d8(this['$'],this[u7(0x341)],this['boxSelectionWidth'],this[u7(0x597)],this['boxSelectionHeight']));
                for (const fF of this['Zl']())
                    for (const fG of this['tc'](fF))
                        fE['append'](new d1(this['$'],fG,this['$'][u7(0x1c9)][u7(0x4b6)],this['$'][u7(0x1c9)][u7(0x4e1)]));
                fE['append'](new d6(this['$'],0x0,0x0));
            } else {
                fE[u7(0x65e)](new bQ(this['$'],this[u7(0x341)],this[u7(0x300)]));
                const fH = this['boxSelectionWidth'];
                this['boxSelectionX0'] = Math['max'](0x0, this['boxSelectionX0'] - fH),
                this['boxSelectionX1'] = Math[u7(0x2f6)](0x0, this['boxSelectionX1'] - fH);
            }
            this['$'][u7(0x235)](fE);
        }
        [jI(0x69a)]() {
            const u8 = jI;
            this['$']['record'](new bU(this['$'],this[u8(0x597)],this[u8(0x597)] + this[u8(0x496)] - 0x1)),
            this[u8(0x1e5)] = this['boxSelectionY1'] = this['$']['channel'];
        }
        *['Zl']() {
            const u9 = jI;
            for (let fE = this[u9(0x597)]; fE < this[u9(0x597)] + this['boxSelectionHeight']; fE++)
                yield fE;
        }
        *['ec']() {
            const ua = jI;
            for (let fE = this[ua(0x341)]; fE < this['boxSelectionBar'] + this['boxSelectionWidth']; fE++)
                yield fE;
        }
        *['tc'](fE) {
            const ub = jI
              , fF = {};
            for (const fG of this['ec']()) {
                const fH = this['$'][ub(0x3c1)][ub(0x7b3)][fE][ub(0x81a)][fG];
                if (0x0 == fH)
                    continue;
                if (fF[String(fH)])
                    continue;
                fF[String(fH)] = !0x0;
                const fI = this['$']['song'][ub(0x4d5)](fE, fG);
                if (null == fI)
                    throw new Error();
                yield fI;
            }
        }
        ['ic'](fE, fF) {
            const fG = Array['from'](fE['instruments'])['map'](fH => fH >>> 0x0);
            return bC(fG, this['$']['song'], fF),
            fG;
        }
        ['sc'](fE, fF) {
            const uc = jI;
            for (let fG = 0x0; fG < this['$']['song']['barCount']; fG++)
                if (this['$'][uc(0x3c1)]['channels'][fE][uc(0x81a)][fG] == fF)
                    return !0x1;
            return !0x0;
        }
        ['copy']() {
            const ud = jI
              , fE = [];
            for (const fF of this['Zl']()) {
                const fG = {}
                  , fH = [];
                for (const fJ of this['ec']()) {
                    const fK = this['$']['song'][ud(0x7b3)][fF][ud(0x81a)][fJ];
                    if (fH[ud(0x557)](fK),
                    null == fG[String(fK)]) {
                        const fL = this['$'][ud(0x3c1)]['getPattern'](fF, fJ);
                        let fM = this['$'][ud(0x686)][fF]
                          , fN = [];
                        if (null != fL) {
                            if (fM = fL['instruments']['concat'](),
                            this['patternSelectionActive']) {
                                for (const fO of fL[ud(0x3a2)]())
                                    fO['end'] <= this['patternSelectionStart'] || fO['start'] >= this['patternSelectionEnd'] || (fO['start'] -= this[ud(0x4b6)],
                                    fO[ud(0x63e)] -= this['patternSelectionStart'],
                                    (fO['start'] < 0x0 || fO[ud(0x63e)] > this['patternSelectionEnd'] - this['patternSelectionStart']) && new d0(null,fO,Math[ud(0x2f6)](fO['start'], 0x0),Math[ud(0x4c5)](this['patternSelectionEnd'] - this['patternSelectionStart'], fO[ud(0x63e)])),
                                    fN['push'](fO));
                            } else
                                fN = fL[ud(0x58c)];
                        }
                        fG[String(fK)] = {
                            'instruments': fM,
                            'notes': fN
                        };
                    }
                }
                const fI = {
                    'isNoise': this['$']['song']['getChannelIsNoise'](fF),
                    'patterns': fG,
                    'bars': fH
                };
                fE['push'](fI);
            }
            fv = {
                'partDuration': this[ud(0x3cf)] ? this['patternSelectionEnd'] - this['patternSelectionStart'] : this['$'][ud(0x3c1)][ud(0x6c9)] * a1['partsPerBeat'],
                'channels': fE
            };
        }
        ['pasteNotes']() {
            const ue = jI;
            if (null == fv)
                return;
            const fE = fv['channels'] || []
              , fF = fv['partDuration'] >>> 0x0
              , fG = new bz()
              , fH = this['boxSelectionActive']
              , fI = fH ? this[ue(0x496)] : Math[ue(0x4c5)](fE[ue(0x57c)], this['$'][ue(0x3c1)][ue(0x777)]() - this['boxSelectionChannel']);
            for (let fJ = 0x0; fJ < fI; fJ++) {
                const fK = fE[fJ % fE['length']]
                  , fL = this[ue(0x597)] + fJ
                  , fM = !!fK[ue(0x25d)]
                  , fN = fK['patterns'] || {}
                  , fO = fK['bars'] || [];
                if (0x0 == fO[ue(0x57c)])
                    continue;
                if (fM != this['$'][ue(0x3c1)]['getChannelIsNoise'](fL))
                    continue;
                const fP = fH ? this['boxSelectionWidth'] : Math['min'](fO[ue(0x57c)], this['$'][ue(0x3c1)]['barCount'] - this['boxSelectionBar']);
                if (fH || 0x1 != fO['length'] || 0x1 != fE[ue(0x57c)]) {
                    if (this[ue(0x3cf)]) {
                        const fQ = {}
                          , fR = {};
                        fG['append'](new d8(this['$'],this['boxSelectionBar'],fP,this['boxSelectionChannel'],fI));
                        for (let fS = 0x0; fS < fP; fS++) {
                            const fT = this['boxSelectionBar'] + fS
                              , fU = fO[fS % fO[ue(0x57c)]] >>> 0x0
                              , fV = this['$']['song']['channels'][fL][ue(0x81a)][fT]
                              , fW = [fU, fV][ue(0x50c)](',');
                            if (0x0 == fU && 0x0 == fV)
                                continue;
                            if (null != fQ[fW]) {
                                fG[ue(0x65e)](new bN(this['$'],fQ[fW],fT,fL,0x1,0x1));
                                continue;
                            }
                            if (0x0 == fV) {
                                fG[ue(0x65e)](new cE(this['$'],fL,fT));
                                const fY = fN[String(fU)]
                                  , fZ = this['ic'](fY, fL)
                                  , g0 = this['$'][ue(0x3c1)][ue(0x4d5)](fL, fT);
                                fG['append'](new cC(this['$'],fL,fZ,g0));
                            } else {
                                const g1 = this['$'][ue(0x3c1)]['getPattern'](fL, fT);
                                if (null == g1)
                                    throw new Error();
                                if (fR[String(fV)]) {
                                    fG['append'](new bN(this['$'],0x0,fT,fL,0x1,0x1)),
                                    fG['append'](new cE(this['$'],fL,fT));
                                    const g2 = this['$'][ue(0x3c1)][ue(0x4d5)](fL, fT);
                                    if (null == g2)
                                        throw new Error();
                                    for (const g3 of g1['cloneNotes']())
                                        fG['append'](new cZ(this['$'],g2,g3,g2[ue(0x58c)]['length'],!0x1));
                                } else
                                    fR[String(fV)] = !0x0;
                            }
                            const fX = this['$'][ue(0x3c1)][ue(0x4d5)](fL, fT);
                            if (null == fX)
                                throw new Error();
                            if (0x0 == fU)
                                fG['append'](new d1(this['$'],fX,this[ue(0x4b6)],this['patternSelectionEnd']));
                            else {
                                const g4 = fN[String(fU)];
                                fG['append'](new cA(this['$'],fX,g4['notes'],this[ue(0x4b6)],this['patternSelectionEnd'],fF));
                            }
                            fQ[fW] = this['$']['song'][ue(0x7b3)][fL][ue(0x81a)][fT];
                        }
                    } else {
                        for (let g6 = 0x0; g6 < fP; g6++)
                            this[ue(0x35c)](fG, fL, this[ue(0x341)] + g6);
                        const g5 = {};
                        for (let g7 = 0x0; g7 < fP; g7++) {
                            const g8 = this[ue(0x341)] + g7
                              , g9 = fO[g7 % fO['length']] >>> 0x0
                              , ga = String(g9);
                            if (0x0 == g9)
                                continue;
                            if (null != g5[ga]) {
                                fG[ue(0x65e)](new bN(this['$'],g5[ga],g8,fL,0x1,0x1));
                                continue;
                            }
                            const gb = fN[String(g9)]
                              , gc = this['ic'](gb, fL)
                              , gd = this['$']['song']['channels'][fL]['patterns'][g9 - 0x1];
                            if (null != gd && fF == a1[ue(0x58d)] * this['$'][ue(0x3c1)][ue(0x6c9)] && cS(gb[ue(0x58c)], gd[ue(0x58c)]) && bB(gc, gd[ue(0x84c)]))
                                fG['append'](new bN(this['$'],g9,g8,fL,0x1,0x1));
                            else {
                                null != gd && this['sc'](fL, g9) ? fG[ue(0x65e)](new bN(this['$'],g9,g8,fL,0x1,0x1)) : fG['append'](new cE(this['$'],fL,g8));
                                const gf = this['$']['song']['getPattern'](fL, g8);
                                if (null == gf)
                                    throw new Error();
                                fG['append'](new cA(this['$'],gf,gb[ue(0x58c)],this['patternSelectionActive'] ? this['patternSelectionStart'] : 0x0,this['patternSelectionActive'] ? this[ue(0x4e1)] : a1['partsPerBeat'] * this['$'][ue(0x3c1)][ue(0x6c9)],fF)),
                                fG[ue(0x65e)](new cC(this['$'],fL,gc,gf));
                            }
                            g5[ga] = this['$']['song']['channels'][fL][ue(0x81a)][g8];
                        }
                    }
                } else {
                    const gg = fO[0x0] >>> 0x0
                      , gh = this[ue(0x341)]
                      , gj = this['$']['song']['channels'][fL]['bars'][gh];
                    if (0x0 == gg && 0x0 == gj)
                        continue;
                    const gk = fN[String(gg)]
                      , gl = this['ic'](gk, fL);
                    if (0x0 == gj) {
                        const go = this['$'][ue(0x3c1)][ue(0x7b3)][fL][ue(0x3cb)][gg - 0x1];
                        null != go && !this[ue(0x3cf)] && (cS(gk['notes'], go[ue(0x58c)]) && bB(gl, go['instruments']) || this['sc'](fL, gg)) ? fG[ue(0x65e)](new bN(this['$'],gg,gh,fL,0x1,0x1)) : fG[ue(0x65e)](new cE(this['$'],fL,gh));
                    }
                    const gm = this['$'][ue(0x3c1)][ue(0x4d5)](fL, gh);
                    if (null == gm)
                        throw new Error();
                    fG['append'](new cA(this['$'],gm,gk['notes'],this['patternSelectionActive'] ? this[ue(0x4b6)] : 0x0,this[ue(0x3cf)] ? this[ue(0x4e1)] : a1['partsPerBeat'] * this['$'][ue(0x3c1)]['beatsPerBar'],fF)),
                    0x0 == gj && fG[ue(0x65e)](new cC(this['$'],fL,gl,gm));
                }
            }
            this['$']['record'](fG);
        }
        [jI(0x35c)](fE, fF, fG) {
            const uf = jI
              , fH = this['$']['song']['channels'][fF]['bars'][fG];
            0x0 != fH && (fE[uf(0x65e)](new bN(this['$'],0x0,fG,fF,0x1,0x1)),
            this['sc'](fF, fH) && (this['$']['song']['channels'][fF]['patterns'][fH - 0x1][uf(0x58c)][uf(0x57c)] = 0x0));
        }
        [jI(0x740)]() {
            const ug = jI;
            if (null == fv)
                return;
            const fE = fv['channels'] || []
              , fF = new bz()
              , fG = this['boxSelectionActive']
              , fH = fG ? this[ug(0x496)] : Math[ug(0x4c5)](fE[ug(0x57c)], this['$'][ug(0x3c1)]['getChannelCount']() - this[ug(0x597)]);
            for (let fI = 0x0; fI < fH; fI++) {
                const fJ = fE[fI % fE[ug(0x57c)]]
                  , fK = this['boxSelectionChannel'] + fI
                  , fL = fJ['bars'] || [];
                if (0x0 == fL['length'])
                    continue;
                const fM = fG ? this['boxSelectionWidth'] : Math['min'](fL[ug(0x57c)], this['$'][ug(0x3c1)]['barCount'] - this['boxSelectionBar']);
                for (let fN = 0x0; fN < fM; fN++) {
                    const fO = fL[fN % fL['length']] >>> 0x0
                      , fP = this['boxSelectionBar'] + fN;
                    fO > this['$'][ug(0x3c1)][ug(0x468)] && fF[ug(0x65e)](new cD(this['$'],fO)),
                    fF[ug(0x65e)](new bN(this['$'],fO,fP,fK,0x1,0x1));
                }
            }
            this['$']['record'](fF);
        }
        ['selectAll']() {
            const uh = jI;
            new d6(this['$'],0x0,0x0),
            0x0 == this[uh(0x341)] && 0x0 == this[uh(0x597)] && this['boxSelectionWidth'] == this['$']['song'][uh(0x647)] && this['boxSelectionHeight'] == this['$'][uh(0x3c1)]['getChannelCount']() ? this['setTrackSelection'](this['$'][uh(0x6e2)], this['$']['bar'], this['$'][uh(0x733)], this['$'][uh(0x733)]) : this['setTrackSelection'](0x0, this['$'][uh(0x3c1)][uh(0x647)] - 0x1, 0x0, this['$']['song'][uh(0x777)]() - 0x1),
            this[uh(0x2f5)]();
        }
        [jI(0x46e)]() {
            const ui = jI;
            new d6(this['$'],0x0,0x0),
            0x0 == this['boxSelectionBar'] && this['boxSelectionWidth'] == this['$']['song'][ui(0x647)] ? this[ui(0x3d4)](this['$'][ui(0x6e2)], this['$'][ui(0x6e2)], this[ui(0x1e5)], this['boxSelectionY1']) : this['setTrackSelection'](0x0, this['$'][ui(0x3c1)]['barCount'] - 0x1, this[ui(0x1e5)], this[ui(0x189)]),
            this['selectionUpdated']();
        }
        ['duplicatePatterns']() {
            const uj = jI;
            this['$']['record'](new d8(this['$'],this['boxSelectionBar'],this[uj(0x300)],this['boxSelectionChannel'],this['boxSelectionHeight']));
        }
        [jI(0x211)](fE) {
            const uk = jI;
            if (fE) {
                let fF = !0x1;
                for (let fG = 0x0; fG < this['$'][uk(0x3c1)]['channels'][uk(0x57c)]; fG++)
                    if (this['$']['song'][uk(0x7b3)][fG]['muted']) {
                        fF = !0x0;
                        break;
                    }
                for (let fH = 0x0; fH < this['$']['song']['channels']['length']; fH++)
                    this['$']['song']['channels'][fH]['muted'] = !fF;
            } else {
                let fI = !0x1;
                for (const fJ of this['Zl']())
                    if (!this['$']['song'][uk(0x7b3)][fJ][uk(0x3ef)]) {
                        fI = !0x0;
                        break;
                    }
                for (const fK of this['Zl']())
                    this['$'][uk(0x3c1)]['channels'][fK][uk(0x3ef)] = fI;
            }
            this['$']['notifier']['changed']();
        }
        [jI(0x4bf)](fE) {
            const ul = jI;
            let fF = !0x0;
            for (let fG = 0x0; fG < this['$'][ul(0x3c1)]['channels'][ul(0x57c)]; fG++) {
                const fH = fG < this[ul(0x597)] || fG >= this[ul(0x597)] + this[ul(0x496)] ? !fE : fE;
                if (this['$']['song']['channels'][fG][ul(0x3ef)] != fH) {
                    fF = !0x1;
                    break;
                }
            }
            if (fF) {
                for (let fI = 0x0; fI < this['$']['song'][ul(0x7b3)][ul(0x57c)]; fI++)
                    this['$'][ul(0x3c1)]['channels'][fI]['muted'] = !0x1;
            } else {
                for (let fJ = 0x0; fJ < this['$'][ul(0x3c1)]['channels'][ul(0x57c)]; fJ++)
                    this['$']['song']['channels'][fJ][ul(0x3ef)] = fJ < this['boxSelectionChannel'] || fJ >= this['boxSelectionChannel'] + this[ul(0x496)] ? !fE : fE;
            }
            this['$'][ul(0x7e6)]['changed']();
        }
        [jI(0x835)]() {
            const um = jI
              , fE = new bz();
            this['boxSelectionActive'] && fE['append'](new d8(this['$'],this['boxSelectionBar'],this['boxSelectionWidth'],this['boxSelectionChannel'],this[um(0x496)]));
            for (const fF of this['Zl']())
                for (const fG of this['tc'](fF))
                    fE['append'](new cH(this['$'],fG));
            this['$']['record'](fE);
        }
        ['forceScale']() {
            const un = jI
              , fE = new bz();
            this['boxSelectionActive'] && fE[un(0x65e)](new d8(this['$'],this['boxSelectionBar'],this[un(0x300)],this['boxSelectionChannel'],this[un(0x496)]));
            const fF = [!0x0, !0x1, !0x1, !0x1, !0x1, !0x1, !0x1, !0x1, !0x1, !0x1, !0x1, !0x1];
            for (const fH of this['Zl']())
                if (!this['$']['song']['getChannelIsNoise'](fH)) {
                    for (const fI of this['tc'](fH))
                        bD(fI, fF);
                }
            const fG = function(fJ, fK) {
                const uo = un
                  , fL = a1[uo(0x379)][fK]['flags']
                  , fM = []
                  , fN = [];
                for (let fY = 0x0; fY < 0xc; fY++)
                    fJ[fY] && fM['push'](fY),
                    fL[fY] && fN['push'](fY);
                const fO = fM[uo(0x57c)] > fN['length']
                  , fP = fO ? fN : fM
                  , fQ = fO ? fM : fN
                  , fR = ['root', 'second', 'second', 'third', 'third', 'fourth', 'tritone', 'fifth', 'sixth', uo(0x221), uo(0x88d), uo(0x88d), uo(0x3d2)];
                let fS = Number[uo(0x736)]
                  , fT = [];
                const fU = [[0x0]];
                for (; fU[uo(0x57c)] > 0x0; ) {
                    const fZ = fU['pop']();
                    if (fZ['length'] == fP[uo(0x57c)]) {
                        let g0 = 0x0;
                        for (let g1 = 0x0; g1 < fZ['length']; g1++)
                            g0 += Math[uo(0x216)](fP[g1] - fQ[fZ[g1]]),
                            fR[fP[g1]] != fR[fQ[fZ[g1]]] && (g0 += 0.75);
                        fS > g0 && (fS = g0,
                        fT = fZ);
                    } else {
                        const g2 = fZ[fZ[uo(0x57c)] - 0x1] + 0x1
                          , g3 = fQ['length'] - fP[uo(0x57c)] + fZ[uo(0x57c)];
                        for (let g4 = g2; g4 <= g3; g4++)
                            fU['push'](fZ['concat'](g4));
                    }
                }
                const fV = [];
                for (let g5 = 0x0; g5 < fT[uo(0x57c)]; g5++) {
                    const g6 = fP[g5]
                      , g7 = fQ[fT[g5]];
                    fV[g5] = fO ? [g7, g6] : [g6, g7];
                }
                fV[uo(0x557)]([0xc, 0xc]),
                fN[uo(0x557)](0xc);
                let fW = 0x0;
                const fX = [];
                for (let g8 = 0x0; g8 < 0xc; g8++) {
                    const g9 = fV[fW][0x0]
                      , ga = fV[fW][0x1]
                      , gb = fV[fW + 0x1][0x0]
                      , gc = fV[fW + 0x1][0x1];
                    g8 == gb - 0x1 && fW++;
                    const gd = (g8 - g9) * (gc - ga) / (gb - g9) + ga;
                    let gf = 0x0
                      , gg = Number['MAX_SAFE_INTEGER'];
                    for (const gh of fN) {
                        let gj = Math['abs'](gh - gd);
                        fR[gh] != fR[g8] && (gj += 0.1),
                        gg > gj && (gg = gj,
                        gf = gh);
                    }
                    fX[g8] = gf;
                }
                return fX;
            }(fF, this['$'][un(0x3c1)][un(0x7ad)]);
            for (const fJ of this['Zl']())
                if (!this['$'][un(0x3c1)]['getChannelIsNoise'](fJ)) {
                    for (const fK of this['tc'](fJ))
                        fE['append'](new d9(this['$'],fK,fG));
                }
            this['$']['record'](fE);
        }
        [jI(0x3d4)](fE, fF, fG, fH) {
            const up = jI
              , fI = this['$']['lastChangeWas'](this['Ql']);
            this['Ql'] = new bz(),
            this['Ql']['append'](new d5(this['$'],fE,fF,fG,fH)),
            this['$'][up(0x2d1)]() || this['$'][up(0x235)](this['Ql'], fI);
        }
        [jI(0x650)](fE, fF) {
            const uq = jI
              , fG = this['$']['lastChangeWas'](this['Yl']);
            this['Yl'] = new bz(),
            this[uq(0x858)] && this['Yl'][uq(0x65e)](new d8(this['$'],this['boxSelectionBar'],this[uq(0x300)],this['boxSelectionChannel'],this['boxSelectionHeight']));
            for (const fH of this['Zl']())
                for (const fI of this['tc'](fH))
                    this['Yl']['append'](new d4(this['$'],fH,fI,fE,this['$'][uq(0x7ed)][uq(0x4a0)],fF));
            this['$'][uq(0x235)](this['Yl'], fG);
        }
        ['swapChannels'](fE) {
            const ur = jI
              , fF = [this['$'][ur(0x3c1)]['pitchChannelCount'], this['$']['song']['pitchChannelCount'] + this['$'][ur(0x3c1)][ur(0x3ea)], this['$']['song']['getChannelCount']()];
            let fG = 0x0
              , fH = 0x0;
            for (const fK of fF) {
                if (this['boxSelectionChannel'] < fK && fE < 0x0 || this[ur(0x597)] + this[ur(0x496)] <= fK) {
                    fH = fK - 0x1;
                    break;
                }
                fG = fK;
            }
            const fI = Math[ur(0x2f6)](this[ur(0x597)], fG)
              , fJ = Math['min'](this[ur(0x597)] + this['boxSelectionHeight'] - 0x1, fH);
            if (fE = Math['max'](fE, fG - fI),
            0x0 != (fE = Math['min'](fE, fH - fJ))) {
                const fL = this['$'][ur(0x25f)](this['Jl']);
                this['Jl'] = new bz(),
                this[ur(0x1e5)] = fI + fE,
                this[ur(0x189)] = fJ + fE,
                this['Jl'][ur(0x65e)](new bR(this['$'],fI,fJ,fE)),
                this['Jl'][ur(0x65e)](new bV(this['$'],Math['max'](this[ur(0x1e5)], Math[ur(0x4c5)](this['boxSelectionY1'], this['$'][ur(0x733)] + fE)),this['$'][ur(0x6e2)])),
                this['selectionUpdated'](),
                this['$']['record'](this['Jl'], fL);
            }
        }
        [jI(0x27a)](fE) {
            const us = jI;
            if (this['$'][us(0x3a3)][this['$'][us(0x733)]] == fE) {
                if (this['$'][us(0x3c1)][us(0x394)] && this['$'][us(0x3c1)][us(0x776)]) {
                    const fF = this['$'][us(0x25f)](this['Xl']);
                    this['Xl'] = new bz();
                    const fG = this['$']['recentPatternInstruments'][this['$'][us(0x733)]];
                    if (this['$']['notifier'][us(0x327)](),
                    -0x1 == fG['indexOf'](fE)) {
                        fG['push'](fE);
                        const fH = this['$']['song'][us(0x5a8)](this['$']['channel']);
                        fG[us(0x57c)] > fH && fG[us(0x712)](0x0, fG['length'] - fH);
                    } else
                        fG['splice'](fG[us(0x2fb)](fE), 0x1),
                        0x0 == fG['length'] && (fG[0x0] = 0x0);
                    this['boxSelectionActive'] && this['Xl'][us(0x65e)](new d8(this['$'],this[us(0x341)],this['boxSelectionWidth'],this['boxSelectionChannel'],this['boxSelectionHeight']));
                    for (const fI of this['Zl']())
                        for (const fJ of this['tc'](fI))
                            this['Xl'][us(0x65e)](new cC(this['$'],fI,fG,fJ));
                    this['$']['record'](this['Xl'], fF);
                }
            } else {
                const fK = this['$']['lastChangeWas'](this['Xl']);
                if (this['Xl'] = new bz(),
                this['Xl'][us(0x65e)](new cr(this['$'],fE)),
                !this['$'][us(0x3c1)][us(0x394)] && this['$']['song']['patternInstruments']) {
                    this['boxSelectionActive'] && this['Xl']['append'](new d8(this['$'],this[us(0x341)],this[us(0x300)],this[us(0x597)],this[us(0x496)]));
                    const fL = [fE];
                    for (const fM of this['Zl']())
                        for (const fN of this['tc'](fM))
                            this['Xl'][us(0x65e)](new cC(this['$'],fM,fL,fN));
                    this['$']['record'](this['Xl'], fK);
                } else
                    this['$']['hasRedoHistory']() || this['$'][us(0x235)](this['Xl'], fK);
            }
        }
        [jI(0x730)]() {
            const ut = jI;
            this[ut(0x2fc)] = this['boxSelectionX1'] = this['$']['bar'],
            this['boxSelectionY0'] = this[ut(0x189)] = this['$'][ut(0x733)];
        }
    }
    class fx {
        constructor() {
            const uu = jI;
            this['volume'] = 0x4b,
            this[uu(0x446)] = fx['defaultVisibleOctaves'],
            this['reload']();
        }
        ['reload']() {
            const uv = jI;
            this['autoPlay'] = 'true' == window['localStorage'][uv(0x1a3)](uv(0x452)),
            this['autoFollow'] = uv(0x7bc) != window['localStorage']['getItem'](uv(0x513)),
            this[uv(0x652)] = 'false' != window[uv(0x75c)][uv(0x1a3)](uv(0x652)),
            this[uv(0x6d0)] = 'true' == window['localStorage'][uv(0x1a3)](uv(0x6d0)),
            this['notesOutsideScale'] = uv(0x447) == window[uv(0x75c)]['getItem']('notesOutsideScale'),
            this[uv(0x3a0)] = uv(0x447) == window[uv(0x75c)][uv(0x1a3)]('showLetters'),
            this['showChannels'] = 'true' == window[uv(0x75c)]['getItem'](uv(0x2e5)),
            this['showScrollBar'] = uv(0x447) == window[uv(0x75c)][uv(0x1a3)]('showScrollBar'),
            this[uv(0x816)] = 'true' == window['localStorage'][uv(0x1a3)](uv(0x816)),
            this[uv(0x1c2)] = uv(0x447) == window['localStorage'][uv(0x1a3)]('instrumentCopyPaste'),
            this['enableChannelMuting'] = 'true' == window[uv(0x75c)][uv(0x1a3)]('enableChannelMuting'),
            this['displayBrowserUrl'] = 'false' != window[uv(0x75c)]['getItem'](uv(0x2c3)),
            this[uv(0x5cb)] = uv(0x447) == window[uv(0x75c)]['getItem'](uv(0x5cb)),
            this['enableMidi'] = 'false' != window['localStorage']['getItem'](uv(0x23a)),
            this['showRecordButton'] = uv(0x447) == window['localStorage']['getItem'](uv(0x4ef)),
            this['snapRecordedNotesToRhythm'] = 'true' == window[uv(0x75c)][uv(0x1a3)]('snapRecordedNotesToRhythm'),
            this['ignorePerformedNotesNotInScale'] = uv(0x447) == window[uv(0x75c)][uv(0x1a3)](uv(0x589)),
            this[uv(0x28d)] = 'false' != window[uv(0x75c)]['getItem']('metronomeCountIn'),
            this[uv(0x65b)] = 'false' != window[uv(0x75c)]['getItem'](uv(0x65b)),
            this[uv(0x1d0)] = window[uv(0x75c)][uv(0x1a3)](uv(0x1d0)) || 'wickiHayden',
            this[uv(0x24c)] = window[uv(0x75c)][uv(0x1a3)]('layout') || 'small',
            this['colorTheme'] = window['localStorage']['getItem'](uv(0x49d)) || 'dark\x20classic',
            this['visibleOctaves'] = window['localStorage']['getItem'](uv(0x446)) >>> 0x0 || fx[uv(0x1b3)];
            const fE = a1['scales'][uv(0x64a)][window[uv(0x75c)]['getItem'](uv(0x64f))];
            this['defaultScale'] = null != fE ? fE[uv(0x2c5)] : 0x0,
            null != window[uv(0x75c)]['getItem']('volume') && (this['volume'] = Math[uv(0x4c5)](window[uv(0x75c)]['getItem']('volume') >>> 0x0, 0x4b)),
            null != window['localStorage']['getItem'](uv(0x525)) && (uv(0x447) == window[uv(0x75c)]['getItem']('fullScreen') && (this[uv(0x24c)] = 'long'),
            window['localStorage']['removeItem'](uv(0x525)));
        }
        [jI(0x4e4)]() {
            const uw = jI;
            window[uw(0x75c)]['setItem']('autoPlay', this[uw(0x452)] ? 'true' : uw(0x7bc)),
            window[uw(0x75c)][uw(0x2d6)]('autoFollow', this[uw(0x513)] ? 'true' : uw(0x7bc)),
            window[uw(0x75c)][uw(0x2d6)](uw(0x652), this[uw(0x652)] ? 'true' : uw(0x7bc)),
            window['localStorage'][uw(0x2d6)]('showFifth', this['showFifth'] ? uw(0x447) : uw(0x7bc)),
            window[uw(0x75c)][uw(0x2d6)]('notesOutsideScale', this[uw(0x4a0)] ? uw(0x447) : 'false'),
            window['localStorage'][uw(0x2d6)]('defaultScale', a1['scales'][this['defaultScale']][uw(0x340)]),
            window['localStorage'][uw(0x2d6)]('showLetters', this[uw(0x3a0)] ? 'true' : uw(0x7bc)),
            window[uw(0x75c)]['setItem'](uw(0x2e5), this[uw(0x2e5)] ? uw(0x447) : 'false'),
            window[uw(0x75c)]['setItem']('showScrollBar', this['showScrollBar'] ? uw(0x447) : uw(0x7bc)),
            window[uw(0x75c)]['setItem'](uw(0x816), this[uw(0x816)] ? 'true' : uw(0x7bc)),
            window['localStorage']['setItem'](uw(0x2b5), this['enableChannelMuting'] ? uw(0x447) : 'false'),
            window['localStorage'][uw(0x2d6)](uw(0x1c2), this['instrumentCopyPaste'] ? uw(0x447) : uw(0x7bc)),
            window[uw(0x75c)]['setItem']('displayBrowserUrl', this['displayBrowserUrl'] ? uw(0x447) : 'false'),
            window[uw(0x75c)]['setItem']('pressControlForShortcuts', this[uw(0x5cb)] ? 'true' : uw(0x7bc)),
            window['localStorage']['setItem'](uw(0x23a), this[uw(0x23a)] ? uw(0x447) : 'false'),
            window['localStorage']['setItem']('showRecordButton', this[uw(0x4ef)] ? 'true' : uw(0x7bc)),
            window[uw(0x75c)]['setItem']('snapRecordedNotesToRhythm', this['snapRecordedNotesToRhythm'] ? uw(0x447) : 'false'),
            window['localStorage']['setItem'](uw(0x589), this[uw(0x589)] ? uw(0x447) : uw(0x7bc)),
            window[uw(0x75c)][uw(0x2d6)](uw(0x28d), this['metronomeCountIn'] ? uw(0x447) : 'false'),
            window[uw(0x75c)]['setItem']('metronomeWhileRecording', this['metronomeWhileRecording'] ? 'true' : uw(0x7bc)),
            window[uw(0x75c)][uw(0x2d6)]('keyboardLayout', this['keyboardLayout']),
            window[uw(0x75c)][uw(0x2d6)]('layout', this['layout']),
            window['localStorage'][uw(0x2d6)]('colorTheme', this[uw(0x49d)]),
            window[uw(0x75c)]['setItem'](uw(0x7c6), String(this[uw(0x7c6)])),
            window['localStorage'][uw(0x2d6)]('visibleOctaves', String(this['visibleOctaves']));
        }
    }
    fx[jI(0x1b3)] = 0x3;
    class fy {
        constructor() {
            this['nc'] = [],
            this['oc'] = !0x1;
        }
        ['watch'](fE) {
            const ux = jI;
            -0x1 == this['nc'][ux(0x2fb)](fE) && this['nc'][ux(0x557)](fE);
        }
        ['unwatch'](fE) {
            const uy = jI
              , fF = this['nc'][uy(0x2fb)](fE);
            -0x1 != fF && this['nc'][uy(0x712)](fF, 0x1);
        }
        [jI(0x327)]() {
            this['oc'] = !0x0;
        }
        [jI(0x1ba)]() {
            if (this['oc']) {
                this['oc'] = !0x1;
                for (const fE of this['nc']['concat']())
                    fE();
            }
        }
    }
    class fz {
        constructor() {
            const uz = jI;
            this[uz(0x7e6)] = new fy(),
            this['selection'] = new fw(this),
            this[uz(0x7ed)] = new fx(),
            this['channel'] = 0x0,
            this['bar'] = 0x0,
            this['recentPatternInstruments'] = [],
            this[uz(0x3a3)] = [],
            this[uz(0x33b)] = 0x10,
            this[uz(0x558)] = 0x4,
            this['barScrollPos'] = 0x0,
            this[uz(0x47c)] = 0x0,
            this[uz(0x3f4)] = null,
            this['addedEffect'] = !0x1,
            this['addedEnvelope'] = !0x1,
            this[uz(0x7c1)] = !0x1,
            this['rc'] = new eT(),
            this['hc'] = null,
            this['ac'] = 0x0,
            this['lc'] = 0x0,
            this['cc'] = !0x1,
            this['uc'] = !0x1,
            this['fc'] = !0x1,
            this['dc'] = () => {
                const uA = uz;
                if (this['synth']['recording'] && this[uA(0x6cb)][uA(0x22d)](),
                null == window[uA(0x713)]['state'] && '' != window[uA(0x543)][uA(0x169)]) {
                    this['ac']++,
                    this['mc']();
                    const fH = {
                        'canUndo': !0x0,
                        'sequenceNumber': this['ac'],
                        'bar': this['bar'],
                        'channel': this[uA(0x733)],
                        'instrument': this[uA(0x3a3)][this[uA(0x733)]],
                        'recoveryUid': this['yc'],
                        'prompt': null,
                        'selection': this[uA(0x1c9)][uA(0x5e6)]()
                    };
                    try {
                        new cP(this,window[uA(0x543)][uA(0x169)]);
                    } catch (fI) {
                        eQ(fI);
                    }
                    return this[uA(0x3f4)] = fH[uA(0x3f4)],
                    this['prefs'][uA(0x2c3)] ? this['gc'](fH, this['song']['toBase64String']()) : this['bc'](fH, this['song']['toBase64String']()),
                    this['forgetLastChange'](),
                    void this['notifier']['notifyWatchers']();
                }
                const fG = this['wc']();
                if (null == fG)
                    throw new Error(uA(0x83b));
                if (fG['sequenceNumber'] != this['ac']) {
                    this[uA(0x6e2)] = fG['bar'],
                    this[uA(0x733)] = fG[uA(0x733)],
                    this['viewedInstrument'][this['channel']] = fG[uA(0x299)],
                    this['ac'] = fG['sequenceNumber'],
                    this['prompt'] = fG['prompt'];
                    try {
                        new cP(this,this['vc']());
                    } catch (fJ) {
                        eQ(fJ);
                    }
                    this['yc'] = fG['recoveryUid'],
                    this[uA(0x1c9)][uA(0x2ae)](fG['selection']),
                    this[uA(0x43d)](),
                    this['notifier'][uA(0x1ba)]();
                }
            }
            ,
            this['kc'] = () => {
                this['notifier']['notifyWatchers']();
            }
            ,
            this['Mc'] = () => {
                const uB = uz
                  , fG = this['song']['getChannelCount']();
                for (let fI = this['recentPatternInstruments']['length']; fI < fG; fI++)
                    this[uB(0x686)][fI] = [0x0];
                this[uB(0x686)]['length'] = fG;
                for (let fJ = 0x0; fJ < fG; fJ++) {
                    if (fJ == this[uB(0x733)]) {
                        if (this[uB(0x3c1)]['patternInstruments']) {
                            const fK = this[uB(0x3c1)]['getPattern'](this[uB(0x733)], this[uB(0x6e2)]);
                            null != fK && (this[uB(0x686)][fJ] = fK[uB(0x84c)]['concat']());
                        } else {
                            const fL = this['song'][uB(0x7b3)][this[uB(0x733)]];
                            for (let fM = 0x0; fM < fL[uB(0x84c)][uB(0x57c)]; fM++)
                                this['recentPatternInstruments'][fJ][fM] = fM;
                            this[uB(0x686)][fJ][uB(0x57c)] = fL['instruments']['length'];
                        }
                    }
                    bC(this['recentPatternInstruments'][fJ], this['song'], fJ);
                }
                for (let fN = this['viewedInstrument']['length']; fN < fG; fN++)
                    this[uB(0x3a3)][fN] = 0x0;
                this['viewedInstrument']['length'] = fG;
                for (let fO = 0x0; fO < fG; fO++) {
                    if (this[uB(0x3c1)]['patternInstruments'] && !this['song'][uB(0x394)] && fO == this[uB(0x733)]) {
                        const fP = this['song'][uB(0x4d5)](this[uB(0x733)], this[uB(0x6e2)]);
                        null != fP && (this['viewedInstrument'][fO] = fP[uB(0x84c)][0x0]);
                    }
                    this['viewedInstrument'][fO] = Math['min'](0x0 | this['viewedInstrument'][fO], this[uB(0x3c1)][uB(0x7b3)][fO][uB(0x84c)]['length'] - 0x1);
                }
                const fH = this['getCurrentPattern']();
                null != fH && this[uB(0x3c1)][uB(0x776)] && (this[uB(0x686)][this['channel']] = fH[uB(0x84c)][uB(0x7dd)]()),
                (!this[uB(0x3eb)]['playing'] && (this[uB(0x6e2)] < this['selection']['boxSelectionBar'] || this['selection'][uB(0x341)] + this['selection'][uB(0x300)] <= this['bar']) || this[uB(0x733)] < this['selection']['boxSelectionChannel'] || this[uB(0x1c9)][uB(0x597)] + this['selection'][uB(0x496)] <= this[uB(0x733)] || this[uB(0x3c1)][uB(0x647)] < this[uB(0x1c9)][uB(0x341)] + this[uB(0x1c9)]['boxSelectionWidth'] || fG < this[uB(0x1c9)][uB(0x597)] + this['selection']['boxSelectionHeight'] || 0x1 == this[uB(0x1c9)][uB(0x300)] && 0x1 == this['selection']['boxSelectionHeight']) && this[uB(0x1c9)][uB(0x730)](),
                this[uB(0x339)] = Math[uB(0x2f6)](0x0, Math['min'](this['song'][uB(0x647)] - this[uB(0x33b)], this[uB(0x339)])),
                this['channelScrollPos'] = Math[uB(0x2f6)](0x0, Math['min'](this['song']['getChannelCount']() - this['trackVisibleChannels'], this['channelScrollPos']));
            }
            ,
            this['xc'] = () => {
                const uC = uz;
                let fG;
                this['fc'] = !0x1;
                try {
                    fG = this[uC(0x3c1)]['toBase64String']();
                } catch (fI) {
                    return void eQ(fI);
                }
                this['cc'] && this['ac']++,
                this['uc'] ? this['mc']() : this['rc']['saveVersion'](this['yc'], fG);
                let fH = {
                    'canUndo': !0x0,
                    'sequenceNumber': this['ac'],
                    'bar': this[uC(0x6e2)],
                    'channel': this[uC(0x733)],
                    'instrument': this[uC(0x3a3)][this[uC(0x733)]],
                    'recoveryUid': this['yc'],
                    'prompt': this['prompt'],
                    'selection': this[uC(0x1c9)][uC(0x5e6)]()
                };
                this['cc'] ? this['bc'](fH, fG) : this['gc'](fH, fG),
                this['cc'] = !0x1,
                this['uc'] = !0x1;
            }
            ,
            this[uz(0x7e6)][uz(0x4ed)](this['Mc']),
            aL['setTheme'](this[uz(0x7ed)]['colorTheme']),
            aN[uz(0x54a)](this[uz(0x7ed)]['layout']),
            null == window[uz(0x7c4)][uz(0x1a3)]('currentUndoIndex') && (window['sessionStorage']['setItem'](uz(0x697), '0'),
            window[uz(0x7c4)][uz(0x2d6)](uz(0x768), '0'),
            window[uz(0x7c4)][uz(0x2d6)](uz(0x5b4), '0'));
            let fE = window['location']['hash'];
            '' == fE && (fE = this['vc']());
            try {
                this[uz(0x3c1)] = new bh(fE),
                '' != fE && null != fE || (cO(this['song']),
                this[uz(0x3c1)]['scale'] = this[uz(0x7ed)]['defaultScale']);
            } catch (fG) {
                eQ(fG);
            }
            fE = this['song']['toBase64String'](),
            this['synth'] = new bp(this['song']),
            this['synth']['volume'] = this['Sc'](),
            this[uz(0x3eb)]['anticipatePoorPerformance'] = ao;
            let fF = this['wc']();
            null == fF && (fF = {
                'canUndo': !0x1,
                'sequenceNumber': 0x0,
                'bar': 0x0,
                'channel': 0x0,
                'instrument': 0x0,
                'recoveryUid': eP(),
                'prompt': null,
                'selection': this[uz(0x1c9)]['toJSON']()
            }),
            null == fF['recoveryUid'] && (fF['recoveryUid'] = eP()),
            this['gc'](fF, fE),
            window['addEventListener'](uz(0x4f7), this['dc']),
            window['addEventListener']('popstate', this['dc']),
            this[uz(0x6e2)] = 0x0 | fF[uz(0x6e2)],
            this[uz(0x733)] = 0x0 | fF[uz(0x733)];
            for (let fH = 0x0; fH <= this[uz(0x733)]; fH++)
                this['viewedInstrument'][fH] = 0x0;
            this[uz(0x3a3)][this['channel']] = 0x0 | fF['instrument'],
            this['yc'] = fF['recoveryUid'],
            this['prompt'] = fF[uz(0x3f4)],
            this[uz(0x1c9)]['fromJSON'](fF[uz(0x1c9)]),
            this['selection'][uz(0x338)]();
            for (const fI of [uz(0x39f), 'change', 'click', 'keyup', uz(0x1df), 'mousedown', 'mousemove', 'mouseup', uz(0x4c7), 'touchmove', 'touchend', 'touchcancel'])
                window['addEventListener'](fI, this['kc']);
            this['Mc'](),
            this[uz(0x6cb)] = new fu(this);
        }
        ['toggleDisplayBrowserUrl']() {
            const uD = jI
              , fE = this['wc']();
            if (null == fE)
                throw new Error(uD(0x83b));
            this[uD(0x7ed)][uD(0x2c3)] = !this[uD(0x7ed)]['displayBrowserUrl'],
            this['gc'](fE, this['song']['toBase64String']());
        }
        ['wc']() {
            const uE = jI;
            if (this[uE(0x7ed)]['displayBrowserUrl'])
                return window[uE(0x713)]['state'];
            {
                const fE = JSON[uE(0x632)](window['sessionStorage'][uE(0x1a3)](window['sessionStorage'][uE(0x1a3)](uE(0x697))));
                return null == fE ? null : fE[uE(0x584)];
            }
        }
        ['vc']() {
            const uF = jI;
            if (this['prefs']['displayBrowserUrl'])
                return window[uF(0x543)][uF(0x169)];
            {
                const fE = JSON['parse'](window[uF(0x7c4)][uF(0x1a3)](window[uF(0x7c4)][uF(0x1a3)]('currentUndoIndex')));
                return null == fE ? '' : fE['hash'];
            }
        }
        ['gc'](fE, fF) {
            const uG = jI;
            this['prefs'][uG(0x2c3)] ? window['history']['replaceState'](fE, '', '#' + fF) : (window[uG(0x7c4)][uG(0x2d6)](window[uG(0x7c4)][uG(0x1a3)](uG(0x697)) || '0', JSON[uG(0x423)]({
                'state': fE,
                'hash': fF
            })),
            window['history']['replaceState'](null, '', location['pathname']));
        }
        ['bc'](fE, fF) {
            const uH = jI;
            if (this[uH(0x7ed)]['displayBrowserUrl'])
                window[uH(0x713)]['pushState'](fE, '', '#' + fF);
            else {
                let fG = Number(window['sessionStorage'][uH(0x1a3)](uH(0x697)))
                  , fH = Number(window[uH(0x7c4)][uH(0x1a3)](uH(0x768)));
                fG = (fG + 0x1) % fz['Fc'],
                window['sessionStorage']['setItem'](uH(0x697), String(fG)),
                window[uH(0x7c4)][uH(0x2d6)]('newestUndoIndex', String(fG)),
                fG == fH && (fH = (fH + 0x1) % fz['Fc'],
                window[uH(0x7c4)][uH(0x2d6)]('oldestUndoIndex', String(fH))),
                window[uH(0x7c4)][uH(0x2d6)](String(fG), JSON['stringify']({
                    'state': fE,
                    'hash': fF
                })),
                window[uH(0x713)]['replaceState'](null, '', location[uH(0x598)]);
            }
            this['lc'] = fE[uH(0x33f)];
        }
        [jI(0x2d1)]() {
            return this['lc'] > this['ac'];
        }
        ['Pc']() {
            const uI = jI;
            if (this['prefs'][uI(0x2c3)])
                window[uI(0x713)]['forward']();
            else {
                let fE = Number(window[uI(0x7c4)]['getItem']('currentUndoIndex'));
                fE != Number(window[uI(0x7c4)]['getItem']('newestUndoIndex')) && (fE = (fE + 0x1) % fz['Fc'],
                window['sessionStorage']['setItem']('currentUndoIndex', String(fE)),
                setTimeout(this['dc']));
            }
        }
        ['Ic']() {
            const uJ = jI;
            if (this[uJ(0x7ed)][uJ(0x2c3)])
                window['history'][uJ(0x355)]();
            else {
                let fE = Number(window[uJ(0x7c4)][uJ(0x1a3)]('currentUndoIndex'));
                fE != Number(window['sessionStorage']['getItem']('oldestUndoIndex')) && (fE = (fE + fz['Fc'] - 0x1) % fz['Fc'],
                window['sessionStorage'][uJ(0x2d6)](uJ(0x697), String(fE)),
                setTimeout(this['dc']));
            }
        }
        [jI(0x235)](fE, fF=!0x1, fG=!0x1) {
            const uK = jI;
            fE[uK(0x70f)]() ? (this['hc'] = null,
            fF && this['Ic']()) : (fE[uK(0x4fa)](),
            this['hc'] = fE,
            this['cc'] = this['cc'] || !fF,
            this['uc'] = this['uc'] || fG,
            this['fc'] || (window['requestAnimationFrame'](this['xc']),
            this['fc'] = !0x0));
        }
        ['mc']() {
            this['yc'] = eP();
        }
        ['openPrompt'](fE) {
            const uL = jI;
            this[uL(0x3f4)] = fE;
            const fF = this['song']['toBase64String']();
            this['ac']++;
            const fG = {
                'canUndo': !0x0,
                'sequenceNumber': this['ac'],
                'bar': this['bar'],
                'channel': this['channel'],
                'instrument': this['viewedInstrument'][this[uL(0x733)]],
                'recoveryUid': this['yc'],
                'prompt': this[uL(0x3f4)],
                'selection': this['selection']['toJSON']()
            };
            this['bc'](fG, fF);
        }
        ['undo']() {
            const fE = this['wc']();
            (null == fE || fE['canUndo']) && this['Ic']();
        }
        ['redo']() {
            this['Pc']();
        }
        [jI(0x86f)](fE) {
            this['hc'] = fE;
        }
        [jI(0x43d)]() {
            this['hc'] = null;
        }
        ['lastChangeWas'](fE) {
            return null != fE && fE == this['hc'];
        }
        [jI(0x46d)]() {
            const uM = jI;
            this['bar'] = 0x0,
            this[uM(0x733)] = 0x0,
            this['barScrollPos'] = 0x0,
            this[uM(0x47c)] = 0x0,
            this[uM(0x3eb)][uM(0x383)](),
            this['notifier'][uM(0x327)]();
        }
        [jI(0x43a)](fE) {
            const uN = jI;
            this['prefs']['volume'] = fE,
            this[uN(0x7ed)][uN(0x4e4)](),
            this['synth']['volume'] = this['Sc']();
        }
        ['Sc']() {
            const uO = jI;
            return Math[uO(0x4c5)](0x1, Math['pow'](this[uO(0x7ed)]['volume'] / 0x32, 0.5)) * Math['pow'](0x2, (this[uO(0x7ed)][uO(0x7c6)] - 0x4b) / 0x19);
        }
        [jI(0x360)](fE=0x0) {
            const uP = jI;
            return this[uP(0x3c1)][uP(0x4d5)](this[uP(0x733)], this[uP(0x6e2)] + fE);
        }
        [jI(0x3fe)](fE=0x0) {
            const uQ = jI;
            return this[uQ(0x3a3)][this['channel']];
        }
        [jI(0x4f0)]() {
            return window['innerWidth'] <= 0x2c6;
        }
        [jI(0x1c5)]() {
            const uR = jI;
            return this[uR(0x4f0)]() || !this[uR(0x7ed)][uR(0x2b5)] || this['getFullScreen']() ? 0x20 : 0x1e;
        }
        [jI(0x701)]() {
            const uS = jI;
            return !this['getMobileLayout']() && 'small' != this['prefs'][uS(0x24c)];
        }
        [jI(0x7f6)]() {
            const uT = jI;
            return this[uT(0x701)]() ? this[uT(0x7ed)][uT(0x446)] : fx['defaultVisibleOctaves'];
        }
        ['getVisiblePitchCount']() {
            const uU = jI;
            return this['getVisibleOctaveCount']() * a1[uU(0x36d)] + 0x1;
        }
        [jI(0x757)](fE) {
            const uV = jI
              , fF = this['getVisibleOctaveCount']();
            return Math[uV(0x2f6)](0x0, Math[uV(0x4c5)](a1[uV(0x530)] - fF, Math['ceil'](this['song'][uV(0x7b3)][fE][uV(0x60c)] - 0.5 * fF)));
        }
    }
    fz['Fc'] = 0x64;
    const fA = new fz()
      , fB = new fr(fA);
    if (document[jI(0x572)](jI(0x2f8))[jI(0x2b8)](fB['mainLayer']),
    fB[jI(0x2b4)](),
    fB[jI(0x2d2)]['focus'](),
    !ao && fA['prefs'][jI(0x452)]) {
        function fE() {
            const uW = jI;
            document['hidden'] || (fA['synth'][uW(0x311)](),
            fB[uW(0x653)](),
            window['removeEventListener']('visibilitychange', fE));
        }
        document['hidden'] ? window[jI(0x258)]('visibilitychange', fE) : fE();
    }
    return 'scrollRestoration'in history && (history['scrollRestoration'] = jI(0x7ba)),
    fB[jI(0x653)](),
    'serviceWorker'in navigator && navigator['serviceWorker']['register'](jI(0x16e), {
        'updateViaCache': 'all',
        'scope': '/'
    })[jI(0x7ab)]( () => {}
    ),
    a0[jI(0x7a1)] = bJ,
    a0['Channel'] = bg,
    a0[jI(0x845)] = aL,
    a0[jI(0x243)] = a1,
    a0['EditorConfig'] = aq,
    a0['ExportPrompt'] = eL,
    a0['Instrument'] = bf,
    a0[jI(0x6bd)] = b4,
    a0[jI(0x206)] = b5,
    a0['Song'] = bh,
    a0['SongDocument'] = fz,
    a0[jI(0x3b8)] = fr,
    a0['Synth'] = bp,
    Object[jI(0x4d0)](a0, 'qc', {
        'value': !0x0
    }),
    a0;
}({});
